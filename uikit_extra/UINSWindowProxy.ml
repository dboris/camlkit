(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UINSWindowProxy"

module C = struct
  let windowProxyWithSceneIdentifier x self = msg_send ~self ~cmd:(selector "windowProxyWithSceneIdentifier:") ~typ:(id @-> returning (id)) x
end

let _UIScene self = msg_send ~self ~cmd:(selector "UIScene") ~typ:(returning (id))
let acceptKeyViewHandoff x ~completionQueue ~completionHandler self = msg_send ~self ~cmd:(selector "acceptKeyViewHandoff:completionQueue:completionHandler:") ~typ:(bool @-> id @-> ptr void @-> returning (void)) x completionQueue completionHandler
let activeSpaceDidChange x self = msg_send ~self ~cmd:(selector "activeSpaceDidChange:") ~typ:(id @-> returning (void)) x
let appearsKey self = msg_send ~self ~cmd:(selector "appearsKey") ~typ:(returning (bool))
let appearsKeyIncludingSheets self = msg_send ~self ~cmd:(selector "appearsKeyIncludingSheets") ~typ:(returning (bool))
let applicationDidChangeActive x self = msg_send ~self ~cmd:(selector "applicationDidChangeActive:") ~typ:(id @-> returning (void)) x
let applicationDidChangeHidden x self = msg_send ~self ~cmd:(selector "applicationDidChangeHidden:") ~typ:(id @-> returning (void)) x
let applyCursorLock self = msg_send ~self ~cmd:(selector "applyCursorLock") ~typ:(returning (void))
let attachToWindow x self = msg_send ~self ~cmd:(selector "attachToWindow:") ~typ:(id @-> returning (void)) x
let attachedWindow self = msg_send ~self ~cmd:(selector "attachedWindow") ~typ:(returning (id))
let autoHidesToolbarInFullScreen self = msg_send ~self ~cmd:(selector "autoHidesToolbarInFullScreen") ~typ:(returning (bool))
let beginDragWithItems x ~handler self = msg_send ~self ~cmd:(selector "beginDragWithItems:handler:") ~typ:(id @-> id @-> returning (void)) x handler
let beginHostModalSession self = msg_send ~self ~cmd:(selector "beginHostModalSession") ~typ:(returning (void))
let cancelOutstandingUserInput self = msg_send ~self ~cmd:(selector "cancelOutstandingUserInput") ~typ:(returning (bool))
let contentMinSize self = msg_send_stret ~self ~cmd:(selector "contentMinSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let convertEdgeInsetsFromUIWindow x ~nsEdgeInsets self = msg_send ~self ~cmd:(selector "convertEdgeInsetsFromUIWindow:nsEdgeInsets:") ~typ:(ptr (void) @-> ptr (void) @-> returning (void)) x nsEdgeInsets
let convertEdgeInsetsToUIWindow x ~uiEdgeInsets self = msg_send ~self ~cmd:(selector "convertEdgeInsetsToUIWindow:uiEdgeInsets:") ~typ:(ptr (void) @-> ptr (void) @-> returning (void)) x uiEdgeInsets
let convertPointFromUIWindow x self = msg_send_stret ~self ~cmd:(selector "convertPointFromUIWindow:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let convertPointToUIWindow x self = msg_send_stret ~self ~cmd:(selector "convertPointToUIWindow:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let convertRectFromScreen x self = msg_send_stret ~self ~cmd:(selector "convertRectFromScreen:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertRectFromUIWindow x self = msg_send_stret ~self ~cmd:(selector "convertRectFromUIWindow:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertRectFromWindowSceneView x self = msg_send_stret ~self ~cmd:(selector "convertRectFromWindowSceneView:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertRectToScreen x self = msg_send_stret ~self ~cmd:(selector "convertRectToScreen:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertRectToUIWindow x self = msg_send_stret ~self ~cmd:(selector "convertRectToUIWindow:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertSizeFromUIWindow x self = msg_send_stret ~self ~cmd:(selector "convertSizeFromUIWindow:") ~typ:(CGSize.t @-> returning (CGSize.t)) ~return_type:CGSize.t x
let convertSizeToUIWindow x self = msg_send_stret ~self ~cmd:(selector "convertSizeToUIWindow:") ~typ:(CGSize.t @-> returning (CGSize.t)) ~return_type:CGSize.t x
let detachFromWindow x self = msg_send ~self ~cmd:(selector "detachFromWindow:") ~typ:(id @-> returning (void)) x
let drawsBottomDividerWhenTransparent self = msg_send ~self ~cmd:(selector "drawsBottomDividerWhenTransparent") ~typ:(returning (bool))
let endHostModalSession self = msg_send ~self ~cmd:(selector "endHostModalSession") ~typ:(returning (void))
let forwardUINSEventToAppKit x self = msg_send ~self ~cmd:(selector "forwardUINSEventToAppKit:") ~typ:(id @-> returning (void)) x
let forwardingTargetForSelector x self = msg_send ~self ~cmd:(selector "forwardingTargetForSelector:") ~typ:(_SEL @-> returning (id)) x
let hasFullSizeContentView self = msg_send ~self ~cmd:(selector "hasFullSizeContentView") ~typ:(returning (bool))
let hostEnterExitEventWithType x ~sceneLocation self = msg_send ~self ~cmd:(selector "hostEnterExitEventWithType:sceneLocation:") ~typ:(llong @-> CGPoint.t @-> returning (id)) (LLong.of_int x) sceneLocation
let hostEventsFromHIDEvent x self = msg_send ~self ~cmd:(selector "hostEventsFromHIDEvent:") ~typ:(ptr void @-> returning (id)) x
let hostWindowContentFrame self = msg_send_stret ~self ~cmd:(selector "hostWindowContentFrame") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let hostWindowFrame self = msg_send_stret ~self ~cmd:(selector "hostWindowFrame") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let initForSceneViewController x self = msg_send ~self ~cmd:(selector "initForSceneViewController:") ~typ:(id @-> returning (id)) x
let isExcludedFromWindowsMenu self = msg_send ~self ~cmd:(selector "isExcludedFromWindowsMenu") ~typ:(returning (bool))
let isFullscreen self = msg_send ~self ~cmd:(selector "isFullscreen") ~typ:(returning (bool))
let isInLiveResize self = msg_send ~self ~cmd:(selector "isInLiveResize") ~typ:(returning (bool))
let isMovableByWindowBackground self = msg_send ~self ~cmd:(selector "isMovableByWindowBackground") ~typ:(returning (bool))
let isTitlebarHidden self = msg_send ~self ~cmd:(selector "isTitlebarHidden") ~typ:(returning (bool))
let isTitlebarTransparent self = msg_send ~self ~cmd:(selector "isTitlebarTransparent") ~typ:(returning (bool))
let isVisible self = msg_send ~self ~cmd:(selector "isVisible") ~typ:(returning (bool))
let keyUIWindow self = msg_send ~self ~cmd:(selector "keyUIWindow") ~typ:(returning (id))
let makeInputViewFirstResponder self = msg_send ~self ~cmd:(selector "makeInputViewFirstResponder") ~typ:(returning (void))
let makeKeyAndOrderFront x self = msg_send ~self ~cmd:(selector "makeKeyAndOrderFront:") ~typ:(id @-> returning (void)) x
let makeKeyWindow self = msg_send ~self ~cmd:(selector "makeKeyWindow") ~typ:(returning (void))
let markTouchBarAsDirty self = msg_send ~self ~cmd:(selector "markTouchBarAsDirty") ~typ:(returning (void))
let newDocumentBrowserViewController self = msg_send ~self ~cmd:(selector "newDocumentBrowserViewController") ~typ:(returning (id))
let newSheetAlert self = msg_send ~self ~cmd:(selector "newSheetAlert") ~typ:(returning (id))
let newSheetDocumentPickerViewController self = msg_send ~self ~cmd:(selector "newSheetDocumentPickerViewController") ~typ:(returning (id))
let noteUIWindowContextsChanged self = msg_send ~self ~cmd:(selector "noteUIWindowContextsChanged") ~typ:(returning (void))
let notifyIfActualKeyChanged self = msg_send ~self ~cmd:(selector "notifyIfActualKeyChanged") ~typ:(returning (void))
let notifyIfAppearsKeyChanged self = msg_send ~self ~cmd:(selector "notifyIfAppearsKeyChanged") ~typ:(returning (void))
let notifyWindowVisibilityChanged self = msg_send ~self ~cmd:(selector "notifyWindowVisibilityChanged") ~typ:(returning (void))
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let orderFront x self = msg_send ~self ~cmd:(selector "orderFront:") ~typ:(id @-> returning (void)) x
let orderOut x self = msg_send ~self ~cmd:(selector "orderOut:") ~typ:(id @-> returning (void)) x
let performClose x self = msg_send ~self ~cmd:(selector "performClose:") ~typ:(id @-> returning (void)) x
let performResizeTestWithPreTestHandler x ~postTestHandler self = msg_send ~self ~cmd:(selector "performResizeTestWithPreTestHandler:postTestHandler:") ~typ:(ptr void @-> ptr void @-> returning (void)) x postTestHandler
let persistentIdentifier self = msg_send ~self ~cmd:(selector "persistentIdentifier") ~typ:(returning (id))
let presentContextualMenuForShareableItems x ~atLocation self = msg_send ~self ~cmd:(selector "presentContextualMenuForShareableItems:atLocation:") ~typ:(id @-> CGPoint.t @-> returning (void)) x atLocation
let primarySidebarAdapter self = msg_send ~self ~cmd:(selector "primarySidebarAdapter") ~typ:(returning (id))
let registerScrollViewSeparatorTrackingAdapter x self = msg_send ~self ~cmd:(selector "registerScrollViewSeparatorTrackingAdapter:") ~typ:(id @-> returning (bool)) x
let removeCursorLock self = msg_send ~self ~cmd:(selector "removeCursorLock") ~typ:(returning (void))
let representedURL self = msg_send ~self ~cmd:(selector "representedURL") ~typ:(returning (id))
let respondsToSelector x self = msg_send ~self ~cmd:(selector "respondsToSelector:") ~typ:(_SEL @-> returning (bool)) x
let sceneIdentifier self = msg_send ~self ~cmd:(selector "sceneIdentifier") ~typ:(returning (id))
let sceneView self = msg_send ~self ~cmd:(selector "sceneView") ~typ:(returning (id))
let sceneViewController self = msg_send ~self ~cmd:(selector "sceneViewController") ~typ:(returning (id))
let sendInitialWindowVisibilityChangedNotifications self = msg_send ~self ~cmd:(selector "sendInitialWindowVisibilityChangedNotifications") ~typ:(returning (void))
let setAutoHidesToolbarInFullScreen x self = msg_send ~self ~cmd:(selector "setAutoHidesToolbarInFullScreen:") ~typ:(bool @-> returning (void)) x
let setContentMinSize x self = msg_send ~self ~cmd:(selector "setContentMinSize:") ~typ:(CGSize.t @-> returning (void)) x
let setCursor x self = msg_send ~self ~cmd:(selector "setCursor:") ~typ:(id @-> returning (void)) x
let setDrawsBottomDividerWhenTransparent x self = msg_send ~self ~cmd:(selector "setDrawsBottomDividerWhenTransparent:") ~typ:(bool @-> returning (void)) x
let setExcludedFromWindowsMenu x self = msg_send ~self ~cmd:(selector "setExcludedFromWindowsMenu:") ~typ:(bool @-> returning (void)) x
let setHostWindowContentFrame x self = msg_send ~self ~cmd:(selector "setHostWindowContentFrame:") ~typ:(CGRect.t @-> returning (void)) x
let setHostWindowFrame x self = msg_send ~self ~cmd:(selector "setHostWindowFrame:") ~typ:(CGRect.t @-> returning (void)) x
let setKeyUIWindow x self = msg_send ~self ~cmd:(selector "setKeyUIWindow:") ~typ:(id @-> returning (void)) x
let setNeedsDragRegionsUpdate self = msg_send ~self ~cmd:(selector "setNeedsDragRegionsUpdate") ~typ:(returning (void))
let setNeedsSizeRestrictionsUpdate self = msg_send ~self ~cmd:(selector "setNeedsSizeRestrictionsUpdate") ~typ:(returning (void))
let setPrimarySidebarAdapter x self = msg_send ~self ~cmd:(selector "setPrimarySidebarAdapter:") ~typ:(id @-> returning (void)) x
let setRepresentedURL x self = msg_send ~self ~cmd:(selector "setRepresentedURL:") ~typ:(id @-> returning (void)) x
let setSplitViewItemSeparatorTrackingAdapter x self = msg_send ~self ~cmd:(selector "setSplitViewItemSeparatorTrackingAdapter:") ~typ:(id @-> returning (void)) x
let setSupplementarySidebarAdapter x self = msg_send ~self ~cmd:(selector "setSupplementarySidebarAdapter:") ~typ:(id @-> returning (void)) x
let setTabbingMode x self = msg_send ~self ~cmd:(selector "setTabbingMode:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setTitle x self = msg_send ~self ~cmd:(selector "setTitle:") ~typ:(id @-> returning (void)) x
let setTitlebarAppearsTransparentWhenFullscreen x self = msg_send ~self ~cmd:(selector "setTitlebarAppearsTransparentWhenFullscreen:") ~typ:(bool @-> returning (void)) x
let setTitlebarHidden x self = msg_send ~self ~cmd:(selector "setTitlebarHidden:") ~typ:(bool @-> returning (void)) x
let setTitlebarSeparatorStyle x self = msg_send ~self ~cmd:(selector "setTitlebarSeparatorStyle:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setTitlebarTransparent x self = msg_send ~self ~cmd:(selector "setTitlebarTransparent:") ~typ:(bool @-> returning (void)) x
let setToggleFullScreenOverride x self = msg_send ~self ~cmd:(selector "setToggleFullScreenOverride:") ~typ:(ptr void @-> returning (void)) x
let setToolbar x self = msg_send ~self ~cmd:(selector "setToolbar:") ~typ:(id @-> returning (void)) x
let setToolbarStyle x self = msg_send ~self ~cmd:(selector "setToolbarStyle:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setTouchBarCoordinator x self = msg_send ~self ~cmd:(selector "setTouchBarCoordinator:") ~typ:(id @-> returning (void)) x
let setUiWindow x self = msg_send ~self ~cmd:(selector "setUiWindow:") ~typ:(id @-> returning (void)) x
let setUiWindows x self = msg_send ~self ~cmd:(selector "setUiWindows:") ~typ:(id @-> returning (void)) x
let setWindowAppearance x self = msg_send ~self ~cmd:(selector "setWindowAppearance:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let splitViewItemSeparatorTrackingAdapter self = msg_send ~self ~cmd:(selector "splitViewItemSeparatorTrackingAdapter") ~typ:(returning (id))
let supplementarySidebarAdapter self = msg_send ~self ~cmd:(selector "supplementarySidebarAdapter") ~typ:(returning (id))
let tabbingMode self = msg_send ~self ~cmd:(selector "tabbingMode") ~typ:(returning (llong))
let takeCursor x self = msg_send ~self ~cmd:(selector "takeCursor:") ~typ:(id @-> returning (void)) x
let title self = msg_send ~self ~cmd:(selector "title") ~typ:(returning (id))
let titlebarAppearsTransparentWhenFullscreen self = msg_send ~self ~cmd:(selector "titlebarAppearsTransparentWhenFullscreen") ~typ:(returning (bool))
let titlebarSeparatorStyle self = msg_send ~self ~cmd:(selector "titlebarSeparatorStyle") ~typ:(returning (llong))
let toggleFullScreenOverride self = msg_send ~self ~cmd:(selector "toggleFullScreenOverride") ~typ:(returning (ptr void))
let toolbar self = msg_send ~self ~cmd:(selector "toolbar") ~typ:(returning (id))
let toolbarStyle self = msg_send ~self ~cmd:(selector "toolbarStyle") ~typ:(returning (llong))
let touchBarCoordinator self = msg_send ~self ~cmd:(selector "touchBarCoordinator") ~typ:(returning (id))
let uiWindow self = msg_send ~self ~cmd:(selector "uiWindow") ~typ:(returning (id))
let uiWindows self = msg_send ~self ~cmd:(selector "uiWindows") ~typ:(returning (id))
let unregisterScrollViewSeparatorTrackingAdapter x self = msg_send ~self ~cmd:(selector "unregisterScrollViewSeparatorTrackingAdapter:") ~typ:(id @-> returning (void)) x
let updateFullScreenBehavior self = msg_send ~self ~cmd:(selector "updateFullScreenBehavior") ~typ:(returning (void))
let updatePointerLockState x self = msg_send ~self ~cmd:(selector "updatePointerLockState:") ~typ:(bool @-> returning (void)) x
let warpCursorToScene self = msg_send ~self ~cmd:(selector "warpCursorToScene") ~typ:(returning (void))
let windowAppearance self = msg_send ~self ~cmd:(selector "windowAppearance") ~typ:(returning (llong))
let windowDidBecomeKey x self = msg_send ~self ~cmd:(selector "windowDidBecomeKey:") ~typ:(id @-> returning (void)) x
let windowDidChangeOcclusionState x self = msg_send ~self ~cmd:(selector "windowDidChangeOcclusionState:") ~typ:(id @-> returning (void)) x
let windowDidResignKey x self = msg_send ~self ~cmd:(selector "windowDidResignKey:") ~typ:(id @-> returning (void)) x
let windowFullScreenStatusDidChange x self = msg_send ~self ~cmd:(selector "windowFullScreenStatusDidChange:") ~typ:(id @-> returning (void)) x
let windowSupportingPointerLockState self = msg_send ~self ~cmd:(selector "windowSupportingPointerLockState") ~typ:(returning (id))