(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UINSApplicationDelegate"

module Class = struct
  let restoreWindowWithIdentifier x ~state ~completionHandler self = msg_send ~self ~cmd:(selector "restoreWindowWithIdentifier:state:completionHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x state completionHandler
  let runBlockWhenSharedDelegateBecomesAvailable x self = msg_send ~self ~cmd:(selector "runBlockWhenSharedDelegateBecomesAvailable:") ~typ:(ptr void @-> returning (bool)) x
  let sharedDelegate self = msg_send ~self ~cmd:(selector "sharedDelegate") ~typ:(returning (id))
end

let abortAllToolTips self = msg_send ~self ~cmd:(selector "abortAllToolTips") ~typ:(returning (void))
let acceptsActivatingTouchCallback self = msg_send ~self ~cmd:(selector "acceptsActivatingTouchCallback") ~typ:(returning (ptr void))
let activateIgnoringOtherApps x self = msg_send ~self ~cmd:(selector "activateIgnoringOtherApps:") ~typ:(bool @-> returning (void)) x
let activityItemsConfigurationForServicesAndSharing self = msg_send ~self ~cmd:(selector "activityItemsConfigurationForServicesAndSharing") ~typ:(returning (ptr void))
let almondTouchAlternativesConfigureUIFeatureEnabled self = msg_send ~self ~cmd:(selector "almondTouchAlternativesConfigureUIFeatureEnabled") ~typ:(returning (bool))
let appIsInBackgroundStateCallback self = msg_send ~self ~cmd:(selector "appIsInBackgroundStateCallback") ~typ:(returning (ptr void))
let appLifecycleController self = msg_send ~self ~cmd:(selector "appLifecycleController") ~typ:(returning (id))
let appMenu self = msg_send ~self ~cmd:(selector "appMenu") ~typ:(returning (id))
let appName self = msg_send ~self ~cmd:(selector "appName") ~typ:(returning (id))
let appSupportsMultiwindowCallback self = msg_send ~self ~cmd:(selector "appSupportsMultiwindowCallback") ~typ:(returning (ptr void))
let appSupportsTabbedWindowsCallback self = msg_send ~self ~cmd:(selector "appSupportsTabbedWindowsCallback") ~typ:(returning (ptr void))
let appWillTerminateCallback self = msg_send ~self ~cmd:(selector "appWillTerminateCallback") ~typ:(returning (ptr void))
let application x ~delegateHandlesKey self = msg_send ~self ~cmd:(selector "application:delegateHandlesKey:") ~typ:(id @-> id @-> returning (bool)) x delegateHandlesKey
let application1 x ~handlerForIntent self = msg_send ~self ~cmd:(selector "application:handlerForIntent:") ~typ:(id @-> id @-> returning (id)) x handlerForIntent
let application2 x ~openURLs self = msg_send ~self ~cmd:(selector "application:openURLs:") ~typ:(id @-> id @-> returning (void)) x openURLs
let application3 x ~userDidAcceptCloudKitShareWithMetadata self = msg_send ~self ~cmd:(selector "application:userDidAcceptCloudKitShareWithMetadata:") ~typ:(id @-> id @-> returning (void)) x userDidAcceptCloudKitShareWithMetadata
let applicationDidChangeActive x self = msg_send ~self ~cmd:(selector "applicationDidChangeActive:") ~typ:(id @-> returning (void)) x
let applicationDidChangeHidden x self = msg_send ~self ~cmd:(selector "applicationDidChangeHidden:") ~typ:(id @-> returning (void)) x
let applicationDidFinishLaunching x self = msg_send ~self ~cmd:(selector "applicationDidFinishLaunching:") ~typ:(id @-> returning (void)) x
let applicationDockMenu x self = msg_send ~self ~cmd:(selector "applicationDockMenu:") ~typ:(id @-> returning (id)) x
let applicationExplicitlyMarksAppLaunchComplete x self = msg_send ~self ~cmd:(selector "applicationExplicitlyMarksAppLaunchComplete:") ~typ:(id @-> returning (bool)) x
let applicationOrderFrontPreferencesPanel x self = msg_send ~self ~cmd:(selector "applicationOrderFrontPreferencesPanel:") ~typ:(id @-> returning (bool)) x
let applicationShouldAutomaticallyLocalizeKeyEquivalents self = msg_send ~self ~cmd:(selector "applicationShouldAutomaticallyLocalizeKeyEquivalents") ~typ:(returning (bool))
let applicationShouldAutomaticallyLocalizeKeyEquivalents' x self = msg_send ~self ~cmd:(selector "applicationShouldAutomaticallyLocalizeKeyEquivalents:") ~typ:(id @-> returning (bool)) x
let applicationShouldHandleReopen x ~hasVisibleWindows self = msg_send ~self ~cmd:(selector "applicationShouldHandleReopen:hasVisibleWindows:") ~typ:(id @-> bool @-> returning (bool)) x hasVisibleWindows
let applicationShouldTerminate x self = msg_send ~self ~cmd:(selector "applicationShouldTerminate:") ~typ:(id @-> returning (ullong)) x
let applicationShouldTerminateAfterLastWindowClosed x self = msg_send ~self ~cmd:(selector "applicationShouldTerminateAfterLastWindowClosed:") ~typ:(id @-> returning (bool)) x
let applicationSupportsSecureRestorableState x self = msg_send ~self ~cmd:(selector "applicationSupportsSecureRestorableState:") ~typ:(id @-> returning (bool)) x
let aquaTheme self = msg_send ~self ~cmd:(selector "aquaTheme") ~typ:(returning (id))
let backgroundTaskCountCallback self = msg_send ~self ~cmd:(selector "backgroundTaskCountCallback") ~typ:(returning (ptr void))
let backgroundTasksWillExpireCallback self = msg_send ~self ~cmd:(selector "backgroundTasksWillExpireCallback") ~typ:(returning (ptr void))
let becomeFirstResponderHandler self = msg_send ~self ~cmd:(selector "becomeFirstResponderHandler") ~typ:(returning (ptr void))
let beginTerminationBackgroundTaskCallback self = msg_send ~self ~cmd:(selector "beginTerminationBackgroundTaskCallback") ~typ:(returning (ptr void))
let bundle self = msg_send ~self ~cmd:(selector "bundle") ~typ:(returning (id))
let clearCachedActivityItemsConfigurationForServicesAndSharing self = msg_send ~self ~cmd:(selector "clearCachedActivityItemsConfigurationForServicesAndSharing") ~typ:(returning (void))
let closeWindowControllerForScene x self = msg_send ~self ~cmd:(selector "closeWindowControllerForScene:") ~typ:(id @-> returning (void)) x
let closeWindowControllerForSceneIdentifier x self = msg_send ~self ~cmd:(selector "closeWindowControllerForSceneIdentifier:") ~typ:(id @-> returning (void)) x
let contextIDsInSceneWithSceneIdentifier x self = msg_send ~self ~cmd:(selector "contextIDsInSceneWithSceneIdentifier:") ~typ:(id @-> returning (id)) x
let contextIDsInSceneWithSceneIdentifierCallback self = msg_send ~self ~cmd:(selector "contextIDsInSceneWithSceneIdentifierCallback") ~typ:(returning (ptr void))
let copyRegionBlockingWindowDragCallback self = msg_send ~self ~cmd:(selector "copyRegionBlockingWindowDragCallback") ~typ:(returning (ptr void))
let copyScriptingValue x ~forKey ~withProperties self = msg_send ~self ~cmd:(selector "copyScriptingValue:forKey:withProperties:") ~typ:(id @-> id @-> id @-> returning (id)) x forKey withProperties
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let debugUtilities self = msg_send ~self ~cmd:(selector "debugUtilities") ~typ:(returning (id))
let didCompleteAllBackgroundTasksAfterBackgrounding self = msg_send ~self ~cmd:(selector "didCompleteAllBackgroundTasksAfterBackgrounding") ~typ:(returning (void))
let didConfigureWindow self = msg_send ~self ~cmd:(selector "didConfigureWindow") ~typ:(returning (bool))
let didCreateUIScene x ~transitionContextDictionary self = msg_send ~self ~cmd:(selector "didCreateUIScene:transitionContextDictionary:") ~typ:(id @-> id @-> returning (void)) x transitionContextDictionary
let didOpenURLs x self = msg_send ~self ~cmd:(selector "didOpenURLs:") ~typ:(id @-> returning (void)) x
let didReceiveLaunchActions self = msg_send ~self ~cmd:(selector "didReceiveLaunchActions") ~typ:(returning (void))
let didRequestSceneWithOptions x ~sceneIdentifier ~orError self = msg_send ~self ~cmd:(selector "didRequestSceneWithOptions:sceneIdentifier:orError:") ~typ:(id @-> id @-> id @-> returning (void)) x sceneIdentifier orError
let discardMarkedText self = msg_send ~self ~cmd:(selector "discardMarkedText") ~typ:(returning (void))
let discardMarkedTextHandler self = msg_send ~self ~cmd:(selector "discardMarkedTextHandler") ~typ:(returning (ptr void))
let dismissPrintOrExportPanel self = msg_send ~self ~cmd:(selector "dismissPrintOrExportPanel") ~typ:(returning (void))
let effectiveActivityItemsConfigurationForServicesAndSharing self = msg_send ~self ~cmd:(selector "effectiveActivityItemsConfigurationForServicesAndSharing") ~typ:(returning (id))
let endTerminationBackgroundTaskCallback self = msg_send ~self ~cmd:(selector "endTerminationBackgroundTaskCallback") ~typ:(returning (ptr void))
let ensureBackgroundTaskCountReachedZeroHandlerCallback self = msg_send ~self ~cmd:(selector "ensureBackgroundTaskCountReachedZeroHandlerCallback") ~typ:(returning (ptr void))
let ensureIdiomScaleFactorIsInitializedCallback self = msg_send ~self ~cmd:(selector "ensureIdiomScaleFactorIsInitializedCallback") ~typ:(returning (ptr void))
let expansionTextInfoAtPointCallback self = msg_send ~self ~cmd:(selector "expansionTextInfoAtPointCallback") ~typ:(returning (ptr void))
let expansionTextInfoDrawInRectCallback self = msg_send ~self ~cmd:(selector "expansionTextInfoDrawInRectCallback") ~typ:(returning (ptr void))
let explicitlyMarksAppLaunchCompleteCallback self = msg_send ~self ~cmd:(selector "explicitlyMarksAppLaunchCompleteCallback") ~typ:(returning (ptr void))
let handleAppleEvent x ~withReplyEvent self = msg_send ~self ~cmd:(selector "handleAppleEvent:withReplyEvent:") ~typ:(id @-> id @-> returning (void)) x withReplyEvent
let handleEventByInputMethod self = msg_send ~self ~cmd:(selector "handleEventByInputMethod") ~typ:(returning (ptr void))
let handleMenuItemSelected x self = msg_send ~self ~cmd:(selector "handleMenuItemSelected:") ~typ:(id @-> returning (void)) x
let hasContinuityCameraServicesMenuProvider self = msg_send ~self ~cmd:(selector "hasContinuityCameraServicesMenuProvider") ~typ:(returning (ptr void))
let hasNonUserSettableSettings self = msg_send ~self ~cmd:(selector "hasNonUserSettableSettings") ~typ:(returning (bool))
let hasServicesAndSharingMenuProviderForReturnType self = msg_send ~self ~cmd:(selector "hasServicesAndSharingMenuProviderForReturnType") ~typ:(returning (ptr void))
let hasSystemInfoCreditsFile self = msg_send ~self ~cmd:(selector "hasSystemInfoCreditsFile") ~typ:(returning (bool))
let hasUserSettableSettings self = msg_send ~self ~cmd:(selector "hasUserSettableSettings") ~typ:(returning (bool))
let hostWindowDidBecomeKeyWindowHandler self = msg_send ~self ~cmd:(selector "hostWindowDidBecomeKeyWindowHandler") ~typ:(returning (ptr void))
let hostWindowDidChangeKeyAppearanceHandler self = msg_send ~self ~cmd:(selector "hostWindowDidChangeKeyAppearanceHandler") ~typ:(returning (ptr void))
let hostWindowDidResizeCallback self = msg_send ~self ~cmd:(selector "hostWindowDidResizeCallback") ~typ:(returning (ptr void))
let hostWindowForSceneIdentifier x self = msg_send ~self ~cmd:(selector "hostWindowForSceneIdentifier:") ~typ:(id @-> returning (id)) x
let hostWindowForUIWindow x self = msg_send ~self ~cmd:(selector "hostWindowForUIWindow:") ~typ:(id @-> returning (id)) x
let implicitTabbingIdentifierForSceneIdentifier x self = msg_send ~self ~cmd:(selector "implicitTabbingIdentifierForSceneIdentifier:") ~typ:(id @-> returning (id)) x
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let insertValue x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "insertValue:inPropertyWithKey:") ~typ:(id @-> id @-> returning (void)) x inPropertyWithKey
let insertValue' x ~atIndex ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "insertValue:atIndex:inPropertyWithKey:") ~typ:(id @-> ullong @-> id @-> returning (void)) x atIndex inPropertyWithKey
let installHandleUIKeyCommandEventHandler x self = msg_send ~self ~cmd:(selector "installHandleUIKeyCommandEventHandler:") ~typ:(ptr void @-> returning (void)) x
let installIsUIKeyCommandEventHandler x self = msg_send ~self ~cmd:(selector "installIsUIKeyCommandEventHandler:") ~typ:(ptr void @-> returning (void)) x
let isAppExtension self = msg_send ~self ~cmd:(selector "isAppExtension") ~typ:(returning (bool))
let isAttemptingTermination self = msg_send ~self ~cmd:(selector "isAttemptingTermination") ~typ:(returning (bool))
let isUIAppInstancePresent self = msg_send ~self ~cmd:(selector "isUIAppInstancePresent") ~typ:(returning (bool))
let iterateWindowsForDropSessionWithID x ~reply self = msg_send ~self ~cmd:(selector "iterateWindowsForDropSessionWithID:reply:") ~typ:(uint @-> ptr void @-> returning (void)) x reply
let keyHostWindow self = msg_send ~self ~cmd:(selector "keyHostWindow") ~typ:(returning (id))
let keyboardDelegateRequiresKeyEvents self = msg_send ~self ~cmd:(selector "keyboardDelegateRequiresKeyEvents") ~typ:(returning (ptr void))
let keyboardIsActiveForCurrentResponder self = msg_send ~self ~cmd:(selector "keyboardIsActiveForCurrentResponder") ~typ:(returning (ptr void))
let launchingIsComplete self = msg_send ~self ~cmd:(selector "launchingIsComplete") ~typ:(returning (bool))
let lockCursorIfNecessaryForUINSWindow x ~shouldWarpCursor self = msg_send ~self ~cmd:(selector "lockCursorIfNecessaryForUINSWindow:shouldWarpCursor:") ~typ:(id @-> bool @-> returning (void)) x shouldWarpCursor
let maximumRecentItemsMenuCount self = msg_send ~self ~cmd:(selector "maximumRecentItemsMenuCount") ~typ:(returning (ullong))
let menuController self = msg_send ~self ~cmd:(selector "menuController") ~typ:(returning (id))
let newScriptingObjectOfClass x ~forValueForKey ~withContentsValue ~properties self = msg_send ~self ~cmd:(selector "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") ~typ:(_Class @-> id @-> id @-> id @-> returning (id)) x forValueForKey withContentsValue properties
let nextPrintJobShouldExport self = msg_send ~self ~cmd:(selector "nextPrintJobShouldExport") ~typ:(returning (bool))
let noteNewRecentDocumentURL x self = msg_send ~self ~cmd:(selector "noteNewRecentDocumentURL:") ~typ:(id @-> returning (void)) x
let notifyAppFrontmostChanged self = msg_send ~self ~cmd:(selector "notifyAppFrontmostChanged") ~typ:(returning (void))
let openRecentItemURL x self = msg_send ~self ~cmd:(selector "openRecentItemURL:") ~typ:(id @-> returning (void)) x
let openURL x self = msg_send ~self ~cmd:(selector "openURL:") ~typ:(id @-> returning (bool)) x
let openURL' x ~options ~completion self = msg_send ~self ~cmd:(selector "openURL:options:completion:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x options completion
let performActionWithCompletionHandler self = msg_send ~self ~cmd:(selector "performActionWithCompletionHandler") ~typ:(returning (ptr void))
let performClickWithCompletionHandler self = msg_send ~self ~cmd:(selector "performClickWithCompletionHandler") ~typ:(returning (ptr void))
let performDefaultBehaviorForEvent self = msg_send ~self ~cmd:(selector "performDefaultBehaviorForEvent") ~typ:(returning (ptr void))
let pid self = msg_send ~self ~cmd:(selector "pid") ~typ:(returning (int))
let preferredSceneViewSizeForSceneCallback self = msg_send ~self ~cmd:(selector "preferredSceneViewSizeForSceneCallback") ~typ:(returning (ptr void))
let prefersPointerLockForSceneIdentifierCallback self = msg_send ~self ~cmd:(selector "prefersPointerLockForSceneIdentifierCallback") ~typ:(returning (ptr void))
let prefersPointerLockForSceneIdentifierCallback' x self = msg_send ~self ~cmd:(selector "prefersPointerLockForSceneIdentifierCallback:") ~typ:(id @-> returning (bool)) x
let printOrExportPanelWasDismissedCallback self = msg_send ~self ~cmd:(selector "printOrExportPanelWasDismissedCallback") ~typ:(returning (ptr void))
let printingController self = msg_send ~self ~cmd:(selector "printingController") ~typ:(returning (id))
let printingFinished x self = msg_send ~self ~cmd:(selector "printingFinished:") ~typ:(bool @-> returning (void)) x
let readSelectionFromPasteboardWithName self = msg_send ~self ~cmd:(selector "readSelectionFromPasteboardWithName") ~typ:(returning (ptr void))
let receivedTestURLCallback self = msg_send ~self ~cmd:(selector "receivedTestURLCallback") ~typ:(returning (ptr void))
let registeredForAccessibilityNotifications self = msg_send ~self ~cmd:(selector "registeredForAccessibilityNotifications") ~typ:(returning (bool))
let removeValueAtIndex x ~fromPropertyWithKey self = msg_send ~self ~cmd:(selector "removeValueAtIndex:fromPropertyWithKey:") ~typ:(ullong @-> id @-> returning (void)) x fromPropertyWithKey
let replaceValueAtIndex x ~inPropertyWithKey ~withValue self = msg_send ~self ~cmd:(selector "replaceValueAtIndex:inPropertyWithKey:withValue:") ~typ:(ullong @-> id @-> id @-> returning (void)) x inPropertyWithKey withValue
let reportAppLaunchCompleteCallback self = msg_send ~self ~cmd:(selector "reportAppLaunchCompleteCallback") ~typ:(returning (ptr void))
let requestHostingSceneCreationWithPersistentIdentifierCallback self = msg_send ~self ~cmd:(selector "requestHostingSceneCreationWithPersistentIdentifierCallback") ~typ:(returning (ptr void))
let requestSceneDestructionForSceneIdentifierCallback self = msg_send ~self ~cmd:(selector "requestSceneDestructionForSceneIdentifierCallback") ~typ:(returning (ptr void))
let resetApplicationPreservationState self = msg_send ~self ~cmd:(selector "resetApplicationPreservationState") ~typ:(returning (ptr void))
let resignFirstResponderHandler self = msg_send ~self ~cmd:(selector "resignFirstResponderHandler") ~typ:(returning (ptr void))
let restoreWindowWithIdentifier x ~state ~completionHandler self = msg_send ~self ~cmd:(selector "restoreWindowWithIdentifier:state:completionHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x state completionHandler
let sceneIdentifierForTargetContentIDCallback self = msg_send ~self ~cmd:(selector "sceneIdentifierForTargetContentIDCallback") ~typ:(returning (ptr void))
let sceneUtilities self = msg_send ~self ~cmd:(selector "sceneUtilities") ~typ:(returning (id))
let sceneViewConnectedCallback self = msg_send ~self ~cmd:(selector "sceneViewConnectedCallback") ~typ:(returning (ptr void))
let sceneViewDidBecomeVisibleCallback self = msg_send ~self ~cmd:(selector "sceneViewDidBecomeVisibleCallback") ~typ:(returning (ptr void))
let sceneViewDisconnectedCallback self = msg_send ~self ~cmd:(selector "sceneViewDisconnectedCallback") ~typ:(returning (ptr void))
let sceneWindowControllers self = msg_send ~self ~cmd:(selector "sceneWindowControllers") ~typ:(returning (id))
let sendFlagsChangedKeyEvent self = msg_send ~self ~cmd:(selector "sendFlagsChangedKeyEvent") ~typ:(returning (ptr void))
let sendKeyEvent self = msg_send ~self ~cmd:(selector "sendKeyEvent") ~typ:(returning (ptr void))
let setAcceptsActivatingTouchCallback x self = msg_send ~self ~cmd:(selector "setAcceptsActivatingTouchCallback:") ~typ:(ptr void @-> returning (void)) x
let setActivityItemsConfigurationForServicesAndSharing x self = msg_send ~self ~cmd:(selector "setActivityItemsConfigurationForServicesAndSharing:") ~typ:(ptr void @-> returning (void)) x
let setAppIsInBackgroundStateCallback x self = msg_send ~self ~cmd:(selector "setAppIsInBackgroundStateCallback:") ~typ:(ptr void @-> returning (void)) x
let setAppLifecycleController x self = msg_send ~self ~cmd:(selector "setAppLifecycleController:") ~typ:(id @-> returning (void)) x
let setAppMenu x self = msg_send ~self ~cmd:(selector "setAppMenu:") ~typ:(id @-> returning (void)) x
let setAppSupportsMultiwindowCallback x self = msg_send ~self ~cmd:(selector "setAppSupportsMultiwindowCallback:") ~typ:(ptr void @-> returning (void)) x
let setAppSupportsTabbedWindowsCallback x self = msg_send ~self ~cmd:(selector "setAppSupportsTabbedWindowsCallback:") ~typ:(ptr void @-> returning (void)) x
let setAppWillTerminateCallback x self = msg_send ~self ~cmd:(selector "setAppWillTerminateCallback:") ~typ:(ptr void @-> returning (void)) x
let setApplicationShouldAutomaticallyLocalizeKeyEquivalents x self = msg_send ~self ~cmd:(selector "setApplicationShouldAutomaticallyLocalizeKeyEquivalents:") ~typ:(bool @-> returning (void)) x
let setBackgroundTaskCountCallback x self = msg_send ~self ~cmd:(selector "setBackgroundTaskCountCallback:") ~typ:(ptr void @-> returning (void)) x
let setBackgroundTasksWillExpireCallback x self = msg_send ~self ~cmd:(selector "setBackgroundTasksWillExpireCallback:") ~typ:(ptr void @-> returning (void)) x
let setBecomeFirstResponderHandler x self = msg_send ~self ~cmd:(selector "setBecomeFirstResponderHandler:") ~typ:(ptr void @-> returning (void)) x
let setBeginTerminationBackgroundTaskCallback x self = msg_send ~self ~cmd:(selector "setBeginTerminationBackgroundTaskCallback:") ~typ:(ptr void @-> returning (void)) x
let setCachedActivityItemsConfigurationForServicesAndSharing x self = msg_send ~self ~cmd:(selector "setCachedActivityItemsConfigurationForServicesAndSharing:") ~typ:(id @-> returning (void)) x
let setContextIDsInSceneWithSceneIdentifierCallback x self = msg_send ~self ~cmd:(selector "setContextIDsInSceneWithSceneIdentifierCallback:") ~typ:(ptr void @-> returning (void)) x
let setCopyRegionBlockingWindowDragCallback x self = msg_send ~self ~cmd:(selector "setCopyRegionBlockingWindowDragCallback:") ~typ:(ptr void @-> returning (void)) x
let setDebugUtilities x self = msg_send ~self ~cmd:(selector "setDebugUtilities:") ~typ:(id @-> returning (void)) x
let setDiscardMarkedTextHandler x self = msg_send ~self ~cmd:(selector "setDiscardMarkedTextHandler:") ~typ:(ptr void @-> returning (void)) x
let setEndTerminationBackgroundTaskCallback x self = msg_send ~self ~cmd:(selector "setEndTerminationBackgroundTaskCallback:") ~typ:(ptr void @-> returning (void)) x
let setEnsureBackgroundTaskCountReachedZeroHandlerCallback x self = msg_send ~self ~cmd:(selector "setEnsureBackgroundTaskCountReachedZeroHandlerCallback:") ~typ:(ptr void @-> returning (void)) x
let setEnsureIdiomScaleFactorIsInitializedCallback x self = msg_send ~self ~cmd:(selector "setEnsureIdiomScaleFactorIsInitializedCallback:") ~typ:(ptr void @-> returning (void)) x
let setExpansionTextInfoAtPointCallback x self = msg_send ~self ~cmd:(selector "setExpansionTextInfoAtPointCallback:") ~typ:(ptr void @-> returning (void)) x
let setExpansionTextInfoDrawInRectCallback x self = msg_send ~self ~cmd:(selector "setExpansionTextInfoDrawInRectCallback:") ~typ:(ptr void @-> returning (void)) x
let setExplicitlyMarksAppLaunchCompleteCallback x self = msg_send ~self ~cmd:(selector "setExplicitlyMarksAppLaunchCompleteCallback:") ~typ:(ptr void @-> returning (void)) x
let setHandleEventByInputMethod x self = msg_send ~self ~cmd:(selector "setHandleEventByInputMethod:") ~typ:(ptr void @-> returning (void)) x
let setHasContinuityCameraServicesMenuProvider x self = msg_send ~self ~cmd:(selector "setHasContinuityCameraServicesMenuProvider:") ~typ:(ptr void @-> returning (void)) x
let setHasServicesAndSharingMenuProviderForReturnType x self = msg_send ~self ~cmd:(selector "setHasServicesAndSharingMenuProviderForReturnType:") ~typ:(ptr void @-> returning (void)) x
let setHostWindowDidBecomeKeyWindowHandler x self = msg_send ~self ~cmd:(selector "setHostWindowDidBecomeKeyWindowHandler:") ~typ:(ptr void @-> returning (void)) x
let setHostWindowDidChangeKeyAppearanceHandler x self = msg_send ~self ~cmd:(selector "setHostWindowDidChangeKeyAppearanceHandler:") ~typ:(ptr void @-> returning (void)) x
let setHostWindowDidResizeCallback x self = msg_send ~self ~cmd:(selector "setHostWindowDidResizeCallback:") ~typ:(ptr void @-> returning (void)) x
let setKeyboardDelegateRequiresKeyEvents x self = msg_send ~self ~cmd:(selector "setKeyboardDelegateRequiresKeyEvents:") ~typ:(ptr void @-> returning (void)) x
let setKeyboardIsActiveForCurrentResponder x self = msg_send ~self ~cmd:(selector "setKeyboardIsActiveForCurrentResponder:") ~typ:(ptr void @-> returning (void)) x
let setNextPrintJobShouldExport x self = msg_send ~self ~cmd:(selector "setNextPrintJobShouldExport:") ~typ:(bool @-> returning (void)) x
let setPerformActionWithCompletionHandler x self = msg_send ~self ~cmd:(selector "setPerformActionWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let setPerformClickWithCompletionHandler x self = msg_send ~self ~cmd:(selector "setPerformClickWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let setPerformDefaultBehaviorForEvent x self = msg_send ~self ~cmd:(selector "setPerformDefaultBehaviorForEvent:") ~typ:(ptr void @-> returning (void)) x
let setPreferredSceneViewSizeForSceneCallback x self = msg_send ~self ~cmd:(selector "setPreferredSceneViewSizeForSceneCallback:") ~typ:(ptr void @-> returning (void)) x
let setPrefersPointerLockForSceneIdentifierCallback x self = msg_send ~self ~cmd:(selector "setPrefersPointerLockForSceneIdentifierCallback:") ~typ:(ptr void @-> returning (void)) x
let setPrintOrExportPanelWasDismissedCallback x self = msg_send ~self ~cmd:(selector "setPrintOrExportPanelWasDismissedCallback:") ~typ:(ptr void @-> returning (void)) x
let setPrintingController x self = msg_send ~self ~cmd:(selector "setPrintingController:") ~typ:(id @-> returning (void)) x
let setReadSelectionFromPasteboardWithName x self = msg_send ~self ~cmd:(selector "setReadSelectionFromPasteboardWithName:") ~typ:(ptr void @-> returning (void)) x
let setReceivedTestURLCallback x self = msg_send ~self ~cmd:(selector "setReceivedTestURLCallback:") ~typ:(ptr void @-> returning (void)) x
let setRegisteredForAccessibilityNotifications x self = msg_send ~self ~cmd:(selector "setRegisteredForAccessibilityNotifications:") ~typ:(bool @-> returning (void)) x
let setReportAppLaunchCompleteCallback x self = msg_send ~self ~cmd:(selector "setReportAppLaunchCompleteCallback:") ~typ:(ptr void @-> returning (void)) x
let setRequestHostingSceneCreationWithPersistentIdentifierCallback x self = msg_send ~self ~cmd:(selector "setRequestHostingSceneCreationWithPersistentIdentifierCallback:") ~typ:(ptr void @-> returning (void)) x
let setRequestSceneDestructionForSceneIdentifierCallback x self = msg_send ~self ~cmd:(selector "setRequestSceneDestructionForSceneIdentifierCallback:") ~typ:(ptr void @-> returning (void)) x
let setResetApplicationPreservationState x self = msg_send ~self ~cmd:(selector "setResetApplicationPreservationState:") ~typ:(ptr void @-> returning (void)) x
let setResignFirstResponderHandler x self = msg_send ~self ~cmd:(selector "setResignFirstResponderHandler:") ~typ:(ptr void @-> returning (void)) x
let setSceneIdentifierForTargetContentIDCallback x self = msg_send ~self ~cmd:(selector "setSceneIdentifierForTargetContentIDCallback:") ~typ:(ptr void @-> returning (void)) x
let setSceneUtilities x self = msg_send ~self ~cmd:(selector "setSceneUtilities:") ~typ:(id @-> returning (void)) x
let setSceneViewConnectedCallback x self = msg_send ~self ~cmd:(selector "setSceneViewConnectedCallback:") ~typ:(ptr void @-> returning (void)) x
let setSceneViewDidBecomeVisibleCallback x self = msg_send ~self ~cmd:(selector "setSceneViewDidBecomeVisibleCallback:") ~typ:(ptr void @-> returning (void)) x
let setSceneViewDisconnectedCallback x self = msg_send ~self ~cmd:(selector "setSceneViewDisconnectedCallback:") ~typ:(ptr void @-> returning (void)) x
let setSceneWindowControllers x self = msg_send ~self ~cmd:(selector "setSceneWindowControllers:") ~typ:(id @-> returning (void)) x
let setSendFlagsChangedKeyEvent x self = msg_send ~self ~cmd:(selector "setSendFlagsChangedKeyEvent:") ~typ:(ptr void @-> returning (void)) x
let setSendKeyEvent x self = msg_send ~self ~cmd:(selector "setSendKeyEvent:") ~typ:(ptr void @-> returning (void)) x
let setShouldEmitApplicationLaunchSignpost x self = msg_send ~self ~cmd:(selector "setShouldEmitApplicationLaunchSignpost:") ~typ:(bool @-> returning (void)) x
let setShouldPreventAppFromAppearingInactive x self = msg_send ~self ~cmd:(selector "setShouldPreventAppFromAppearingInactive:") ~typ:(bool @-> returning (void)) x
let setSubtitleForSceneIdentifierCallback x self = msg_send ~self ~cmd:(selector "setSubtitleForSceneIdentifierCallback:") ~typ:(ptr void @-> returning (void)) x
let setSystemAppearance x self = msg_send ~self ~cmd:(selector "setSystemAppearance:") ~typ:(id @-> returning (void)) x
let setSystemAppearanceDidChangeCallback x self = msg_send ~self ~cmd:(selector "setSystemAppearanceDidChangeCallback:") ~typ:(ptr void @-> returning (void)) x
let setTabbingIdentifierForSceneIdentifierCallback x self = msg_send ~self ~cmd:(selector "setTabbingIdentifierForSceneIdentifierCallback:") ~typ:(ptr void @-> returning (void)) x
let setTargetInUIResponderChainFromFirstResponder x self = msg_send ~self ~cmd:(selector "setTargetInUIResponderChainFromFirstResponder:") ~typ:(ptr void @-> returning (void)) x
let setTargetInUIResponderChainFromInitialTarget x self = msg_send ~self ~cmd:(selector "setTargetInUIResponderChainFromInitialTarget:") ~typ:(ptr void @-> returning (void)) x
let setTargetInUIResponderChainFromUIApplication x self = msg_send ~self ~cmd:(selector "setTargetInUIResponderChainFromUIApplication:") ~typ:(ptr void @-> returning (void)) x
let setTargetInUIResponderChainFromUIWindowRootVC x self = msg_send ~self ~cmd:(selector "setTargetInUIResponderChainFromUIWindowRootVC:") ~typ:(ptr void @-> returning (void)) x
let setTargetInUIResponderChainOfPresenterOfRehostedVC x self = msg_send ~self ~cmd:(selector "setTargetInUIResponderChainOfPresenterOfRehostedVC:") ~typ:(ptr void @-> returning (void)) x
let setTitleForSceneIdentifierCallback x self = msg_send ~self ~cmd:(selector "setTitleForSceneIdentifierCallback:") ~typ:(ptr void @-> returning (void)) x
let setToolTipRectAtPointCallback x self = msg_send ~self ~cmd:(selector "setToolTipRectAtPointCallback:") ~typ:(ptr void @-> returning (void)) x
let setToolTipStringAtPointCallback x self = msg_send ~self ~cmd:(selector "setToolTipStringAtPointCallback:") ~typ:(ptr void @-> returning (void)) x
let setUpdatePointerLockStateForSceneIdentifierCallback x self = msg_send ~self ~cmd:(selector "setUpdatePointerLockStateForSceneIdentifierCallback:") ~typ:(ptr void @-> returning (void)) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let shareSheetController self = msg_send ~self ~cmd:(selector "shareSheetController") ~typ:(returning (id))
let shouldCloseWindowWithScene x self = msg_send ~self ~cmd:(selector "shouldCloseWindowWithScene:") ~typ:(id @-> returning (bool)) x
let shouldEmitApplicationLaunchSignpost self = msg_send ~self ~cmd:(selector "shouldEmitApplicationLaunchSignpost") ~typ:(returning (bool))
let shouldPreventAppFromAppearingInactive self = msg_send ~self ~cmd:(selector "shouldPreventAppFromAppearingInactive") ~typ:(returning (bool))
let showAboutPanel x self = msg_send ~self ~cmd:(selector "showAboutPanel:") ~typ:(id @-> returning (void)) x
let showPrintOrExportPanelWithPrintInfo x ~andPDFDocumentGenerator self = msg_send ~self ~cmd:(selector "showPrintOrExportPanelWithPrintInfo:andPDFDocumentGenerator:") ~typ:(id @-> ptr void @-> returning (void)) x andPDFDocumentGenerator
let subtitleForSceneIdentifierCallback self = msg_send ~self ~cmd:(selector "subtitleForSceneIdentifierCallback") ~typ:(returning (ptr void))
let systemAppearance self = msg_send ~self ~cmd:(selector "systemAppearance") ~typ:(returning (id))
let systemAppearanceDidChangeCallback self = msg_send ~self ~cmd:(selector "systemAppearanceDidChangeCallback") ~typ:(returning (ptr void))
let tabbingIdentifierForSceneIdentifierCallback self = msg_send ~self ~cmd:(selector "tabbingIdentifierForSceneIdentifierCallback") ~typ:(returning (ptr void))
let targetInUIResponderChainFromFirstResponder self = msg_send ~self ~cmd:(selector "targetInUIResponderChainFromFirstResponder") ~typ:(returning (ptr void))
let targetInUIResponderChainFromInitialTarget self = msg_send ~self ~cmd:(selector "targetInUIResponderChainFromInitialTarget") ~typ:(returning (ptr void))
let targetInUIResponderChainFromUIApplication self = msg_send ~self ~cmd:(selector "targetInUIResponderChainFromUIApplication") ~typ:(returning (ptr void))
let targetInUIResponderChainFromUIWindowRootVC self = msg_send ~self ~cmd:(selector "targetInUIResponderChainFromUIWindowRootVC") ~typ:(returning (ptr void))
let targetInUIResponderChainOfPresenterOfRehostedVC self = msg_send ~self ~cmd:(selector "targetInUIResponderChainOfPresenterOfRehostedVC") ~typ:(returning (ptr void))
let titleForSceneIdentifierCallback self = msg_send ~self ~cmd:(selector "titleForSceneIdentifierCallback") ~typ:(returning (ptr void))
let toolTipRectAtPointCallback self = msg_send ~self ~cmd:(selector "toolTipRectAtPointCallback") ~typ:(returning (ptr void))
let toolTipStringAtPointCallback self = msg_send ~self ~cmd:(selector "toolTipStringAtPointCallback") ~typ:(returning (ptr void))
let uiKitWantsToExitProcessWithStatus x self = msg_send ~self ~cmd:(selector "uiKitWantsToExitProcessWithStatus:") ~typ:(int @-> returning (void)) x
let uiKitWantsToTerminateProcessExplicitly self = msg_send ~self ~cmd:(selector "uiKitWantsToTerminateProcessExplicitly") ~typ:(returning (void))
let unlockCursorForUINSWindow x self = msg_send ~self ~cmd:(selector "unlockCursorForUINSWindow:") ~typ:(id @-> returning (void)) x
let unlockCursorIfNecessary self = msg_send ~self ~cmd:(selector "unlockCursorIfNecessary") ~typ:(returning (void))
let updateMainSceneIdentifier x self = msg_send ~self ~cmd:(selector "updateMainSceneIdentifier:") ~typ:(id @-> returning (void)) x
let updatePointerLockStateForSceneIdentifierCallback self = msg_send ~self ~cmd:(selector "updatePointerLockStateForSceneIdentifierCallback") ~typ:(returning (ptr void))
let updateSubtitle x ~forWindowController self = msg_send ~self ~cmd:(selector "updateSubtitle:forWindowController:") ~typ:(id @-> id @-> returning (void)) x forWindowController
let updateTitle x ~forWindowController self = msg_send ~self ~cmd:(selector "updateTitle:forWindowController:") ~typ:(id @-> id @-> returning (void)) x forWindowController
let valueAtIndex x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueAtIndex:inPropertyWithKey:") ~typ:(ullong @-> id @-> returning (id)) x inPropertyWithKey
let valueForKey x self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning (id)) x
let valueWithName x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueWithName:inPropertyWithKey:") ~typ:(id @-> id @-> returning (id)) x inPropertyWithKey
let valueWithUniqueID x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueWithUniqueID:inPropertyWithKey:") ~typ:(id @-> id @-> returning (id)) x inPropertyWithKey
let willDestroyUIScene x self = msg_send ~self ~cmd:(selector "willDestroyUIScene:") ~typ:(id @-> returning (void)) x
let willRequestSceneWithOptions x self = msg_send ~self ~cmd:(selector "willRequestSceneWithOptions:") ~typ:(id @-> returning (void)) x
let windowShouldUnlockCursor x self = msg_send ~self ~cmd:(selector "windowShouldUnlockCursor:") ~typ:(id @-> returning (void)) x