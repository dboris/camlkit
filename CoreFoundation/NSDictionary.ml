(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

(** Apple docs: {{:https://developer.apple.com/documentation/corefoundation/nsdictionary?language=objc}NSDictionary} *)

let self = get_class "NSDictionary"

let _ANQPResponse self = msg_send ~self ~cmd:(selector "ANQPResponse") ~typ:(returning id)
let _BSSID self = msg_send ~self ~cmd:(selector "BSSID") ~typ:(returning id)
let _CAMLType self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning id)
let _CKAssignToContainerWithID x self = msg_send ~self ~cmd:(selector "CKAssignToContainerWithID:") ~typ:(id @-> returning void) x
let _CKCompactMap x self = msg_send ~self ~cmd:(selector "CKCompactMap:") ~typ:((ptr void) @-> returning id) x
let _CKCompactMapValues x self = msg_send ~self ~cmd:(selector "CKCompactMapValues:") ~typ:((ptr void) @-> returning id) x
let _CKDescriptionPropertiesWithPublic x ~private_ ~shouldExpand self = msg_send ~self ~cmd:(selector "CKDescriptionPropertiesWithPublic:private:shouldExpand:") ~typ:(bool @-> bool @-> bool @-> returning id) x private_ shouldExpand
let _CKFilter x self = msg_send ~self ~cmd:(selector "CKFilter:") ~typ:((ptr void) @-> returning id) x
let _CKFirstUrlForKeys x self = msg_send ~self ~cmd:(selector "CKFirstUrlForKeys:") ~typ:(id @-> returning id) x
let _CKMap x self = msg_send ~self ~cmd:(selector "CKMap:") ~typ:((ptr void) @-> returning id) x
let _CKMapKeysAndValues x self = msg_send ~self ~cmd:(selector "CKMapKeysAndValues:") ~typ:((ptr void) @-> returning id) x
let _CKMapValues x self = msg_send ~self ~cmd:(selector "CKMapValues:") ~typ:((ptr void) @-> returning id) x
let _CKObjectForKeyCaseInsensitive x self = msg_send ~self ~cmd:(selector "CKObjectForKeyCaseInsensitive:") ~typ:(id @-> returning id) x
let _CKSingleLineDescription self = msg_send ~self ~cmd:(selector "CKSingleLineDescription") ~typ:(returning id)
let _DMCShortenedPlistDescription self = msg_send ~self ~cmd:(selector "DMCShortenedPlistDescription") ~typ:(returning id)
let _DMCWriteToBinaryFile x self = msg_send ~self ~cmd:(selector "DMCWriteToBinaryFile:") ~typ:(id @-> returning bool) x
let _HESSID self = msg_send ~self ~cmd:(selector "HESSID") ~typ:(returning id)
let _NAIRealmNameList self = msg_send ~self ~cmd:(selector "NAIRealmNameList") ~typ:(returning id)
let _RSNAuthSelectors self = msg_send ~self ~cmd:(selector "RSNAuthSelectors") ~typ:(returning id)
let _RSNBroadcastCipher self = msg_send ~self ~cmd:(selector "RSNBroadcastCipher") ~typ:(returning ullong) |> ULLong.to_int
let _RSNCapabilities self = msg_send ~self ~cmd:(selector "RSNCapabilities") ~typ:(returning int)
let _RSNMulticastCipher self = msg_send ~self ~cmd:(selector "RSNMulticastCipher") ~typ:(returning ullong) |> ULLong.to_int
let _RSNUnicastCiphers self = msg_send ~self ~cmd:(selector "RSNUnicastCiphers") ~typ:(returning id)
let _RSSI self = msg_send ~self ~cmd:(selector "RSSI") ~typ:(returning llong) |> LLong.to_int
let _SSID self = msg_send ~self ~cmd:(selector "SSID") ~typ:(returning id)
let _WAPISubtype self = msg_send ~self ~cmd:(selector "WAPISubtype") ~typ:(returning llong) |> LLong.to_int
let _WPAAuthSelectors self = msg_send ~self ~cmd:(selector "WPAAuthSelectors") ~typ:(returning id)
let _WPAMulticastCipher self = msg_send ~self ~cmd:(selector "WPAMulticastCipher") ~typ:(returning ullong) |> ULLong.to_int
let _WPAUnicastCiphers self = msg_send ~self ~cmd:(selector "WPAUnicastCiphers") ~typ:(returning id)
let _XMLString self = msg_send ~self ~cmd:(selector "XMLString") ~typ:(returning id)
let abDictionaryByAddingMissingValuesFromDictionary x self = msg_send ~self ~cmd:(selector "abDictionaryByAddingMissingValuesFromDictionary:") ~typ:(id @-> returning id) x
let abNonNullValueForKey x self = msg_send ~self ~cmd:(selector "abNonNullValueForKey:") ~typ:(id @-> returning id) x
let accessNetworkType self = msg_send ~self ~cmd:(selector "accessNetworkType") ~typ:(returning int)
let age self = msg_send ~self ~cmd:(selector "age") ~typ:(returning ullong) |> ULLong.to_int
let airPortBaseStationModel self = msg_send ~self ~cmd:(selector "airPortBaseStationModel") ~typ:(returning llong) |> LLong.to_int
let allKeys self = msg_send ~self ~cmd:(selector "allKeys") ~typ:(returning id)
let allKeysForObject x self = msg_send ~self ~cmd:(selector "allKeysForObject:") ~typ:(id @-> returning id) x
let allObjects self = msg_send ~self ~cmd:(selector "allObjects") ~typ:(returning id)
let allValues self = msg_send ~self ~cmd:(selector "allValues") ~typ:(returning id)
let allValuesSortedByGUIDKeyWithBackupOrder x self = msg_send ~self ~cmd:(selector "allValuesSortedByGUIDKeyWithBackupOrder:") ~typ:(id @-> returning id) x
let asQueryParameterString self = msg_send ~self ~cmd:(selector "asQueryParameterString") ~typ:(returning id)
let axssDecodeArrayOfClass x ~forKey self = msg_send ~self ~cmd:(selector "axssDecodeArrayOfClass:forKey:") ~typ:(_Class @-> id @-> returning id) x forKey
let axssDecodeBoolForKey x self = msg_send ~self ~cmd:(selector "axssDecodeBoolForKey:") ~typ:(id @-> returning bool) x
let axssDecodeObjectOfClass x ~forKey self = msg_send ~self ~cmd:(selector "axssDecodeObjectOfClass:forKey:") ~typ:(_Class @-> id @-> returning id) x forKey
let beaconInterval self = msg_send ~self ~cmd:(selector "beaconInterval") ~typ:(returning llong) |> LLong.to_int
let bluetoothMAC self = msg_send ~self ~cmd:(selector "bluetoothMAC") ~typ:(returning id)
let boolForKey x self = msg_send ~self ~cmd:(selector "boolForKey:") ~typ:(id @-> returning bool) x
let boolForKey' x ~defaultValue self = msg_send ~self ~cmd:(selector "boolForKey:defaultValue:") ~typ:(id @-> bool @-> returning bool) x defaultValue
let boolValueForKey x ~defaultValue self = msg_send ~self ~cmd:(selector "boolValueForKey:defaultValue:") ~typ:(id @-> bool @-> returning bool) x defaultValue
let boolValueForKey1 x ~withDefault self = msg_send ~self ~cmd:(selector "boolValueForKey:withDefault:") ~typ:(id @-> bool @-> returning bool) x withDefault
let boolValueForKey2 x ~defaultValue ~found self = msg_send ~self ~cmd:(selector "boolValueForKey:defaultValue:found:") ~typ:(id @-> bool @-> (ptr bool) @-> returning bool) x defaultValue found
let boolValueFromArrayWithKey x ~forIndex ~defaultValue ~found self = msg_send ~self ~cmd:(selector "boolValueFromArrayWithKey:forIndex:defaultValue:found:") ~typ:(id @-> ullong @-> bool @-> (ptr bool) @-> returning bool) x (ULLong.of_int forIndex) defaultValue found
let bundleIdentifierFromInfoDictionary self = msg_send ~self ~cmd:(selector "bundleIdentifierFromInfoDictionary") ~typ:(returning id)
let cellularNetworkInfo self = msg_send ~self ~cmd:(selector "cellularNetworkInfo") ~typ:(returning id)
let cgRectForKey x ~defaultValue ~found self = msg_send_stret ~self ~cmd:(selector "cgRectForKey:defaultValue:found:") ~typ:(id @-> CGRect.t @-> (ptr bool) @-> returning CGRect.t) ~return_type:CGRect.t x defaultValue found
let channel self = msg_send ~self ~cmd:(selector "channel") ~typ:(returning id)
let channelInfo self = msg_send ~self ~cmd:(selector "channelInfo") ~typ:(returning id)
let classForCoder self = msg_send ~self ~cmd:(selector "classForCoder") ~typ:(returning _Class)
let containsKey x self = msg_send ~self ~cmd:(selector "containsKey:") ~typ:(id @-> returning bool) x
let containsObject x self = msg_send ~self ~cmd:(selector "containsObject:") ~typ:(id @-> returning bool) x
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:((ptr void) @-> returning id) x
let count self = msg_send ~self ~cmd:(selector "count") ~typ:(returning ullong) |> ULLong.to_int
let countByEnumeratingWithState x ~objects ~count self = msg_send ~self ~cmd:(selector "countByEnumeratingWithState:objects:count:") ~typ:((ptr void) @-> (ptr id) @-> ullong @-> returning ullong) x objects (ULLong.of_int count) |> ULLong.to_int
let countForKey x self = msg_send ~self ~cmd:(selector "countForKey:") ~typ:(id @-> returning ullong) x |> ULLong.to_int
let countForObject x self = msg_send ~self ~cmd:(selector "countForObject:") ~typ:(id @-> returning ullong) x |> ULLong.to_int
let countryCode self = msg_send ~self ~cmd:(selector "countryCode") ~typ:(returning id)
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let descriptionAtIndent x self = msg_send ~self ~cmd:(selector "descriptionAtIndent:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let descriptionInStringsFileFormat self = msg_send ~self ~cmd:(selector "descriptionInStringsFileFormat") ~typ:(returning id)
let descriptionWithLocale x self = msg_send ~self ~cmd:(selector "descriptionWithLocale:") ~typ:(id @-> returning id) x
let descriptionWithLocale' x ~indent self = msg_send ~self ~cmd:(selector "descriptionWithLocale:indent:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int indent)
let deviceID self = msg_send ~self ~cmd:(selector "deviceID") ~typ:(returning id)
let dictionaryByMergingWith x self = msg_send ~self ~cmd:(selector "dictionaryByMergingWith:") ~typ:(id @-> returning id) x
let dictionaryChanging x ~to_ self = msg_send ~self ~cmd:(selector "dictionaryChanging:to:") ~typ:(id @-> id @-> returning id) x to_
let dictionaryFromChanges x self = msg_send ~self ~cmd:(selector "dictionaryFromChanges:") ~typ:(id @-> returning id) x
let displayName self = msg_send ~self ~cmd:(selector "displayName") ~typ:(returning id)
let domainNameList self = msg_send ~self ~cmd:(selector "domainNameList") ~typ:(returning id)
let doubleValueForKey x ~defaultValue self = msg_send ~self ~cmd:(selector "doubleValueForKey:defaultValue:") ~typ:(id @-> double @-> returning double) x defaultValue
let doubleValueForKey' x ~withDefault self = msg_send ~self ~cmd:(selector "doubleValueForKey:withDefault:") ~typ:(id @-> double @-> returning double) x withDefault
let encodeKeysAndValuesWithCSCoder x ~filterBlock self = msg_send ~self ~cmd:(selector "encodeKeysAndValuesWithCSCoder:filterBlock:") ~typ:(id @-> (ptr void) @-> returning void) x filterBlock
let encodeWithCAMLWriter x self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning void) x
let encodeWithCSCoder x self = msg_send ~self ~cmd:(selector "encodeWithCSCoder:") ~typ:(id @-> returning void) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let encodedBytesAndReturnLength x ~error self = msg_send ~self ~cmd:(selector "encodedBytesAndReturnLength:error:") ~typ:((ptr ullong) @-> (ptr id) @-> returning string) x error
let encodedDataAndReturnError x self = msg_send ~self ~cmd:(selector "encodedDataAndReturnError:") ~typ:((ptr id) @-> returning id) x
let entriesToStringWithIndent x ~debug self = msg_send ~self ~cmd:(selector "entriesToStringWithIndent:debug:") ~typ:(int @-> bool @-> returning id) x debug
let enumerateKeysAndObjectsUsingBlock x self = msg_send ~self ~cmd:(selector "enumerateKeysAndObjectsUsingBlock:") ~typ:((ptr void) @-> returning void) x
let enumerateKeysAndObjectsWithOptions x ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateKeysAndObjectsWithOptions:usingBlock:") ~typ:(ullong @-> (ptr void) @-> returning void) (ULLong.of_int x) usingBlock
let fileCreationDate self = msg_send ~self ~cmd:(selector "fileCreationDate") ~typ:(returning id)
let fileExtensionHidden self = msg_send ~self ~cmd:(selector "fileExtensionHidden") ~typ:(returning bool)
let fileGroupOwnerAccountID self = msg_send ~self ~cmd:(selector "fileGroupOwnerAccountID") ~typ:(returning id)
let fileGroupOwnerAccountName self = msg_send ~self ~cmd:(selector "fileGroupOwnerAccountName") ~typ:(returning id)
let fileGroupOwnerAccountNumber self = msg_send ~self ~cmd:(selector "fileGroupOwnerAccountNumber") ~typ:(returning ullong) |> ULLong.to_int
let fileHFSCreatorCode self = msg_send ~self ~cmd:(selector "fileHFSCreatorCode") ~typ:(returning uint)
let fileHFSFlags self = msg_send ~self ~cmd:(selector "fileHFSFlags") ~typ:(returning ushort)
let fileHFSResourceForkSize self = msg_send ~self ~cmd:(selector "fileHFSResourceForkSize") ~typ:(returning ullong) |> ULLong.to_int
let fileHFSTypeCode self = msg_send ~self ~cmd:(selector "fileHFSTypeCode") ~typ:(returning uint)
let fileIsAppendOnly self = msg_send ~self ~cmd:(selector "fileIsAppendOnly") ~typ:(returning bool)
let fileIsImmutable self = msg_send ~self ~cmd:(selector "fileIsImmutable") ~typ:(returning bool)
let fileModificationDate self = msg_send ~self ~cmd:(selector "fileModificationDate") ~typ:(returning id)
let fileOwnerAccountID self = msg_send ~self ~cmd:(selector "fileOwnerAccountID") ~typ:(returning id)
let fileOwnerAccountName self = msg_send ~self ~cmd:(selector "fileOwnerAccountName") ~typ:(returning id)
let fileOwnerAccountNumber self = msg_send ~self ~cmd:(selector "fileOwnerAccountNumber") ~typ:(returning ullong) |> ULLong.to_int
let filePosixPermissions self = msg_send ~self ~cmd:(selector "filePosixPermissions") ~typ:(returning ullong) |> ULLong.to_int
let fileSize self = msg_send ~self ~cmd:(selector "fileSize") ~typ:(returning ullong) |> ULLong.to_int
let fileSystemFileNumber self = msg_send ~self ~cmd:(selector "fileSystemFileNumber") ~typ:(returning ullong) |> ULLong.to_int
let fileSystemNumber self = msg_send ~self ~cmd:(selector "fileSystemNumber") ~typ:(returning llong) |> LLong.to_int
let fileType self = msg_send ~self ~cmd:(selector "fileType") ~typ:(returning id)
let floatValueForKey x ~defaultValue self = msg_send ~self ~cmd:(selector "floatValueForKey:defaultValue:") ~typ:(id @-> double @-> returning double) x defaultValue
let floatValueForKey1 x ~withDefault self = msg_send ~self ~cmd:(selector "floatValueForKey:withDefault:") ~typ:(id @-> float @-> returning float) x withDefault
let floatValueForKey2 x ~defaultValue ~found self = msg_send ~self ~cmd:(selector "floatValueForKey:defaultValue:found:") ~typ:(id @-> float @-> (ptr bool) @-> returning float) x defaultValue found
let floatValueFromArrayWithKey x ~forIndex ~defaultValue ~found self = msg_send ~self ~cmd:(selector "floatValueFromArrayWithKey:forIndex:defaultValue:found:") ~typ:(id @-> ullong @-> float @-> (ptr bool) @-> returning float) x (ULLong.of_int forIndex) defaultValue found
let friendlyName self = msg_send ~self ~cmd:(selector "friendlyName") ~typ:(returning id)
let getKeyCategory self = msg_send ~self ~cmd:(selector "getKeyCategory") ~typ:(returning ullong) |> ULLong.to_int
let getKeyCategoryRef self = msg_send ~self ~cmd:(selector "getKeyCategoryRef") ~typ:(returning id)
let getKeyDisplayID self = msg_send ~self ~cmd:(selector "getKeyDisplayID") ~typ:(returning ullong) |> ULLong.to_int
let getKeyDisplayIDRef self = msg_send ~self ~cmd:(selector "getKeyDisplayIDRef") ~typ:(returning id)
let getKeyKeyboardID self = msg_send ~self ~cmd:(selector "getKeyKeyboardID") ~typ:(returning ullong) |> ULLong.to_int
let getKeyKeyboardIDRef self = msg_send ~self ~cmd:(selector "getKeyKeyboardIDRef") ~typ:(returning id)
let getKeyPropertyParameter self = msg_send ~self ~cmd:(selector "getKeyPropertyParameter") ~typ:(returning id)
let getKeyString self = msg_send ~self ~cmd:(selector "getKeyString") ~typ:(returning id)
let getKeys x self = msg_send ~self ~cmd:(selector "getKeys:") ~typ:((ptr id) @-> returning void) x
let getObjects x self = msg_send ~self ~cmd:(selector "getObjects:") ~typ:((ptr id) @-> returning void) x
let getObjects1 x ~andKeys self = msg_send ~self ~cmd:(selector "getObjects:andKeys:") ~typ:((ptr id) @-> (ptr id) @-> returning void) x andKeys
let getObjects2 x ~andKeys ~count self = msg_send ~self ~cmd:(selector "getObjects:andKeys:count:") ~typ:((ptr id) @-> (ptr id) @-> ullong @-> returning void) x andKeys (ULLong.of_int count)
let hasAppleIE self = msg_send ~self ~cmd:(selector "hasAppleIE") ~typ:(returning bool)
let hasInterworkingIE self = msg_send ~self ~cmd:(selector "hasInterworkingIE") ~typ:(returning bool)
let hasRSNIE self = msg_send ~self ~cmd:(selector "hasRSNIE") ~typ:(returning bool)
let hasWPAIE self = msg_send ~self ~cmd:(selector "hasWPAIE") ~typ:(returning bool)
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning ullong) |> ULLong.to_int
let hashedDescription self = msg_send ~self ~cmd:(selector "hashedDescription") ~typ:(returning id)
let informationElementData self = msg_send ~self ~cmd:(selector "informationElementData") ~typ:(returning id)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithContentsOfFile x self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:") ~typ:(id @-> returning id) x
let initWithContentsOfURL x self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:") ~typ:(id @-> returning id) x
let initWithContentsOfURL' x ~error self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:error:") ~typ:(id @-> (ptr id) @-> returning id) x error
let initWithDictionary x self = msg_send ~self ~cmd:(selector "initWithDictionary:") ~typ:(id @-> returning id) x
let initWithDictionary' x ~copyItems self = msg_send ~self ~cmd:(selector "initWithDictionary:copyItems:") ~typ:(id @-> bool @-> returning id) x copyItems
let initWithObject x ~forKey self = msg_send ~self ~cmd:(selector "initWithObject:forKey:") ~typ:(id @-> id @-> returning id) x forKey
let initWithObjects x ~forKeys self = msg_send ~self ~cmd:(selector "initWithObjects:forKeys:") ~typ:(id @-> id @-> returning id) x forKeys
let initWithObjects' x ~forKeys ~count self = msg_send ~self ~cmd:(selector "initWithObjects:forKeys:count:") ~typ:((ptr id) @-> (ptr id) @-> ullong @-> returning id) x forKeys (ULLong.of_int count)
let initWithObjectsAndKeys x self = msg_send ~self ~cmd:(selector "initWithObjectsAndKeys:") ~typ:(id @-> returning id) x
let initWithPropertyKey x self = msg_send ~self ~cmd:(selector "initWithPropertyKey:") ~typ:(id @-> returning id) x
let initWithPropertyKey1 x ~andCategory self = msg_send ~self ~cmd:(selector "initWithPropertyKey:andCategory:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int andCategory)
let initWithPropertyKey2 x ~andDisplay self = msg_send ~self ~cmd:(selector "initWithPropertyKey:andDisplay:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int andDisplay)
let initWithPropertyKey3 x ~keyboardID self = msg_send ~self ~cmd:(selector "initWithPropertyKey:keyboardID:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int keyboardID)
let initWithPropertyKey4 x ~display ~andParameter self = msg_send ~self ~cmd:(selector "initWithPropertyKey:display:andParameter:") ~typ:(id @-> ullong @-> id @-> returning id) x (ULLong.of_int display) andParameter
let intValueForKey x ~defaultValue self = msg_send ~self ~cmd:(selector "intValueForKey:defaultValue:") ~typ:(id @-> int @-> returning int) x defaultValue
let intValueForKey' x ~defaultValue ~found self = msg_send ~self ~cmd:(selector "intValueForKey:defaultValue:found:") ~typ:(id @-> int @-> (ptr bool) @-> returning int) x defaultValue found
let intValueFromArrayWithKey x ~forIndex ~defaultValue ~found self = msg_send ~self ~cmd:(selector "intValueFromArrayWithKey:forIndex:defaultValue:found:") ~typ:(id @-> ullong @-> int @-> (ptr bool) @-> returning int) x (ULLong.of_int forIndex) defaultValue found
let integerForKey x self = msg_send ~self ~cmd:(selector "integerForKey:") ~typ:(id @-> returning int) x
let integerValueForKey x ~defaultValue self = msg_send ~self ~cmd:(selector "integerValueForKey:defaultValue:") ~typ:(id @-> llong @-> returning llong) x (LLong.of_int defaultValue) |> LLong.to_int
let integerValueForKey' x ~withDefault self = msg_send ~self ~cmd:(selector "integerValueForKey:withDefault:") ~typ:(id @-> llong @-> returning llong) x (LLong.of_int withDefault) |> LLong.to_int
let invertedDictionary self = msg_send ~self ~cmd:(selector "invertedDictionary") ~typ:(returning id)
let isAdditionalStepRequiredForAccess self = msg_send ~self ~cmd:(selector "isAdditionalStepRequiredForAccess") ~typ:(returning bool)
let isAppleSWAP self = msg_send ~self ~cmd:(selector "isAppleSWAP") ~typ:(returning bool)
let isEmergencyServicesReachable self = msg_send ~self ~cmd:(selector "isEmergencyServicesReachable") ~typ:(returning bool)
let isEqual x self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning bool) x
let isEqualToDictionary x self = msg_send ~self ~cmd:(selector "isEqualToDictionary:") ~typ:(id @-> returning bool) x
let isEqualToDictionary' x ~forKeys self = msg_send ~self ~cmd:(selector "isEqualToDictionary:forKeys:") ~typ:(id @-> id @-> returning bool) x forKeys
let isIBSS self = msg_send ~self ~cmd:(selector "isIBSS") ~typ:(returning bool)
let isInternetAccessible self = msg_send ~self ~cmd:(selector "isInternetAccessible") ~typ:(returning bool)
let isPasspoint self = msg_send ~self ~cmd:(selector "isPasspoint") ~typ:(returning bool)
let isPersonalHotspot self = msg_send ~self ~cmd:(selector "isPersonalHotspot") ~typ:(returning bool)
let isUnauthenticatedEmergencyServiceAccessible self = msg_send ~self ~cmd:(selector "isUnauthenticatedEmergencyServiceAccessible") ~typ:(returning bool)
let isUnconfiguredAirPortBaseStation self = msg_send ~self ~cmd:(selector "isUnconfiguredAirPortBaseStation") ~typ:(returning bool)
let isUnconfiguredDevice self = msg_send ~self ~cmd:(selector "isUnconfiguredDevice") ~typ:(returning bool)
let keyEnumerator self = msg_send ~self ~cmd:(selector "keyEnumerator") ~typ:(returning id)
let keyOfEntryPassingTest x self = msg_send ~self ~cmd:(selector "keyOfEntryPassingTest:") ~typ:((ptr void) @-> returning id) x
let keyOfEntryWithOptions x ~passingTest self = msg_send ~self ~cmd:(selector "keyOfEntryWithOptions:passingTest:") ~typ:(ullong @-> (ptr void) @-> returning id) (ULLong.of_int x) passingTest
let keysOfChangedEntriesComparedTo x self = msg_send ~self ~cmd:(selector "keysOfChangedEntriesComparedTo:") ~typ:(id @-> returning id) x
let keysOfEntriesPassingTest x self = msg_send ~self ~cmd:(selector "keysOfEntriesPassingTest:") ~typ:((ptr void) @-> returning id) x
let keysOfEntriesWithOptions x ~passingTest self = msg_send ~self ~cmd:(selector "keysOfEntriesWithOptions:passingTest:") ~typ:(ullong @-> (ptr void) @-> returning id) (ULLong.of_int x) passingTest
let keysSortedByValueUsingComparator x self = msg_send ~self ~cmd:(selector "keysSortedByValueUsingComparator:") ~typ:((ptr void) @-> returning id) x
let keysSortedByValueUsingSelector x self = msg_send ~self ~cmd:(selector "keysSortedByValueUsingSelector:") ~typ:(_SEL @-> returning id) x
let keysSortedByValueWithOptions x ~usingComparator self = msg_send ~self ~cmd:(selector "keysSortedByValueWithOptions:usingComparator:") ~typ:(ullong @-> (ptr void) @-> returning id) (ULLong.of_int x) usingComparator
let longLongValueForKey x ~withDefault self = msg_send ~self ~cmd:(selector "longLongValueForKey:withDefault:") ~typ:(id @-> llong @-> returning llong) x (LLong.of_int withDefault) |> LLong.to_int
let longValueForKey x ~withDefault self = msg_send ~self ~cmd:(selector "longValueForKey:withDefault:") ~typ:(id @-> llong @-> returning llong) x (LLong.of_int withDefault) |> LLong.to_int
let manufacturerName self = msg_send ~self ~cmd:(selector "manufacturerName") ~typ:(returning id)
let modelName self = msg_send ~self ~cmd:(selector "modelName") ~typ:(returning id)
let muDeepMutableCopy self = msg_send ~self ~cmd:(selector "muDeepMutableCopy") ~typ:(returning id)
let mutableCopyWithZone x self = msg_send ~self ~cmd:(selector "mutableCopyWithZone:") ~typ:((ptr void) @-> returning id) x
let mutableDeepAutoreleasedCopy self = msg_send ~self ~cmd:(selector "mutableDeepAutoreleasedCopy") ~typ:(returning id)
let noise self = msg_send ~self ~cmd:(selector "noise") ~typ:(returning llong) |> LLong.to_int
let numberValueForKey x ~defaultValue self = msg_send ~self ~cmd:(selector "numberValueForKey:defaultValue:") ~typ:(id @-> id @-> returning id) x defaultValue
let objectEnumerator self = msg_send ~self ~cmd:(selector "objectEnumerator") ~typ:(returning id)
let objectForKey x self = msg_send ~self ~cmd:(selector "objectForKey:") ~typ:(id @-> returning id) x
let objectForKeyedSubscript x self = msg_send ~self ~cmd:(selector "objectForKeyedSubscript:") ~typ:(id @-> returning id) x
let objectsForKeys x ~notFoundMarker self = msg_send ~self ~cmd:(selector "objectsForKeys:notFoundMarker:") ~typ:(id @-> id @-> returning id) x notFoundMarker
let operatorFriendlyNameList self = msg_send ~self ~cmd:(selector "operatorFriendlyNameList") ~typ:(returning id)
let plistData self = msg_send ~self ~cmd:(selector "plistData") ~typ:(returning id)
let primaryMAC self = msg_send ~self ~cmd:(selector "primaryMAC") ~typ:(returning id)
let providesInternetAccess self = msg_send ~self ~cmd:(selector "providesInternetAccess") ~typ:(returning bool)
let rectValueForKey x ~defaultValue self = msg_send_stret ~self ~cmd:(selector "rectValueForKey:defaultValue:") ~typ:(id @-> CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x defaultValue
let reduceWithNext x self = msg_send ~self ~cmd:(selector "reduceWithNext:") ~typ:(id @-> returning id) x
let replacementObjectForPortCoder x self = msg_send ~self ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning id) x
let roamingConsortiumList self = msg_send ~self ~cmd:(selector "roamingConsortiumList") ~typ:(returning id)
let shortVersionFromInfoDictionary self = msg_send ~self ~cmd:(selector "shortVersionFromInfoDictionary") ~typ:(returning id)
let sqliteBind x ~index self = msg_send ~self ~cmd:(selector "sqliteBind:index:") ~typ:((ptr void) @-> int @-> returning void) x index
let storedValueForKey x self = msg_send ~self ~cmd:(selector "storedValueForKey:") ~typ:(id @-> returning id) x
let stringForKey x self = msg_send ~self ~cmd:(selector "stringForKey:") ~typ:(id @-> returning id) x
let stringValueForKey x ~defaultValue self = msg_send ~self ~cmd:(selector "stringValueForKey:defaultValue:") ~typ:(id @-> id @-> returning id) x defaultValue
let supportedPHYModes self = msg_send ~self ~cmd:(selector "supportedPHYModes") ~typ:(returning int)
let supportedSecurityTypes self = msg_send ~self ~cmd:(selector "supportedSecurityTypes") ~typ:(returning ullong) |> ULLong.to_int
let supports2GHzNetworks self = msg_send ~self ~cmd:(selector "supports2GHzNetworks") ~typ:(returning bool)
let supports5GHzNetworks self = msg_send ~self ~cmd:(selector "supports5GHzNetworks") ~typ:(returning bool)
let supportsAirPlay self = msg_send ~self ~cmd:(selector "supportsAirPlay") ~typ:(returning bool)
let supportsAirPlay2 self = msg_send ~self ~cmd:(selector "supportsAirPlay2") ~typ:(returning bool)
let supportsAirPrint self = msg_send ~self ~cmd:(selector "supportsAirPrint") ~typ:(returning bool)
let supportsCarPlay self = msg_send ~self ~cmd:(selector "supportsCarPlay") ~typ:(returning bool)
let supportsHomeKit self = msg_send ~self ~cmd:(selector "supportsHomeKit") ~typ:(returning bool)
let supportsHomeKit2 self = msg_send ~self ~cmd:(selector "supportsHomeKit2") ~typ:(returning bool)
let supportsMFi self = msg_send ~self ~cmd:(selector "supportsMFi") ~typ:(returning bool)
let supportsMFiHardwareAuth self = msg_send ~self ~cmd:(selector "supportsMFiHardwareAuth") ~typ:(returning bool)
let supportsSecureWAC self = msg_send ~self ~cmd:(selector "supportsSecureWAC") ~typ:(returning bool)
let supportsSoftwareCertAuth self = msg_send ~self ~cmd:(selector "supportsSoftwareCertAuth") ~typ:(returning bool)
let supportsSoftwareTokenAuth self = msg_send ~self ~cmd:(selector "supportsSoftwareTokenAuth") ~typ:(returning bool)
let supportsWPS self = msg_send ~self ~cmd:(selector "supportsWPS") ~typ:(returning bool)
let supportsWoW self = msg_send ~self ~cmd:(selector "supportsWoW") ~typ:(returning bool)
let supportsiAPOverWiFi self = msg_send ~self ~cmd:(selector "supportsiAPOverWiFi") ~typ:(returning bool)
let takeStoredValue x ~forKey self = msg_send ~self ~cmd:(selector "takeStoredValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let takeValue x ~forKey self = msg_send ~self ~cmd:(selector "takeValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let taoDeepMutableCopy self = msg_send ~self ~cmd:(selector "taoDeepMutableCopy") ~typ:(returning id)
let taoDeepMutableRelease self = msg_send ~self ~cmd:(selector "taoDeepMutableRelease") ~typ:(returning void)
let unsignedIntValueForKey x ~defaultValue ~found self = msg_send ~self ~cmd:(selector "unsignedIntValueForKey:defaultValue:found:") ~typ:(id @-> uint @-> (ptr bool) @-> returning uint) x defaultValue found
let unsignedIntValueFromArrayWithKey x ~forIndex ~defaultValue ~found self = msg_send ~self ~cmd:(selector "unsignedIntValueFromArrayWithKey:forIndex:defaultValue:found:") ~typ:(id @-> ullong @-> uint @-> (ptr bool) @-> returning uint) x (ULLong.of_int forIndex) defaultValue found
let unsignedIntegerValueForKey x ~defaultValue self = msg_send ~self ~cmd:(selector "unsignedIntegerValueForKey:defaultValue:") ~typ:(id @-> ullong @-> returning ullong) x (ULLong.of_int defaultValue) |> ULLong.to_int
let unsignedIntegerValueForKey' x ~withDefault self = msg_send ~self ~cmd:(selector "unsignedIntegerValueForKey:withDefault:") ~typ:(id @-> ullong @-> returning ullong) x (ULLong.of_int withDefault) |> ULLong.to_int
let unsignedLongLongValueForKey x ~withDefault self = msg_send ~self ~cmd:(selector "unsignedLongLongValueForKey:withDefault:") ~typ:(id @-> ullong @-> returning ullong) x (ULLong.of_int withDefault) |> ULLong.to_int
let unsignedLongValueForKey x ~withDefault self = msg_send ~self ~cmd:(selector "unsignedLongValueForKey:withDefault:") ~typ:(id @-> ullong @-> returning ullong) x (ULLong.of_int withDefault) |> ULLong.to_int
let valueForKey x self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning id) x
let valueForKey' x ~expectedClass ~defaultValue self = msg_send ~self ~cmd:(selector "valueForKey:expectedClass:defaultValue:") ~typ:(id @-> _Class @-> id @-> returning id) x expectedClass defaultValue
let valueForKeyPath x self = msg_send ~self ~cmd:(selector "valueForKeyPath:") ~typ:(id @-> returning id) x
let venueGroup self = msg_send ~self ~cmd:(selector "venueGroup") ~typ:(returning llong) |> LLong.to_int
let venueType self = msg_send ~self ~cmd:(selector "venueType") ~typ:(returning llong) |> LLong.to_int
let writeToFile x ~atomically self = msg_send ~self ~cmd:(selector "writeToFile:atomically:") ~typ:(id @-> bool @-> returning bool) x atomically
let writeToURL x ~atomically self = msg_send ~self ~cmd:(selector "writeToURL:atomically:") ~typ:(id @-> bool @-> returning bool) x atomically
let writeToURL' x ~error self = msg_send ~self ~cmd:(selector "writeToURL:error:") ~typ:(id @-> (ptr id) @-> returning bool) x error