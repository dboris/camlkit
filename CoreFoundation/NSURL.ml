(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

(** Apple docs: {{:https://developer.apple.com/documentation/corefoundation/nsurl?language=objc}NSURL} *)

let self = get_class "NSURL"

let _CAMLType self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning id)
let _CKBladerunnerShareURLSlugBasedApplicationBundleID self = msg_send ~self ~cmd:(selector "CKBladerunnerShareURLSlugBasedApplicationBundleID") ~typ:(returning id)
let _CKPathAfterSlug self = msg_send ~self ~cmd:(selector "CKPathAfterSlug") ~typ:(returning id)
let _CKSanitizedPath self = msg_send ~self ~cmd:(selector "CKSanitizedPath") ~typ:(returning id)
let _CKShareURLSlugBasedApplicationName self = msg_send ~self ~cmd:(selector "CKShareURLSlugBasedApplicationName") ~typ:(returning id)
let _CKURLSlug self = msg_send ~self ~cmd:(selector "CKURLSlug") ~typ:(returning id)
let _CKURLThroughSlug self = msg_send ~self ~cmd:(selector "CKURLThroughSlug") ~typ:(returning id)
let _CKXPCSuitableString self = msg_send ~self ~cmd:(selector "CKXPCSuitableString") ~typ:(returning id)
let _URLByAppendingPathComponent x self = msg_send ~self ~cmd:(selector "URLByAppendingPathComponent:") ~typ:(id @-> returning id) x
let _URLByAppendingPathComponent1 x ~conformingToType self = msg_send ~self ~cmd:(selector "URLByAppendingPathComponent:conformingToType:") ~typ:(id @-> id @-> returning id) x conformingToType
let _URLByAppendingPathComponent2 x ~isDirectory self = msg_send ~self ~cmd:(selector "URLByAppendingPathComponent:isDirectory:") ~typ:(id @-> bool @-> returning id) x isDirectory
let _URLByAppendingPathExtension x self = msg_send ~self ~cmd:(selector "URLByAppendingPathExtension:") ~typ:(id @-> returning id) x
let _URLByAppendingPathExtensionForType x self = msg_send ~self ~cmd:(selector "URLByAppendingPathExtensionForType:") ~typ:(id @-> returning id) x
let _URLByDeletingLastPathComponent self = msg_send ~self ~cmd:(selector "URLByDeletingLastPathComponent") ~typ:(returning id)
let _URLByDeletingPathExtension self = msg_send ~self ~cmd:(selector "URLByDeletingPathExtension") ~typ:(returning id)
let _URLByDeletingQueryParameterWithKey x self = msg_send ~self ~cmd:(selector "URLByDeletingQueryParameterWithKey:") ~typ:(id @-> returning id) x
let _URLByResolvingSymlinksInPath self = msg_send ~self ~cmd:(selector "URLByResolvingSymlinksInPath") ~typ:(returning id)
let _URLBySettingQueryParameterValue x ~forKey self = msg_send ~self ~cmd:(selector "URLBySettingQueryParameterValue:forKey:") ~typ:(id @-> id @-> returning id) x forKey
let _URLByStandardizingPath self = msg_send ~self ~cmd:(selector "URLByStandardizingPath") ~typ:(returning id)
let _URLHandle x ~resourceDataDidBecomeAvailable self = msg_send ~self ~cmd:(selector "URLHandle:resourceDataDidBecomeAvailable:") ~typ:(id @-> id @-> returning void) x resourceDataDidBecomeAvailable
let _URLHandle' x ~resourceDidFailLoadingWithReason self = msg_send ~self ~cmd:(selector "URLHandle:resourceDidFailLoadingWithReason:") ~typ:(id @-> id @-> returning void) x resourceDidFailLoadingWithReason
let _URLHandleResourceDidBeginLoading x self = msg_send ~self ~cmd:(selector "URLHandleResourceDidBeginLoading:") ~typ:(id @-> returning void) x
let _URLHandleResourceDidCancelLoading x self = msg_send ~self ~cmd:(selector "URLHandleResourceDidCancelLoading:") ~typ:(id @-> returning void) x
let _URLHandleResourceDidFinishLoading x self = msg_send ~self ~cmd:(selector "URLHandleResourceDidFinishLoading:") ~typ:(id @-> returning void) x
let _URLHandleUsingCache x self = msg_send ~self ~cmd:(selector "URLHandleUsingCache:") ~typ:(bool @-> returning id) x
let absoluteString self = msg_send ~self ~cmd:(selector "absoluteString") ~typ:(returning id)
let absoluteURL self = msg_send ~self ~cmd:(selector "absoluteURL") ~typ:(returning id)
let addressBookUID self = msg_send ~self ~cmd:(selector "addressBookUID") ~typ:(returning id)
let answerRequestSourceIdentifier self = msg_send ~self ~cmd:(selector "answerRequestSourceIdentifier") ~typ:(returning id)
let attachSandboxExtensionToken x self = msg_send ~self ~cmd:(selector "attachSandboxExtensionToken:") ~typ:(id @-> returning void) x
let baseURL self = msg_send ~self ~cmd:(selector "baseURL") ~typ:(returning id)
let bookmarkDataWithOptions x ~includingResourceValuesForKeys ~relativeToURL ~error self = msg_send ~self ~cmd:(selector "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") ~typ:(ullong @-> id @-> id @-> (ptr id) @-> returning id) (ULLong.of_int x) includingResourceValuesForKeys relativeToURL error
let callService self = msg_send ~self ~cmd:(selector "callService") ~typ:(returning int)
let checkPromisedItemIsReachableAndReturnError x self = msg_send ~self ~cmd:(selector "checkPromisedItemIsReachableAndReturnError:") ~typ:((ptr id) @-> returning bool) x
let checkResourceIsReachableAndReturnError x self = msg_send ~self ~cmd:(selector "checkResourceIsReachableAndReturnError:") ~typ:((ptr id) @-> returning bool) x
let conformsToOverridePatternWithKey x self = msg_send ~self ~cmd:(selector "conformsToOverridePatternWithKey:") ~typ:(id @-> returning bool) x
let connection x ~didFailWithError self = msg_send ~self ~cmd:(selector "connection:didFailWithError:") ~typ:(id @-> id @-> returning void) x didFailWithError
let connection' x ~didReceiveData self = msg_send ~self ~cmd:(selector "connection:didReceiveData:") ~typ:(id @-> id @-> returning void) x didReceiveData
let connectionDidFinishLoading x self = msg_send ~self ~cmd:(selector "connectionDidFinishLoading:") ~typ:(id @-> returning void) x
let conversationGroupUUID self = msg_send ~self ~cmd:(selector "conversationGroupUUID") ~typ:(returning id)
let conversationLinkURLForJoinConversation self = msg_send ~self ~cmd:(selector "conversationLinkURLForJoinConversation") ~typ:(returning id)
let conversationLinkURLForOpenLinkURL self = msg_send ~self ~cmd:(selector "conversationLinkURLForOpenLinkURL") ~typ:(returning id)
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:((ptr void) @-> returning id) x
let dataRepresentation self = msg_send ~self ~cmd:(selector "dataRepresentation") ~typ:(returning id)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let dictionaryRepresentation self = msg_send ~self ~cmd:(selector "dictionaryRepresentation") ~typ:(returning id)
let encodeWithCAMLWriter x self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning void) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let faceTimeDestinationAccount self = msg_send ~self ~cmd:(selector "faceTimeDestinationAccount") ~typ:(returning id)
let filePathURL self = msg_send ~self ~cmd:(selector "filePathURL") ~typ:(returning id)
let fileReferenceURL self = msg_send ~self ~cmd:(selector "fileReferenceURL") ~typ:(returning id)
let fileSystemRepresentation self = msg_send ~self ~cmd:(selector "fileSystemRepresentation") ~typ:(returning string)
let fmfURL self = msg_send ~self ~cmd:(selector "fmfURL") ~typ:(returning id)
let fmipURL self = msg_send ~self ~cmd:(selector "fmipURL") ~typ:(returning id)
let forceAssist self = msg_send ~self ~cmd:(selector "forceAssist") ~typ:(returning bool)
let foregroundAppApplicationType self = msg_send ~self ~cmd:(selector "foregroundAppApplicationType") ~typ:(returning llong) |> LLong.to_int
let foregroundAppBundleIdentifier self = msg_send ~self ~cmd:(selector "foregroundAppBundleIdentifier") ~typ:(returning id)
let fragment self = msg_send ~self ~cmd:(selector "fragment") ~typ:(returning id)
let getFileSystemRepresentation x ~maxLength self = msg_send ~self ~cmd:(selector "getFileSystemRepresentation:maxLength:") ~typ:(string @-> ullong @-> returning bool) x (ULLong.of_int maxLength)
let getPromisedItemResourceValue x ~forKey ~error self = msg_send ~self ~cmd:(selector "getPromisedItemResourceValue:forKey:error:") ~typ:((ptr id) @-> id @-> (ptr id) @-> returning bool) x forKey error
let getResourceValue x ~forKey ~error self = msg_send ~self ~cmd:(selector "getResourceValue:forKey:error:") ~typ:((ptr id) @-> id @-> (ptr id) @-> returning bool) x forKey error
let hasDirectoryPath self = msg_send ~self ~cmd:(selector "hasDirectoryPath") ~typ:(returning bool)
let hasNoPromptOption self = msg_send ~self ~cmd:(selector "hasNoPromptOption") ~typ:(returning bool)
let hasTelephonyScheme self = msg_send ~self ~cmd:(selector "hasTelephonyScheme") ~typ:(returning bool)
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning ullong) |> ULLong.to_int
let host self = msg_send ~self ~cmd:(selector "host") ~typ:(returning id)
let iCloudEmailPrefsURL self = msg_send ~self ~cmd:(selector "iCloudEmailPrefsURL") ~typ:(returning id)
let iCloudSharingURL self = msg_send ~self ~cmd:(selector "iCloudSharingURL") ~typ:(returning id)
let iTunesStoreURL self = msg_send ~self ~cmd:(selector "iTunesStoreURL") ~typ:(returning id)
let iWorkApplicationName self = msg_send ~self ~cmd:(selector "iWorkApplicationName") ~typ:(returning id)
let iWorkDocumentName self = msg_send ~self ~cmd:(selector "iWorkDocumentName") ~typ:(returning id)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initAbsoluteURLWithDataRepresentation x ~relativeToURL self = msg_send ~self ~cmd:(selector "initAbsoluteURLWithDataRepresentation:relativeToURL:") ~typ:(id @-> id @-> returning id) x relativeToURL
let initByResolvingAliasFileAtURL x ~options ~error self = msg_send ~self ~cmd:(selector "initByResolvingAliasFileAtURL:options:error:") ~typ:(id @-> ullong @-> (ptr id) @-> returning id) x (ULLong.of_int options) error
let initByResolvingBookmarkData x ~options ~relativeToURL ~bookmarkDataIsStale ~error self = msg_send ~self ~cmd:(selector "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") ~typ:(id @-> ullong @-> id @-> (ptr bool) @-> (ptr id) @-> returning id) x (ULLong.of_int options) relativeToURL bookmarkDataIsStale error
let initFileURLWithFileSystemRepresentation x ~isDirectory ~relativeToURL self = msg_send ~self ~cmd:(selector "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:") ~typ:(string @-> bool @-> id @-> returning id) x isDirectory relativeToURL
let initFileURLWithPath x self = msg_send ~self ~cmd:(selector "initFileURLWithPath:") ~typ:(id @-> returning id) x
let initFileURLWithPath1 x ~isDirectory self = msg_send ~self ~cmd:(selector "initFileURLWithPath:isDirectory:") ~typ:(id @-> bool @-> returning id) x isDirectory
let initFileURLWithPath2 x ~relativeToURL self = msg_send ~self ~cmd:(selector "initFileURLWithPath:relativeToURL:") ~typ:(id @-> id @-> returning id) x relativeToURL
let initFileURLWithPath3 x ~isDirectory ~relativeToURL self = msg_send ~self ~cmd:(selector "initFileURLWithPath:isDirectory:relativeToURL:") ~typ:(id @-> bool @-> id @-> returning id) x isDirectory relativeToURL
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithDataRepresentation x ~relativeToURL self = msg_send ~self ~cmd:(selector "initWithDataRepresentation:relativeToURL:") ~typ:(id @-> id @-> returning id) x relativeToURL
let initWithPasteboardPropertyList x ~ofType self = msg_send ~self ~cmd:(selector "initWithPasteboardPropertyList:ofType:") ~typ:(id @-> id @-> returning id) x ofType
let initWithScheme x ~host ~path self = msg_send ~self ~cmd:(selector "initWithScheme:host:path:") ~typ:(id @-> id @-> id @-> returning id) x host path
let initWithString x self = msg_send ~self ~cmd:(selector "initWithString:") ~typ:(id @-> returning id) x
let initWithString' x ~relativeToURL self = msg_send ~self ~cmd:(selector "initWithString:relativeToURL:") ~typ:(id @-> id @-> returning id) x relativeToURL
let isAccountURL self = msg_send ~self ~cmd:(selector "isAccountURL") ~typ:(returning bool)
let isAnswerRequestURL self = msg_send ~self ~cmd:(selector "isAnswerRequestURL") ~typ:(returning bool)
let isDialCallURL self = msg_send ~self ~cmd:(selector "isDialCallURL") ~typ:(returning bool)
let isEmergencyCallURL self = msg_send ~self ~cmd:(selector "isEmergencyCallURL") ~typ:(returning bool)
let isEmergencyURL self = msg_send ~self ~cmd:(selector "isEmergencyURL") ~typ:(returning bool)
let isEqual x self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning bool) x
let isFaceTimeAppJoinConversationLinkURL self = msg_send ~self ~cmd:(selector "isFaceTimeAppJoinConversationLinkURL") ~typ:(returning bool)
let isFaceTimeAppViewLinkDetailsURL self = msg_send ~self ~cmd:(selector "isFaceTimeAppViewLinkDetailsURL") ~typ:(returning bool)
let isFaceTimeAudioPromptURL self = msg_send ~self ~cmd:(selector "isFaceTimeAudioPromptURL") ~typ:(returning bool)
let isFaceTimeAudioURL self = msg_send ~self ~cmd:(selector "isFaceTimeAudioURL") ~typ:(returning bool)
let isFaceTimeMultiwayURL self = msg_send ~self ~cmd:(selector "isFaceTimeMultiwayURL") ~typ:(returning bool)
let isFaceTimeOpenLinkURL self = msg_send ~self ~cmd:(selector "isFaceTimeOpenLinkURL") ~typ:(returning bool)
let isFaceTimePromptURL self = msg_send ~self ~cmd:(selector "isFaceTimePromptURL") ~typ:(returning bool)
let isFaceTimeURL self = msg_send ~self ~cmd:(selector "isFaceTimeURL") ~typ:(returning bool)
let isFileReferenceURL self = msg_send ~self ~cmd:(selector "isFileReferenceURL") ~typ:(returning bool)
let isFileURL self = msg_send ~self ~cmd:(selector "isFileURL") ~typ:(returning bool)
let isHTTPOrHTTPSURL self = msg_send ~self ~cmd:(selector "isHTTPOrHTTPSURL") ~typ:(returning bool)
let isInContainer x self = msg_send ~self ~cmd:(selector "isInContainer:") ~typ:(id @-> returning bool) x
let isInternalUIKitURL self = msg_send ~self ~cmd:(selector "isInternalUIKitURL") ~typ:(returning bool)
let isJavaScriptURL self = msg_send ~self ~cmd:(selector "isJavaScriptURL") ~typ:(returning bool)
let isKindOfClass x self = msg_send ~self ~cmd:(selector "isKindOfClass:") ~typ:(_Class @-> returning bool) x
let isLaunchForIncomingCallURL self = msg_send ~self ~cmd:(selector "isLaunchForIncomingCallURL") ~typ:(returning bool)
let isLaunchForOutgoingConversationURL self = msg_send ~self ~cmd:(selector "isLaunchForOutgoingConversationURL") ~typ:(returning bool)
let isMemberOfClass x self = msg_send ~self ~cmd:(selector "isMemberOfClass:") ~typ:(_Class @-> returning bool) x
let isPinExchangeURL self = msg_send ~self ~cmd:(selector "isPinExchangeURL") ~typ:(returning bool)
let isPreviewItemVirtualNodeURL self = msg_send ~self ~cmd:(selector "isPreviewItemVirtualNodeURL") ~typ:(returning bool)
let isShowAddParticipantURL self = msg_send ~self ~cmd:(selector "isShowAddParticipantURL") ~typ:(returning bool)
let isShowCarPlayInCallUIURL self = msg_send ~self ~cmd:(selector "isShowCarPlayInCallUIURL") ~typ:(returning bool)
let isShowInCallUIURL self = msg_send ~self ~cmd:(selector "isShowInCallUIURL") ~typ:(returning bool)
let isShowScreenSharingURL self = msg_send ~self ~cmd:(selector "isShowScreenSharingURL") ~typ:(returning bool)
let isShowSystemCallControlsURL self = msg_send ~self ~cmd:(selector "isShowSystemCallControlsURL") ~typ:(returning bool)
let isSpringboardHandledURL self = msg_send ~self ~cmd:(selector "isSpringboardHandledURL") ~typ:(returning bool)
let isSystemCallControlsURL self = msg_send ~self ~cmd:(selector "isSystemCallControlsURL") ~typ:(returning bool)
let isTelephonyPromptURL self = msg_send ~self ~cmd:(selector "isTelephonyPromptURL") ~typ:(returning bool)
let isTelephonyURL self = msg_send ~self ~cmd:(selector "isTelephonyURL") ~typ:(returning bool)
let isUpdateForegroundAppURL self = msg_send ~self ~cmd:(selector "isUpdateForegroundAppURL") ~typ:(returning bool)
let isVoicemailURL self = msg_send ~self ~cmd:(selector "isVoicemailURL") ~typ:(returning bool)
let isWebSafeTelephoneURL self = msg_send ~self ~cmd:(selector "isWebSafeTelephoneURL") ~typ:(returning bool)
let isWebcalURL self = msg_send ~self ~cmd:(selector "isWebcalURL") ~typ:(returning bool)
let isiWorkURL self = msg_send ~self ~cmd:(selector "isiWorkURL") ~typ:(returning bool)
let jsonData self = msg_send ~self ~cmd:(selector "jsonData") ~typ:(returning id)
let keynoteLiveURL self = msg_send ~self ~cmd:(selector "keynoteLiveURL") ~typ:(returning id)
let lastPathComponent self = msg_send ~self ~cmd:(selector "lastPathComponent") ~typ:(returning id)
let loadDataWithTypeIdentifier x ~forItemProviderCompletionHandler self = msg_send ~self ~cmd:(selector "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:") ~typ:(id @-> (ptr void) @-> returning id) x forItemProviderCompletionHandler
let loadResourceDataNotifyingClient x ~usingCache self = msg_send ~self ~cmd:(selector "loadResourceDataNotifyingClient:usingCache:") ~typ:(id @-> bool @-> returning void) x usingCache
let mapsURL self = msg_send ~self ~cmd:(selector "mapsURL") ~typ:(returning id)
let mpUniversalTrackIDBaseID self = msg_send ~self ~cmd:(selector "mpUniversalTrackIDBaseID") ~typ:(returning id)
let mpUniversalTrackIDType self = msg_send ~self ~cmd:(selector "mpUniversalTrackIDType") ~typ:(returning llong) |> LLong.to_int
let originatingUIIdentifier self = msg_send ~self ~cmd:(selector "originatingUIIdentifier") ~typ:(returning id)
let parameterString self = msg_send ~self ~cmd:(selector "parameterString") ~typ:(returning id)
let password self = msg_send ~self ~cmd:(selector "password") ~typ:(returning id)
let pasteboardPropertyListForType x self = msg_send ~self ~cmd:(selector "pasteboardPropertyListForType:") ~typ:(id @-> returning id) x
let path self = msg_send ~self ~cmd:(selector "path") ~typ:(returning id)
let pathComponents self = msg_send ~self ~cmd:(selector "pathComponents") ~typ:(returning id)
let pathExtension self = msg_send ~self ~cmd:(selector "pathExtension") ~typ:(returning id)
let phobosURL self = msg_send ~self ~cmd:(selector "phobosURL") ~typ:(returning id)
let phoneNumber self = msg_send ~self ~cmd:(selector "phoneNumber") ~typ:(returning id)
let photosURL self = msg_send ~self ~cmd:(selector "photosURL") ~typ:(returning id)
let pinExchangeAction self = msg_send ~self ~cmd:(selector "pinExchangeAction") ~typ:(returning int)
let pinExchangeAlias self = msg_send ~self ~cmd:(selector "pinExchangeAlias") ~typ:(returning id)
let pinExchangeCode self = msg_send ~self ~cmd:(selector "pinExchangeCode") ~typ:(returning id)
let pinExchangeServiceType self = msg_send ~self ~cmd:(selector "pinExchangeServiceType") ~typ:(returning int)
let port self = msg_send ~self ~cmd:(selector "port") ~typ:(returning id)
let previewItemURL self = msg_send ~self ~cmd:(selector "previewItemURL") ~typ:(returning id)
let promisedItemResourceValuesForKeys x ~error self = msg_send ~self ~cmd:(selector "promisedItemResourceValuesForKeys:error:") ~typ:(id @-> (ptr id) @-> returning id) x error
let propertyForKey x self = msg_send ~self ~cmd:(selector "propertyForKey:") ~typ:(id @-> returning id) x
let pseudonymForLinkDetailsView self = msg_send ~self ~cmd:(selector "pseudonymForLinkDetailsView") ~typ:(returning id)
let query self = msg_send ~self ~cmd:(selector "query") ~typ:(returning id)
let queryParameters self = msg_send ~self ~cmd:(selector "queryParameters") ~typ:(returning id)
let radarWebURL self = msg_send ~self ~cmd:(selector "radarWebURL") ~typ:(returning id)
let relativePath self = msg_send ~self ~cmd:(selector "relativePath") ~typ:(returning id)
let relativeString self = msg_send ~self ~cmd:(selector "relativeString") ~typ:(returning id)
let release self = msg_send ~self ~cmd:(selector "release") ~typ:(returning void)
let removeAllCachedResourceValues self = msg_send ~self ~cmd:(selector "removeAllCachedResourceValues") ~typ:(returning void)
let removeCachedResourceValueForKey x self = msg_send ~self ~cmd:(selector "removeCachedResourceValueForKey:") ~typ:(id @-> returning void) x
let removeItemAndReturnError x self = msg_send ~self ~cmd:(selector "removeItemAndReturnError:") ~typ:((ptr id) @-> returning bool) x
let resourceDataUsingCache x self = msg_send ~self ~cmd:(selector "resourceDataUsingCache:") ~typ:(bool @-> returning id) x
let resourceSpecifier self = msg_send ~self ~cmd:(selector "resourceSpecifier") ~typ:(returning id)
let resourceValuesForKeys x ~error self = msg_send ~self ~cmd:(selector "resourceValuesForKeys:error:") ~typ:(id @-> (ptr id) @-> returning id) x error
let retain self = msg_send ~self ~cmd:(selector "retain") ~typ:(returning id)
let retainCount self = msg_send ~self ~cmd:(selector "retainCount") ~typ:(returning ullong) |> ULLong.to_int
let sandboxExtensionTokenForAnyProcess self = msg_send ~self ~cmd:(selector "sandboxExtensionTokenForAnyProcess") ~typ:(returning id)
let sandboxExtensionTokenForProcess x self = msg_send ~self ~cmd:(selector "sandboxExtensionTokenForProcess:") ~typ:(void @-> returning id) x
let sanitizedCopy self = msg_send ~self ~cmd:(selector "sanitizedCopy") ~typ:(returning id)
let sanitizedCopyWithZone x self = msg_send ~self ~cmd:(selector "sanitizedCopyWithZone:") ~typ:((ptr void) @-> returning id) x
let sanitizedCopyWithZone' x ~allowedSchemes self = msg_send ~self ~cmd:(selector "sanitizedCopyWithZone:allowedSchemes:") ~typ:((ptr void) @-> id @-> returning id) x allowedSchemes
let scheme self = msg_send ~self ~cmd:(selector "scheme") ~typ:(returning id)
let searchResultDomain self = msg_send ~self ~cmd:(selector "searchResultDomain") ~typ:(returning id)
let searchResultIdentifier self = msg_send ~self ~cmd:(selector "searchResultIdentifier") ~typ:(returning id)
let setProperty x ~forKey self = msg_send ~self ~cmd:(selector "setProperty:forKey:") ~typ:(id @-> id @-> returning bool) x forKey
let setResourceData x self = msg_send ~self ~cmd:(selector "setResourceData:") ~typ:(id @-> returning bool) x
let setResourceValue x ~forKey ~error self = msg_send ~self ~cmd:(selector "setResourceValue:forKey:error:") ~typ:(id @-> id @-> (ptr id) @-> returning bool) x forKey error
let setResourceValues x ~error self = msg_send ~self ~cmd:(selector "setResourceValues:error:") ~typ:(id @-> (ptr id) @-> returning bool) x error
let setTemporaryResourceValue x ~forKey self = msg_send ~self ~cmd:(selector "setTemporaryResourceValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let sqliteBind x ~index self = msg_send ~self ~cmd:(selector "sqliteBind:index:") ~typ:((ptr void) @-> int @-> returning void) x index
let standardizedURL self = msg_send ~self ~cmd:(selector "standardizedURL") ~typ:(returning id)
let startAccessingSecurityScopedResource self = msg_send ~self ~cmd:(selector "startAccessingSecurityScopedResource") ~typ:(returning bool)
let stopAccessingSecurityScopedResource self = msg_send ~self ~cmd:(selector "stopAccessingSecurityScopedResource") ~typ:(returning void)
let suppressAssist self = msg_send ~self ~cmd:(selector "suppressAssist") ~typ:(returning bool)
let telephonyParameterDictionary self = msg_send ~self ~cmd:(selector "telephonyParameterDictionary") ~typ:(returning id)
let tuQueryParameters self = msg_send ~self ~cmd:(selector "tuQueryParameters") ~typ:(returning id)
let user self = msg_send ~self ~cmd:(selector "user") ~typ:(returning id)
let wasAlreadyAssisted self = msg_send ~self ~cmd:(selector "wasAlreadyAssisted") ~typ:(returning bool)
let webSafeTelephoneURL self = msg_send ~self ~cmd:(selector "webSafeTelephoneURL") ~typ:(returning id)
let writableTypeIdentifiersForItemProvider self = msg_send ~self ~cmd:(selector "writableTypeIdentifiersForItemProvider") ~typ:(returning id)
let writableTypesForPasteboard x self = msg_send ~self ~cmd:(selector "writableTypesForPasteboard:") ~typ:(id @-> returning id) x
let writeToPasteboard x self = msg_send ~self ~cmd:(selector "writeToPasteboard:") ~typ:(id @-> returning void) x
let writingOptionsForType x ~pasteboard self = msg_send ~self ~cmd:(selector "writingOptionsForType:pasteboard:") ~typ:(id @-> id @-> returning ullong) x pasteboard |> ULLong.to_int