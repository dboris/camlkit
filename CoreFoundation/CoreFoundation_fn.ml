(* auto-generated, do not modify *)

open Runtime
open Objc

let _CFAbsoluteTimeAddGregorianUnits = Foreign.foreign "CFAbsoluteTimeAddGregorianUnits" (double @-> (ptr CFTimeZone.t) @-> CFGregorianUnits.t @-> returning double)
let _CFAbsoluteTimeGetCurrent = Foreign.foreign "CFAbsoluteTimeGetCurrent" (void @-> returning double)
let _CFAbsoluteTimeGetDayOfWeek = Foreign.foreign "CFAbsoluteTimeGetDayOfWeek" (double @-> (ptr CFTimeZone.t) @-> returning int)
let _CFAbsoluteTimeGetDayOfYear = Foreign.foreign "CFAbsoluteTimeGetDayOfYear" (double @-> (ptr CFTimeZone.t) @-> returning int)
let _CFAbsoluteTimeGetDifferenceAsGregorianUnits = Foreign.foreign "CFAbsoluteTimeGetDifferenceAsGregorianUnits" (double @-> double @-> (ptr CFTimeZone.t) @-> ullong @-> returning CFGregorianUnits.t)
let _CFAbsoluteTimeGetGregorianDate = Foreign.foreign "CFAbsoluteTimeGetGregorianDate" (double @-> (ptr CFTimeZone.t) @-> returning CFGregorianDate.t)
let _CFAbsoluteTimeGetWeekOfYear = Foreign.foreign "CFAbsoluteTimeGetWeekOfYear" (double @-> (ptr CFTimeZone.t) @-> returning int)
let _CFAllocatorAllocate = Foreign.foreign "CFAllocatorAllocate" ((ptr CFAllocator.t) @-> llong @-> ullong @-> returning (ptr void))
let _CFAllocatorCreate = Foreign.foreign "CFAllocatorCreate" ((ptr CFAllocator.t) @-> (ptr CFAllocatorContext.t) @-> returning (ptr CFAllocator.t))
let _CFAllocatorDeallocate = Foreign.foreign "CFAllocatorDeallocate" ((ptr CFAllocator.t) @-> (ptr void) @-> returning void)
let _CFAllocatorGetContext = Foreign.foreign "CFAllocatorGetContext" ((ptr CFAllocator.t) @-> (ptr CFAllocatorContext.t) @-> returning void)
let _CFAllocatorGetDefault = Foreign.foreign "CFAllocatorGetDefault" (void @-> returning (ptr CFAllocator.t))
let _CFAllocatorGetPreferredSizeForSize = Foreign.foreign "CFAllocatorGetPreferredSizeForSize" ((ptr CFAllocator.t) @-> llong @-> ullong @-> returning llong)
let _CFAllocatorGetTypeID = Foreign.foreign "CFAllocatorGetTypeID" (void @-> returning ullong)
let _CFAllocatorReallocate = Foreign.foreign "CFAllocatorReallocate" ((ptr CFAllocator.t) @-> (ptr void) @-> llong @-> ullong @-> returning (ptr void))
let _CFAllocatorSetDefault = Foreign.foreign "CFAllocatorSetDefault" ((ptr CFAllocator.t) @-> returning void)
let _CFArrayAppendArray = Foreign.foreign "CFArrayAppendArray" ((ptr CFArray.t) @-> (ptr CFArray.t) @-> CFRange.t @-> returning void)
let _CFArrayAppendValue = Foreign.foreign "CFArrayAppendValue" ((ptr CFArray.t) @-> (ptr void) @-> returning void)
let _CFArrayApplyFunction = Foreign.foreign "CFArrayApplyFunction" ((ptr CFArray.t) @-> CFRange.t @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFArrayBSearchValues = Foreign.foreign "CFArrayBSearchValues" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> (ptr void) @-> returning llong) @-> (ptr void) @-> returning llong)
let _CFArrayContainsValue = Foreign.foreign "CFArrayContainsValue" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> returning bool)
let _CFArrayCreate = Foreign.foreign "CFArrayCreate" ((ptr CFAllocator.t) @-> (ptr (ptr void)) @-> llong @-> (ptr CFArrayCallBacks.t) @-> returning (ptr CFArray.t))
let _CFArrayCreateCopy = Foreign.foreign "CFArrayCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CFArrayCreateMutable = Foreign.foreign "CFArrayCreateMutable" ((ptr CFAllocator.t) @-> llong @-> (ptr CFArrayCallBacks.t) @-> returning (ptr CFArray.t))
let _CFArrayCreateMutableCopy = Foreign.foreign "CFArrayCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CFArrayExchangeValuesAtIndices = Foreign.foreign "CFArrayExchangeValuesAtIndices" ((ptr CFArray.t) @-> llong @-> llong @-> returning void)
let _CFArrayGetCount = Foreign.foreign "CFArrayGetCount" ((ptr CFArray.t) @-> returning llong)
let _CFArrayGetCountOfValue = Foreign.foreign "CFArrayGetCountOfValue" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> returning llong)
let _CFArrayGetFirstIndexOfValue = Foreign.foreign "CFArrayGetFirstIndexOfValue" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> returning llong)
let _CFArrayGetLastIndexOfValue = Foreign.foreign "CFArrayGetLastIndexOfValue" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> returning llong)
let _CFArrayGetTypeID = Foreign.foreign "CFArrayGetTypeID" (void @-> returning ullong)
let _CFArrayGetValueAtIndex = Foreign.foreign "CFArrayGetValueAtIndex" ((ptr CFArray.t) @-> llong @-> returning (ptr void))
let _CFArrayGetValues = Foreign.foreign "CFArrayGetValues" ((ptr CFArray.t) @-> CFRange.t @-> (ptr (ptr void)) @-> returning void)
let _CFArrayInsertValueAtIndex = Foreign.foreign "CFArrayInsertValueAtIndex" ((ptr CFArray.t) @-> llong @-> (ptr void) @-> returning void)
let _CFArrayRemoveAllValues = Foreign.foreign "CFArrayRemoveAllValues" ((ptr CFArray.t) @-> returning void)
let _CFArrayRemoveValueAtIndex = Foreign.foreign "CFArrayRemoveValueAtIndex" ((ptr CFArray.t) @-> llong @-> returning void)
let _CFArrayReplaceValues = Foreign.foreign "CFArrayReplaceValues" ((ptr CFArray.t) @-> CFRange.t @-> (ptr (ptr void)) @-> llong @-> returning void)
let _CFArraySetValueAtIndex = Foreign.foreign "CFArraySetValueAtIndex" ((ptr CFArray.t) @-> llong @-> (ptr void) @-> returning void)
let _CFArraySortValues = Foreign.foreign "CFArraySortValues" ((ptr CFArray.t) @-> CFRange.t @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> (ptr void) @-> returning llong) @-> (ptr void) @-> returning void)
let _CFAttributedStringBeginEditing = Foreign.foreign "CFAttributedStringBeginEditing" ((ptr CFAttributedString.t) @-> returning void)
let _CFAttributedStringCreate = Foreign.foreign "CFAttributedStringCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringCreateCopy = Foreign.foreign "CFAttributedStringCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFAttributedString.t) @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringCreateMutable = Foreign.foreign "CFAttributedStringCreateMutable" ((ptr CFAllocator.t) @-> llong @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringCreateMutableCopy = Foreign.foreign "CFAttributedStringCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFAttributedString.t) @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringCreateWithSubstring = Foreign.foreign "CFAttributedStringCreateWithSubstring" ((ptr CFAllocator.t) @-> (ptr CFAttributedString.t) @-> CFRange.t @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringEndEditing = Foreign.foreign "CFAttributedStringEndEditing" ((ptr CFAttributedString.t) @-> returning void)
let _CFAttributedStringGetAttribute = Foreign.foreign "CFAttributedStringGetAttribute" ((ptr CFAttributedString.t) @-> llong @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> returning id)
let _CFAttributedStringGetAttributeAndLongestEffectiveRange = Foreign.foreign "CFAttributedStringGetAttributeAndLongestEffectiveRange" ((ptr CFAttributedString.t) @-> llong @-> (ptr CFString.t) @-> CFRange.t @-> (ptr CFRange.t) @-> returning id)
let _CFAttributedStringGetAttributes = Foreign.foreign "CFAttributedStringGetAttributes" ((ptr CFAttributedString.t) @-> llong @-> (ptr CFRange.t) @-> returning (ptr CFDictionary.t))
let _CFAttributedStringGetAttributesAndLongestEffectiveRange = Foreign.foreign "CFAttributedStringGetAttributesAndLongestEffectiveRange" ((ptr CFAttributedString.t) @-> llong @-> CFRange.t @-> (ptr CFRange.t) @-> returning (ptr CFDictionary.t))
let _CFAttributedStringGetLength = Foreign.foreign "CFAttributedStringGetLength" ((ptr CFAttributedString.t) @-> returning llong)
let _CFAttributedStringGetMutableString = Foreign.foreign "CFAttributedStringGetMutableString" ((ptr CFAttributedString.t) @-> returning (ptr CFString.t))
let _CFAttributedStringGetString = Foreign.foreign "CFAttributedStringGetString" ((ptr CFAttributedString.t) @-> returning (ptr CFString.t))
let _CFAttributedStringGetTypeID = Foreign.foreign "CFAttributedStringGetTypeID" (void @-> returning ullong)
let _CFAttributedStringRemoveAttribute = Foreign.foreign "CFAttributedStringRemoveAttribute" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFString.t) @-> returning void)
let _CFAttributedStringReplaceAttributedString = Foreign.foreign "CFAttributedStringReplaceAttributedString" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFAttributedString.t) @-> returning void)
let _CFAttributedStringReplaceString = Foreign.foreign "CFAttributedStringReplaceString" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFString.t) @-> returning void)
let _CFAttributedStringSetAttribute = Foreign.foreign "CFAttributedStringSetAttribute" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFString.t) @-> id @-> returning void)
let _CFAttributedStringSetAttributes = Foreign.foreign "CFAttributedStringSetAttributes" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFDictionary.t) @-> bool @-> returning void)
let _CFAutorelease = Foreign.foreign "CFAutorelease" (id @-> returning id)
let _CFBagAddValue = Foreign.foreign "CFBagAddValue" ((ptr CFBag.t) @-> (ptr void) @-> returning void)
let _CFBagApplyFunction = Foreign.foreign "CFBagApplyFunction" ((ptr CFBag.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFBagContainsValue = Foreign.foreign "CFBagContainsValue" ((ptr CFBag.t) @-> (ptr void) @-> returning bool)
let _CFBagCreate = Foreign.foreign "CFBagCreate" ((ptr CFAllocator.t) @-> (ptr (ptr void)) @-> llong @-> (ptr CFBagCallBacks.t) @-> returning (ptr CFBag.t))
let _CFBagCreateCopy = Foreign.foreign "CFBagCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFBag.t) @-> returning (ptr CFBag.t))
let _CFBagCreateMutable = Foreign.foreign "CFBagCreateMutable" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBagCallBacks.t) @-> returning (ptr CFBag.t))
let _CFBagCreateMutableCopy = Foreign.foreign "CFBagCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBag.t) @-> returning (ptr CFBag.t))
let _CFBagGetCount = Foreign.foreign "CFBagGetCount" ((ptr CFBag.t) @-> returning llong)
let _CFBagGetCountOfValue = Foreign.foreign "CFBagGetCountOfValue" ((ptr CFBag.t) @-> (ptr void) @-> returning llong)
let _CFBagGetTypeID = Foreign.foreign "CFBagGetTypeID" (void @-> returning ullong)
let _CFBagGetValue = Foreign.foreign "CFBagGetValue" ((ptr CFBag.t) @-> (ptr void) @-> returning (ptr void))
let _CFBagGetValueIfPresent = Foreign.foreign "CFBagGetValueIfPresent" ((ptr CFBag.t) @-> (ptr void) @-> (ptr (ptr void)) @-> returning bool)
let _CFBagGetValues = Foreign.foreign "CFBagGetValues" ((ptr CFBag.t) @-> (ptr (ptr void)) @-> returning void)
let _CFBagRemoveAllValues = Foreign.foreign "CFBagRemoveAllValues" ((ptr CFBag.t) @-> returning void)
let _CFBagRemoveValue = Foreign.foreign "CFBagRemoveValue" ((ptr CFBag.t) @-> (ptr void) @-> returning void)
let _CFBagReplaceValue = Foreign.foreign "CFBagReplaceValue" ((ptr CFBag.t) @-> (ptr void) @-> returning void)
let _CFBagSetValue = Foreign.foreign "CFBagSetValue" ((ptr CFBag.t) @-> (ptr void) @-> returning void)
let _CFBinaryHeapAddValue = Foreign.foreign "CFBinaryHeapAddValue" ((ptr CFBinaryHeap.t) @-> (ptr void) @-> returning void)
let _CFBinaryHeapApplyFunction = Foreign.foreign "CFBinaryHeapApplyFunction" ((ptr CFBinaryHeap.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFBinaryHeapContainsValue = Foreign.foreign "CFBinaryHeapContainsValue" ((ptr CFBinaryHeap.t) @-> (ptr void) @-> returning bool)
let _CFBinaryHeapCreate = Foreign.foreign "CFBinaryHeapCreate" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBinaryHeapCallBacks.t) @-> (ptr CFBinaryHeapCompareContext.t) @-> returning (ptr CFBinaryHeap.t))
let _CFBinaryHeapCreateCopy = Foreign.foreign "CFBinaryHeapCreateCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBinaryHeap.t) @-> returning (ptr CFBinaryHeap.t))
let _CFBinaryHeapGetCount = Foreign.foreign "CFBinaryHeapGetCount" ((ptr CFBinaryHeap.t) @-> returning llong)
let _CFBinaryHeapGetCountOfValue = Foreign.foreign "CFBinaryHeapGetCountOfValue" ((ptr CFBinaryHeap.t) @-> (ptr void) @-> returning llong)
let _CFBinaryHeapGetMinimum = Foreign.foreign "CFBinaryHeapGetMinimum" ((ptr CFBinaryHeap.t) @-> returning (ptr void))
let _CFBinaryHeapGetMinimumIfPresent = Foreign.foreign "CFBinaryHeapGetMinimumIfPresent" ((ptr CFBinaryHeap.t) @-> (ptr (ptr void)) @-> returning bool)
let _CFBinaryHeapGetTypeID = Foreign.foreign "CFBinaryHeapGetTypeID" (void @-> returning ullong)
let _CFBinaryHeapGetValues = Foreign.foreign "CFBinaryHeapGetValues" ((ptr CFBinaryHeap.t) @-> (ptr (ptr void)) @-> returning void)
let _CFBinaryHeapRemoveAllValues = Foreign.foreign "CFBinaryHeapRemoveAllValues" ((ptr CFBinaryHeap.t) @-> returning void)
let _CFBinaryHeapRemoveMinimumValue = Foreign.foreign "CFBinaryHeapRemoveMinimumValue" ((ptr CFBinaryHeap.t) @-> returning void)
let _CFBitVectorContainsBit = Foreign.foreign "CFBitVectorContainsBit" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning bool)
let _CFBitVectorCreate = Foreign.foreign "CFBitVectorCreate" ((ptr CFAllocator.t) @-> string @-> llong @-> returning (ptr CFBitVector.t))
let _CFBitVectorCreateCopy = Foreign.foreign "CFBitVectorCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFBitVector.t) @-> returning (ptr CFBitVector.t))
let _CFBitVectorCreateMutable = Foreign.foreign "CFBitVectorCreateMutable" ((ptr CFAllocator.t) @-> llong @-> returning (ptr CFBitVector.t))
let _CFBitVectorCreateMutableCopy = Foreign.foreign "CFBitVectorCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBitVector.t) @-> returning (ptr CFBitVector.t))
let _CFBitVectorFlipBitAtIndex = Foreign.foreign "CFBitVectorFlipBitAtIndex" ((ptr CFBitVector.t) @-> llong @-> returning void)
let _CFBitVectorFlipBits = Foreign.foreign "CFBitVectorFlipBits" ((ptr CFBitVector.t) @-> CFRange.t @-> returning void)
let _CFBitVectorGetBitAtIndex = Foreign.foreign "CFBitVectorGetBitAtIndex" ((ptr CFBitVector.t) @-> llong @-> returning uint)
let _CFBitVectorGetBits = Foreign.foreign "CFBitVectorGetBits" ((ptr CFBitVector.t) @-> CFRange.t @-> string @-> returning void)
let _CFBitVectorGetCount = Foreign.foreign "CFBitVectorGetCount" ((ptr CFBitVector.t) @-> returning llong)
let _CFBitVectorGetCountOfBit = Foreign.foreign "CFBitVectorGetCountOfBit" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning llong)
let _CFBitVectorGetFirstIndexOfBit = Foreign.foreign "CFBitVectorGetFirstIndexOfBit" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning llong)
let _CFBitVectorGetLastIndexOfBit = Foreign.foreign "CFBitVectorGetLastIndexOfBit" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning llong)
let _CFBitVectorGetTypeID = Foreign.foreign "CFBitVectorGetTypeID" (void @-> returning ullong)
let _CFBitVectorSetAllBits = Foreign.foreign "CFBitVectorSetAllBits" ((ptr CFBitVector.t) @-> uint @-> returning void)
let _CFBitVectorSetBitAtIndex = Foreign.foreign "CFBitVectorSetBitAtIndex" ((ptr CFBitVector.t) @-> llong @-> uint @-> returning void)
let _CFBitVectorSetBits = Foreign.foreign "CFBitVectorSetBits" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning void)
let _CFBitVectorSetCount = Foreign.foreign "CFBitVectorSetCount" ((ptr CFBitVector.t) @-> llong @-> returning void)
let _CFBooleanGetTypeID = Foreign.foreign "CFBooleanGetTypeID" (void @-> returning ullong)
let _CFBooleanGetValue = Foreign.foreign "CFBooleanGetValue" ((ptr CFBoolean.t) @-> returning bool)
let _CFBundleCloseBundleResourceMap = Foreign.foreign "CFBundleCloseBundleResourceMap" ((ptr CFBundle.t) @-> int @-> returning void)
let _CFBundleCopyAuxiliaryExecutableURL = Foreign.foreign "CFBundleCopyAuxiliaryExecutableURL" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyBuiltInPlugInsURL = Foreign.foreign "CFBundleCopyBuiltInPlugInsURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyBundleLocalizations = Foreign.foreign "CFBundleCopyBundleLocalizations" ((ptr CFBundle.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyBundleURL = Foreign.foreign "CFBundleCopyBundleURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyExecutableArchitectures = Foreign.foreign "CFBundleCopyExecutableArchitectures" ((ptr CFBundle.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyExecutableArchitecturesForURL = Foreign.foreign "CFBundleCopyExecutableArchitecturesForURL" ((ptr CFURL.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyExecutableURL = Foreign.foreign "CFBundleCopyExecutableURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyInfoDictionaryForURL = Foreign.foreign "CFBundleCopyInfoDictionaryForURL" ((ptr CFURL.t) @-> returning (ptr CFDictionary.t))
let _CFBundleCopyInfoDictionaryInDirectory = Foreign.foreign "CFBundleCopyInfoDictionaryInDirectory" ((ptr CFURL.t) @-> returning (ptr CFDictionary.t))
let _CFBundleCopyLocalizationsForPreferences = Foreign.foreign "CFBundleCopyLocalizationsForPreferences" ((ptr CFArray.t) @-> (ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyLocalizationsForURL = Foreign.foreign "CFBundleCopyLocalizationsForURL" ((ptr CFURL.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyLocalizedString = Foreign.foreign "CFBundleCopyLocalizedString" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFBundleCopyPreferredLocalizationsFromArray = Foreign.foreign "CFBundleCopyPreferredLocalizationsFromArray" ((ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyPrivateFrameworksURL = Foreign.foreign "CFBundleCopyPrivateFrameworksURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyResourceURL = Foreign.foreign "CFBundleCopyResourceURL" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyResourceURLForLocalization = Foreign.foreign "CFBundleCopyResourceURLForLocalization" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyResourceURLInDirectory = Foreign.foreign "CFBundleCopyResourceURLInDirectory" ((ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyResourceURLsOfType = Foreign.foreign "CFBundleCopyResourceURLsOfType" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyResourceURLsOfTypeForLocalization = Foreign.foreign "CFBundleCopyResourceURLsOfTypeForLocalization" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyResourceURLsOfTypeInDirectory = Foreign.foreign "CFBundleCopyResourceURLsOfTypeInDirectory" ((ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyResourcesDirectoryURL = Foreign.foreign "CFBundleCopyResourcesDirectoryURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopySharedFrameworksURL = Foreign.foreign "CFBundleCopySharedFrameworksURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopySharedSupportURL = Foreign.foreign "CFBundleCopySharedSupportURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopySupportFilesDirectoryURL = Foreign.foreign "CFBundleCopySupportFilesDirectoryURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCreate = Foreign.foreign "CFBundleCreate" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFBundle.t))
let _CFBundleCreateBundlesFromDirectory = Foreign.foreign "CFBundleCreateBundlesFromDirectory" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFBundleGetAllBundles = Foreign.foreign "CFBundleGetAllBundles" (void @-> returning (ptr CFArray.t))
let _CFBundleGetBundleWithIdentifier = Foreign.foreign "CFBundleGetBundleWithIdentifier" ((ptr CFString.t) @-> returning (ptr CFBundle.t))
let _CFBundleGetDataPointerForName = Foreign.foreign "CFBundleGetDataPointerForName" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> returning (ptr void))
let _CFBundleGetDataPointersForNames = Foreign.foreign "CFBundleGetDataPointersForNames" ((ptr CFBundle.t) @-> (ptr CFArray.t) @-> (ptr (ptr void)) @-> returning void)
let _CFBundleGetDevelopmentRegion = Foreign.foreign "CFBundleGetDevelopmentRegion" ((ptr CFBundle.t) @-> returning (ptr CFString.t))
let _CFBundleGetFunctionPointerForName = Foreign.foreign "CFBundleGetFunctionPointerForName" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> returning (ptr void))
let _CFBundleGetFunctionPointersForNames = Foreign.foreign "CFBundleGetFunctionPointersForNames" ((ptr CFBundle.t) @-> (ptr CFArray.t) @-> (ptr (ptr void)) @-> returning void)
let _CFBundleGetIdentifier = Foreign.foreign "CFBundleGetIdentifier" ((ptr CFBundle.t) @-> returning (ptr CFString.t))
let _CFBundleGetInfoDictionary = Foreign.foreign "CFBundleGetInfoDictionary" ((ptr CFBundle.t) @-> returning (ptr CFDictionary.t))
let _CFBundleGetLocalInfoDictionary = Foreign.foreign "CFBundleGetLocalInfoDictionary" ((ptr CFBundle.t) @-> returning (ptr CFDictionary.t))
let _CFBundleGetMainBundle = Foreign.foreign "CFBundleGetMainBundle" (void @-> returning (ptr CFBundle.t))
let _CFBundleGetPackageInfo = Foreign.foreign "CFBundleGetPackageInfo" ((ptr CFBundle.t) @-> (ptr uint) @-> (ptr uint) @-> returning void)
let _CFBundleGetPackageInfoInDirectory = Foreign.foreign "CFBundleGetPackageInfoInDirectory" ((ptr CFURL.t) @-> (ptr uint) @-> (ptr uint) @-> returning bool)
let _CFBundleGetPlugIn = Foreign.foreign "CFBundleGetPlugIn" ((ptr CFBundle.t) @-> returning (ptr CFBundle.t))
let _CFBundleGetTypeID = Foreign.foreign "CFBundleGetTypeID" (void @-> returning ullong)
let _CFBundleGetValueForInfoDictionaryKey = Foreign.foreign "CFBundleGetValueForInfoDictionaryKey" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> returning id)
let _CFBundleGetVersionNumber = Foreign.foreign "CFBundleGetVersionNumber" ((ptr CFBundle.t) @-> returning uint)
let _CFBundleIsArchitectureLoadable = Foreign.foreign "CFBundleIsArchitectureLoadable" (int @-> returning bool)
let _CFBundleIsExecutableLoadable = Foreign.foreign "CFBundleIsExecutableLoadable" ((ptr CFBundle.t) @-> returning bool)
let _CFBundleIsExecutableLoadableForURL = Foreign.foreign "CFBundleIsExecutableLoadableForURL" ((ptr CFURL.t) @-> returning bool)
let _CFBundleIsExecutableLoaded = Foreign.foreign "CFBundleIsExecutableLoaded" ((ptr CFBundle.t) @-> returning bool)
let _CFBundleLoadExecutable = Foreign.foreign "CFBundleLoadExecutable" ((ptr CFBundle.t) @-> returning bool)
let _CFBundleLoadExecutableAndReturnError = Foreign.foreign "CFBundleLoadExecutableAndReturnError" ((ptr CFBundle.t) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFBundleOpenBundleResourceFiles = Foreign.foreign "CFBundleOpenBundleResourceFiles" ((ptr CFBundle.t) @-> (ptr int) @-> (ptr int) @-> returning int)
let _CFBundleOpenBundleResourceMap = Foreign.foreign "CFBundleOpenBundleResourceMap" ((ptr CFBundle.t) @-> returning int)
let _CFBundlePreflightExecutable = Foreign.foreign "CFBundlePreflightExecutable" ((ptr CFBundle.t) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFBundleUnloadExecutable = Foreign.foreign "CFBundleUnloadExecutable" ((ptr CFBundle.t) @-> returning void)
(* let _CFByteOrderGetCurrent = Foreign.foreign "Camlkit_CFByteOrderGetCurrent" (void @-> returning llong) *)
let _CFCalendarAddComponents = Foreign.foreign "CFCalendarAddComponents" ((ptr CFCalendar.t) @-> (ptr double) @-> ullong @-> string @-> returning bool)
let _CFCalendarComposeAbsoluteTime = Foreign.foreign "CFCalendarComposeAbsoluteTime" ((ptr CFCalendar.t) @-> (ptr double) @-> string @-> returning bool)
let _CFCalendarCopyCurrent = Foreign.foreign "CFCalendarCopyCurrent" (void @-> returning (ptr CFCalendar.t))
let _CFCalendarCopyLocale = Foreign.foreign "CFCalendarCopyLocale" ((ptr CFCalendar.t) @-> returning (ptr CFLocale.t))
let _CFCalendarCopyTimeZone = Foreign.foreign "CFCalendarCopyTimeZone" ((ptr CFCalendar.t) @-> returning (ptr CFTimeZone.t))
let _CFCalendarCreateWithIdentifier = Foreign.foreign "CFCalendarCreateWithIdentifier" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFCalendar.t))
let _CFCalendarDecomposeAbsoluteTime = Foreign.foreign "CFCalendarDecomposeAbsoluteTime" ((ptr CFCalendar.t) @-> double @-> string @-> returning bool)
let _CFCalendarGetComponentDifference = Foreign.foreign "CFCalendarGetComponentDifference" ((ptr CFCalendar.t) @-> double @-> double @-> ullong @-> string @-> returning bool)
let _CFCalendarGetFirstWeekday = Foreign.foreign "CFCalendarGetFirstWeekday" ((ptr CFCalendar.t) @-> returning llong)
let _CFCalendarGetIdentifier = Foreign.foreign "CFCalendarGetIdentifier" ((ptr CFCalendar.t) @-> returning (ptr CFString.t))
let _CFCalendarGetMaximumRangeOfUnit = Foreign.foreign "CFCalendarGetMaximumRangeOfUnit" ((ptr CFCalendar.t) @-> ullong @-> returning CFRange.t)
let _CFCalendarGetMinimumDaysInFirstWeek = Foreign.foreign "CFCalendarGetMinimumDaysInFirstWeek" ((ptr CFCalendar.t) @-> returning llong)
let _CFCalendarGetMinimumRangeOfUnit = Foreign.foreign "CFCalendarGetMinimumRangeOfUnit" ((ptr CFCalendar.t) @-> ullong @-> returning CFRange.t)
let _CFCalendarGetOrdinalityOfUnit = Foreign.foreign "CFCalendarGetOrdinalityOfUnit" ((ptr CFCalendar.t) @-> ullong @-> ullong @-> double @-> returning llong)
let _CFCalendarGetRangeOfUnit = Foreign.foreign "CFCalendarGetRangeOfUnit" ((ptr CFCalendar.t) @-> ullong @-> ullong @-> double @-> returning CFRange.t)
let _CFCalendarGetTimeRangeOfUnit = Foreign.foreign "CFCalendarGetTimeRangeOfUnit" ((ptr CFCalendar.t) @-> ullong @-> double @-> (ptr double) @-> (ptr double) @-> returning bool)
let _CFCalendarGetTypeID = Foreign.foreign "CFCalendarGetTypeID" (void @-> returning ullong)
let _CFCalendarSetFirstWeekday = Foreign.foreign "CFCalendarSetFirstWeekday" ((ptr CFCalendar.t) @-> llong @-> returning void)
let _CFCalendarSetLocale = Foreign.foreign "CFCalendarSetLocale" ((ptr CFCalendar.t) @-> (ptr CFLocale.t) @-> returning void)
let _CFCalendarSetMinimumDaysInFirstWeek = Foreign.foreign "CFCalendarSetMinimumDaysInFirstWeek" ((ptr CFCalendar.t) @-> llong @-> returning void)
let _CFCalendarSetTimeZone = Foreign.foreign "CFCalendarSetTimeZone" ((ptr CFCalendar.t) @-> (ptr CFTimeZone.t) @-> returning void)
let _CFCharacterSetAddCharactersInRange = Foreign.foreign "CFCharacterSetAddCharactersInRange" ((ptr CFCharacterSet.t) @-> CFRange.t @-> returning void)
let _CFCharacterSetAddCharactersInString = Foreign.foreign "CFCharacterSetAddCharactersInString" ((ptr CFCharacterSet.t) @-> (ptr CFString.t) @-> returning void)
let _CFCharacterSetCreateBitmapRepresentation = Foreign.foreign "CFCharacterSetCreateBitmapRepresentation" ((ptr CFAllocator.t) @-> (ptr CFCharacterSet.t) @-> returning (ptr CFData.t))
let _CFCharacterSetCreateCopy = Foreign.foreign "CFCharacterSetCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFCharacterSet.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateInvertedSet = Foreign.foreign "CFCharacterSetCreateInvertedSet" ((ptr CFAllocator.t) @-> (ptr CFCharacterSet.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateMutable = Foreign.foreign "CFCharacterSetCreateMutable" ((ptr CFAllocator.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateMutableCopy = Foreign.foreign "CFCharacterSetCreateMutableCopy" ((ptr CFAllocator.t) @-> (ptr CFCharacterSet.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateWithBitmapRepresentation = Foreign.foreign "CFCharacterSetCreateWithBitmapRepresentation" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateWithCharactersInRange = Foreign.foreign "CFCharacterSetCreateWithCharactersInRange" ((ptr CFAllocator.t) @-> CFRange.t @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateWithCharactersInString = Foreign.foreign "CFCharacterSetCreateWithCharactersInString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetGetPredefined = Foreign.foreign "CFCharacterSetGetPredefined" (llong @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetGetTypeID = Foreign.foreign "CFCharacterSetGetTypeID" (void @-> returning ullong)
let _CFCharacterSetHasMemberInPlane = Foreign.foreign "CFCharacterSetHasMemberInPlane" ((ptr CFCharacterSet.t) @-> llong @-> returning bool)
let _CFCharacterSetIntersect = Foreign.foreign "CFCharacterSetIntersect" ((ptr CFCharacterSet.t) @-> (ptr CFCharacterSet.t) @-> returning void)
let _CFCharacterSetInvert = Foreign.foreign "CFCharacterSetInvert" ((ptr CFCharacterSet.t) @-> returning void)
let _CFCharacterSetIsCharacterMember = Foreign.foreign "CFCharacterSetIsCharacterMember" ((ptr CFCharacterSet.t) @-> ushort @-> returning bool)
let _CFCharacterSetIsLongCharacterMember = Foreign.foreign "CFCharacterSetIsLongCharacterMember" ((ptr CFCharacterSet.t) @-> uint @-> returning bool)
let _CFCharacterSetIsSupersetOfSet = Foreign.foreign "CFCharacterSetIsSupersetOfSet" ((ptr CFCharacterSet.t) @-> (ptr CFCharacterSet.t) @-> returning bool)
let _CFCharacterSetRemoveCharactersInRange = Foreign.foreign "CFCharacterSetRemoveCharactersInRange" ((ptr CFCharacterSet.t) @-> CFRange.t @-> returning void)
let _CFCharacterSetRemoveCharactersInString = Foreign.foreign "CFCharacterSetRemoveCharactersInString" ((ptr CFCharacterSet.t) @-> (ptr CFString.t) @-> returning void)
let _CFCharacterSetUnion = Foreign.foreign "CFCharacterSetUnion" ((ptr CFCharacterSet.t) @-> (ptr CFCharacterSet.t) @-> returning void)
(* let _CFConvertDoubleHostToSwapped = Foreign.foreign "Camlkit_CFConvertDoubleHostToSwapped" (double @-> returning CFSwappedFloat64.t) *)
(* let _CFConvertDoubleSwappedToHost = Foreign.foreign "Camlkit_CFConvertDoubleSwappedToHost" (CFSwappedFloat64.t @-> returning double) *)
(* let _CFConvertFloat32HostToSwapped = Foreign.foreign "Camlkit_CFConvertFloat32HostToSwapped" (float @-> returning CFSwappedFloat32.t) *)
(* let _CFConvertFloat32SwappedToHost = Foreign.foreign "Camlkit_CFConvertFloat32SwappedToHost" (CFSwappedFloat32.t @-> returning float) *)
(* let _CFConvertFloat64HostToSwapped = Foreign.foreign "Camlkit_CFConvertFloat64HostToSwapped" (double @-> returning CFSwappedFloat64.t) *)
(* let _CFConvertFloat64SwappedToHost = Foreign.foreign "Camlkit_CFConvertFloat64SwappedToHost" (CFSwappedFloat64.t @-> returning double) *)
(* let _CFConvertFloatHostToSwapped = Foreign.foreign "Camlkit_CFConvertFloatHostToSwapped" (float @-> returning CFSwappedFloat32.t) *)
(* let _CFConvertFloatSwappedToHost = Foreign.foreign "Camlkit_CFConvertFloatSwappedToHost" (CFSwappedFloat32.t @-> returning float) *)
let _CFCopyDescription = Foreign.foreign "CFCopyDescription" (id @-> returning (ptr CFString.t))
let _CFCopyHomeDirectoryURL = Foreign.foreign "CFCopyHomeDirectoryURL" (void @-> returning (ptr CFURL.t))
let _CFCopyTypeIDDescription = Foreign.foreign "CFCopyTypeIDDescription" (ullong @-> returning (ptr CFString.t))
let _CFDataAppendBytes = Foreign.foreign "CFDataAppendBytes" ((ptr CFData.t) @-> string @-> llong @-> returning void)
let _CFDataCreate = Foreign.foreign "CFDataCreate" ((ptr CFAllocator.t) @-> string @-> llong @-> returning (ptr CFData.t))
let _CFDataCreateCopy = Foreign.foreign "CFDataCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> returning (ptr CFData.t))
let _CFDataCreateMutable = Foreign.foreign "CFDataCreateMutable" ((ptr CFAllocator.t) @-> llong @-> returning (ptr CFData.t))
let _CFDataCreateMutableCopy = Foreign.foreign "CFDataCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFData.t) @-> returning (ptr CFData.t))
let _CFDataCreateWithBytesNoCopy = Foreign.foreign "CFDataCreateWithBytesNoCopy" ((ptr CFAllocator.t) @-> string @-> llong @-> (ptr CFAllocator.t) @-> returning (ptr CFData.t))
let _CFDataDeleteBytes = Foreign.foreign "CFDataDeleteBytes" ((ptr CFData.t) @-> CFRange.t @-> returning void)
let _CFDataFind = Foreign.foreign "CFDataFind" ((ptr CFData.t) @-> (ptr CFData.t) @-> CFRange.t @-> ullong @-> returning CFRange.t)
let _CFDataGetBytePtr = Foreign.foreign "CFDataGetBytePtr" ((ptr CFData.t) @-> returning string)
let _CFDataGetBytes = Foreign.foreign "CFDataGetBytes" ((ptr CFData.t) @-> CFRange.t @-> string @-> returning void)
let _CFDataGetLength = Foreign.foreign "CFDataGetLength" ((ptr CFData.t) @-> returning llong)
let _CFDataGetMutableBytePtr = Foreign.foreign "CFDataGetMutableBytePtr" ((ptr CFData.t) @-> returning string)
let _CFDataGetTypeID = Foreign.foreign "CFDataGetTypeID" (void @-> returning ullong)
let _CFDataIncreaseLength = Foreign.foreign "CFDataIncreaseLength" ((ptr CFData.t) @-> llong @-> returning void)
let _CFDataReplaceBytes = Foreign.foreign "CFDataReplaceBytes" ((ptr CFData.t) @-> CFRange.t @-> string @-> llong @-> returning void)
let _CFDataSetLength = Foreign.foreign "CFDataSetLength" ((ptr CFData.t) @-> llong @-> returning void)
let _CFDateCompare = Foreign.foreign "CFDateCompare" ((ptr CFDate.t) @-> (ptr CFDate.t) @-> (ptr void) @-> returning llong)
let _CFDateCreate = Foreign.foreign "CFDateCreate" ((ptr CFAllocator.t) @-> double @-> returning (ptr CFDate.t))
let _CFDateFormatterCopyProperty = Foreign.foreign "CFDateFormatterCopyProperty" ((ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> returning id)
let _CFDateFormatterCreate = Foreign.foreign "CFDateFormatterCreate" ((ptr CFAllocator.t) @-> (ptr CFLocale.t) @-> llong @-> llong @-> returning (ptr CFDateFormatter.t))
let _CFDateFormatterCreateDateFormatFromTemplate = Foreign.foreign "CFDateFormatterCreateDateFormatFromTemplate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> ullong @-> (ptr CFLocale.t) @-> returning (ptr CFString.t))
let _CFDateFormatterCreateDateFromString = Foreign.foreign "CFDateFormatterCreateDateFromString" ((ptr CFAllocator.t) @-> (ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> returning (ptr CFDate.t))
let _CFDateFormatterCreateISO8601Formatter = Foreign.foreign "CFDateFormatterCreateISO8601Formatter" ((ptr CFAllocator.t) @-> ullong @-> returning (ptr CFDateFormatter.t))
let _CFDateFormatterCreateStringWithAbsoluteTime = Foreign.foreign "CFDateFormatterCreateStringWithAbsoluteTime" ((ptr CFAllocator.t) @-> (ptr CFDateFormatter.t) @-> double @-> returning (ptr CFString.t))
let _CFDateFormatterCreateStringWithDate = Foreign.foreign "CFDateFormatterCreateStringWithDate" ((ptr CFAllocator.t) @-> (ptr CFDateFormatter.t) @-> (ptr CFDate.t) @-> returning (ptr CFString.t))
let _CFDateFormatterGetAbsoluteTimeFromString = Foreign.foreign "CFDateFormatterGetAbsoluteTimeFromString" ((ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> (ptr double) @-> returning bool)
let _CFDateFormatterGetDateStyle = Foreign.foreign "CFDateFormatterGetDateStyle" ((ptr CFDateFormatter.t) @-> returning llong)
let _CFDateFormatterGetFormat = Foreign.foreign "CFDateFormatterGetFormat" ((ptr CFDateFormatter.t) @-> returning (ptr CFString.t))
let _CFDateFormatterGetLocale = Foreign.foreign "CFDateFormatterGetLocale" ((ptr CFDateFormatter.t) @-> returning (ptr CFLocale.t))
let _CFDateFormatterGetTimeStyle = Foreign.foreign "CFDateFormatterGetTimeStyle" ((ptr CFDateFormatter.t) @-> returning llong)
let _CFDateFormatterGetTypeID = Foreign.foreign "CFDateFormatterGetTypeID" (void @-> returning ullong)
let _CFDateFormatterSetFormat = Foreign.foreign "CFDateFormatterSetFormat" ((ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> returning void)
let _CFDateFormatterSetProperty = Foreign.foreign "CFDateFormatterSetProperty" ((ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> id @-> returning void)
let _CFDateGetAbsoluteTime = Foreign.foreign "CFDateGetAbsoluteTime" ((ptr CFDate.t) @-> returning double)
let _CFDateGetTimeIntervalSinceDate = Foreign.foreign "CFDateGetTimeIntervalSinceDate" ((ptr CFDate.t) @-> (ptr CFDate.t) @-> returning double)
let _CFDateGetTypeID = Foreign.foreign "CFDateGetTypeID" (void @-> returning ullong)
let _CFDictionaryAddValue = Foreign.foreign "CFDictionaryAddValue" ((ptr CFDictionary.t) @-> (ptr void) @-> (ptr void) @-> returning void)
let _CFDictionaryApplyFunction = Foreign.foreign "CFDictionaryApplyFunction" ((ptr CFDictionary.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFDictionaryContainsKey = Foreign.foreign "CFDictionaryContainsKey" ((ptr CFDictionary.t) @-> (ptr void) @-> returning bool)
let _CFDictionaryContainsValue = Foreign.foreign "CFDictionaryContainsValue" ((ptr CFDictionary.t) @-> (ptr void) @-> returning bool)
let _CFDictionaryCreate = Foreign.foreign "CFDictionaryCreate" ((ptr CFAllocator.t) @-> (ptr (ptr void)) @-> (ptr (ptr void)) @-> llong @-> (ptr CFDictionaryKeyCallBacks.t) @-> (ptr CFDictionaryValueCallBacks.t) @-> returning (ptr CFDictionary.t))
let _CFDictionaryCreateCopy = Foreign.foreign "CFDictionaryCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFDictionary.t))
let _CFDictionaryCreateMutable = Foreign.foreign "CFDictionaryCreateMutable" ((ptr CFAllocator.t) @-> llong @-> (ptr CFDictionaryKeyCallBacks.t) @-> (ptr CFDictionaryValueCallBacks.t) @-> returning (ptr CFDictionary.t))
let _CFDictionaryCreateMutableCopy = Foreign.foreign "CFDictionaryCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFDictionary.t) @-> returning (ptr CFDictionary.t))
let _CFDictionaryGetCount = Foreign.foreign "CFDictionaryGetCount" ((ptr CFDictionary.t) @-> returning llong)
let _CFDictionaryGetCountOfKey = Foreign.foreign "CFDictionaryGetCountOfKey" ((ptr CFDictionary.t) @-> (ptr void) @-> returning llong)
let _CFDictionaryGetCountOfValue = Foreign.foreign "CFDictionaryGetCountOfValue" ((ptr CFDictionary.t) @-> (ptr void) @-> returning llong)
let _CFDictionaryGetKeysAndValues = Foreign.foreign "CFDictionaryGetKeysAndValues" ((ptr CFDictionary.t) @-> (ptr (ptr void)) @-> (ptr (ptr void)) @-> returning void)
let _CFDictionaryGetTypeID = Foreign.foreign "CFDictionaryGetTypeID" (void @-> returning ullong)
let _CFDictionaryGetValue = Foreign.foreign "CFDictionaryGetValue" ((ptr CFDictionary.t) @-> (ptr void) @-> returning (ptr void))
let _CFDictionaryGetValueIfPresent = Foreign.foreign "CFDictionaryGetValueIfPresent" ((ptr CFDictionary.t) @-> (ptr void) @-> (ptr (ptr void)) @-> returning bool)
let _CFDictionaryRemoveAllValues = Foreign.foreign "CFDictionaryRemoveAllValues" ((ptr CFDictionary.t) @-> returning void)
let _CFDictionaryRemoveValue = Foreign.foreign "CFDictionaryRemoveValue" ((ptr CFDictionary.t) @-> (ptr void) @-> returning void)
let _CFDictionaryReplaceValue = Foreign.foreign "CFDictionaryReplaceValue" ((ptr CFDictionary.t) @-> (ptr void) @-> (ptr void) @-> returning void)
let _CFDictionarySetValue = Foreign.foreign "CFDictionarySetValue" ((ptr CFDictionary.t) @-> (ptr void) @-> (ptr void) @-> returning void)
let _CFEqual = Foreign.foreign "CFEqual" (id @-> id @-> returning bool)
let _CFErrorCopyDescription = Foreign.foreign "CFErrorCopyDescription" ((ptr CFError.t) @-> returning (ptr CFString.t))
let _CFErrorCopyFailureReason = Foreign.foreign "CFErrorCopyFailureReason" ((ptr CFError.t) @-> returning (ptr CFString.t))
let _CFErrorCopyRecoverySuggestion = Foreign.foreign "CFErrorCopyRecoverySuggestion" ((ptr CFError.t) @-> returning (ptr CFString.t))
let _CFErrorCopyUserInfo = Foreign.foreign "CFErrorCopyUserInfo" ((ptr CFError.t) @-> returning (ptr CFDictionary.t))
let _CFErrorCreate = Foreign.foreign "CFErrorCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> llong @-> (ptr CFDictionary.t) @-> returning (ptr CFError.t))
let _CFErrorCreateWithUserInfoKeysAndValues = Foreign.foreign "CFErrorCreateWithUserInfoKeysAndValues" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> llong @-> (ptr (ptr void)) @-> (ptr (ptr void)) @-> llong @-> returning (ptr CFError.t))
let _CFErrorGetCode = Foreign.foreign "CFErrorGetCode" ((ptr CFError.t) @-> returning llong)
let _CFErrorGetDomain = Foreign.foreign "CFErrorGetDomain" ((ptr CFError.t) @-> returning (ptr CFString.t))
let _CFErrorGetTypeID = Foreign.foreign "CFErrorGetTypeID" (void @-> returning ullong)
let _CFFileDescriptorCreate = Foreign.foreign "CFFileDescriptorCreate" ((ptr CFAllocator.t) @-> int @-> bool @-> Foreign.funptr ((ptr CFFileDescriptor.t) @-> ullong @-> (ptr void) @-> returning void) @-> (ptr CFFileDescriptorContext.t) @-> returning (ptr CFFileDescriptor.t))
let _CFFileDescriptorCreateRunLoopSource = Foreign.foreign "CFFileDescriptorCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFFileDescriptor.t) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFFileDescriptorDisableCallBacks = Foreign.foreign "CFFileDescriptorDisableCallBacks" ((ptr CFFileDescriptor.t) @-> ullong @-> returning void)
let _CFFileDescriptorEnableCallBacks = Foreign.foreign "CFFileDescriptorEnableCallBacks" ((ptr CFFileDescriptor.t) @-> ullong @-> returning void)
let _CFFileDescriptorGetContext = Foreign.foreign "CFFileDescriptorGetContext" ((ptr CFFileDescriptor.t) @-> (ptr CFFileDescriptorContext.t) @-> returning void)
let _CFFileDescriptorGetNativeDescriptor = Foreign.foreign "CFFileDescriptorGetNativeDescriptor" ((ptr CFFileDescriptor.t) @-> returning int)
let _CFFileDescriptorGetTypeID = Foreign.foreign "CFFileDescriptorGetTypeID" (void @-> returning ullong)
let _CFFileDescriptorInvalidate = Foreign.foreign "CFFileDescriptorInvalidate" ((ptr CFFileDescriptor.t) @-> returning void)
let _CFFileDescriptorIsValid = Foreign.foreign "CFFileDescriptorIsValid" ((ptr CFFileDescriptor.t) @-> returning bool)
let _CFFileSecurityClearProperties = Foreign.foreign "CFFileSecurityClearProperties" ((ptr CFFileSecurity.t) @-> ullong @-> returning bool)
let _CFFileSecurityCopyAccessControlList = Foreign.foreign "CFFileSecurityCopyAccessControlList" ((ptr CFFileSecurity.t) @-> (ptr (ptr void)) @-> returning bool)
let _CFFileSecurityCopyGroupUUID = Foreign.foreign "CFFileSecurityCopyGroupUUID" ((ptr CFFileSecurity.t) @-> (ptr (ptr CFUUID.t)) @-> returning bool)
let _CFFileSecurityCopyOwnerUUID = Foreign.foreign "CFFileSecurityCopyOwnerUUID" ((ptr CFFileSecurity.t) @-> (ptr (ptr CFUUID.t)) @-> returning bool)
let _CFFileSecurityCreate = Foreign.foreign "CFFileSecurityCreate" ((ptr CFAllocator.t) @-> returning (ptr CFFileSecurity.t))
let _CFFileSecurityCreateCopy = Foreign.foreign "CFFileSecurityCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFFileSecurity.t) @-> returning (ptr CFFileSecurity.t))
let _CFFileSecurityGetGroup = Foreign.foreign "CFFileSecurityGetGroup" ((ptr CFFileSecurity.t) @-> (ptr uint) @-> returning bool)
let _CFFileSecurityGetMode = Foreign.foreign "CFFileSecurityGetMode" ((ptr CFFileSecurity.t) @-> (ptr ushort) @-> returning bool)
let _CFFileSecurityGetOwner = Foreign.foreign "CFFileSecurityGetOwner" ((ptr CFFileSecurity.t) @-> (ptr uint) @-> returning bool)
let _CFFileSecurityGetTypeID = Foreign.foreign "CFFileSecurityGetTypeID" (void @-> returning ullong)
let _CFFileSecuritySetAccessControlList = Foreign.foreign "CFFileSecuritySetAccessControlList" ((ptr CFFileSecurity.t) @-> (ptr void) @-> returning bool)
let _CFFileSecuritySetGroup = Foreign.foreign "CFFileSecuritySetGroup" ((ptr CFFileSecurity.t) @-> uint @-> returning bool)
let _CFFileSecuritySetGroupUUID = Foreign.foreign "CFFileSecuritySetGroupUUID" ((ptr CFFileSecurity.t) @-> (ptr CFUUID.t) @-> returning bool)
let _CFFileSecuritySetMode = Foreign.foreign "CFFileSecuritySetMode" ((ptr CFFileSecurity.t) @-> ushort @-> returning bool)
let _CFFileSecuritySetOwner = Foreign.foreign "CFFileSecuritySetOwner" ((ptr CFFileSecurity.t) @-> uint @-> returning bool)
let _CFFileSecuritySetOwnerUUID = Foreign.foreign "CFFileSecuritySetOwnerUUID" ((ptr CFFileSecurity.t) @-> (ptr CFUUID.t) @-> returning bool)
let _CFGetAllocator = Foreign.foreign "CFGetAllocator" (id @-> returning (ptr CFAllocator.t))
let _CFGetRetainCount = Foreign.foreign "CFGetRetainCount" (id @-> returning llong)
let _CFGetTypeID = Foreign.foreign "CFGetTypeID" (id @-> returning ullong)
let _CFGregorianDateGetAbsoluteTime = Foreign.foreign "CFGregorianDateGetAbsoluteTime" (CFGregorianDate.t @-> (ptr CFTimeZone.t) @-> returning double)
let _CFGregorianDateIsValid = Foreign.foreign "CFGregorianDateIsValid" (CFGregorianDate.t @-> ullong @-> returning bool)
let _CFHash = Foreign.foreign "CFHash" (id @-> returning ullong)
let _CFLocaleCopyAvailableLocaleIdentifiers = Foreign.foreign "CFLocaleCopyAvailableLocaleIdentifiers" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyCommonISOCurrencyCodes = Foreign.foreign "CFLocaleCopyCommonISOCurrencyCodes" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyCurrent = Foreign.foreign "CFLocaleCopyCurrent" (void @-> returning (ptr CFLocale.t))
let _CFLocaleCopyDisplayNameForPropertyValue = Foreign.foreign "CFLocaleCopyDisplayNameForPropertyValue" ((ptr CFLocale.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFLocaleCopyISOCountryCodes = Foreign.foreign "CFLocaleCopyISOCountryCodes" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyISOCurrencyCodes = Foreign.foreign "CFLocaleCopyISOCurrencyCodes" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyISOLanguageCodes = Foreign.foreign "CFLocaleCopyISOLanguageCodes" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyPreferredLanguages = Foreign.foreign "CFLocaleCopyPreferredLanguages" (void @-> returning (ptr CFArray.t))
let _CFLocaleCreate = Foreign.foreign "CFLocaleCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFLocale.t))
let _CFLocaleCreateCanonicalLanguageIdentifierFromString = Foreign.foreign "CFLocaleCreateCanonicalLanguageIdentifierFromString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes = Foreign.foreign "CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes" ((ptr CFAllocator.t) @-> short @-> short @-> returning (ptr CFString.t))
let _CFLocaleCreateCanonicalLocaleIdentifierFromString = Foreign.foreign "CFLocaleCreateCanonicalLocaleIdentifierFromString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFLocaleCreateComponentsFromLocaleIdentifier = Foreign.foreign "CFLocaleCreateComponentsFromLocaleIdentifier" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFDictionary.t))
let _CFLocaleCreateCopy = Foreign.foreign "CFLocaleCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFLocale.t) @-> returning (ptr CFLocale.t))
let _CFLocaleCreateLocaleIdentifierFromComponents = Foreign.foreign "CFLocaleCreateLocaleIdentifierFromComponents" ((ptr CFAllocator.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFString.t))
let _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode = Foreign.foreign "CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode" ((ptr CFAllocator.t) @-> uint @-> returning (ptr CFString.t))
let _CFLocaleGetIdentifier = Foreign.foreign "CFLocaleGetIdentifier" ((ptr CFLocale.t) @-> returning (ptr CFString.t))
let _CFLocaleGetLanguageCharacterDirection = Foreign.foreign "CFLocaleGetLanguageCharacterDirection" ((ptr CFString.t) @-> returning llong)
let _CFLocaleGetLanguageLineDirection = Foreign.foreign "CFLocaleGetLanguageLineDirection" ((ptr CFString.t) @-> returning llong)
let _CFLocaleGetSystem = Foreign.foreign "CFLocaleGetSystem" (void @-> returning (ptr CFLocale.t))
let _CFLocaleGetTypeID = Foreign.foreign "CFLocaleGetTypeID" (void @-> returning ullong)
let _CFLocaleGetValue = Foreign.foreign "CFLocaleGetValue" ((ptr CFLocale.t) @-> (ptr CFString.t) @-> returning id)
let _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier = Foreign.foreign "CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier" ((ptr CFString.t) @-> returning uint)
let _CFMachPortCreate = Foreign.foreign "CFMachPortCreate" ((ptr CFAllocator.t) @-> Foreign.funptr ((ptr CFMachPort.t) @-> (ptr void) @-> llong @-> (ptr void) @-> returning void) @-> (ptr CFMachPortContext.t) @-> (ptr bool) @-> returning (ptr CFMachPort.t))
let _CFMachPortCreateRunLoopSource = Foreign.foreign "CFMachPortCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFMachPort.t) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFMachPortCreateWithPort = Foreign.foreign "CFMachPortCreateWithPort" ((ptr CFAllocator.t) @-> uint @-> Foreign.funptr ((ptr CFMachPort.t) @-> (ptr void) @-> llong @-> (ptr void) @-> returning void) @-> (ptr CFMachPortContext.t) @-> (ptr bool) @-> returning (ptr CFMachPort.t))
let _CFMachPortGetContext = Foreign.foreign "CFMachPortGetContext" ((ptr CFMachPort.t) @-> (ptr CFMachPortContext.t) @-> returning void)
let _CFMachPortGetInvalidationCallBack = Foreign.foreign "CFMachPortGetInvalidationCallBack" ((ptr CFMachPort.t) @-> returning (ptr (ptr void)))
let _CFMachPortGetPort = Foreign.foreign "CFMachPortGetPort" ((ptr CFMachPort.t) @-> returning uint)
let _CFMachPortGetTypeID = Foreign.foreign "CFMachPortGetTypeID" (void @-> returning ullong)
let _CFMachPortInvalidate = Foreign.foreign "CFMachPortInvalidate" ((ptr CFMachPort.t) @-> returning void)
let _CFMachPortIsValid = Foreign.foreign "CFMachPortIsValid" ((ptr CFMachPort.t) @-> returning bool)
let _CFMachPortSetInvalidationCallBack = Foreign.foreign "CFMachPortSetInvalidationCallBack" ((ptr CFMachPort.t) @-> Foreign.funptr ((ptr CFMachPort.t) @-> (ptr void) @-> returning void) @-> returning void)
let _CFMakeCollectable = Foreign.foreign "CFMakeCollectable" (id @-> returning id)
let _CFMessagePortCreateLocal = Foreign.foreign "CFMessagePortCreateLocal" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> Foreign.funptr ((ptr CFMessagePort.t) @-> int @-> (ptr CFData.t) @-> (ptr void) @-> returning (ptr CFData.t)) @-> (ptr CFMessagePortContext.t) @-> (ptr bool) @-> returning (ptr CFMessagePort.t))
let _CFMessagePortCreateRemote = Foreign.foreign "CFMessagePortCreateRemote" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFMessagePort.t))
let _CFMessagePortCreateRunLoopSource = Foreign.foreign "CFMessagePortCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFMessagePort.t) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFMessagePortGetContext = Foreign.foreign "CFMessagePortGetContext" ((ptr CFMessagePort.t) @-> (ptr CFMessagePortContext.t) @-> returning void)
let _CFMessagePortGetInvalidationCallBack = Foreign.foreign "CFMessagePortGetInvalidationCallBack" ((ptr CFMessagePort.t) @-> returning (ptr (ptr void)))
let _CFMessagePortGetName = Foreign.foreign "CFMessagePortGetName" ((ptr CFMessagePort.t) @-> returning (ptr CFString.t))
let _CFMessagePortGetTypeID = Foreign.foreign "CFMessagePortGetTypeID" (void @-> returning ullong)
let _CFMessagePortInvalidate = Foreign.foreign "CFMessagePortInvalidate" ((ptr CFMessagePort.t) @-> returning void)
let _CFMessagePortIsRemote = Foreign.foreign "CFMessagePortIsRemote" ((ptr CFMessagePort.t) @-> returning bool)
let _CFMessagePortIsValid = Foreign.foreign "CFMessagePortIsValid" ((ptr CFMessagePort.t) @-> returning bool)
let _CFMessagePortSendRequest = Foreign.foreign "CFMessagePortSendRequest" ((ptr CFMessagePort.t) @-> int @-> (ptr CFData.t) @-> double @-> double @-> (ptr CFString.t) @-> (ptr (ptr CFData.t)) @-> returning int)
let _CFMessagePortSetDispatchQueue = Foreign.foreign "CFMessagePortSetDispatchQueue" ((ptr CFMessagePort.t) @-> id @-> returning void)
let _CFMessagePortSetInvalidationCallBack = Foreign.foreign "CFMessagePortSetInvalidationCallBack" ((ptr CFMessagePort.t) @-> Foreign.funptr ((ptr CFMessagePort.t) @-> (ptr void) @-> returning void) @-> returning void)
let _CFMessagePortSetName = Foreign.foreign "CFMessagePortSetName" ((ptr CFMessagePort.t) @-> (ptr CFString.t) @-> returning bool)
let _CFNotificationCenterAddObserver = Foreign.foreign "CFNotificationCenterAddObserver" ((ptr CFNotificationCenter.t) @-> (ptr void) @-> Foreign.funptr ((ptr CFNotificationCenter.t) @-> (ptr void) @-> (ptr CFString.t) @-> (ptr void) @-> (ptr CFDictionary.t) @-> returning void) @-> (ptr CFString.t) @-> (ptr void) @-> llong @-> returning void)
let _CFNotificationCenterGetDarwinNotifyCenter = Foreign.foreign "CFNotificationCenterGetDarwinNotifyCenter" (void @-> returning (ptr CFNotificationCenter.t))
let _CFNotificationCenterGetDistributedCenter = Foreign.foreign "CFNotificationCenterGetDistributedCenter" (void @-> returning (ptr CFNotificationCenter.t))
let _CFNotificationCenterGetLocalCenter = Foreign.foreign "CFNotificationCenterGetLocalCenter" (void @-> returning (ptr CFNotificationCenter.t))
let _CFNotificationCenterGetTypeID = Foreign.foreign "CFNotificationCenterGetTypeID" (void @-> returning ullong)
let _CFNotificationCenterPostNotification = Foreign.foreign "CFNotificationCenterPostNotification" ((ptr CFNotificationCenter.t) @-> (ptr CFString.t) @-> (ptr void) @-> (ptr CFDictionary.t) @-> bool @-> returning void)
let _CFNotificationCenterPostNotificationWithOptions = Foreign.foreign "CFNotificationCenterPostNotificationWithOptions" ((ptr CFNotificationCenter.t) @-> (ptr CFString.t) @-> (ptr void) @-> (ptr CFDictionary.t) @-> ullong @-> returning void)
let _CFNotificationCenterRemoveEveryObserver = Foreign.foreign "CFNotificationCenterRemoveEveryObserver" ((ptr CFNotificationCenter.t) @-> (ptr void) @-> returning void)
let _CFNotificationCenterRemoveObserver = Foreign.foreign "CFNotificationCenterRemoveObserver" ((ptr CFNotificationCenter.t) @-> (ptr void) @-> (ptr CFString.t) @-> (ptr void) @-> returning void)
let _CFNullGetTypeID = Foreign.foreign "CFNullGetTypeID" (void @-> returning ullong)
let _CFNumberCompare = Foreign.foreign "CFNumberCompare" ((ptr CFNumber.t) @-> (ptr CFNumber.t) @-> (ptr void) @-> returning llong)
let _CFNumberCreate = Foreign.foreign "CFNumberCreate" ((ptr CFAllocator.t) @-> llong @-> (ptr void) @-> returning (ptr CFNumber.t))
let _CFNumberFormatterCopyProperty = Foreign.foreign "CFNumberFormatterCopyProperty" ((ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> returning id)
let _CFNumberFormatterCreate = Foreign.foreign "CFNumberFormatterCreate" ((ptr CFAllocator.t) @-> (ptr CFLocale.t) @-> llong @-> returning (ptr CFNumberFormatter.t))
let _CFNumberFormatterCreateNumberFromString = Foreign.foreign "CFNumberFormatterCreateNumberFromString" ((ptr CFAllocator.t) @-> (ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> ullong @-> returning (ptr CFNumber.t))
let _CFNumberFormatterCreateStringWithNumber = Foreign.foreign "CFNumberFormatterCreateStringWithNumber" ((ptr CFAllocator.t) @-> (ptr CFNumberFormatter.t) @-> (ptr CFNumber.t) @-> returning (ptr CFString.t))
let _CFNumberFormatterCreateStringWithValue = Foreign.foreign "CFNumberFormatterCreateStringWithValue" ((ptr CFAllocator.t) @-> (ptr CFNumberFormatter.t) @-> llong @-> (ptr void) @-> returning (ptr CFString.t))
let _CFNumberFormatterGetDecimalInfoForCurrencyCode = Foreign.foreign "CFNumberFormatterGetDecimalInfoForCurrencyCode" ((ptr CFString.t) @-> (ptr int) @-> (ptr double) @-> returning bool)
let _CFNumberFormatterGetFormat = Foreign.foreign "CFNumberFormatterGetFormat" ((ptr CFNumberFormatter.t) @-> returning (ptr CFString.t))
let _CFNumberFormatterGetLocale = Foreign.foreign "CFNumberFormatterGetLocale" ((ptr CFNumberFormatter.t) @-> returning (ptr CFLocale.t))
let _CFNumberFormatterGetStyle = Foreign.foreign "CFNumberFormatterGetStyle" ((ptr CFNumberFormatter.t) @-> returning llong)
let _CFNumberFormatterGetTypeID = Foreign.foreign "CFNumberFormatterGetTypeID" (void @-> returning ullong)
let _CFNumberFormatterGetValueFromString = Foreign.foreign "CFNumberFormatterGetValueFromString" ((ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> llong @-> (ptr void) @-> returning bool)
let _CFNumberFormatterSetFormat = Foreign.foreign "CFNumberFormatterSetFormat" ((ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> returning void)
let _CFNumberFormatterSetProperty = Foreign.foreign "CFNumberFormatterSetProperty" ((ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> id @-> returning void)
let _CFNumberGetByteSize = Foreign.foreign "CFNumberGetByteSize" ((ptr CFNumber.t) @-> returning llong)
let _CFNumberGetType = Foreign.foreign "CFNumberGetType" ((ptr CFNumber.t) @-> returning llong)
let _CFNumberGetTypeID = Foreign.foreign "CFNumberGetTypeID" (void @-> returning ullong)
let _CFNumberGetValue = Foreign.foreign "CFNumberGetValue" ((ptr CFNumber.t) @-> llong @-> (ptr void) @-> returning bool)
let _CFNumberIsFloatType = Foreign.foreign "CFNumberIsFloatType" ((ptr CFNumber.t) @-> returning bool)
let _CFPlugInAddInstanceForFactory = Foreign.foreign "CFPlugInAddInstanceForFactory" ((ptr CFUUID.t) @-> returning void)
let _CFPlugInCreate = Foreign.foreign "CFPlugInCreate" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFBundle.t))
let _CFPlugInFindFactoriesForPlugInType = Foreign.foreign "CFPlugInFindFactoriesForPlugInType" ((ptr CFUUID.t) @-> returning (ptr CFArray.t))
let _CFPlugInFindFactoriesForPlugInTypeInPlugIn = Foreign.foreign "CFPlugInFindFactoriesForPlugInTypeInPlugIn" ((ptr CFUUID.t) @-> (ptr CFBundle.t) @-> returning (ptr CFArray.t))
let _CFPlugInGetBundle = Foreign.foreign "CFPlugInGetBundle" ((ptr CFBundle.t) @-> returning (ptr CFBundle.t))
let _CFPlugInGetTypeID = Foreign.foreign "CFPlugInGetTypeID" (void @-> returning ullong)
let _CFPlugInInstanceCreate = Foreign.foreign "CFPlugInInstanceCreate" ((ptr CFAllocator.t) @-> (ptr CFUUID.t) @-> (ptr CFUUID.t) @-> returning (ptr void))
let _CFPlugInInstanceCreateWithInstanceDataSize = Foreign.foreign "CFPlugInInstanceCreateWithInstanceDataSize" ((ptr CFAllocator.t) @-> llong @-> Foreign.funptr ((ptr void) @-> returning void) @-> (ptr CFString.t) @-> Foreign.funptr ((ptr CFPlugInInstance.t) @-> (ptr CFString.t) @-> (ptr (ptr void)) @-> returning bool) @-> returning (ptr CFPlugInInstance.t))
let _CFPlugInInstanceGetFactoryName = Foreign.foreign "CFPlugInInstanceGetFactoryName" ((ptr CFPlugInInstance.t) @-> returning (ptr CFString.t))
let _CFPlugInInstanceGetInstanceData = Foreign.foreign "CFPlugInInstanceGetInstanceData" ((ptr CFPlugInInstance.t) @-> returning (ptr void))
let _CFPlugInInstanceGetInterfaceFunctionTable = Foreign.foreign "CFPlugInInstanceGetInterfaceFunctionTable" ((ptr CFPlugInInstance.t) @-> (ptr CFString.t) @-> (ptr (ptr void)) @-> returning bool)
let _CFPlugInInstanceGetTypeID = Foreign.foreign "CFPlugInInstanceGetTypeID" (void @-> returning ullong)
let _CFPlugInIsLoadOnDemand = Foreign.foreign "CFPlugInIsLoadOnDemand" ((ptr CFBundle.t) @-> returning bool)
let _CFPlugInRegisterFactoryFunction = Foreign.foreign "CFPlugInRegisterFactoryFunction" ((ptr CFUUID.t) @-> Foreign.funptr ((ptr CFAllocator.t) @-> (ptr CFUUID.t) @-> returning (ptr void)) @-> returning bool)
let _CFPlugInRegisterFactoryFunctionByName = Foreign.foreign "CFPlugInRegisterFactoryFunctionByName" ((ptr CFUUID.t) @-> (ptr CFBundle.t) @-> (ptr CFString.t) @-> returning bool)
let _CFPlugInRegisterPlugInType = Foreign.foreign "CFPlugInRegisterPlugInType" ((ptr CFUUID.t) @-> (ptr CFUUID.t) @-> returning bool)
let _CFPlugInRemoveInstanceForFactory = Foreign.foreign "CFPlugInRemoveInstanceForFactory" ((ptr CFUUID.t) @-> returning void)
let _CFPlugInSetLoadOnDemand = Foreign.foreign "CFPlugInSetLoadOnDemand" ((ptr CFBundle.t) @-> bool @-> returning void)
let _CFPlugInUnregisterFactory = Foreign.foreign "CFPlugInUnregisterFactory" ((ptr CFUUID.t) @-> returning bool)
let _CFPlugInUnregisterPlugInType = Foreign.foreign "CFPlugInUnregisterPlugInType" ((ptr CFUUID.t) @-> (ptr CFUUID.t) @-> returning bool)
let _CFPreferencesAddSuitePreferencesToApp = Foreign.foreign "CFPreferencesAddSuitePreferencesToApp" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesAppSynchronize = Foreign.foreign "CFPreferencesAppSynchronize" ((ptr CFString.t) @-> returning bool)
let _CFPreferencesAppValueIsForced = Foreign.foreign "CFPreferencesAppValueIsForced" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning bool)
let _CFPreferencesCopyAppValue = Foreign.foreign "CFPreferencesCopyAppValue" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr void))
let _CFPreferencesCopyApplicationList = Foreign.foreign "CFPreferencesCopyApplicationList" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFPreferencesCopyKeyList = Foreign.foreign "CFPreferencesCopyKeyList" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFPreferencesCopyMultiple = Foreign.foreign "CFPreferencesCopyMultiple" ((ptr CFArray.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFDictionary.t))
let _CFPreferencesCopyValue = Foreign.foreign "CFPreferencesCopyValue" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr void))
let _CFPreferencesGetAppBooleanValue = Foreign.foreign "CFPreferencesGetAppBooleanValue" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr bool) @-> returning bool)
let _CFPreferencesGetAppIntegerValue = Foreign.foreign "CFPreferencesGetAppIntegerValue" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr bool) @-> returning llong)
let _CFPreferencesRemoveSuitePreferencesFromApp = Foreign.foreign "CFPreferencesRemoveSuitePreferencesFromApp" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesSetAppValue = Foreign.foreign "CFPreferencesSetAppValue" ((ptr CFString.t) @-> (ptr void) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesSetMultiple = Foreign.foreign "CFPreferencesSetMultiple" ((ptr CFDictionary.t) @-> (ptr CFArray.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesSetValue = Foreign.foreign "CFPreferencesSetValue" ((ptr CFString.t) @-> (ptr void) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesSynchronize = Foreign.foreign "CFPreferencesSynchronize" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning bool)
let _CFPropertyListCreateData = Foreign.foreign "CFPropertyListCreateData" ((ptr CFAllocator.t) @-> (ptr void) @-> llong @-> ullong @-> (ptr (ptr CFError.t)) @-> returning (ptr CFData.t))
let _CFPropertyListCreateDeepCopy = Foreign.foreign "CFPropertyListCreateDeepCopy" ((ptr CFAllocator.t) @-> (ptr void) @-> ullong @-> returning (ptr void))
let _CFPropertyListCreateFromStream = Foreign.foreign "CFPropertyListCreateFromStream" ((ptr CFAllocator.t) @-> (ptr CFReadStream.t) @-> llong @-> ullong @-> (ptr llong) @-> (ptr (ptr CFString.t)) @-> returning (ptr void))
let _CFPropertyListCreateFromXMLData = Foreign.foreign "CFPropertyListCreateFromXMLData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> ullong @-> (ptr (ptr CFString.t)) @-> returning (ptr void))
let _CFPropertyListCreateWithData = Foreign.foreign "CFPropertyListCreateWithData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> ullong @-> (ptr llong) @-> (ptr (ptr CFError.t)) @-> returning (ptr void))
let _CFPropertyListCreateWithStream = Foreign.foreign "CFPropertyListCreateWithStream" ((ptr CFAllocator.t) @-> (ptr CFReadStream.t) @-> llong @-> ullong @-> (ptr llong) @-> (ptr (ptr CFError.t)) @-> returning (ptr void))
let _CFPropertyListCreateXMLData = Foreign.foreign "CFPropertyListCreateXMLData" ((ptr CFAllocator.t) @-> (ptr void) @-> returning (ptr CFData.t))
let _CFPropertyListIsValid = Foreign.foreign "CFPropertyListIsValid" ((ptr void) @-> llong @-> returning bool)
let _CFPropertyListWrite = Foreign.foreign "CFPropertyListWrite" ((ptr void) @-> (ptr CFWriteStream.t) @-> llong @-> ullong @-> (ptr (ptr CFError.t)) @-> returning llong)
let _CFPropertyListWriteToStream = Foreign.foreign "CFPropertyListWriteToStream" ((ptr void) @-> (ptr CFWriteStream.t) @-> llong @-> (ptr (ptr CFString.t)) @-> returning llong)
(* let _CFRangeMake = Foreign.foreign "Camlkit_CFRangeMake" (llong @-> llong @-> returning CFRange.t) *)
let _CFReadStreamClose = Foreign.foreign "CFReadStreamClose" ((ptr CFReadStream.t) @-> returning void)
let _CFReadStreamCopyDispatchQueue = Foreign.foreign "CFReadStreamCopyDispatchQueue" ((ptr CFReadStream.t) @-> returning id)
let _CFReadStreamCopyError = Foreign.foreign "CFReadStreamCopyError" ((ptr CFReadStream.t) @-> returning (ptr CFError.t))
let _CFReadStreamCopyProperty = Foreign.foreign "CFReadStreamCopyProperty" ((ptr CFReadStream.t) @-> (ptr CFString.t) @-> returning id)
let _CFReadStreamCreateWithBytesNoCopy = Foreign.foreign "CFReadStreamCreateWithBytesNoCopy" ((ptr CFAllocator.t) @-> string @-> llong @-> (ptr CFAllocator.t) @-> returning (ptr CFReadStream.t))
let _CFReadStreamCreateWithFile = Foreign.foreign "CFReadStreamCreateWithFile" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFReadStream.t))
let _CFReadStreamGetBuffer = Foreign.foreign "CFReadStreamGetBuffer" ((ptr CFReadStream.t) @-> llong @-> (ptr llong) @-> returning string)
let _CFReadStreamGetError = Foreign.foreign "CFReadStreamGetError" ((ptr CFReadStream.t) @-> returning CFStreamError.t)
let _CFReadStreamGetStatus = Foreign.foreign "CFReadStreamGetStatus" ((ptr CFReadStream.t) @-> returning llong)
let _CFReadStreamGetTypeID = Foreign.foreign "CFReadStreamGetTypeID" (void @-> returning ullong)
let _CFReadStreamHasBytesAvailable = Foreign.foreign "CFReadStreamHasBytesAvailable" ((ptr CFReadStream.t) @-> returning bool)
let _CFReadStreamOpen = Foreign.foreign "CFReadStreamOpen" ((ptr CFReadStream.t) @-> returning bool)
let _CFReadStreamRead = Foreign.foreign "CFReadStreamRead" ((ptr CFReadStream.t) @-> string @-> llong @-> returning llong)
let _CFReadStreamScheduleWithRunLoop = Foreign.foreign "CFReadStreamScheduleWithRunLoop" ((ptr CFReadStream.t) @-> (ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFReadStreamSetClient = Foreign.foreign "CFReadStreamSetClient" ((ptr CFReadStream.t) @-> ullong @-> Foreign.funptr ((ptr CFReadStream.t) @-> ullong @-> (ptr void) @-> returning void) @-> (ptr CFStreamClientContext.t) @-> returning bool)
let _CFReadStreamSetDispatchQueue = Foreign.foreign "CFReadStreamSetDispatchQueue" ((ptr CFReadStream.t) @-> id @-> returning void)
let _CFReadStreamSetProperty = Foreign.foreign "CFReadStreamSetProperty" ((ptr CFReadStream.t) @-> (ptr CFString.t) @-> id @-> returning bool)
let _CFReadStreamUnscheduleFromRunLoop = Foreign.foreign "CFReadStreamUnscheduleFromRunLoop" ((ptr CFReadStream.t) @-> (ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFRelease = Foreign.foreign "CFRelease" (id @-> returning void)
let _CFRetain = Foreign.foreign "CFRetain" (id @-> returning id)
let _CFRunLoopAddCommonMode = Foreign.foreign "CFRunLoopAddCommonMode" ((ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopAddObserver = Foreign.foreign "CFRunLoopAddObserver" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopObserver.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopAddSource = Foreign.foreign "CFRunLoopAddSource" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopSource.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopAddTimer = Foreign.foreign "CFRunLoopAddTimer" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopTimer.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopContainsObserver = Foreign.foreign "CFRunLoopContainsObserver" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopObserver.t) @-> (ptr CFString.t) @-> returning bool)
let _CFRunLoopContainsSource = Foreign.foreign "CFRunLoopContainsSource" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopSource.t) @-> (ptr CFString.t) @-> returning bool)
let _CFRunLoopContainsTimer = Foreign.foreign "CFRunLoopContainsTimer" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopTimer.t) @-> (ptr CFString.t) @-> returning bool)
let _CFRunLoopCopyAllModes = Foreign.foreign "CFRunLoopCopyAllModes" ((ptr CFRunLoop.t) @-> returning (ptr CFArray.t))
let _CFRunLoopCopyCurrentMode = Foreign.foreign "CFRunLoopCopyCurrentMode" ((ptr CFRunLoop.t) @-> returning (ptr CFString.t))
let _CFRunLoopGetCurrent = Foreign.foreign "CFRunLoopGetCurrent" (void @-> returning (ptr CFRunLoop.t))
let _CFRunLoopGetMain = Foreign.foreign "CFRunLoopGetMain" (void @-> returning (ptr CFRunLoop.t))
let _CFRunLoopGetNextTimerFireDate = Foreign.foreign "CFRunLoopGetNextTimerFireDate" ((ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning double)
let _CFRunLoopGetTypeID = Foreign.foreign "CFRunLoopGetTypeID" (void @-> returning ullong)
let _CFRunLoopIsWaiting = Foreign.foreign "CFRunLoopIsWaiting" ((ptr CFRunLoop.t) @-> returning bool)
let _CFRunLoopObserverCreate = Foreign.foreign "CFRunLoopObserverCreate" ((ptr CFAllocator.t) @-> ullong @-> bool @-> llong @-> Foreign.funptr ((ptr CFRunLoopObserver.t) @-> ullong @-> (ptr void) @-> returning void) @-> (ptr CFRunLoopObserverContext.t) @-> returning (ptr CFRunLoopObserver.t))
let _CFRunLoopObserverCreateWithHandler = Foreign.foreign "CFRunLoopObserverCreateWithHandler" ((ptr CFAllocator.t) @-> ullong @-> bool @-> llong @-> Foreign.funptr ((ptr CFRunLoopObserver.t) @-> ullong @-> returning void) @-> returning (ptr CFRunLoopObserver.t))
let _CFRunLoopObserverDoesRepeat = Foreign.foreign "CFRunLoopObserverDoesRepeat" ((ptr CFRunLoopObserver.t) @-> returning bool)
let _CFRunLoopObserverGetActivities = Foreign.foreign "CFRunLoopObserverGetActivities" ((ptr CFRunLoopObserver.t) @-> returning ullong)
let _CFRunLoopObserverGetContext = Foreign.foreign "CFRunLoopObserverGetContext" ((ptr CFRunLoopObserver.t) @-> (ptr CFRunLoopObserverContext.t) @-> returning void)
let _CFRunLoopObserverGetOrder = Foreign.foreign "CFRunLoopObserverGetOrder" ((ptr CFRunLoopObserver.t) @-> returning llong)
let _CFRunLoopObserverGetTypeID = Foreign.foreign "CFRunLoopObserverGetTypeID" (void @-> returning ullong)
let _CFRunLoopObserverInvalidate = Foreign.foreign "CFRunLoopObserverInvalidate" ((ptr CFRunLoopObserver.t) @-> returning void)
let _CFRunLoopObserverIsValid = Foreign.foreign "CFRunLoopObserverIsValid" ((ptr CFRunLoopObserver.t) @-> returning bool)
let _CFRunLoopPerformBlock = Foreign.foreign "CFRunLoopPerformBlock" ((ptr CFRunLoop.t) @-> id @-> Foreign.funptr (void @-> returning void) @-> returning void)
let _CFRunLoopRemoveObserver = Foreign.foreign "CFRunLoopRemoveObserver" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopObserver.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopRemoveSource = Foreign.foreign "CFRunLoopRemoveSource" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopSource.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopRemoveTimer = Foreign.foreign "CFRunLoopRemoveTimer" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopTimer.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopRun = Foreign.foreign "CFRunLoopRun" (void @-> returning void)
let _CFRunLoopRunInMode = Foreign.foreign "CFRunLoopRunInMode" ((ptr CFString.t) @-> double @-> bool @-> returning int)
let _CFRunLoopSourceCreate = Foreign.foreign "CFRunLoopSourceCreate" ((ptr CFAllocator.t) @-> llong @-> (ptr CFRunLoopSourceContext.t) @-> returning (ptr CFRunLoopSource.t))
let _CFRunLoopSourceGetContext = Foreign.foreign "CFRunLoopSourceGetContext" ((ptr CFRunLoopSource.t) @-> (ptr CFRunLoopSourceContext.t) @-> returning void)
let _CFRunLoopSourceGetOrder = Foreign.foreign "CFRunLoopSourceGetOrder" ((ptr CFRunLoopSource.t) @-> returning llong)
let _CFRunLoopSourceGetTypeID = Foreign.foreign "CFRunLoopSourceGetTypeID" (void @-> returning ullong)
let _CFRunLoopSourceInvalidate = Foreign.foreign "CFRunLoopSourceInvalidate" ((ptr CFRunLoopSource.t) @-> returning void)
let _CFRunLoopSourceIsValid = Foreign.foreign "CFRunLoopSourceIsValid" ((ptr CFRunLoopSource.t) @-> returning bool)
let _CFRunLoopSourceSignal = Foreign.foreign "CFRunLoopSourceSignal" ((ptr CFRunLoopSource.t) @-> returning void)
let _CFRunLoopStop = Foreign.foreign "CFRunLoopStop" ((ptr CFRunLoop.t) @-> returning void)
let _CFRunLoopTimerCreate = Foreign.foreign "CFRunLoopTimerCreate" ((ptr CFAllocator.t) @-> double @-> double @-> ullong @-> llong @-> Foreign.funptr ((ptr CFRunLoopTimer.t) @-> (ptr void) @-> returning void) @-> (ptr CFRunLoopTimerContext.t) @-> returning (ptr CFRunLoopTimer.t))
let _CFRunLoopTimerCreateWithHandler = Foreign.foreign "CFRunLoopTimerCreateWithHandler" ((ptr CFAllocator.t) @-> double @-> double @-> ullong @-> llong @-> Foreign.funptr ((ptr CFRunLoopTimer.t) @-> returning void) @-> returning (ptr CFRunLoopTimer.t))
let _CFRunLoopTimerDoesRepeat = Foreign.foreign "CFRunLoopTimerDoesRepeat" ((ptr CFRunLoopTimer.t) @-> returning bool)
let _CFRunLoopTimerGetContext = Foreign.foreign "CFRunLoopTimerGetContext" ((ptr CFRunLoopTimer.t) @-> (ptr CFRunLoopTimerContext.t) @-> returning void)
let _CFRunLoopTimerGetInterval = Foreign.foreign "CFRunLoopTimerGetInterval" ((ptr CFRunLoopTimer.t) @-> returning double)
let _CFRunLoopTimerGetNextFireDate = Foreign.foreign "CFRunLoopTimerGetNextFireDate" ((ptr CFRunLoopTimer.t) @-> returning double)
let _CFRunLoopTimerGetOrder = Foreign.foreign "CFRunLoopTimerGetOrder" ((ptr CFRunLoopTimer.t) @-> returning llong)
let _CFRunLoopTimerGetTolerance = Foreign.foreign "CFRunLoopTimerGetTolerance" ((ptr CFRunLoopTimer.t) @-> returning double)
let _CFRunLoopTimerGetTypeID = Foreign.foreign "CFRunLoopTimerGetTypeID" (void @-> returning ullong)
let _CFRunLoopTimerInvalidate = Foreign.foreign "CFRunLoopTimerInvalidate" ((ptr CFRunLoopTimer.t) @-> returning void)
let _CFRunLoopTimerIsValid = Foreign.foreign "CFRunLoopTimerIsValid" ((ptr CFRunLoopTimer.t) @-> returning bool)
let _CFRunLoopTimerSetNextFireDate = Foreign.foreign "CFRunLoopTimerSetNextFireDate" ((ptr CFRunLoopTimer.t) @-> double @-> returning void)
let _CFRunLoopTimerSetTolerance = Foreign.foreign "CFRunLoopTimerSetTolerance" ((ptr CFRunLoopTimer.t) @-> double @-> returning void)
let _CFRunLoopWakeUp = Foreign.foreign "CFRunLoopWakeUp" ((ptr CFRunLoop.t) @-> returning void)
let _CFSetAddValue = Foreign.foreign "CFSetAddValue" ((ptr CFSet.t) @-> (ptr void) @-> returning void)
let _CFSetApplyFunction = Foreign.foreign "CFSetApplyFunction" ((ptr CFSet.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFSetContainsValue = Foreign.foreign "CFSetContainsValue" ((ptr CFSet.t) @-> (ptr void) @-> returning bool)
let _CFSetCreate = Foreign.foreign "CFSetCreate" ((ptr CFAllocator.t) @-> (ptr (ptr void)) @-> llong @-> (ptr CFSetCallBacks.t) @-> returning (ptr CFSet.t))
let _CFSetCreateCopy = Foreign.foreign "CFSetCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFSet.t) @-> returning (ptr CFSet.t))
let _CFSetCreateMutable = Foreign.foreign "CFSetCreateMutable" ((ptr CFAllocator.t) @-> llong @-> (ptr CFSetCallBacks.t) @-> returning (ptr CFSet.t))
let _CFSetCreateMutableCopy = Foreign.foreign "CFSetCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFSet.t) @-> returning (ptr CFSet.t))
let _CFSetGetCount = Foreign.foreign "CFSetGetCount" ((ptr CFSet.t) @-> returning llong)
let _CFSetGetCountOfValue = Foreign.foreign "CFSetGetCountOfValue" ((ptr CFSet.t) @-> (ptr void) @-> returning llong)
let _CFSetGetTypeID = Foreign.foreign "CFSetGetTypeID" (void @-> returning ullong)
let _CFSetGetValue = Foreign.foreign "CFSetGetValue" ((ptr CFSet.t) @-> (ptr void) @-> returning (ptr void))
let _CFSetGetValueIfPresent = Foreign.foreign "CFSetGetValueIfPresent" ((ptr CFSet.t) @-> (ptr void) @-> (ptr (ptr void)) @-> returning bool)
let _CFSetGetValues = Foreign.foreign "CFSetGetValues" ((ptr CFSet.t) @-> (ptr (ptr void)) @-> returning void)
let _CFSetRemoveAllValues = Foreign.foreign "CFSetRemoveAllValues" ((ptr CFSet.t) @-> returning void)
let _CFSetRemoveValue = Foreign.foreign "CFSetRemoveValue" ((ptr CFSet.t) @-> (ptr void) @-> returning void)
let _CFSetReplaceValue = Foreign.foreign "CFSetReplaceValue" ((ptr CFSet.t) @-> (ptr void) @-> returning void)
let _CFSetSetValue = Foreign.foreign "CFSetSetValue" ((ptr CFSet.t) @-> (ptr void) @-> returning void)
let _CFShow = Foreign.foreign "CFShow" (id @-> returning void)
let _CFShowStr = Foreign.foreign "CFShowStr" ((ptr CFString.t) @-> returning void)
let _CFSocketConnectToAddress = Foreign.foreign "CFSocketConnectToAddress" ((ptr CFSocket.t) @-> (ptr CFData.t) @-> double @-> returning llong)
let _CFSocketCopyAddress = Foreign.foreign "CFSocketCopyAddress" ((ptr CFSocket.t) @-> returning (ptr CFData.t))
let _CFSocketCopyPeerAddress = Foreign.foreign "CFSocketCopyPeerAddress" ((ptr CFSocket.t) @-> returning (ptr CFData.t))
let _CFSocketCopyRegisteredSocketSignature = Foreign.foreign "CFSocketCopyRegisteredSocketSignature" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> (ptr CFSocketSignature.t) @-> (ptr (ptr CFData.t)) @-> returning llong)
let _CFSocketCopyRegisteredValue = Foreign.foreign "CFSocketCopyRegisteredValue" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> (ptr (ptr void)) @-> (ptr (ptr CFData.t)) @-> returning llong)
let _CFSocketCreate = Foreign.foreign "CFSocketCreate" ((ptr CFAllocator.t) @-> int @-> int @-> int @-> ullong @-> Foreign.funptr ((ptr CFSocket.t) @-> ullong @-> (ptr CFData.t) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr CFSocketContext.t) @-> returning (ptr CFSocket.t))
let _CFSocketCreateConnectedToSocketSignature = Foreign.foreign "CFSocketCreateConnectedToSocketSignature" ((ptr CFAllocator.t) @-> (ptr CFSocketSignature.t) @-> ullong @-> Foreign.funptr ((ptr CFSocket.t) @-> ullong @-> (ptr CFData.t) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr CFSocketContext.t) @-> double @-> returning (ptr CFSocket.t))
let _CFSocketCreateRunLoopSource = Foreign.foreign "CFSocketCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFSocket.t) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFSocketCreateWithNative = Foreign.foreign "CFSocketCreateWithNative" ((ptr CFAllocator.t) @-> int @-> ullong @-> Foreign.funptr ((ptr CFSocket.t) @-> ullong @-> (ptr CFData.t) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr CFSocketContext.t) @-> returning (ptr CFSocket.t))
let _CFSocketCreateWithSocketSignature = Foreign.foreign "CFSocketCreateWithSocketSignature" ((ptr CFAllocator.t) @-> (ptr CFSocketSignature.t) @-> ullong @-> Foreign.funptr ((ptr CFSocket.t) @-> ullong @-> (ptr CFData.t) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr CFSocketContext.t) @-> returning (ptr CFSocket.t))
let _CFSocketDisableCallBacks = Foreign.foreign "CFSocketDisableCallBacks" ((ptr CFSocket.t) @-> ullong @-> returning void)
let _CFSocketEnableCallBacks = Foreign.foreign "CFSocketEnableCallBacks" ((ptr CFSocket.t) @-> ullong @-> returning void)
let _CFSocketGetContext = Foreign.foreign "CFSocketGetContext" ((ptr CFSocket.t) @-> (ptr CFSocketContext.t) @-> returning void)
let _CFSocketGetDefaultNameRegistryPortNumber = Foreign.foreign "CFSocketGetDefaultNameRegistryPortNumber" (void @-> returning ushort)
let _CFSocketGetNative = Foreign.foreign "CFSocketGetNative" ((ptr CFSocket.t) @-> returning int)
let _CFSocketGetSocketFlags = Foreign.foreign "CFSocketGetSocketFlags" ((ptr CFSocket.t) @-> returning ullong)
let _CFSocketGetTypeID = Foreign.foreign "CFSocketGetTypeID" (void @-> returning ullong)
let _CFSocketInvalidate = Foreign.foreign "CFSocketInvalidate" ((ptr CFSocket.t) @-> returning void)
let _CFSocketIsValid = Foreign.foreign "CFSocketIsValid" ((ptr CFSocket.t) @-> returning bool)
let _CFSocketRegisterSocketSignature = Foreign.foreign "CFSocketRegisterSocketSignature" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> (ptr CFSocketSignature.t) @-> returning llong)
let _CFSocketRegisterValue = Foreign.foreign "CFSocketRegisterValue" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> (ptr void) @-> returning llong)
let _CFSocketSendData = Foreign.foreign "CFSocketSendData" ((ptr CFSocket.t) @-> (ptr CFData.t) @-> (ptr CFData.t) @-> double @-> returning llong)
let _CFSocketSetAddress = Foreign.foreign "CFSocketSetAddress" ((ptr CFSocket.t) @-> (ptr CFData.t) @-> returning llong)
let _CFSocketSetDefaultNameRegistryPortNumber = Foreign.foreign "CFSocketSetDefaultNameRegistryPortNumber" (ushort @-> returning void)
let _CFSocketSetSocketFlags = Foreign.foreign "CFSocketSetSocketFlags" ((ptr CFSocket.t) @-> ullong @-> returning void)
let _CFSocketUnregister = Foreign.foreign "CFSocketUnregister" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> returning llong)
let _CFStreamCreateBoundPair = Foreign.foreign "CFStreamCreateBoundPair" ((ptr CFAllocator.t) @-> (ptr (ptr CFReadStream.t)) @-> (ptr (ptr CFWriteStream.t)) @-> llong @-> returning void)
let _CFStreamCreatePairWithPeerSocketSignature = Foreign.foreign "CFStreamCreatePairWithPeerSocketSignature" ((ptr CFAllocator.t) @-> (ptr CFSocketSignature.t) @-> (ptr (ptr CFReadStream.t)) @-> (ptr (ptr CFWriteStream.t)) @-> returning void)
let _CFStreamCreatePairWithSocket = Foreign.foreign "CFStreamCreatePairWithSocket" ((ptr CFAllocator.t) @-> int @-> (ptr (ptr CFReadStream.t)) @-> (ptr (ptr CFWriteStream.t)) @-> returning void)
let _CFStreamCreatePairWithSocketToHost = Foreign.foreign "CFStreamCreatePairWithSocketToHost" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> uint @-> (ptr (ptr CFReadStream.t)) @-> (ptr (ptr CFWriteStream.t)) @-> returning void)
let _CFStringAppend = Foreign.foreign "CFStringAppend" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFStringAppendCString = Foreign.foreign "CFStringAppendCString" ((ptr CFString.t) @-> string @-> uint @-> returning void)
let _CFStringAppendCharacters = Foreign.foreign "CFStringAppendCharacters" ((ptr CFString.t) @-> (ptr ushort) @-> llong @-> returning void)
let _CFStringAppendFormat = Foreign.foreign "CFStringAppendFormat" ((ptr CFString.t) @-> (ptr CFDictionary.t) @-> (ptr CFString.t) @-> returning void)
let _CFStringAppendFormatAndArguments = Foreign.foreign "CFStringAppendFormatAndArguments" ((ptr CFString.t) @-> (ptr CFDictionary.t) @-> (ptr CFString.t) @-> (ptr void) @-> returning void)
let _CFStringAppendPascalString = Foreign.foreign "CFStringAppendPascalString" ((ptr CFString.t) @-> string @-> uint @-> returning void)
let _CFStringCapitalize = Foreign.foreign "CFStringCapitalize" ((ptr CFString.t) @-> (ptr CFLocale.t) @-> returning void)
let _CFStringCompare = Foreign.foreign "CFStringCompare" ((ptr CFString.t) @-> (ptr CFString.t) @-> ullong @-> returning llong)
let _CFStringCompareWithOptions = Foreign.foreign "CFStringCompareWithOptions" ((ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> returning llong)
let _CFStringCompareWithOptionsAndLocale = Foreign.foreign "CFStringCompareWithOptionsAndLocale" ((ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> (ptr CFLocale.t) @-> returning llong)
let _CFStringConvertEncodingToIANACharSetName = Foreign.foreign "CFStringConvertEncodingToIANACharSetName" (uint @-> returning (ptr CFString.t))
let _CFStringConvertEncodingToNSStringEncoding = Foreign.foreign "CFStringConvertEncodingToNSStringEncoding" (uint @-> returning ullong)
let _CFStringConvertEncodingToWindowsCodepage = Foreign.foreign "CFStringConvertEncodingToWindowsCodepage" (uint @-> returning uint)
let _CFStringConvertIANACharSetNameToEncoding = Foreign.foreign "CFStringConvertIANACharSetNameToEncoding" ((ptr CFString.t) @-> returning uint)
let _CFStringConvertNSStringEncodingToEncoding = Foreign.foreign "CFStringConvertNSStringEncodingToEncoding" (ullong @-> returning uint)
let _CFStringConvertWindowsCodepageToEncoding = Foreign.foreign "CFStringConvertWindowsCodepageToEncoding" (uint @-> returning uint)
let _CFStringCreateArrayBySeparatingStrings = Foreign.foreign "CFStringCreateArrayBySeparatingStrings" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFStringCreateArrayWithFindResults = Foreign.foreign "CFStringCreateArrayWithFindResults" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> returning (ptr CFArray.t))
let _CFStringCreateByCombiningStrings = Foreign.foreign "CFStringCreateByCombiningStrings" ((ptr CFAllocator.t) @-> (ptr CFArray.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFStringCreateCopy = Foreign.foreign "CFStringCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFStringCreateExternalRepresentation = Foreign.foreign "CFStringCreateExternalRepresentation" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> uint @-> uchar @-> returning (ptr CFData.t))
let _CFStringCreateFromExternalRepresentation = Foreign.foreign "CFStringCreateFromExternalRepresentation" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> uint @-> returning (ptr CFString.t))
let _CFStringCreateMutable = Foreign.foreign "CFStringCreateMutable" ((ptr CFAllocator.t) @-> llong @-> returning (ptr CFString.t))
let _CFStringCreateMutableCopy = Foreign.foreign "CFStringCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFStringCreateMutableWithExternalCharactersNoCopy = Foreign.foreign "CFStringCreateMutableWithExternalCharactersNoCopy" ((ptr CFAllocator.t) @-> (ptr ushort) @-> llong @-> llong @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithBytes = Foreign.foreign "CFStringCreateWithBytes" ((ptr CFAllocator.t) @-> string @-> llong @-> uint @-> bool @-> returning (ptr CFString.t))
let _CFStringCreateWithBytesNoCopy = Foreign.foreign "CFStringCreateWithBytesNoCopy" ((ptr CFAllocator.t) @-> string @-> llong @-> uint @-> bool @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithCString = Foreign.foreign "CFStringCreateWithCString" ((ptr CFAllocator.t) @-> string @-> uint @-> returning (ptr CFString.t))
let _CFStringCreateWithCStringNoCopy = Foreign.foreign "CFStringCreateWithCStringNoCopy" ((ptr CFAllocator.t) @-> string @-> uint @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithCharacters = Foreign.foreign "CFStringCreateWithCharacters" ((ptr CFAllocator.t) @-> (ptr ushort) @-> llong @-> returning (ptr CFString.t))
let _CFStringCreateWithCharactersNoCopy = Foreign.foreign "CFStringCreateWithCharactersNoCopy" ((ptr CFAllocator.t) @-> (ptr ushort) @-> llong @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithFileSystemRepresentation = Foreign.foreign "CFStringCreateWithFileSystemRepresentation" ((ptr CFAllocator.t) @-> string @-> returning (ptr CFString.t))
let _CFStringCreateWithFormat = Foreign.foreign "CFStringCreateWithFormat" ((ptr CFAllocator.t) @-> (ptr CFDictionary.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithFormatAndArguments = Foreign.foreign "CFStringCreateWithFormatAndArguments" ((ptr CFAllocator.t) @-> (ptr CFDictionary.t) @-> (ptr CFString.t) @-> (ptr void) @-> returning (ptr CFString.t))
let _CFStringCreateWithPascalString = Foreign.foreign "CFStringCreateWithPascalString" ((ptr CFAllocator.t) @-> string @-> uint @-> returning (ptr CFString.t))
let _CFStringCreateWithPascalStringNoCopy = Foreign.foreign "CFStringCreateWithPascalStringNoCopy" ((ptr CFAllocator.t) @-> string @-> uint @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithSubstring = Foreign.foreign "CFStringCreateWithSubstring" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> CFRange.t @-> returning (ptr CFString.t))
let _CFStringDelete = Foreign.foreign "CFStringDelete" ((ptr CFString.t) @-> CFRange.t @-> returning void)
let _CFStringFind = Foreign.foreign "CFStringFind" ((ptr CFString.t) @-> (ptr CFString.t) @-> ullong @-> returning CFRange.t)
let _CFStringFindAndReplace = Foreign.foreign "CFStringFindAndReplace" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> returning llong)
let _CFStringFindCharacterFromSet = Foreign.foreign "CFStringFindCharacterFromSet" ((ptr CFString.t) @-> (ptr CFCharacterSet.t) @-> CFRange.t @-> ullong @-> (ptr CFRange.t) @-> returning bool)
let _CFStringFindWithOptions = Foreign.foreign "CFStringFindWithOptions" ((ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> (ptr CFRange.t) @-> returning bool)
let _CFStringFindWithOptionsAndLocale = Foreign.foreign "CFStringFindWithOptionsAndLocale" ((ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> (ptr CFLocale.t) @-> (ptr CFRange.t) @-> returning bool)
let _CFStringFold = Foreign.foreign "CFStringFold" ((ptr CFString.t) @-> ullong @-> (ptr CFLocale.t) @-> returning void)
let _CFStringGetBytes = Foreign.foreign "CFStringGetBytes" ((ptr CFString.t) @-> CFRange.t @-> uint @-> uchar @-> bool @-> string @-> llong @-> (ptr llong) @-> returning llong)
let _CFStringGetCString = Foreign.foreign "CFStringGetCString" ((ptr CFString.t) @-> string @-> llong @-> uint @-> returning bool)
let _CFStringGetCStringPtr = Foreign.foreign "CFStringGetCStringPtr" ((ptr CFString.t) @-> uint @-> returning string)
let _CFStringGetCharacterAtIndex = Foreign.foreign "CFStringGetCharacterAtIndex" ((ptr CFString.t) @-> llong @-> returning ushort)
(* let _CFStringGetCharacterFromInlineBuffer = Foreign.foreign "Camlkit_CFStringGetCharacterFromInlineBuffer" ((ptr CFStringInlineBuffer.t) @-> llong @-> returning ushort) *)
let _CFStringGetCharacters = Foreign.foreign "CFStringGetCharacters" ((ptr CFString.t) @-> CFRange.t @-> (ptr ushort) @-> returning void)
let _CFStringGetCharactersPtr = Foreign.foreign "CFStringGetCharactersPtr" ((ptr CFString.t) @-> returning (ptr ushort))
let _CFStringGetDoubleValue = Foreign.foreign "CFStringGetDoubleValue" ((ptr CFString.t) @-> returning double)
let _CFStringGetFastestEncoding = Foreign.foreign "CFStringGetFastestEncoding" ((ptr CFString.t) @-> returning uint)
let _CFStringGetFileSystemRepresentation = Foreign.foreign "CFStringGetFileSystemRepresentation" ((ptr CFString.t) @-> string @-> llong @-> returning bool)
let _CFStringGetHyphenationLocationBeforeIndex = Foreign.foreign "CFStringGetHyphenationLocationBeforeIndex" ((ptr CFString.t) @-> llong @-> CFRange.t @-> ullong @-> (ptr CFLocale.t) @-> (ptr uint) @-> returning llong)
let _CFStringGetIntValue = Foreign.foreign "CFStringGetIntValue" ((ptr CFString.t) @-> returning int)
let _CFStringGetLength = Foreign.foreign "CFStringGetLength" ((ptr CFString.t) @-> returning llong)
let _CFStringGetLineBounds = Foreign.foreign "CFStringGetLineBounds" ((ptr CFString.t) @-> CFRange.t @-> (ptr llong) @-> (ptr llong) @-> (ptr llong) @-> returning void)
let _CFStringGetListOfAvailableEncodings = Foreign.foreign "CFStringGetListOfAvailableEncodings" (void @-> returning (ptr uint))
(* let _CFStringGetLongCharacterForSurrogatePair = Foreign.foreign "Camlkit_CFStringGetLongCharacterForSurrogatePair" (ushort @-> ushort @-> returning uint) *)
let _CFStringGetMaximumSizeForEncoding = Foreign.foreign "CFStringGetMaximumSizeForEncoding" (llong @-> uint @-> returning llong)
let _CFStringGetMaximumSizeOfFileSystemRepresentation = Foreign.foreign "CFStringGetMaximumSizeOfFileSystemRepresentation" ((ptr CFString.t) @-> returning llong)
let _CFStringGetMostCompatibleMacStringEncoding = Foreign.foreign "CFStringGetMostCompatibleMacStringEncoding" (uint @-> returning uint)
let _CFStringGetNameOfEncoding = Foreign.foreign "CFStringGetNameOfEncoding" (uint @-> returning (ptr CFString.t))
let _CFStringGetParagraphBounds = Foreign.foreign "CFStringGetParagraphBounds" ((ptr CFString.t) @-> CFRange.t @-> (ptr llong) @-> (ptr llong) @-> (ptr llong) @-> returning void)
let _CFStringGetPascalString = Foreign.foreign "CFStringGetPascalString" ((ptr CFString.t) @-> string @-> llong @-> uint @-> returning bool)
let _CFStringGetPascalStringPtr = Foreign.foreign "CFStringGetPascalStringPtr" ((ptr CFString.t) @-> uint @-> returning string)
let _CFStringGetRangeOfComposedCharactersAtIndex = Foreign.foreign "CFStringGetRangeOfComposedCharactersAtIndex" ((ptr CFString.t) @-> llong @-> returning CFRange.t)
let _CFStringGetSmallestEncoding = Foreign.foreign "CFStringGetSmallestEncoding" ((ptr CFString.t) @-> returning uint)
(* let _CFStringGetSurrogatePairForLongCharacter = Foreign.foreign "Camlkit_CFStringGetSurrogatePairForLongCharacter" (uint @-> (ptr ushort) @-> returning bool) *)
let _CFStringGetSystemEncoding = Foreign.foreign "CFStringGetSystemEncoding" (void @-> returning uint)
let _CFStringGetTypeID = Foreign.foreign "CFStringGetTypeID" (void @-> returning ullong)
let _CFStringHasPrefix = Foreign.foreign "CFStringHasPrefix" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning bool)
let _CFStringHasSuffix = Foreign.foreign "CFStringHasSuffix" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning bool)
(* let _CFStringInitInlineBuffer = Foreign.foreign "Camlkit_CFStringInitInlineBuffer" ((ptr CFString.t) @-> (ptr CFStringInlineBuffer.t) @-> CFRange.t @-> returning void) *)
let _CFStringInsert = Foreign.foreign "CFStringInsert" ((ptr CFString.t) @-> llong @-> (ptr CFString.t) @-> returning void)
let _CFStringIsEncodingAvailable = Foreign.foreign "CFStringIsEncodingAvailable" (uint @-> returning bool)
let _CFStringIsHyphenationAvailableForLocale = Foreign.foreign "CFStringIsHyphenationAvailableForLocale" ((ptr CFLocale.t) @-> returning bool)
(* let _CFStringIsSurrogateHighCharacter = Foreign.foreign "Camlkit_CFStringIsSurrogateHighCharacter" (ushort @-> returning bool) *)
(* let _CFStringIsSurrogateLowCharacter = Foreign.foreign "Camlkit_CFStringIsSurrogateLowCharacter" (ushort @-> returning bool) *)
let _CFStringLowercase = Foreign.foreign "CFStringLowercase" ((ptr CFString.t) @-> (ptr CFLocale.t) @-> returning void)
let _CFStringNormalize = Foreign.foreign "CFStringNormalize" ((ptr CFString.t) @-> llong @-> returning void)
let _CFStringPad = Foreign.foreign "CFStringPad" ((ptr CFString.t) @-> (ptr CFString.t) @-> llong @-> llong @-> returning void)
let _CFStringReplace = Foreign.foreign "CFStringReplace" ((ptr CFString.t) @-> CFRange.t @-> (ptr CFString.t) @-> returning void)
let _CFStringReplaceAll = Foreign.foreign "CFStringReplaceAll" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFStringSetExternalCharactersNoCopy = Foreign.foreign "CFStringSetExternalCharactersNoCopy" ((ptr CFString.t) @-> (ptr ushort) @-> llong @-> llong @-> returning void)
let _CFStringTokenizerAdvanceToNextToken = Foreign.foreign "CFStringTokenizerAdvanceToNextToken" ((ptr CFStringTokenizer.t) @-> returning ullong)
let _CFStringTokenizerCopyBestStringLanguage = Foreign.foreign "CFStringTokenizerCopyBestStringLanguage" ((ptr CFString.t) @-> CFRange.t @-> returning (ptr CFString.t))
let _CFStringTokenizerCopyCurrentTokenAttribute = Foreign.foreign "CFStringTokenizerCopyCurrentTokenAttribute" ((ptr CFStringTokenizer.t) @-> ullong @-> returning id)
let _CFStringTokenizerCreate = Foreign.foreign "CFStringTokenizerCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> (ptr CFLocale.t) @-> returning (ptr CFStringTokenizer.t))
let _CFStringTokenizerGetCurrentSubTokens = Foreign.foreign "CFStringTokenizerGetCurrentSubTokens" ((ptr CFStringTokenizer.t) @-> (ptr CFRange.t) @-> llong @-> (ptr CFArray.t) @-> returning llong)
let _CFStringTokenizerGetCurrentTokenRange = Foreign.foreign "CFStringTokenizerGetCurrentTokenRange" ((ptr CFStringTokenizer.t) @-> returning CFRange.t)
let _CFStringTokenizerGetTypeID = Foreign.foreign "CFStringTokenizerGetTypeID" (void @-> returning ullong)
let _CFStringTokenizerGoToTokenAtIndex = Foreign.foreign "CFStringTokenizerGoToTokenAtIndex" ((ptr CFStringTokenizer.t) @-> llong @-> returning ullong)
let _CFStringTokenizerSetString = Foreign.foreign "CFStringTokenizerSetString" ((ptr CFStringTokenizer.t) @-> (ptr CFString.t) @-> CFRange.t @-> returning void)
let _CFStringTransform = Foreign.foreign "CFStringTransform" ((ptr CFString.t) @-> (ptr CFRange.t) @-> (ptr CFString.t) @-> bool @-> returning bool)
let _CFStringTrim = Foreign.foreign "CFStringTrim" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFStringTrimWhitespace = Foreign.foreign "CFStringTrimWhitespace" ((ptr CFString.t) @-> returning void)
let _CFStringUppercase = Foreign.foreign "CFStringUppercase" ((ptr CFString.t) @-> (ptr CFLocale.t) @-> returning void)
(* let _CFSwapInt16 = Foreign.foreign "Camlkit_CFSwapInt16" (ushort @-> returning ushort) *)
(* let _CFSwapInt16BigToHost = Foreign.foreign "Camlkit_CFSwapInt16BigToHost" (ushort @-> returning ushort) *)
(* let _CFSwapInt16HostToBig = Foreign.foreign "Camlkit_CFSwapInt16HostToBig" (ushort @-> returning ushort) *)
(* let _CFSwapInt16HostToLittle = Foreign.foreign "Camlkit_CFSwapInt16HostToLittle" (ushort @-> returning ushort) *)
(* let _CFSwapInt16LittleToHost = Foreign.foreign "Camlkit_CFSwapInt16LittleToHost" (ushort @-> returning ushort) *)
(* let _CFSwapInt32 = Foreign.foreign "Camlkit_CFSwapInt32" (uint @-> returning uint) *)
(* let _CFSwapInt32BigToHost = Foreign.foreign "Camlkit_CFSwapInt32BigToHost" (uint @-> returning uint) *)
(* let _CFSwapInt32HostToBig = Foreign.foreign "Camlkit_CFSwapInt32HostToBig" (uint @-> returning uint) *)
(* let _CFSwapInt32HostToLittle = Foreign.foreign "Camlkit_CFSwapInt32HostToLittle" (uint @-> returning uint) *)
(* let _CFSwapInt32LittleToHost = Foreign.foreign "Camlkit_CFSwapInt32LittleToHost" (uint @-> returning uint) *)
(* let _CFSwapInt64 = Foreign.foreign "Camlkit_CFSwapInt64" (ullong @-> returning ullong) *)
(* let _CFSwapInt64BigToHost = Foreign.foreign "Camlkit_CFSwapInt64BigToHost" (ullong @-> returning ullong) *)
(* let _CFSwapInt64HostToBig = Foreign.foreign "Camlkit_CFSwapInt64HostToBig" (ullong @-> returning ullong) *)
(* let _CFSwapInt64HostToLittle = Foreign.foreign "Camlkit_CFSwapInt64HostToLittle" (ullong @-> returning ullong) *)
(* let _CFSwapInt64LittleToHost = Foreign.foreign "Camlkit_CFSwapInt64LittleToHost" (ullong @-> returning ullong) *)
let _CFTimeZoneCopyAbbreviation = Foreign.foreign "CFTimeZoneCopyAbbreviation" ((ptr CFTimeZone.t) @-> double @-> returning (ptr CFString.t))
let _CFTimeZoneCopyAbbreviationDictionary = Foreign.foreign "CFTimeZoneCopyAbbreviationDictionary" (void @-> returning (ptr CFDictionary.t))
let _CFTimeZoneCopyDefault = Foreign.foreign "CFTimeZoneCopyDefault" (void @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneCopyKnownNames = Foreign.foreign "CFTimeZoneCopyKnownNames" (void @-> returning (ptr CFArray.t))
let _CFTimeZoneCopyLocalizedName = Foreign.foreign "CFTimeZoneCopyLocalizedName" ((ptr CFTimeZone.t) @-> llong @-> (ptr CFLocale.t) @-> returning (ptr CFString.t))
let _CFTimeZoneCopySystem = Foreign.foreign "CFTimeZoneCopySystem" (void @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneCreate = Foreign.foreign "CFTimeZoneCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFData.t) @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneCreateWithName = Foreign.foreign "CFTimeZoneCreateWithName" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> bool @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneCreateWithTimeIntervalFromGMT = Foreign.foreign "CFTimeZoneCreateWithTimeIntervalFromGMT" ((ptr CFAllocator.t) @-> double @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneGetData = Foreign.foreign "CFTimeZoneGetData" ((ptr CFTimeZone.t) @-> returning (ptr CFData.t))
let _CFTimeZoneGetDaylightSavingTimeOffset = Foreign.foreign "CFTimeZoneGetDaylightSavingTimeOffset" ((ptr CFTimeZone.t) @-> double @-> returning double)
let _CFTimeZoneGetName = Foreign.foreign "CFTimeZoneGetName" ((ptr CFTimeZone.t) @-> returning (ptr CFString.t))
let _CFTimeZoneGetNextDaylightSavingTimeTransition = Foreign.foreign "CFTimeZoneGetNextDaylightSavingTimeTransition" ((ptr CFTimeZone.t) @-> double @-> returning double)
let _CFTimeZoneGetSecondsFromGMT = Foreign.foreign "CFTimeZoneGetSecondsFromGMT" ((ptr CFTimeZone.t) @-> double @-> returning double)
let _CFTimeZoneGetTypeID = Foreign.foreign "CFTimeZoneGetTypeID" (void @-> returning ullong)
let _CFTimeZoneIsDaylightSavingTime = Foreign.foreign "CFTimeZoneIsDaylightSavingTime" ((ptr CFTimeZone.t) @-> double @-> returning bool)
let _CFTimeZoneResetSystem = Foreign.foreign "CFTimeZoneResetSystem" (void @-> returning void)
let _CFTimeZoneSetAbbreviationDictionary = Foreign.foreign "CFTimeZoneSetAbbreviationDictionary" ((ptr CFDictionary.t) @-> returning void)
let _CFTimeZoneSetDefault = Foreign.foreign "CFTimeZoneSetDefault" ((ptr CFTimeZone.t) @-> returning void)
let _CFTreeAppendChild = Foreign.foreign "CFTreeAppendChild" ((ptr CFTree.t) @-> (ptr CFTree.t) @-> returning void)
let _CFTreeApplyFunctionToChildren = Foreign.foreign "CFTreeApplyFunctionToChildren" ((ptr CFTree.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFTreeCreate = Foreign.foreign "CFTreeCreate" ((ptr CFAllocator.t) @-> (ptr CFTreeContext.t) @-> returning (ptr CFTree.t))
let _CFTreeFindRoot = Foreign.foreign "CFTreeFindRoot" ((ptr CFTree.t) @-> returning (ptr CFTree.t))
let _CFTreeGetChildAtIndex = Foreign.foreign "CFTreeGetChildAtIndex" ((ptr CFTree.t) @-> llong @-> returning (ptr CFTree.t))
let _CFTreeGetChildCount = Foreign.foreign "CFTreeGetChildCount" ((ptr CFTree.t) @-> returning llong)
let _CFTreeGetChildren = Foreign.foreign "CFTreeGetChildren" ((ptr CFTree.t) @-> (ptr (ptr CFTree.t)) @-> returning void)
let _CFTreeGetContext = Foreign.foreign "CFTreeGetContext" ((ptr CFTree.t) @-> (ptr CFTreeContext.t) @-> returning void)
let _CFTreeGetFirstChild = Foreign.foreign "CFTreeGetFirstChild" ((ptr CFTree.t) @-> returning (ptr CFTree.t))
let _CFTreeGetNextSibling = Foreign.foreign "CFTreeGetNextSibling" ((ptr CFTree.t) @-> returning (ptr CFTree.t))
let _CFTreeGetParent = Foreign.foreign "CFTreeGetParent" ((ptr CFTree.t) @-> returning (ptr CFTree.t))
let _CFTreeGetTypeID = Foreign.foreign "CFTreeGetTypeID" (void @-> returning ullong)
let _CFTreeInsertSibling = Foreign.foreign "CFTreeInsertSibling" ((ptr CFTree.t) @-> (ptr CFTree.t) @-> returning void)
let _CFTreePrependChild = Foreign.foreign "CFTreePrependChild" ((ptr CFTree.t) @-> (ptr CFTree.t) @-> returning void)
let _CFTreeRemove = Foreign.foreign "CFTreeRemove" ((ptr CFTree.t) @-> returning void)
let _CFTreeRemoveAllChildren = Foreign.foreign "CFTreeRemoveAllChildren" ((ptr CFTree.t) @-> returning void)
let _CFTreeSetContext = Foreign.foreign "CFTreeSetContext" ((ptr CFTree.t) @-> (ptr CFTreeContext.t) @-> returning void)
let _CFTreeSortChildren = Foreign.foreign "CFTreeSortChildren" ((ptr CFTree.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> (ptr void) @-> returning llong) @-> (ptr void) @-> returning void)
let _CFURLCanBeDecomposed = Foreign.foreign "CFURLCanBeDecomposed" ((ptr CFURL.t) @-> returning bool)
let _CFURLClearResourcePropertyCache = Foreign.foreign "CFURLClearResourcePropertyCache" ((ptr CFURL.t) @-> returning void)
let _CFURLClearResourcePropertyCacheForKey = Foreign.foreign "CFURLClearResourcePropertyCacheForKey" ((ptr CFURL.t) @-> (ptr CFString.t) @-> returning void)
let _CFURLCopyAbsoluteURL = Foreign.foreign "CFURLCopyAbsoluteURL" ((ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCopyFileSystemPath = Foreign.foreign "CFURLCopyFileSystemPath" ((ptr CFURL.t) @-> llong @-> returning (ptr CFString.t))
let _CFURLCopyFragment = Foreign.foreign "CFURLCopyFragment" ((ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFURLCopyHostName = Foreign.foreign "CFURLCopyHostName" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyLastPathComponent = Foreign.foreign "CFURLCopyLastPathComponent" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyNetLocation = Foreign.foreign "CFURLCopyNetLocation" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyParameterString = Foreign.foreign "CFURLCopyParameterString" ((ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFURLCopyPassword = Foreign.foreign "CFURLCopyPassword" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyPath = Foreign.foreign "CFURLCopyPath" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyPathExtension = Foreign.foreign "CFURLCopyPathExtension" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyQueryString = Foreign.foreign "CFURLCopyQueryString" ((ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFURLCopyResourcePropertiesForKeys = Foreign.foreign "CFURLCopyResourcePropertiesForKeys" ((ptr CFURL.t) @-> (ptr CFArray.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFDictionary.t))
let _CFURLCopyResourcePropertyForKey = Foreign.foreign "CFURLCopyResourcePropertyForKey" ((ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr void) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLCopyResourceSpecifier = Foreign.foreign "CFURLCopyResourceSpecifier" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyScheme = Foreign.foreign "CFURLCopyScheme" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyStrictPath = Foreign.foreign "CFURLCopyStrictPath" ((ptr CFURL.t) @-> (ptr bool) @-> returning (ptr CFString.t))
let _CFURLCopyUserName = Foreign.foreign "CFURLCopyUserName" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCreateAbsoluteURLWithBytes = Foreign.foreign "CFURLCreateAbsoluteURLWithBytes" ((ptr CFAllocator.t) @-> string @-> llong @-> uint @-> (ptr CFURL.t) @-> bool @-> returning (ptr CFURL.t))
let _CFURLCreateBookmarkData = Foreign.foreign "CFURLCreateBookmarkData" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> ullong @-> (ptr CFArray.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFData.t))
let _CFURLCreateBookmarkDataFromAliasRecord = Foreign.foreign "CFURLCreateBookmarkDataFromAliasRecord" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> returning (ptr CFData.t))
let _CFURLCreateBookmarkDataFromFile = Foreign.foreign "CFURLCreateBookmarkDataFromFile" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFData.t))
let _CFURLCreateByResolvingBookmarkData = Foreign.foreign "CFURLCreateByResolvingBookmarkData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> ullong @-> (ptr CFURL.t) @-> (ptr CFArray.t) @-> (ptr bool) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFURL.t))
let _CFURLCreateCopyAppendingPathComponent = Foreign.foreign "CFURLCreateCopyAppendingPathComponent" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> bool @-> returning (ptr CFURL.t))
let _CFURLCreateCopyAppendingPathExtension = Foreign.foreign "CFURLCreateCopyAppendingPathExtension" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFURLCreateCopyDeletingLastPathComponent = Foreign.foreign "CFURLCreateCopyDeletingLastPathComponent" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreateCopyDeletingPathExtension = Foreign.foreign "CFURLCreateCopyDeletingPathExtension" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreateData = Foreign.foreign "CFURLCreateData" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> uint @-> bool @-> returning (ptr CFData.t))
let _CFURLCreateDataAndPropertiesFromResource = Foreign.foreign "CFURLCreateDataAndPropertiesFromResource" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFData.t)) @-> (ptr (ptr CFDictionary.t)) @-> (ptr CFArray.t) @-> (ptr int) @-> returning bool)
let _CFURLCreateFilePathURL = Foreign.foreign "CFURLCreateFilePathURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFURL.t))
let _CFURLCreateFileReferenceURL = Foreign.foreign "CFURLCreateFileReferenceURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFURL.t))
let _CFURLCreateFromFSRef = Foreign.foreign "CFURLCreateFromFSRef" ((ptr CFAllocator.t) @-> (ptr void) @-> returning (ptr CFURL.t))
let _CFURLCreateFromFileSystemRepresentation = Foreign.foreign "CFURLCreateFromFileSystemRepresentation" ((ptr CFAllocator.t) @-> string @-> llong @-> bool @-> returning (ptr CFURL.t))
let _CFURLCreateFromFileSystemRepresentationRelativeToBase = Foreign.foreign "CFURLCreateFromFileSystemRepresentationRelativeToBase" ((ptr CFAllocator.t) @-> string @-> llong @-> bool @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreatePropertyFromResource = Foreign.foreign "CFURLCreatePropertyFromResource" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr int) @-> returning id)
let _CFURLCreateResourcePropertiesForKeysFromBookmarkData = Foreign.foreign "CFURLCreateResourcePropertiesForKeysFromBookmarkData" ((ptr CFAllocator.t) @-> (ptr CFArray.t) @-> (ptr CFData.t) @-> returning (ptr CFDictionary.t))
let _CFURLCreateResourcePropertyForKeyFromBookmarkData = Foreign.foreign "CFURLCreateResourcePropertyForKeyFromBookmarkData" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFData.t) @-> returning id)
let _CFURLCreateStringByAddingPercentEscapes = Foreign.foreign "CFURLCreateStringByAddingPercentEscapes" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> uint @-> returning (ptr CFString.t))
let _CFURLCreateStringByReplacingPercentEscapes = Foreign.foreign "CFURLCreateStringByReplacingPercentEscapes" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFURLCreateStringByReplacingPercentEscapesUsingEncoding = Foreign.foreign "CFURLCreateStringByReplacingPercentEscapesUsingEncoding" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> uint @-> returning (ptr CFString.t))
let _CFURLCreateWithBytes = Foreign.foreign "CFURLCreateWithBytes" ((ptr CFAllocator.t) @-> string @-> llong @-> uint @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreateWithFileSystemPath = Foreign.foreign "CFURLCreateWithFileSystemPath" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> llong @-> bool @-> returning (ptr CFURL.t))
let _CFURLCreateWithFileSystemPathRelativeToBase = Foreign.foreign "CFURLCreateWithFileSystemPathRelativeToBase" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> llong @-> bool @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreateWithString = Foreign.foreign "CFURLCreateWithString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLDestroyResource = Foreign.foreign "CFURLDestroyResource" ((ptr CFURL.t) @-> (ptr int) @-> returning bool)
let _CFURLEnumeratorCreateForDirectoryURL = Foreign.foreign "CFURLEnumeratorCreateForDirectoryURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> ullong @-> (ptr CFArray.t) @-> returning (ptr CFURLEnumerator.t))
let _CFURLEnumeratorCreateForMountedVolumes = Foreign.foreign "CFURLEnumeratorCreateForMountedVolumes" ((ptr CFAllocator.t) @-> ullong @-> (ptr CFArray.t) @-> returning (ptr CFURLEnumerator.t))
let _CFURLEnumeratorGetDescendentLevel = Foreign.foreign "CFURLEnumeratorGetDescendentLevel" ((ptr CFURLEnumerator.t) @-> returning llong)
let _CFURLEnumeratorGetNextURL = Foreign.foreign "CFURLEnumeratorGetNextURL" ((ptr CFURLEnumerator.t) @-> (ptr (ptr CFURL.t)) @-> (ptr (ptr CFError.t)) @-> returning llong)
let _CFURLEnumeratorGetSourceDidChange = Foreign.foreign "CFURLEnumeratorGetSourceDidChange" ((ptr CFURLEnumerator.t) @-> returning bool)
let _CFURLEnumeratorGetTypeID = Foreign.foreign "CFURLEnumeratorGetTypeID" (void @-> returning ullong)
let _CFURLEnumeratorSkipDescendents = Foreign.foreign "CFURLEnumeratorSkipDescendents" ((ptr CFURLEnumerator.t) @-> returning void)
let _CFURLGetBaseURL = Foreign.foreign "CFURLGetBaseURL" ((ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLGetByteRangeForComponent = Foreign.foreign "CFURLGetByteRangeForComponent" ((ptr CFURL.t) @-> llong @-> (ptr CFRange.t) @-> returning CFRange.t)
let _CFURLGetBytes = Foreign.foreign "CFURLGetBytes" ((ptr CFURL.t) @-> string @-> llong @-> returning llong)
let _CFURLGetFSRef = Foreign.foreign "CFURLGetFSRef" ((ptr CFURL.t) @-> (ptr void) @-> returning bool)
let _CFURLGetFileSystemRepresentation = Foreign.foreign "CFURLGetFileSystemRepresentation" ((ptr CFURL.t) @-> bool @-> string @-> llong @-> returning bool)
let _CFURLGetPortNumber = Foreign.foreign "CFURLGetPortNumber" ((ptr CFURL.t) @-> returning int)
let _CFURLGetString = Foreign.foreign "CFURLGetString" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLGetTypeID = Foreign.foreign "CFURLGetTypeID" (void @-> returning ullong)
let _CFURLHasDirectoryPath = Foreign.foreign "CFURLHasDirectoryPath" ((ptr CFURL.t) @-> returning bool)
let _CFURLIsFileReferenceURL = Foreign.foreign "CFURLIsFileReferenceURL" ((ptr CFURL.t) @-> returning bool)
let _CFURLResourceIsReachable = Foreign.foreign "CFURLResourceIsReachable" ((ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLSetResourcePropertiesForKeys = Foreign.foreign "CFURLSetResourcePropertiesForKeys" ((ptr CFURL.t) @-> (ptr CFDictionary.t) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLSetResourcePropertyForKey = Foreign.foreign "CFURLSetResourcePropertyForKey" ((ptr CFURL.t) @-> (ptr CFString.t) @-> id @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLSetTemporaryResourcePropertyForKey = Foreign.foreign "CFURLSetTemporaryResourcePropertyForKey" ((ptr CFURL.t) @-> (ptr CFString.t) @-> id @-> returning void)
let _CFURLStartAccessingSecurityScopedResource = Foreign.foreign "CFURLStartAccessingSecurityScopedResource" ((ptr CFURL.t) @-> returning bool)
let _CFURLStopAccessingSecurityScopedResource = Foreign.foreign "CFURLStopAccessingSecurityScopedResource" ((ptr CFURL.t) @-> returning void)
let _CFURLWriteBookmarkDataToFile = Foreign.foreign "CFURLWriteBookmarkDataToFile" ((ptr CFData.t) @-> (ptr CFURL.t) @-> ullong @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLWriteDataAndPropertiesToResource = Foreign.foreign "CFURLWriteDataAndPropertiesToResource" ((ptr CFURL.t) @-> (ptr CFData.t) @-> (ptr CFDictionary.t) @-> (ptr int) @-> returning bool)
let _CFUUIDCreate = Foreign.foreign "CFUUIDCreate" ((ptr CFAllocator.t) @-> returning (ptr CFUUID.t))
let _CFUUIDCreateFromString = Foreign.foreign "CFUUIDCreateFromString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFUUID.t))
let _CFUUIDCreateFromUUIDBytes = Foreign.foreign "CFUUIDCreateFromUUIDBytes" ((ptr CFAllocator.t) @-> CFUUIDBytes.t @-> returning (ptr CFUUID.t))
let _CFUUIDCreateString = Foreign.foreign "CFUUIDCreateString" ((ptr CFAllocator.t) @-> (ptr CFUUID.t) @-> returning (ptr CFString.t))
let _CFUUIDCreateWithBytes = Foreign.foreign "CFUUIDCreateWithBytes" ((ptr CFAllocator.t) @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> returning (ptr CFUUID.t))
let _CFUUIDGetConstantUUIDWithBytes = Foreign.foreign "CFUUIDGetConstantUUIDWithBytes" ((ptr CFAllocator.t) @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> returning (ptr CFUUID.t))
let _CFUUIDGetTypeID = Foreign.foreign "CFUUIDGetTypeID" (void @-> returning ullong)
let _CFUUIDGetUUIDBytes = Foreign.foreign "CFUUIDGetUUIDBytes" ((ptr CFUUID.t) @-> returning CFUUIDBytes.t)
let _CFUserNotificationCancel = Foreign.foreign "CFUserNotificationCancel" ((ptr CFUserNotification.t) @-> returning int)
(* let _CFUserNotificationCheckBoxChecked = Foreign.foreign "Camlkit_CFUserNotificationCheckBoxChecked" (llong @-> returning ullong) *)
let _CFUserNotificationCreate = Foreign.foreign "CFUserNotificationCreate" ((ptr CFAllocator.t) @-> double @-> ullong @-> (ptr int) @-> (ptr CFDictionary.t) @-> returning (ptr CFUserNotification.t))
let _CFUserNotificationCreateRunLoopSource = Foreign.foreign "CFUserNotificationCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFUserNotification.t) @-> Foreign.funptr ((ptr CFUserNotification.t) @-> ullong @-> returning void) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFUserNotificationDisplayAlert = Foreign.foreign "CFUserNotificationDisplayAlert" (double @-> ullong @-> (ptr CFURL.t) @-> (ptr CFURL.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr ullong) @-> returning int)
let _CFUserNotificationDisplayNotice = Foreign.foreign "CFUserNotificationDisplayNotice" (double @-> ullong @-> (ptr CFURL.t) @-> (ptr CFURL.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning int)
let _CFUserNotificationGetResponseDictionary = Foreign.foreign "CFUserNotificationGetResponseDictionary" ((ptr CFUserNotification.t) @-> returning (ptr CFDictionary.t))
let _CFUserNotificationGetResponseValue = Foreign.foreign "CFUserNotificationGetResponseValue" ((ptr CFUserNotification.t) @-> (ptr CFString.t) @-> llong @-> returning (ptr CFString.t))
let _CFUserNotificationGetTypeID = Foreign.foreign "CFUserNotificationGetTypeID" (void @-> returning ullong)
(* let _CFUserNotificationPopUpSelection = Foreign.foreign "Camlkit_CFUserNotificationPopUpSelection" (llong @-> returning ullong) *)
let _CFUserNotificationReceiveResponse = Foreign.foreign "CFUserNotificationReceiveResponse" ((ptr CFUserNotification.t) @-> double @-> (ptr ullong) @-> returning int)
(* let _CFUserNotificationSecureTextField = Foreign.foreign "Camlkit_CFUserNotificationSecureTextField" (llong @-> returning ullong) *)
let _CFUserNotificationUpdate = Foreign.foreign "CFUserNotificationUpdate" ((ptr CFUserNotification.t) @-> double @-> ullong @-> (ptr CFDictionary.t) @-> returning int)
let _CFWriteStreamCanAcceptBytes = Foreign.foreign "CFWriteStreamCanAcceptBytes" ((ptr CFWriteStream.t) @-> returning bool)
let _CFWriteStreamClose = Foreign.foreign "CFWriteStreamClose" ((ptr CFWriteStream.t) @-> returning void)
let _CFWriteStreamCopyDispatchQueue = Foreign.foreign "CFWriteStreamCopyDispatchQueue" ((ptr CFWriteStream.t) @-> returning id)
let _CFWriteStreamCopyError = Foreign.foreign "CFWriteStreamCopyError" ((ptr CFWriteStream.t) @-> returning (ptr CFError.t))
let _CFWriteStreamCopyProperty = Foreign.foreign "CFWriteStreamCopyProperty" ((ptr CFWriteStream.t) @-> (ptr CFString.t) @-> returning id)
let _CFWriteStreamCreateWithAllocatedBuffers = Foreign.foreign "CFWriteStreamCreateWithAllocatedBuffers" ((ptr CFAllocator.t) @-> (ptr CFAllocator.t) @-> returning (ptr CFWriteStream.t))
let _CFWriteStreamCreateWithBuffer = Foreign.foreign "CFWriteStreamCreateWithBuffer" ((ptr CFAllocator.t) @-> string @-> llong @-> returning (ptr CFWriteStream.t))
let _CFWriteStreamCreateWithFile = Foreign.foreign "CFWriteStreamCreateWithFile" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFWriteStream.t))
let _CFWriteStreamGetError = Foreign.foreign "CFWriteStreamGetError" ((ptr CFWriteStream.t) @-> returning CFStreamError.t)
let _CFWriteStreamGetStatus = Foreign.foreign "CFWriteStreamGetStatus" ((ptr CFWriteStream.t) @-> returning llong)
let _CFWriteStreamGetTypeID = Foreign.foreign "CFWriteStreamGetTypeID" (void @-> returning ullong)
let _CFWriteStreamOpen = Foreign.foreign "CFWriteStreamOpen" ((ptr CFWriteStream.t) @-> returning bool)
let _CFWriteStreamScheduleWithRunLoop = Foreign.foreign "CFWriteStreamScheduleWithRunLoop" ((ptr CFWriteStream.t) @-> (ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFWriteStreamSetClient = Foreign.foreign "CFWriteStreamSetClient" ((ptr CFWriteStream.t) @-> ullong @-> Foreign.funptr ((ptr CFWriteStream.t) @-> ullong @-> (ptr void) @-> returning void) @-> (ptr CFStreamClientContext.t) @-> returning bool)
let _CFWriteStreamSetDispatchQueue = Foreign.foreign "CFWriteStreamSetDispatchQueue" ((ptr CFWriteStream.t) @-> id @-> returning void)
let _CFWriteStreamSetProperty = Foreign.foreign "CFWriteStreamSetProperty" ((ptr CFWriteStream.t) @-> (ptr CFString.t) @-> id @-> returning bool)
let _CFWriteStreamUnscheduleFromRunLoop = Foreign.foreign "CFWriteStreamUnscheduleFromRunLoop" ((ptr CFWriteStream.t) @-> (ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFWriteStreamWrite = Foreign.foreign "CFWriteStreamWrite" ((ptr CFWriteStream.t) @-> string @-> llong @-> returning llong)
let _CFXMLCreateStringByEscapingEntities = Foreign.foreign "CFXMLCreateStringByEscapingEntities" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFString.t))
let _CFXMLCreateStringByUnescapingEntities = Foreign.foreign "CFXMLCreateStringByUnescapingEntities" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFString.t))
let _CFXMLNodeCreate = Foreign.foreign "CFXMLNodeCreate" ((ptr CFAllocator.t) @-> llong @-> (ptr CFString.t) @-> (ptr void) @-> llong @-> returning (ptr CFXMLNode.t))
let _CFXMLNodeCreateCopy = Foreign.foreign "CFXMLNodeCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFXMLNode.t) @-> returning (ptr CFXMLNode.t))
let _CFXMLNodeGetInfoPtr = Foreign.foreign "CFXMLNodeGetInfoPtr" ((ptr CFXMLNode.t) @-> returning (ptr void))
let _CFXMLNodeGetString = Foreign.foreign "CFXMLNodeGetString" ((ptr CFXMLNode.t) @-> returning (ptr CFString.t))
let _CFXMLNodeGetTypeCode = Foreign.foreign "CFXMLNodeGetTypeCode" ((ptr CFXMLNode.t) @-> returning llong)
let _CFXMLNodeGetTypeID = Foreign.foreign "CFXMLNodeGetTypeID" (void @-> returning ullong)
let _CFXMLNodeGetVersion = Foreign.foreign "CFXMLNodeGetVersion" ((ptr CFXMLNode.t) @-> returning llong)
let _CFXMLParserAbort = Foreign.foreign "CFXMLParserAbort" ((ptr CFXMLParser.t) @-> llong @-> (ptr CFString.t) @-> returning void)
let _CFXMLParserCopyErrorDescription = Foreign.foreign "CFXMLParserCopyErrorDescription" ((ptr CFXMLParser.t) @-> returning (ptr CFString.t))
let _CFXMLParserCreate = Foreign.foreign "CFXMLParserCreate" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> (ptr CFXMLParserCallBacks.t) @-> (ptr CFXMLParserContext.t) @-> returning (ptr CFXMLParser.t))
let _CFXMLParserCreateWithDataFromURL = Foreign.foreign "CFXMLParserCreateWithDataFromURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> (ptr CFXMLParserCallBacks.t) @-> (ptr CFXMLParserContext.t) @-> returning (ptr CFXMLParser.t))
let _CFXMLParserGetCallBacks = Foreign.foreign "CFXMLParserGetCallBacks" ((ptr CFXMLParser.t) @-> (ptr CFXMLParserCallBacks.t) @-> returning void)
let _CFXMLParserGetContext = Foreign.foreign "CFXMLParserGetContext" ((ptr CFXMLParser.t) @-> (ptr CFXMLParserContext.t) @-> returning void)
let _CFXMLParserGetDocument = Foreign.foreign "CFXMLParserGetDocument" ((ptr CFXMLParser.t) @-> returning (ptr void))
let _CFXMLParserGetLineNumber = Foreign.foreign "CFXMLParserGetLineNumber" ((ptr CFXMLParser.t) @-> returning llong)
let _CFXMLParserGetLocation = Foreign.foreign "CFXMLParserGetLocation" ((ptr CFXMLParser.t) @-> returning llong)
let _CFXMLParserGetSourceURL = Foreign.foreign "CFXMLParserGetSourceURL" ((ptr CFXMLParser.t) @-> returning (ptr CFURL.t))
let _CFXMLParserGetStatusCode = Foreign.foreign "CFXMLParserGetStatusCode" ((ptr CFXMLParser.t) @-> returning llong)
let _CFXMLParserGetTypeID = Foreign.foreign "CFXMLParserGetTypeID" (void @-> returning ullong)
let _CFXMLParserParse = Foreign.foreign "CFXMLParserParse" ((ptr CFXMLParser.t) @-> returning bool)
let _CFXMLTreeCreateFromData = Foreign.foreign "CFXMLTreeCreateFromData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> returning (ptr CFTree.t))
let _CFXMLTreeCreateFromDataWithError = Foreign.foreign "CFXMLTreeCreateFromDataWithError" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> (ptr (ptr CFDictionary.t)) @-> returning (ptr CFTree.t))
let _CFXMLTreeCreateWithDataFromURL = Foreign.foreign "CFXMLTreeCreateWithDataFromURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> returning (ptr CFTree.t))
let _CFXMLTreeCreateWithNode = Foreign.foreign "CFXMLTreeCreateWithNode" ((ptr CFAllocator.t) @-> (ptr CFXMLNode.t) @-> returning (ptr CFTree.t))
let _CFXMLTreeCreateXMLData = Foreign.foreign "CFXMLTreeCreateXMLData" ((ptr CFAllocator.t) @-> (ptr CFTree.t) @-> returning (ptr CFData.t))
let _CFXMLTreeGetNode = Foreign.foreign "CFXMLTreeGetNode" ((ptr CFTree.t) @-> returning (ptr CFXMLNode.t))
