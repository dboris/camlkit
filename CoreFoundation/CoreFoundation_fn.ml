(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

open CoreFoundation_globals

let _CFAbsoluteTimeAddGregorianUnits = Foreign.foreign ~stub:true "CFAbsoluteTimeAddGregorianUnits" (double @-> (ptr CFTimeZone.t) @-> CFGregorianUnits.t @-> returning double)
let _CFAbsoluteTimeGetCurrent = Foreign.foreign ~stub:true "CFAbsoluteTimeGetCurrent" (void @-> returning double)
let _CFAbsoluteTimeGetDayOfWeek = Foreign.foreign ~stub:true "CFAbsoluteTimeGetDayOfWeek" (double @-> (ptr CFTimeZone.t) @-> returning int)
let _CFAbsoluteTimeGetDayOfYear = Foreign.foreign ~stub:true "CFAbsoluteTimeGetDayOfYear" (double @-> (ptr CFTimeZone.t) @-> returning int)
let _CFAbsoluteTimeGetDifferenceAsGregorianUnits = Foreign.foreign ~stub:true "CFAbsoluteTimeGetDifferenceAsGregorianUnits" (double @-> double @-> (ptr CFTimeZone.t) @-> ullong @-> returning CFGregorianUnits.t)
let _CFAbsoluteTimeGetGregorianDate = Foreign.foreign ~stub:true "CFAbsoluteTimeGetGregorianDate" (double @-> (ptr CFTimeZone.t) @-> returning CFGregorianDate.t)
let _CFAbsoluteTimeGetWeekOfYear = Foreign.foreign ~stub:true "CFAbsoluteTimeGetWeekOfYear" (double @-> (ptr CFTimeZone.t) @-> returning int)
let _CFAllocatorAllocate = Foreign.foreign ~stub:true "CFAllocatorAllocate" ((ptr CFAllocator.t) @-> llong @-> ullong @-> returning (ptr void))
let _CFAllocatorCreate = Foreign.foreign ~stub:true "CFAllocatorCreate" ((ptr CFAllocator.t) @-> (ptr CFAllocatorContext.t) @-> returning (ptr CFAllocator.t))
let _CFAllocatorDeallocate = Foreign.foreign ~stub:true "CFAllocatorDeallocate" ((ptr CFAllocator.t) @-> (ptr void) @-> returning void)
let _CFAllocatorGetContext = Foreign.foreign ~stub:true "CFAllocatorGetContext" ((ptr CFAllocator.t) @-> (ptr CFAllocatorContext.t) @-> returning void)
let _CFAllocatorGetDefault = Foreign.foreign ~stub:true "CFAllocatorGetDefault" (void @-> returning (ptr CFAllocator.t))
let _CFAllocatorGetPreferredSizeForSize = Foreign.foreign ~stub:true "CFAllocatorGetPreferredSizeForSize" ((ptr CFAllocator.t) @-> llong @-> ullong @-> returning llong)
let _CFAllocatorGetTypeID = Foreign.foreign ~stub:true "CFAllocatorGetTypeID" (void @-> returning ullong)
let _CFAllocatorReallocate = Foreign.foreign ~stub:true "CFAllocatorReallocate" ((ptr CFAllocator.t) @-> (ptr void) @-> llong @-> ullong @-> returning (ptr void))
let _CFAllocatorSetDefault = Foreign.foreign ~stub:true "CFAllocatorSetDefault" ((ptr CFAllocator.t) @-> returning void)
let _CFArrayAppendArray = Foreign.foreign ~stub:true "CFArrayAppendArray" ((ptr CFArray.t) @-> (ptr CFArray.t) @-> CFRange.t @-> returning void)
let _CFArrayAppendValue = Foreign.foreign ~stub:true "CFArrayAppendValue" ((ptr CFArray.t) @-> (ptr void) @-> returning void)
let _CFArrayApplyFunction = Foreign.foreign ~stub:true "CFArrayApplyFunction" ((ptr CFArray.t) @-> CFRange.t @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFArrayBSearchValues = Foreign.foreign ~stub:true "CFArrayBSearchValues" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> (ptr void) @-> returning llong) @-> (ptr void) @-> returning llong)
let _CFArrayContainsValue = Foreign.foreign ~stub:true "CFArrayContainsValue" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> returning bool)
let _CFArrayCreate = Foreign.foreign ~stub:true "CFArrayCreate" ((ptr CFAllocator.t) @-> (ptr (ptr void)) @-> llong @-> (ptr CFArrayCallBacks.t) @-> returning (ptr CFArray.t))
let _CFArrayCreateCopy = Foreign.foreign ~stub:true "CFArrayCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CFArrayCreateMutable = Foreign.foreign ~stub:true "CFArrayCreateMutable" ((ptr CFAllocator.t) @-> llong @-> (ptr CFArrayCallBacks.t) @-> returning (ptr CFArray.t))
let _CFArrayCreateMutableCopy = Foreign.foreign ~stub:true "CFArrayCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CFArrayExchangeValuesAtIndices = Foreign.foreign ~stub:true "CFArrayExchangeValuesAtIndices" ((ptr CFArray.t) @-> llong @-> llong @-> returning void)
let _CFArrayGetCount = Foreign.foreign ~stub:true "CFArrayGetCount" ((ptr CFArray.t) @-> returning llong)
let _CFArrayGetCountOfValue = Foreign.foreign ~stub:true "CFArrayGetCountOfValue" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> returning llong)
let _CFArrayGetFirstIndexOfValue = Foreign.foreign ~stub:true "CFArrayGetFirstIndexOfValue" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> returning llong)
let _CFArrayGetLastIndexOfValue = Foreign.foreign ~stub:true "CFArrayGetLastIndexOfValue" ((ptr CFArray.t) @-> CFRange.t @-> (ptr void) @-> returning llong)
let _CFArrayGetTypeID = Foreign.foreign ~stub:true "CFArrayGetTypeID" (void @-> returning ullong)
let _CFArrayGetValueAtIndex = Foreign.foreign ~stub:true "CFArrayGetValueAtIndex" ((ptr CFArray.t) @-> llong @-> returning (ptr void))
let _CFArrayGetValues = Foreign.foreign ~stub:true "CFArrayGetValues" ((ptr CFArray.t) @-> CFRange.t @-> (ptr (ptr void)) @-> returning void)
let _CFArrayInsertValueAtIndex = Foreign.foreign ~stub:true "CFArrayInsertValueAtIndex" ((ptr CFArray.t) @-> llong @-> (ptr void) @-> returning void)
let _CFArrayRemoveAllValues = Foreign.foreign ~stub:true "CFArrayRemoveAllValues" ((ptr CFArray.t) @-> returning void)
let _CFArrayRemoveValueAtIndex = Foreign.foreign ~stub:true "CFArrayRemoveValueAtIndex" ((ptr CFArray.t) @-> llong @-> returning void)
let _CFArrayReplaceValues = Foreign.foreign ~stub:true "CFArrayReplaceValues" ((ptr CFArray.t) @-> CFRange.t @-> (ptr (ptr void)) @-> llong @-> returning void)
let _CFArraySetValueAtIndex = Foreign.foreign ~stub:true "CFArraySetValueAtIndex" ((ptr CFArray.t) @-> llong @-> (ptr void) @-> returning void)
let _CFArraySortValues = Foreign.foreign ~stub:true "CFArraySortValues" ((ptr CFArray.t) @-> CFRange.t @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> (ptr void) @-> returning llong) @-> (ptr void) @-> returning void)
let _CFAttributedStringBeginEditing = Foreign.foreign ~stub:true "CFAttributedStringBeginEditing" ((ptr CFAttributedString.t) @-> returning void)
let _CFAttributedStringCreate = Foreign.foreign ~stub:true "CFAttributedStringCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringCreateCopy = Foreign.foreign ~stub:true "CFAttributedStringCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFAttributedString.t) @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringCreateMutable = Foreign.foreign ~stub:true "CFAttributedStringCreateMutable" ((ptr CFAllocator.t) @-> llong @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringCreateMutableCopy = Foreign.foreign ~stub:true "CFAttributedStringCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFAttributedString.t) @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringCreateWithSubstring = Foreign.foreign ~stub:true "CFAttributedStringCreateWithSubstring" ((ptr CFAllocator.t) @-> (ptr CFAttributedString.t) @-> CFRange.t @-> returning (ptr CFAttributedString.t))
let _CFAttributedStringEndEditing = Foreign.foreign ~stub:true "CFAttributedStringEndEditing" ((ptr CFAttributedString.t) @-> returning void)
let _CFAttributedStringGetAttribute = Foreign.foreign ~stub:true "CFAttributedStringGetAttribute" ((ptr CFAttributedString.t) @-> llong @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> returning id)
let _CFAttributedStringGetAttributeAndLongestEffectiveRange = Foreign.foreign ~stub:true "CFAttributedStringGetAttributeAndLongestEffectiveRange" ((ptr CFAttributedString.t) @-> llong @-> (ptr CFString.t) @-> CFRange.t @-> (ptr CFRange.t) @-> returning id)
let _CFAttributedStringGetAttributes = Foreign.foreign ~stub:true "CFAttributedStringGetAttributes" ((ptr CFAttributedString.t) @-> llong @-> (ptr CFRange.t) @-> returning (ptr CFDictionary.t))
let _CFAttributedStringGetAttributesAndLongestEffectiveRange = Foreign.foreign ~stub:true "CFAttributedStringGetAttributesAndLongestEffectiveRange" ((ptr CFAttributedString.t) @-> llong @-> CFRange.t @-> (ptr CFRange.t) @-> returning (ptr CFDictionary.t))
let _CFAttributedStringGetLength = Foreign.foreign ~stub:true "CFAttributedStringGetLength" ((ptr CFAttributedString.t) @-> returning llong)
let _CFAttributedStringGetMutableString = Foreign.foreign ~stub:true "CFAttributedStringGetMutableString" ((ptr CFAttributedString.t) @-> returning (ptr CFString.t))
let _CFAttributedStringGetString = Foreign.foreign ~stub:true "CFAttributedStringGetString" ((ptr CFAttributedString.t) @-> returning (ptr CFString.t))
let _CFAttributedStringGetTypeID = Foreign.foreign ~stub:true "CFAttributedStringGetTypeID" (void @-> returning ullong)
let _CFAttributedStringRemoveAttribute = Foreign.foreign ~stub:true "CFAttributedStringRemoveAttribute" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFString.t) @-> returning void)
let _CFAttributedStringReplaceAttributedString = Foreign.foreign ~stub:true "CFAttributedStringReplaceAttributedString" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFAttributedString.t) @-> returning void)
let _CFAttributedStringReplaceString = Foreign.foreign ~stub:true "CFAttributedStringReplaceString" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFString.t) @-> returning void)
let _CFAttributedStringSetAttribute = Foreign.foreign ~stub:true "CFAttributedStringSetAttribute" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFString.t) @-> id @-> returning void)
let _CFAttributedStringSetAttributes = Foreign.foreign ~stub:true "CFAttributedStringSetAttributes" ((ptr CFAttributedString.t) @-> CFRange.t @-> (ptr CFDictionary.t) @-> bool @-> returning void)
let _CFAutorelease = Foreign.foreign ~stub:true "CFAutorelease" (id @-> returning id)
let _CFBagAddValue = Foreign.foreign ~stub:true "CFBagAddValue" ((ptr CFBag.t) @-> (ptr void) @-> returning void)
let _CFBagApplyFunction = Foreign.foreign ~stub:true "CFBagApplyFunction" ((ptr CFBag.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFBagContainsValue = Foreign.foreign ~stub:true "CFBagContainsValue" ((ptr CFBag.t) @-> (ptr void) @-> returning bool)
let _CFBagCreate = Foreign.foreign ~stub:true "CFBagCreate" ((ptr CFAllocator.t) @-> (ptr (ptr void)) @-> llong @-> (ptr CFBagCallBacks.t) @-> returning (ptr CFBag.t))
let _CFBagCreateCopy = Foreign.foreign ~stub:true "CFBagCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFBag.t) @-> returning (ptr CFBag.t))
let _CFBagCreateMutable = Foreign.foreign ~stub:true "CFBagCreateMutable" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBagCallBacks.t) @-> returning (ptr CFBag.t))
let _CFBagCreateMutableCopy = Foreign.foreign ~stub:true "CFBagCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBag.t) @-> returning (ptr CFBag.t))
let _CFBagGetCount = Foreign.foreign ~stub:true "CFBagGetCount" ((ptr CFBag.t) @-> returning llong)
let _CFBagGetCountOfValue = Foreign.foreign ~stub:true "CFBagGetCountOfValue" ((ptr CFBag.t) @-> (ptr void) @-> returning llong)
let _CFBagGetTypeID = Foreign.foreign ~stub:true "CFBagGetTypeID" (void @-> returning ullong)
let _CFBagGetValue = Foreign.foreign ~stub:true "CFBagGetValue" ((ptr CFBag.t) @-> (ptr void) @-> returning (ptr void))
let _CFBagGetValueIfPresent = Foreign.foreign ~stub:true "CFBagGetValueIfPresent" ((ptr CFBag.t) @-> (ptr void) @-> (ptr (ptr void)) @-> returning bool)
let _CFBagGetValues = Foreign.foreign ~stub:true "CFBagGetValues" ((ptr CFBag.t) @-> (ptr (ptr void)) @-> returning void)
let _CFBagRemoveAllValues = Foreign.foreign ~stub:true "CFBagRemoveAllValues" ((ptr CFBag.t) @-> returning void)
let _CFBagRemoveValue = Foreign.foreign ~stub:true "CFBagRemoveValue" ((ptr CFBag.t) @-> (ptr void) @-> returning void)
let _CFBagReplaceValue = Foreign.foreign ~stub:true "CFBagReplaceValue" ((ptr CFBag.t) @-> (ptr void) @-> returning void)
let _CFBagSetValue = Foreign.foreign ~stub:true "CFBagSetValue" ((ptr CFBag.t) @-> (ptr void) @-> returning void)
let _CFBinaryHeapAddValue = Foreign.foreign ~stub:true "CFBinaryHeapAddValue" ((ptr CFBinaryHeap.t) @-> (ptr void) @-> returning void)
let _CFBinaryHeapApplyFunction = Foreign.foreign ~stub:true "CFBinaryHeapApplyFunction" ((ptr CFBinaryHeap.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFBinaryHeapContainsValue = Foreign.foreign ~stub:true "CFBinaryHeapContainsValue" ((ptr CFBinaryHeap.t) @-> (ptr void) @-> returning bool)
let _CFBinaryHeapCreate = Foreign.foreign ~stub:true "CFBinaryHeapCreate" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBinaryHeapCallBacks.t) @-> (ptr CFBinaryHeapCompareContext.t) @-> returning (ptr CFBinaryHeap.t))
let _CFBinaryHeapCreateCopy = Foreign.foreign ~stub:true "CFBinaryHeapCreateCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBinaryHeap.t) @-> returning (ptr CFBinaryHeap.t))
let _CFBinaryHeapGetCount = Foreign.foreign ~stub:true "CFBinaryHeapGetCount" ((ptr CFBinaryHeap.t) @-> returning llong)
let _CFBinaryHeapGetCountOfValue = Foreign.foreign ~stub:true "CFBinaryHeapGetCountOfValue" ((ptr CFBinaryHeap.t) @-> (ptr void) @-> returning llong)
let _CFBinaryHeapGetMinimum = Foreign.foreign ~stub:true "CFBinaryHeapGetMinimum" ((ptr CFBinaryHeap.t) @-> returning (ptr void))
let _CFBinaryHeapGetMinimumIfPresent = Foreign.foreign ~stub:true "CFBinaryHeapGetMinimumIfPresent" ((ptr CFBinaryHeap.t) @-> (ptr (ptr void)) @-> returning bool)
let _CFBinaryHeapGetTypeID = Foreign.foreign ~stub:true "CFBinaryHeapGetTypeID" (void @-> returning ullong)
let _CFBinaryHeapGetValues = Foreign.foreign ~stub:true "CFBinaryHeapGetValues" ((ptr CFBinaryHeap.t) @-> (ptr (ptr void)) @-> returning void)
let _CFBinaryHeapRemoveAllValues = Foreign.foreign ~stub:true "CFBinaryHeapRemoveAllValues" ((ptr CFBinaryHeap.t) @-> returning void)
let _CFBinaryHeapRemoveMinimumValue = Foreign.foreign ~stub:true "CFBinaryHeapRemoveMinimumValue" ((ptr CFBinaryHeap.t) @-> returning void)
let _CFBitVectorContainsBit = Foreign.foreign ~stub:true "CFBitVectorContainsBit" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning bool)
let _CFBitVectorCreate = Foreign.foreign ~stub:true "CFBitVectorCreate" ((ptr CFAllocator.t) @-> string @-> llong @-> returning (ptr CFBitVector.t))
let _CFBitVectorCreateCopy = Foreign.foreign ~stub:true "CFBitVectorCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFBitVector.t) @-> returning (ptr CFBitVector.t))
let _CFBitVectorCreateMutable = Foreign.foreign ~stub:true "CFBitVectorCreateMutable" ((ptr CFAllocator.t) @-> llong @-> returning (ptr CFBitVector.t))
let _CFBitVectorCreateMutableCopy = Foreign.foreign ~stub:true "CFBitVectorCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFBitVector.t) @-> returning (ptr CFBitVector.t))
let _CFBitVectorFlipBitAtIndex = Foreign.foreign ~stub:true "CFBitVectorFlipBitAtIndex" ((ptr CFBitVector.t) @-> llong @-> returning void)
let _CFBitVectorFlipBits = Foreign.foreign ~stub:true "CFBitVectorFlipBits" ((ptr CFBitVector.t) @-> CFRange.t @-> returning void)
let _CFBitVectorGetBitAtIndex = Foreign.foreign ~stub:true "CFBitVectorGetBitAtIndex" ((ptr CFBitVector.t) @-> llong @-> returning uint)
let _CFBitVectorGetBits = Foreign.foreign ~stub:true "CFBitVectorGetBits" ((ptr CFBitVector.t) @-> CFRange.t @-> string @-> returning void)
let _CFBitVectorGetCount = Foreign.foreign ~stub:true "CFBitVectorGetCount" ((ptr CFBitVector.t) @-> returning llong)
let _CFBitVectorGetCountOfBit = Foreign.foreign ~stub:true "CFBitVectorGetCountOfBit" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning llong)
let _CFBitVectorGetFirstIndexOfBit = Foreign.foreign ~stub:true "CFBitVectorGetFirstIndexOfBit" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning llong)
let _CFBitVectorGetLastIndexOfBit = Foreign.foreign ~stub:true "CFBitVectorGetLastIndexOfBit" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning llong)
let _CFBitVectorGetTypeID = Foreign.foreign ~stub:true "CFBitVectorGetTypeID" (void @-> returning ullong)
let _CFBitVectorSetAllBits = Foreign.foreign ~stub:true "CFBitVectorSetAllBits" ((ptr CFBitVector.t) @-> uint @-> returning void)
let _CFBitVectorSetBitAtIndex = Foreign.foreign ~stub:true "CFBitVectorSetBitAtIndex" ((ptr CFBitVector.t) @-> llong @-> uint @-> returning void)
let _CFBitVectorSetBits = Foreign.foreign ~stub:true "CFBitVectorSetBits" ((ptr CFBitVector.t) @-> CFRange.t @-> uint @-> returning void)
let _CFBitVectorSetCount = Foreign.foreign ~stub:true "CFBitVectorSetCount" ((ptr CFBitVector.t) @-> llong @-> returning void)
let _CFBooleanGetTypeID = Foreign.foreign ~stub:true "CFBooleanGetTypeID" (void @-> returning ullong)
let _CFBooleanGetValue = Foreign.foreign ~stub:true "CFBooleanGetValue" ((ptr CFBoolean.t) @-> returning bool)
let _CFBundleCloseBundleResourceMap = Foreign.foreign ~stub:true "CFBundleCloseBundleResourceMap" ((ptr CFBundle.t) @-> int @-> returning void)
let _CFBundleCopyAuxiliaryExecutableURL = Foreign.foreign ~stub:true "CFBundleCopyAuxiliaryExecutableURL" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyBuiltInPlugInsURL = Foreign.foreign ~stub:true "CFBundleCopyBuiltInPlugInsURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyBundleLocalizations = Foreign.foreign ~stub:true "CFBundleCopyBundleLocalizations" ((ptr CFBundle.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyBundleURL = Foreign.foreign ~stub:true "CFBundleCopyBundleURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyExecutableArchitectures = Foreign.foreign ~stub:true "CFBundleCopyExecutableArchitectures" ((ptr CFBundle.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyExecutableArchitecturesForURL = Foreign.foreign ~stub:true "CFBundleCopyExecutableArchitecturesForURL" ((ptr CFURL.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyExecutableURL = Foreign.foreign ~stub:true "CFBundleCopyExecutableURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyInfoDictionaryForURL = Foreign.foreign ~stub:true "CFBundleCopyInfoDictionaryForURL" ((ptr CFURL.t) @-> returning (ptr CFDictionary.t))
let _CFBundleCopyInfoDictionaryInDirectory = Foreign.foreign ~stub:true "CFBundleCopyInfoDictionaryInDirectory" ((ptr CFURL.t) @-> returning (ptr CFDictionary.t))
let _CFBundleCopyLocalizationsForPreferences = Foreign.foreign ~stub:true "CFBundleCopyLocalizationsForPreferences" ((ptr CFArray.t) @-> (ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyLocalizationsForURL = Foreign.foreign ~stub:true "CFBundleCopyLocalizationsForURL" ((ptr CFURL.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyLocalizedString = Foreign.foreign ~stub:true "CFBundleCopyLocalizedString" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFBundleCopyPreferredLocalizationsFromArray = Foreign.foreign ~stub:true "CFBundleCopyPreferredLocalizationsFromArray" ((ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyPrivateFrameworksURL = Foreign.foreign ~stub:true "CFBundleCopyPrivateFrameworksURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyResourceURL = Foreign.foreign ~stub:true "CFBundleCopyResourceURL" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyResourceURLForLocalization = Foreign.foreign ~stub:true "CFBundleCopyResourceURLForLocalization" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyResourceURLInDirectory = Foreign.foreign ~stub:true "CFBundleCopyResourceURLInDirectory" ((ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFBundleCopyResourceURLsOfType = Foreign.foreign ~stub:true "CFBundleCopyResourceURLsOfType" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyResourceURLsOfTypeForLocalization = Foreign.foreign ~stub:true "CFBundleCopyResourceURLsOfTypeForLocalization" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyResourceURLsOfTypeInDirectory = Foreign.foreign ~stub:true "CFBundleCopyResourceURLsOfTypeInDirectory" ((ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFBundleCopyResourcesDirectoryURL = Foreign.foreign ~stub:true "CFBundleCopyResourcesDirectoryURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopySharedFrameworksURL = Foreign.foreign ~stub:true "CFBundleCopySharedFrameworksURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopySharedSupportURL = Foreign.foreign ~stub:true "CFBundleCopySharedSupportURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCopySupportFilesDirectoryURL = Foreign.foreign ~stub:true "CFBundleCopySupportFilesDirectoryURL" ((ptr CFBundle.t) @-> returning (ptr CFURL.t))
let _CFBundleCreate = Foreign.foreign ~stub:true "CFBundleCreate" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFBundle.t))
let _CFBundleCreateBundlesFromDirectory = Foreign.foreign ~stub:true "CFBundleCreateBundlesFromDirectory" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFBundleGetAllBundles = Foreign.foreign ~stub:true "CFBundleGetAllBundles" (void @-> returning (ptr CFArray.t))
let _CFBundleGetBundleWithIdentifier = Foreign.foreign ~stub:true "CFBundleGetBundleWithIdentifier" ((ptr CFString.t) @-> returning (ptr CFBundle.t))
let _CFBundleGetDataPointerForName = Foreign.foreign ~stub:true "CFBundleGetDataPointerForName" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> returning (ptr void))
let _CFBundleGetDataPointersForNames = Foreign.foreign ~stub:true "CFBundleGetDataPointersForNames" ((ptr CFBundle.t) @-> (ptr CFArray.t) @-> (ptr (ptr void)) @-> returning void)
let _CFBundleGetDevelopmentRegion = Foreign.foreign ~stub:true "CFBundleGetDevelopmentRegion" ((ptr CFBundle.t) @-> returning (ptr CFString.t))
let _CFBundleGetFunctionPointerForName = Foreign.foreign ~stub:true "CFBundleGetFunctionPointerForName" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> returning (ptr void))
let _CFBundleGetFunctionPointersForNames = Foreign.foreign ~stub:true "CFBundleGetFunctionPointersForNames" ((ptr CFBundle.t) @-> (ptr CFArray.t) @-> (ptr (ptr void)) @-> returning void)
let _CFBundleGetIdentifier = Foreign.foreign ~stub:true "CFBundleGetIdentifier" ((ptr CFBundle.t) @-> returning (ptr CFString.t))
let _CFBundleGetInfoDictionary = Foreign.foreign ~stub:true "CFBundleGetInfoDictionary" ((ptr CFBundle.t) @-> returning (ptr CFDictionary.t))
let _CFBundleGetLocalInfoDictionary = Foreign.foreign ~stub:true "CFBundleGetLocalInfoDictionary" ((ptr CFBundle.t) @-> returning (ptr CFDictionary.t))
let _CFBundleGetMainBundle = Foreign.foreign ~stub:true "CFBundleGetMainBundle" (void @-> returning (ptr CFBundle.t))
let _CFBundleGetPackageInfo = Foreign.foreign ~stub:true "CFBundleGetPackageInfo" ((ptr CFBundle.t) @-> (ptr uint) @-> (ptr uint) @-> returning void)
let _CFBundleGetPackageInfoInDirectory = Foreign.foreign ~stub:true "CFBundleGetPackageInfoInDirectory" ((ptr CFURL.t) @-> (ptr uint) @-> (ptr uint) @-> returning bool)
let _CFBundleGetPlugIn = Foreign.foreign ~stub:true "CFBundleGetPlugIn" ((ptr CFBundle.t) @-> returning (ptr CFBundle.t))
let _CFBundleGetTypeID = Foreign.foreign ~stub:true "CFBundleGetTypeID" (void @-> returning ullong)
let _CFBundleGetValueForInfoDictionaryKey = Foreign.foreign ~stub:true "CFBundleGetValueForInfoDictionaryKey" ((ptr CFBundle.t) @-> (ptr CFString.t) @-> returning id)
let _CFBundleGetVersionNumber = Foreign.foreign ~stub:true "CFBundleGetVersionNumber" ((ptr CFBundle.t) @-> returning uint)
let _CFBundleIsArchitectureLoadable = Foreign.foreign ~stub:true "CFBundleIsArchitectureLoadable" (int @-> returning bool)
let _CFBundleIsExecutableLoadable = Foreign.foreign ~stub:true "CFBundleIsExecutableLoadable" ((ptr CFBundle.t) @-> returning bool)
let _CFBundleIsExecutableLoadableForURL = Foreign.foreign ~stub:true "CFBundleIsExecutableLoadableForURL" ((ptr CFURL.t) @-> returning bool)
let _CFBundleIsExecutableLoaded = Foreign.foreign ~stub:true "CFBundleIsExecutableLoaded" ((ptr CFBundle.t) @-> returning bool)
let _CFBundleLoadExecutable = Foreign.foreign ~stub:true "CFBundleLoadExecutable" ((ptr CFBundle.t) @-> returning bool)
let _CFBundleLoadExecutableAndReturnError = Foreign.foreign ~stub:true "CFBundleLoadExecutableAndReturnError" ((ptr CFBundle.t) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFBundleOpenBundleResourceFiles = Foreign.foreign ~stub:true "CFBundleOpenBundleResourceFiles" ((ptr CFBundle.t) @-> (ptr int) @-> (ptr int) @-> returning int)
let _CFBundleOpenBundleResourceMap = Foreign.foreign ~stub:true "CFBundleOpenBundleResourceMap" ((ptr CFBundle.t) @-> returning int)
let _CFBundlePreflightExecutable = Foreign.foreign ~stub:true "CFBundlePreflightExecutable" ((ptr CFBundle.t) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFBundleUnloadExecutable = Foreign.foreign ~stub:true "CFBundleUnloadExecutable" ((ptr CFBundle.t) @-> returning void)
(* let _CFByteOrderGetCurrent = Foreign.foreign "Camlkit_CFByteOrderGetCurrent" (void @-> returning llong) *)
let _CFCalendarAddComponents = Foreign.foreign ~stub:true "CFCalendarAddComponents" ((ptr CFCalendar.t) @-> (ptr double) @-> ullong @-> string @-> returning bool)
let _CFCalendarComposeAbsoluteTime = Foreign.foreign ~stub:true "CFCalendarComposeAbsoluteTime" ((ptr CFCalendar.t) @-> (ptr double) @-> string @-> returning bool)
let _CFCalendarCopyCurrent = Foreign.foreign ~stub:true "CFCalendarCopyCurrent" (void @-> returning (ptr CFCalendar.t))
let _CFCalendarCopyLocale = Foreign.foreign ~stub:true "CFCalendarCopyLocale" ((ptr CFCalendar.t) @-> returning (ptr CFLocale.t))
let _CFCalendarCopyTimeZone = Foreign.foreign ~stub:true "CFCalendarCopyTimeZone" ((ptr CFCalendar.t) @-> returning (ptr CFTimeZone.t))
let _CFCalendarCreateWithIdentifier = Foreign.foreign ~stub:true "CFCalendarCreateWithIdentifier" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFCalendar.t))
let _CFCalendarDecomposeAbsoluteTime = Foreign.foreign ~stub:true "CFCalendarDecomposeAbsoluteTime" ((ptr CFCalendar.t) @-> double @-> string @-> returning bool)
let _CFCalendarGetComponentDifference = Foreign.foreign ~stub:true "CFCalendarGetComponentDifference" ((ptr CFCalendar.t) @-> double @-> double @-> ullong @-> string @-> returning bool)
let _CFCalendarGetFirstWeekday = Foreign.foreign ~stub:true "CFCalendarGetFirstWeekday" ((ptr CFCalendar.t) @-> returning llong)
let _CFCalendarGetIdentifier = Foreign.foreign ~stub:true "CFCalendarGetIdentifier" ((ptr CFCalendar.t) @-> returning (ptr CFString.t))
let _CFCalendarGetMaximumRangeOfUnit = Foreign.foreign ~stub:true "CFCalendarGetMaximumRangeOfUnit" ((ptr CFCalendar.t) @-> ullong @-> returning CFRange.t)
let _CFCalendarGetMinimumDaysInFirstWeek = Foreign.foreign ~stub:true "CFCalendarGetMinimumDaysInFirstWeek" ((ptr CFCalendar.t) @-> returning llong)
let _CFCalendarGetMinimumRangeOfUnit = Foreign.foreign ~stub:true "CFCalendarGetMinimumRangeOfUnit" ((ptr CFCalendar.t) @-> ullong @-> returning CFRange.t)
let _CFCalendarGetOrdinalityOfUnit = Foreign.foreign ~stub:true "CFCalendarGetOrdinalityOfUnit" ((ptr CFCalendar.t) @-> ullong @-> ullong @-> double @-> returning llong)
let _CFCalendarGetRangeOfUnit = Foreign.foreign ~stub:true "CFCalendarGetRangeOfUnit" ((ptr CFCalendar.t) @-> ullong @-> ullong @-> double @-> returning CFRange.t)
let _CFCalendarGetTimeRangeOfUnit = Foreign.foreign ~stub:true "CFCalendarGetTimeRangeOfUnit" ((ptr CFCalendar.t) @-> ullong @-> double @-> (ptr double) @-> (ptr double) @-> returning bool)
let _CFCalendarGetTypeID = Foreign.foreign ~stub:true "CFCalendarGetTypeID" (void @-> returning ullong)
let _CFCalendarSetFirstWeekday = Foreign.foreign ~stub:true "CFCalendarSetFirstWeekday" ((ptr CFCalendar.t) @-> llong @-> returning void)
let _CFCalendarSetLocale = Foreign.foreign ~stub:true "CFCalendarSetLocale" ((ptr CFCalendar.t) @-> (ptr CFLocale.t) @-> returning void)
let _CFCalendarSetMinimumDaysInFirstWeek = Foreign.foreign ~stub:true "CFCalendarSetMinimumDaysInFirstWeek" ((ptr CFCalendar.t) @-> llong @-> returning void)
let _CFCalendarSetTimeZone = Foreign.foreign ~stub:true "CFCalendarSetTimeZone" ((ptr CFCalendar.t) @-> (ptr CFTimeZone.t) @-> returning void)
let _CFCharacterSetAddCharactersInRange = Foreign.foreign ~stub:true "CFCharacterSetAddCharactersInRange" ((ptr CFCharacterSet.t) @-> CFRange.t @-> returning void)
let _CFCharacterSetAddCharactersInString = Foreign.foreign ~stub:true "CFCharacterSetAddCharactersInString" ((ptr CFCharacterSet.t) @-> (ptr CFString.t) @-> returning void)
let _CFCharacterSetCreateBitmapRepresentation = Foreign.foreign ~stub:true "CFCharacterSetCreateBitmapRepresentation" ((ptr CFAllocator.t) @-> (ptr CFCharacterSet.t) @-> returning (ptr CFData.t))
let _CFCharacterSetCreateCopy = Foreign.foreign ~stub:true "CFCharacterSetCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFCharacterSet.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateInvertedSet = Foreign.foreign ~stub:true "CFCharacterSetCreateInvertedSet" ((ptr CFAllocator.t) @-> (ptr CFCharacterSet.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateMutable = Foreign.foreign ~stub:true "CFCharacterSetCreateMutable" ((ptr CFAllocator.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateMutableCopy = Foreign.foreign ~stub:true "CFCharacterSetCreateMutableCopy" ((ptr CFAllocator.t) @-> (ptr CFCharacterSet.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateWithBitmapRepresentation = Foreign.foreign ~stub:true "CFCharacterSetCreateWithBitmapRepresentation" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateWithCharactersInRange = Foreign.foreign ~stub:true "CFCharacterSetCreateWithCharactersInRange" ((ptr CFAllocator.t) @-> CFRange.t @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetCreateWithCharactersInString = Foreign.foreign ~stub:true "CFCharacterSetCreateWithCharactersInString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetGetPredefined = Foreign.foreign ~stub:true "CFCharacterSetGetPredefined" (llong @-> returning (ptr CFCharacterSet.t))
let _CFCharacterSetGetTypeID = Foreign.foreign ~stub:true "CFCharacterSetGetTypeID" (void @-> returning ullong)
let _CFCharacterSetHasMemberInPlane = Foreign.foreign ~stub:true "CFCharacterSetHasMemberInPlane" ((ptr CFCharacterSet.t) @-> llong @-> returning bool)
let _CFCharacterSetIntersect = Foreign.foreign ~stub:true "CFCharacterSetIntersect" ((ptr CFCharacterSet.t) @-> (ptr CFCharacterSet.t) @-> returning void)
let _CFCharacterSetInvert = Foreign.foreign ~stub:true "CFCharacterSetInvert" ((ptr CFCharacterSet.t) @-> returning void)
let _CFCharacterSetIsCharacterMember = Foreign.foreign ~stub:true "CFCharacterSetIsCharacterMember" ((ptr CFCharacterSet.t) @-> ushort @-> returning bool)
let _CFCharacterSetIsLongCharacterMember = Foreign.foreign ~stub:true "CFCharacterSetIsLongCharacterMember" ((ptr CFCharacterSet.t) @-> uint @-> returning bool)
let _CFCharacterSetIsSupersetOfSet = Foreign.foreign ~stub:true "CFCharacterSetIsSupersetOfSet" ((ptr CFCharacterSet.t) @-> (ptr CFCharacterSet.t) @-> returning bool)
let _CFCharacterSetRemoveCharactersInRange = Foreign.foreign ~stub:true "CFCharacterSetRemoveCharactersInRange" ((ptr CFCharacterSet.t) @-> CFRange.t @-> returning void)
let _CFCharacterSetRemoveCharactersInString = Foreign.foreign ~stub:true "CFCharacterSetRemoveCharactersInString" ((ptr CFCharacterSet.t) @-> (ptr CFString.t) @-> returning void)
let _CFCharacterSetUnion = Foreign.foreign ~stub:true "CFCharacterSetUnion" ((ptr CFCharacterSet.t) @-> (ptr CFCharacterSet.t) @-> returning void)
(* let _CFConvertDoubleHostToSwapped = Foreign.foreign "Camlkit_CFConvertDoubleHostToSwapped" (double @-> returning CFSwappedFloat64.t) *)
(* let _CFConvertDoubleSwappedToHost = Foreign.foreign "Camlkit_CFConvertDoubleSwappedToHost" (CFSwappedFloat64.t @-> returning double) *)
(* let _CFConvertFloat32HostToSwapped = Foreign.foreign "Camlkit_CFConvertFloat32HostToSwapped" (float @-> returning CFSwappedFloat32.t) *)
(* let _CFConvertFloat32SwappedToHost = Foreign.foreign "Camlkit_CFConvertFloat32SwappedToHost" (CFSwappedFloat32.t @-> returning float) *)
(* let _CFConvertFloat64HostToSwapped = Foreign.foreign "Camlkit_CFConvertFloat64HostToSwapped" (double @-> returning CFSwappedFloat64.t) *)
(* let _CFConvertFloat64SwappedToHost = Foreign.foreign "Camlkit_CFConvertFloat64SwappedToHost" (CFSwappedFloat64.t @-> returning double) *)
(* let _CFConvertFloatHostToSwapped = Foreign.foreign "Camlkit_CFConvertFloatHostToSwapped" (float @-> returning CFSwappedFloat32.t) *)
(* let _CFConvertFloatSwappedToHost = Foreign.foreign "Camlkit_CFConvertFloatSwappedToHost" (CFSwappedFloat32.t @-> returning float) *)
let _CFCopyDescription = Foreign.foreign ~stub:true "CFCopyDescription" (id @-> returning (ptr CFString.t))
let _CFCopyHomeDirectoryURL = Foreign.foreign ~stub:true "CFCopyHomeDirectoryURL" (void @-> returning (ptr CFURL.t))
let _CFCopyTypeIDDescription = Foreign.foreign ~stub:true "CFCopyTypeIDDescription" (ullong @-> returning (ptr CFString.t))
let _CFDataAppendBytes = Foreign.foreign ~stub:true "CFDataAppendBytes" ((ptr CFData.t) @-> string @-> llong @-> returning void)
let _CFDataCreate = Foreign.foreign ~stub:true "CFDataCreate" ((ptr CFAllocator.t) @-> string @-> llong @-> returning (ptr CFData.t))
let _CFDataCreateCopy = Foreign.foreign ~stub:true "CFDataCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> returning (ptr CFData.t))
let _CFDataCreateMutable = Foreign.foreign ~stub:true "CFDataCreateMutable" ((ptr CFAllocator.t) @-> llong @-> returning (ptr CFData.t))
let _CFDataCreateMutableCopy = Foreign.foreign ~stub:true "CFDataCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFData.t) @-> returning (ptr CFData.t))
let _CFDataCreateWithBytesNoCopy = Foreign.foreign ~stub:true "CFDataCreateWithBytesNoCopy" ((ptr CFAllocator.t) @-> string @-> llong @-> (ptr CFAllocator.t) @-> returning (ptr CFData.t))
let _CFDataDeleteBytes = Foreign.foreign ~stub:true "CFDataDeleteBytes" ((ptr CFData.t) @-> CFRange.t @-> returning void)
let _CFDataFind = Foreign.foreign ~stub:true "CFDataFind" ((ptr CFData.t) @-> (ptr CFData.t) @-> CFRange.t @-> ullong @-> returning CFRange.t)
let _CFDataGetBytePtr = Foreign.foreign ~stub:true "CFDataGetBytePtr" ((ptr CFData.t) @-> returning string)
let _CFDataGetBytes = Foreign.foreign ~stub:true "CFDataGetBytes" ((ptr CFData.t) @-> CFRange.t @-> string @-> returning void)
let _CFDataGetLength = Foreign.foreign ~stub:true "CFDataGetLength" ((ptr CFData.t) @-> returning llong)
let _CFDataGetMutableBytePtr = Foreign.foreign ~stub:true "CFDataGetMutableBytePtr" ((ptr CFData.t) @-> returning string)
let _CFDataGetTypeID = Foreign.foreign ~stub:true "CFDataGetTypeID" (void @-> returning ullong)
let _CFDataIncreaseLength = Foreign.foreign ~stub:true "CFDataIncreaseLength" ((ptr CFData.t) @-> llong @-> returning void)
let _CFDataReplaceBytes = Foreign.foreign ~stub:true "CFDataReplaceBytes" ((ptr CFData.t) @-> CFRange.t @-> string @-> llong @-> returning void)
let _CFDataSetLength = Foreign.foreign ~stub:true "CFDataSetLength" ((ptr CFData.t) @-> llong @-> returning void)
let _CFDateCompare = Foreign.foreign ~stub:true "CFDateCompare" ((ptr CFDate.t) @-> (ptr CFDate.t) @-> (ptr void) @-> returning llong)
let _CFDateCreate = Foreign.foreign ~stub:true "CFDateCreate" ((ptr CFAllocator.t) @-> double @-> returning (ptr CFDate.t))
let _CFDateFormatterCopyProperty = Foreign.foreign ~stub:true "CFDateFormatterCopyProperty" ((ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> returning id)
let _CFDateFormatterCreate = Foreign.foreign ~stub:true "CFDateFormatterCreate" ((ptr CFAllocator.t) @-> (ptr CFLocale.t) @-> llong @-> llong @-> returning (ptr CFDateFormatter.t))
let _CFDateFormatterCreateDateFormatFromTemplate = Foreign.foreign ~stub:true "CFDateFormatterCreateDateFormatFromTemplate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> ullong @-> (ptr CFLocale.t) @-> returning (ptr CFString.t))
let _CFDateFormatterCreateDateFromString = Foreign.foreign ~stub:true "CFDateFormatterCreateDateFromString" ((ptr CFAllocator.t) @-> (ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> returning (ptr CFDate.t))
let _CFDateFormatterCreateISO8601Formatter = Foreign.foreign ~stub:true "CFDateFormatterCreateISO8601Formatter" ((ptr CFAllocator.t) @-> ullong @-> returning (ptr CFDateFormatter.t))
let _CFDateFormatterCreateStringWithAbsoluteTime = Foreign.foreign ~stub:true "CFDateFormatterCreateStringWithAbsoluteTime" ((ptr CFAllocator.t) @-> (ptr CFDateFormatter.t) @-> double @-> returning (ptr CFString.t))
let _CFDateFormatterCreateStringWithDate = Foreign.foreign ~stub:true "CFDateFormatterCreateStringWithDate" ((ptr CFAllocator.t) @-> (ptr CFDateFormatter.t) @-> (ptr CFDate.t) @-> returning (ptr CFString.t))
let _CFDateFormatterGetAbsoluteTimeFromString = Foreign.foreign ~stub:true "CFDateFormatterGetAbsoluteTimeFromString" ((ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> (ptr double) @-> returning bool)
let _CFDateFormatterGetDateStyle = Foreign.foreign ~stub:true "CFDateFormatterGetDateStyle" ((ptr CFDateFormatter.t) @-> returning llong)
let _CFDateFormatterGetFormat = Foreign.foreign ~stub:true "CFDateFormatterGetFormat" ((ptr CFDateFormatter.t) @-> returning (ptr CFString.t))
let _CFDateFormatterGetLocale = Foreign.foreign ~stub:true "CFDateFormatterGetLocale" ((ptr CFDateFormatter.t) @-> returning (ptr CFLocale.t))
let _CFDateFormatterGetTimeStyle = Foreign.foreign ~stub:true "CFDateFormatterGetTimeStyle" ((ptr CFDateFormatter.t) @-> returning llong)
let _CFDateFormatterGetTypeID = Foreign.foreign ~stub:true "CFDateFormatterGetTypeID" (void @-> returning ullong)
let _CFDateFormatterSetFormat = Foreign.foreign ~stub:true "CFDateFormatterSetFormat" ((ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> returning void)
let _CFDateFormatterSetProperty = Foreign.foreign ~stub:true "CFDateFormatterSetProperty" ((ptr CFDateFormatter.t) @-> (ptr CFString.t) @-> id @-> returning void)
let _CFDateGetAbsoluteTime = Foreign.foreign ~stub:true "CFDateGetAbsoluteTime" ((ptr CFDate.t) @-> returning double)
let _CFDateGetTimeIntervalSinceDate = Foreign.foreign ~stub:true "CFDateGetTimeIntervalSinceDate" ((ptr CFDate.t) @-> (ptr CFDate.t) @-> returning double)
let _CFDateGetTypeID = Foreign.foreign ~stub:true "CFDateGetTypeID" (void @-> returning ullong)
let _CFDictionaryAddValue = Foreign.foreign ~stub:true "CFDictionaryAddValue" ((ptr CFDictionary.t) @-> (ptr void) @-> (ptr void) @-> returning void)
let _CFDictionaryApplyFunction = Foreign.foreign ~stub:true "CFDictionaryApplyFunction" ((ptr CFDictionary.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFDictionaryContainsKey = Foreign.foreign ~stub:true "CFDictionaryContainsKey" ((ptr CFDictionary.t) @-> (ptr void) @-> returning bool)
let _CFDictionaryContainsValue = Foreign.foreign ~stub:true "CFDictionaryContainsValue" ((ptr CFDictionary.t) @-> (ptr void) @-> returning bool)
let _CFDictionaryCreate = Foreign.foreign ~stub:true "CFDictionaryCreate" ((ptr CFAllocator.t) @-> (ptr (ptr void)) @-> (ptr (ptr void)) @-> llong @-> (ptr CFDictionaryKeyCallBacks.t) @-> (ptr CFDictionaryValueCallBacks.t) @-> returning (ptr CFDictionary.t))
let _CFDictionaryCreateCopy = Foreign.foreign ~stub:true "CFDictionaryCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFDictionary.t))
let _CFDictionaryCreateMutable = Foreign.foreign ~stub:true "CFDictionaryCreateMutable" ((ptr CFAllocator.t) @-> llong @-> (ptr CFDictionaryKeyCallBacks.t) @-> (ptr CFDictionaryValueCallBacks.t) @-> returning (ptr CFDictionary.t))
let _CFDictionaryCreateMutableCopy = Foreign.foreign ~stub:true "CFDictionaryCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFDictionary.t) @-> returning (ptr CFDictionary.t))
let _CFDictionaryGetCount = Foreign.foreign ~stub:true "CFDictionaryGetCount" ((ptr CFDictionary.t) @-> returning llong)
let _CFDictionaryGetCountOfKey = Foreign.foreign ~stub:true "CFDictionaryGetCountOfKey" ((ptr CFDictionary.t) @-> (ptr void) @-> returning llong)
let _CFDictionaryGetCountOfValue = Foreign.foreign ~stub:true "CFDictionaryGetCountOfValue" ((ptr CFDictionary.t) @-> (ptr void) @-> returning llong)
let _CFDictionaryGetKeysAndValues = Foreign.foreign ~stub:true "CFDictionaryGetKeysAndValues" ((ptr CFDictionary.t) @-> (ptr (ptr void)) @-> (ptr (ptr void)) @-> returning void)
let _CFDictionaryGetTypeID = Foreign.foreign ~stub:true "CFDictionaryGetTypeID" (void @-> returning ullong)
let _CFDictionaryGetValue = Foreign.foreign ~stub:true "CFDictionaryGetValue" ((ptr CFDictionary.t) @-> (ptr void) @-> returning (ptr void))
let _CFDictionaryGetValueIfPresent = Foreign.foreign ~stub:true "CFDictionaryGetValueIfPresent" ((ptr CFDictionary.t) @-> (ptr void) @-> (ptr (ptr void)) @-> returning bool)
let _CFDictionaryRemoveAllValues = Foreign.foreign ~stub:true "CFDictionaryRemoveAllValues" ((ptr CFDictionary.t) @-> returning void)
let _CFDictionaryRemoveValue = Foreign.foreign ~stub:true "CFDictionaryRemoveValue" ((ptr CFDictionary.t) @-> (ptr void) @-> returning void)
let _CFDictionaryReplaceValue = Foreign.foreign ~stub:true "CFDictionaryReplaceValue" ((ptr CFDictionary.t) @-> (ptr void) @-> (ptr void) @-> returning void)
let _CFDictionarySetValue = Foreign.foreign ~stub:true "CFDictionarySetValue" ((ptr CFDictionary.t) @-> (ptr void) @-> (ptr void) @-> returning void)
let _CFEqual = Foreign.foreign ~stub:true "CFEqual" (id @-> id @-> returning bool)
let _CFErrorCopyDescription = Foreign.foreign ~stub:true "CFErrorCopyDescription" ((ptr CFError.t) @-> returning (ptr CFString.t))
let _CFErrorCopyFailureReason = Foreign.foreign ~stub:true "CFErrorCopyFailureReason" ((ptr CFError.t) @-> returning (ptr CFString.t))
let _CFErrorCopyRecoverySuggestion = Foreign.foreign ~stub:true "CFErrorCopyRecoverySuggestion" ((ptr CFError.t) @-> returning (ptr CFString.t))
let _CFErrorCopyUserInfo = Foreign.foreign ~stub:true "CFErrorCopyUserInfo" ((ptr CFError.t) @-> returning (ptr CFDictionary.t))
let _CFErrorCreate = Foreign.foreign ~stub:true "CFErrorCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> llong @-> (ptr CFDictionary.t) @-> returning (ptr CFError.t))
let _CFErrorCreateWithUserInfoKeysAndValues = Foreign.foreign ~stub:true "CFErrorCreateWithUserInfoKeysAndValues" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> llong @-> (ptr (ptr void)) @-> (ptr (ptr void)) @-> llong @-> returning (ptr CFError.t))
let _CFErrorGetCode = Foreign.foreign ~stub:true "CFErrorGetCode" ((ptr CFError.t) @-> returning llong)
let _CFErrorGetDomain = Foreign.foreign ~stub:true "CFErrorGetDomain" ((ptr CFError.t) @-> returning (ptr CFString.t))
let _CFErrorGetTypeID = Foreign.foreign ~stub:true "CFErrorGetTypeID" (void @-> returning ullong)
let _CFFileDescriptorCreate = Foreign.foreign ~stub:true "CFFileDescriptorCreate" ((ptr CFAllocator.t) @-> int @-> bool @-> Foreign.funptr ((ptr CFFileDescriptor.t) @-> ullong @-> (ptr void) @-> returning void) @-> (ptr CFFileDescriptorContext.t) @-> returning (ptr CFFileDescriptor.t))
let _CFFileDescriptorCreateRunLoopSource = Foreign.foreign ~stub:true "CFFileDescriptorCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFFileDescriptor.t) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFFileDescriptorDisableCallBacks = Foreign.foreign ~stub:true "CFFileDescriptorDisableCallBacks" ((ptr CFFileDescriptor.t) @-> ullong @-> returning void)
let _CFFileDescriptorEnableCallBacks = Foreign.foreign ~stub:true "CFFileDescriptorEnableCallBacks" ((ptr CFFileDescriptor.t) @-> ullong @-> returning void)
let _CFFileDescriptorGetContext = Foreign.foreign ~stub:true "CFFileDescriptorGetContext" ((ptr CFFileDescriptor.t) @-> (ptr CFFileDescriptorContext.t) @-> returning void)
let _CFFileDescriptorGetNativeDescriptor = Foreign.foreign ~stub:true "CFFileDescriptorGetNativeDescriptor" ((ptr CFFileDescriptor.t) @-> returning int)
let _CFFileDescriptorGetTypeID = Foreign.foreign ~stub:true "CFFileDescriptorGetTypeID" (void @-> returning ullong)
let _CFFileDescriptorInvalidate = Foreign.foreign ~stub:true "CFFileDescriptorInvalidate" ((ptr CFFileDescriptor.t) @-> returning void)
let _CFFileDescriptorIsValid = Foreign.foreign ~stub:true "CFFileDescriptorIsValid" ((ptr CFFileDescriptor.t) @-> returning bool)
let _CFFileSecurityClearProperties = Foreign.foreign ~stub:true "CFFileSecurityClearProperties" ((ptr CFFileSecurity.t) @-> ullong @-> returning bool)
let _CFFileSecurityCopyAccessControlList = Foreign.foreign ~stub:true "CFFileSecurityCopyAccessControlList" ((ptr CFFileSecurity.t) @-> (ptr (ptr void)) @-> returning bool)
let _CFFileSecurityCopyGroupUUID = Foreign.foreign ~stub:true "CFFileSecurityCopyGroupUUID" ((ptr CFFileSecurity.t) @-> (ptr (ptr CFUUID.t)) @-> returning bool)
let _CFFileSecurityCopyOwnerUUID = Foreign.foreign ~stub:true "CFFileSecurityCopyOwnerUUID" ((ptr CFFileSecurity.t) @-> (ptr (ptr CFUUID.t)) @-> returning bool)
let _CFFileSecurityCreate = Foreign.foreign ~stub:true "CFFileSecurityCreate" ((ptr CFAllocator.t) @-> returning (ptr CFFileSecurity.t))
let _CFFileSecurityCreateCopy = Foreign.foreign ~stub:true "CFFileSecurityCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFFileSecurity.t) @-> returning (ptr CFFileSecurity.t))
let _CFFileSecurityGetGroup = Foreign.foreign ~stub:true "CFFileSecurityGetGroup" ((ptr CFFileSecurity.t) @-> (ptr uint) @-> returning bool)
let _CFFileSecurityGetMode = Foreign.foreign ~stub:true "CFFileSecurityGetMode" ((ptr CFFileSecurity.t) @-> (ptr ushort) @-> returning bool)
let _CFFileSecurityGetOwner = Foreign.foreign ~stub:true "CFFileSecurityGetOwner" ((ptr CFFileSecurity.t) @-> (ptr uint) @-> returning bool)
let _CFFileSecurityGetTypeID = Foreign.foreign ~stub:true "CFFileSecurityGetTypeID" (void @-> returning ullong)
let _CFFileSecuritySetAccessControlList = Foreign.foreign ~stub:true "CFFileSecuritySetAccessControlList" ((ptr CFFileSecurity.t) @-> (ptr void) @-> returning bool)
let _CFFileSecuritySetGroup = Foreign.foreign ~stub:true "CFFileSecuritySetGroup" ((ptr CFFileSecurity.t) @-> uint @-> returning bool)
let _CFFileSecuritySetGroupUUID = Foreign.foreign ~stub:true "CFFileSecuritySetGroupUUID" ((ptr CFFileSecurity.t) @-> (ptr CFUUID.t) @-> returning bool)
let _CFFileSecuritySetMode = Foreign.foreign ~stub:true "CFFileSecuritySetMode" ((ptr CFFileSecurity.t) @-> ushort @-> returning bool)
let _CFFileSecuritySetOwner = Foreign.foreign ~stub:true "CFFileSecuritySetOwner" ((ptr CFFileSecurity.t) @-> uint @-> returning bool)
let _CFFileSecuritySetOwnerUUID = Foreign.foreign ~stub:true "CFFileSecuritySetOwnerUUID" ((ptr CFFileSecurity.t) @-> (ptr CFUUID.t) @-> returning bool)
let _CFGetAllocator = Foreign.foreign ~stub:true "CFGetAllocator" (id @-> returning (ptr CFAllocator.t))
let _CFGetRetainCount = Foreign.foreign ~stub:true "CFGetRetainCount" (id @-> returning llong)
let _CFGetTypeID = Foreign.foreign ~stub:true "CFGetTypeID" (id @-> returning ullong)
let _CFGregorianDateGetAbsoluteTime = Foreign.foreign ~stub:true "CFGregorianDateGetAbsoluteTime" (CFGregorianDate.t @-> (ptr CFTimeZone.t) @-> returning double)
let _CFGregorianDateIsValid = Foreign.foreign ~stub:true "CFGregorianDateIsValid" (CFGregorianDate.t @-> ullong @-> returning bool)
let _CFHash = Foreign.foreign ~stub:true "CFHash" (id @-> returning ullong)
let _CFLocaleCopyAvailableLocaleIdentifiers = Foreign.foreign ~stub:true "CFLocaleCopyAvailableLocaleIdentifiers" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyCommonISOCurrencyCodes = Foreign.foreign ~stub:true "CFLocaleCopyCommonISOCurrencyCodes" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyCurrent = Foreign.foreign ~stub:true "CFLocaleCopyCurrent" (void @-> returning (ptr CFLocale.t))
let _CFLocaleCopyDisplayNameForPropertyValue = Foreign.foreign ~stub:true "CFLocaleCopyDisplayNameForPropertyValue" ((ptr CFLocale.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFLocaleCopyISOCountryCodes = Foreign.foreign ~stub:true "CFLocaleCopyISOCountryCodes" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyISOCurrencyCodes = Foreign.foreign ~stub:true "CFLocaleCopyISOCurrencyCodes" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyISOLanguageCodes = Foreign.foreign ~stub:true "CFLocaleCopyISOLanguageCodes" (void @-> returning (ptr CFArray.t))
let _CFLocaleCopyPreferredLanguages = Foreign.foreign ~stub:true "CFLocaleCopyPreferredLanguages" (void @-> returning (ptr CFArray.t))
let _CFLocaleCreate = Foreign.foreign ~stub:true "CFLocaleCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFLocale.t))
let _CFLocaleCreateCanonicalLanguageIdentifierFromString = Foreign.foreign ~stub:true "CFLocaleCreateCanonicalLanguageIdentifierFromString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes = Foreign.foreign ~stub:true "CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes" ((ptr CFAllocator.t) @-> short @-> short @-> returning (ptr CFString.t))
let _CFLocaleCreateCanonicalLocaleIdentifierFromString = Foreign.foreign ~stub:true "CFLocaleCreateCanonicalLocaleIdentifierFromString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFLocaleCreateComponentsFromLocaleIdentifier = Foreign.foreign ~stub:true "CFLocaleCreateComponentsFromLocaleIdentifier" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFDictionary.t))
let _CFLocaleCreateCopy = Foreign.foreign ~stub:true "CFLocaleCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFLocale.t) @-> returning (ptr CFLocale.t))
let _CFLocaleCreateLocaleIdentifierFromComponents = Foreign.foreign ~stub:true "CFLocaleCreateLocaleIdentifierFromComponents" ((ptr CFAllocator.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFString.t))
let _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode = Foreign.foreign ~stub:true "CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode" ((ptr CFAllocator.t) @-> uint @-> returning (ptr CFString.t))
let _CFLocaleGetIdentifier = Foreign.foreign ~stub:true "CFLocaleGetIdentifier" ((ptr CFLocale.t) @-> returning (ptr CFString.t))
let _CFLocaleGetLanguageCharacterDirection = Foreign.foreign ~stub:true "CFLocaleGetLanguageCharacterDirection" ((ptr CFString.t) @-> returning llong)
let _CFLocaleGetLanguageLineDirection = Foreign.foreign ~stub:true "CFLocaleGetLanguageLineDirection" ((ptr CFString.t) @-> returning llong)
let _CFLocaleGetSystem = Foreign.foreign ~stub:true "CFLocaleGetSystem" (void @-> returning (ptr CFLocale.t))
let _CFLocaleGetTypeID = Foreign.foreign ~stub:true "CFLocaleGetTypeID" (void @-> returning ullong)
let _CFLocaleGetValue = Foreign.foreign ~stub:true "CFLocaleGetValue" ((ptr CFLocale.t) @-> (ptr CFString.t) @-> returning id)
let _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier = Foreign.foreign ~stub:true "CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier" ((ptr CFString.t) @-> returning uint)
let _CFMachPortCreate = Foreign.foreign ~stub:true "CFMachPortCreate" ((ptr CFAllocator.t) @-> Foreign.funptr ((ptr CFMachPort.t) @-> (ptr void) @-> llong @-> (ptr void) @-> returning void) @-> (ptr CFMachPortContext.t) @-> (ptr bool) @-> returning (ptr CFMachPort.t))
let _CFMachPortCreateRunLoopSource = Foreign.foreign ~stub:true "CFMachPortCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFMachPort.t) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFMachPortCreateWithPort = Foreign.foreign ~stub:true "CFMachPortCreateWithPort" ((ptr CFAllocator.t) @-> uint @-> Foreign.funptr ((ptr CFMachPort.t) @-> (ptr void) @-> llong @-> (ptr void) @-> returning void) @-> (ptr CFMachPortContext.t) @-> (ptr bool) @-> returning (ptr CFMachPort.t))
let _CFMachPortGetContext = Foreign.foreign ~stub:true "CFMachPortGetContext" ((ptr CFMachPort.t) @-> (ptr CFMachPortContext.t) @-> returning void)
let _CFMachPortGetInvalidationCallBack = Foreign.foreign ~stub:true "CFMachPortGetInvalidationCallBack" ((ptr CFMachPort.t) @-> returning (ptr (ptr void)))
let _CFMachPortGetPort = Foreign.foreign ~stub:true "CFMachPortGetPort" ((ptr CFMachPort.t) @-> returning uint)
let _CFMachPortGetTypeID = Foreign.foreign ~stub:true "CFMachPortGetTypeID" (void @-> returning ullong)
let _CFMachPortInvalidate = Foreign.foreign ~stub:true "CFMachPortInvalidate" ((ptr CFMachPort.t) @-> returning void)
let _CFMachPortIsValid = Foreign.foreign ~stub:true "CFMachPortIsValid" ((ptr CFMachPort.t) @-> returning bool)
let _CFMachPortSetInvalidationCallBack = Foreign.foreign ~stub:true "CFMachPortSetInvalidationCallBack" ((ptr CFMachPort.t) @-> Foreign.funptr ((ptr CFMachPort.t) @-> (ptr void) @-> returning void) @-> returning void)
let _CFMakeCollectable = Foreign.foreign ~stub:true "CFMakeCollectable" (id @-> returning id)
let _CFMessagePortCreateLocal = Foreign.foreign ~stub:true "CFMessagePortCreateLocal" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> Foreign.funptr ((ptr CFMessagePort.t) @-> int @-> (ptr CFData.t) @-> (ptr void) @-> returning (ptr CFData.t)) @-> (ptr CFMessagePortContext.t) @-> (ptr bool) @-> returning (ptr CFMessagePort.t))
let _CFMessagePortCreateRemote = Foreign.foreign ~stub:true "CFMessagePortCreateRemote" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFMessagePort.t))
let _CFMessagePortCreateRunLoopSource = Foreign.foreign ~stub:true "CFMessagePortCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFMessagePort.t) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFMessagePortGetContext = Foreign.foreign ~stub:true "CFMessagePortGetContext" ((ptr CFMessagePort.t) @-> (ptr CFMessagePortContext.t) @-> returning void)
let _CFMessagePortGetInvalidationCallBack = Foreign.foreign ~stub:true "CFMessagePortGetInvalidationCallBack" ((ptr CFMessagePort.t) @-> returning (ptr (ptr void)))
let _CFMessagePortGetName = Foreign.foreign ~stub:true "CFMessagePortGetName" ((ptr CFMessagePort.t) @-> returning (ptr CFString.t))
let _CFMessagePortGetTypeID = Foreign.foreign ~stub:true "CFMessagePortGetTypeID" (void @-> returning ullong)
let _CFMessagePortInvalidate = Foreign.foreign ~stub:true "CFMessagePortInvalidate" ((ptr CFMessagePort.t) @-> returning void)
let _CFMessagePortIsRemote = Foreign.foreign ~stub:true "CFMessagePortIsRemote" ((ptr CFMessagePort.t) @-> returning bool)
let _CFMessagePortIsValid = Foreign.foreign ~stub:true "CFMessagePortIsValid" ((ptr CFMessagePort.t) @-> returning bool)
let _CFMessagePortSendRequest = Foreign.foreign ~stub:true "CFMessagePortSendRequest" ((ptr CFMessagePort.t) @-> int @-> (ptr CFData.t) @-> double @-> double @-> (ptr CFString.t) @-> (ptr (ptr CFData.t)) @-> returning int)
let _CFMessagePortSetDispatchQueue = Foreign.foreign ~stub:true "CFMessagePortSetDispatchQueue" ((ptr CFMessagePort.t) @-> id @-> returning void)
let _CFMessagePortSetInvalidationCallBack = Foreign.foreign ~stub:true "CFMessagePortSetInvalidationCallBack" ((ptr CFMessagePort.t) @-> Foreign.funptr ((ptr CFMessagePort.t) @-> (ptr void) @-> returning void) @-> returning void)
let _CFMessagePortSetName = Foreign.foreign ~stub:true "CFMessagePortSetName" ((ptr CFMessagePort.t) @-> (ptr CFString.t) @-> returning bool)
let _CFNotificationCenterAddObserver = Foreign.foreign ~stub:true "CFNotificationCenterAddObserver" ((ptr CFNotificationCenter.t) @-> (ptr void) @-> Foreign.funptr ((ptr CFNotificationCenter.t) @-> (ptr void) @-> (ptr CFString.t) @-> (ptr void) @-> (ptr CFDictionary.t) @-> returning void) @-> (ptr CFString.t) @-> (ptr void) @-> llong @-> returning void)
let _CFNotificationCenterGetDarwinNotifyCenter = Foreign.foreign ~stub:true "CFNotificationCenterGetDarwinNotifyCenter" (void @-> returning (ptr CFNotificationCenter.t))
let _CFNotificationCenterGetDistributedCenter = Foreign.foreign ~stub:true "CFNotificationCenterGetDistributedCenter" (void @-> returning (ptr CFNotificationCenter.t))
let _CFNotificationCenterGetLocalCenter = Foreign.foreign ~stub:true "CFNotificationCenterGetLocalCenter" (void @-> returning (ptr CFNotificationCenter.t))
let _CFNotificationCenterGetTypeID = Foreign.foreign ~stub:true "CFNotificationCenterGetTypeID" (void @-> returning ullong)
let _CFNotificationCenterPostNotification = Foreign.foreign ~stub:true "CFNotificationCenterPostNotification" ((ptr CFNotificationCenter.t) @-> (ptr CFString.t) @-> (ptr void) @-> (ptr CFDictionary.t) @-> bool @-> returning void)
let _CFNotificationCenterPostNotificationWithOptions = Foreign.foreign ~stub:true "CFNotificationCenterPostNotificationWithOptions" ((ptr CFNotificationCenter.t) @-> (ptr CFString.t) @-> (ptr void) @-> (ptr CFDictionary.t) @-> ullong @-> returning void)
let _CFNotificationCenterRemoveEveryObserver = Foreign.foreign ~stub:true "CFNotificationCenterRemoveEveryObserver" ((ptr CFNotificationCenter.t) @-> (ptr void) @-> returning void)
let _CFNotificationCenterRemoveObserver = Foreign.foreign ~stub:true "CFNotificationCenterRemoveObserver" ((ptr CFNotificationCenter.t) @-> (ptr void) @-> (ptr CFString.t) @-> (ptr void) @-> returning void)
let _CFNullGetTypeID = Foreign.foreign ~stub:true "CFNullGetTypeID" (void @-> returning ullong)
let _CFNumberCompare = Foreign.foreign ~stub:true "CFNumberCompare" ((ptr CFNumber.t) @-> (ptr CFNumber.t) @-> (ptr void) @-> returning llong)
let _CFNumberCreate = Foreign.foreign ~stub:true "CFNumberCreate" ((ptr CFAllocator.t) @-> llong @-> (ptr void) @-> returning (ptr CFNumber.t))
let _CFNumberFormatterCopyProperty = Foreign.foreign ~stub:true "CFNumberFormatterCopyProperty" ((ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> returning id)
let _CFNumberFormatterCreate = Foreign.foreign ~stub:true "CFNumberFormatterCreate" ((ptr CFAllocator.t) @-> (ptr CFLocale.t) @-> llong @-> returning (ptr CFNumberFormatter.t))
let _CFNumberFormatterCreateNumberFromString = Foreign.foreign ~stub:true "CFNumberFormatterCreateNumberFromString" ((ptr CFAllocator.t) @-> (ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> ullong @-> returning (ptr CFNumber.t))
let _CFNumberFormatterCreateStringWithNumber = Foreign.foreign ~stub:true "CFNumberFormatterCreateStringWithNumber" ((ptr CFAllocator.t) @-> (ptr CFNumberFormatter.t) @-> (ptr CFNumber.t) @-> returning (ptr CFString.t))
let _CFNumberFormatterCreateStringWithValue = Foreign.foreign ~stub:true "CFNumberFormatterCreateStringWithValue" ((ptr CFAllocator.t) @-> (ptr CFNumberFormatter.t) @-> llong @-> (ptr void) @-> returning (ptr CFString.t))
let _CFNumberFormatterGetDecimalInfoForCurrencyCode = Foreign.foreign ~stub:true "CFNumberFormatterGetDecimalInfoForCurrencyCode" ((ptr CFString.t) @-> (ptr int) @-> (ptr double) @-> returning bool)
let _CFNumberFormatterGetFormat = Foreign.foreign ~stub:true "CFNumberFormatterGetFormat" ((ptr CFNumberFormatter.t) @-> returning (ptr CFString.t))
let _CFNumberFormatterGetLocale = Foreign.foreign ~stub:true "CFNumberFormatterGetLocale" ((ptr CFNumberFormatter.t) @-> returning (ptr CFLocale.t))
let _CFNumberFormatterGetStyle = Foreign.foreign ~stub:true "CFNumberFormatterGetStyle" ((ptr CFNumberFormatter.t) @-> returning llong)
let _CFNumberFormatterGetTypeID = Foreign.foreign ~stub:true "CFNumberFormatterGetTypeID" (void @-> returning ullong)
let _CFNumberFormatterGetValueFromString = Foreign.foreign ~stub:true "CFNumberFormatterGetValueFromString" ((ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> (ptr CFRange.t) @-> llong @-> (ptr void) @-> returning bool)
let _CFNumberFormatterSetFormat = Foreign.foreign ~stub:true "CFNumberFormatterSetFormat" ((ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> returning void)
let _CFNumberFormatterSetProperty = Foreign.foreign ~stub:true "CFNumberFormatterSetProperty" ((ptr CFNumberFormatter.t) @-> (ptr CFString.t) @-> id @-> returning void)
let _CFNumberGetByteSize = Foreign.foreign ~stub:true "CFNumberGetByteSize" ((ptr CFNumber.t) @-> returning llong)
let _CFNumberGetType = Foreign.foreign ~stub:true "CFNumberGetType" ((ptr CFNumber.t) @-> returning llong)
let _CFNumberGetTypeID = Foreign.foreign ~stub:true "CFNumberGetTypeID" (void @-> returning ullong)
let _CFNumberGetValue = Foreign.foreign ~stub:true "CFNumberGetValue" ((ptr CFNumber.t) @-> llong @-> (ptr void) @-> returning bool)
let _CFNumberIsFloatType = Foreign.foreign ~stub:true "CFNumberIsFloatType" ((ptr CFNumber.t) @-> returning bool)
let _CFPlugInAddInstanceForFactory = Foreign.foreign ~stub:true "CFPlugInAddInstanceForFactory" ((ptr CFUUID.t) @-> returning void)
let _CFPlugInCreate = Foreign.foreign ~stub:true "CFPlugInCreate" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFBundle.t))
let _CFPlugInFindFactoriesForPlugInType = Foreign.foreign ~stub:true "CFPlugInFindFactoriesForPlugInType" ((ptr CFUUID.t) @-> returning (ptr CFArray.t))
let _CFPlugInFindFactoriesForPlugInTypeInPlugIn = Foreign.foreign ~stub:true "CFPlugInFindFactoriesForPlugInTypeInPlugIn" ((ptr CFUUID.t) @-> (ptr CFBundle.t) @-> returning (ptr CFArray.t))
let _CFPlugInGetBundle = Foreign.foreign ~stub:true "CFPlugInGetBundle" ((ptr CFBundle.t) @-> returning (ptr CFBundle.t))
let _CFPlugInGetTypeID = Foreign.foreign ~stub:true "CFPlugInGetTypeID" (void @-> returning ullong)
let _CFPlugInInstanceCreate = Foreign.foreign ~stub:true "CFPlugInInstanceCreate" ((ptr CFAllocator.t) @-> (ptr CFUUID.t) @-> (ptr CFUUID.t) @-> returning (ptr void))
let _CFPlugInInstanceCreateWithInstanceDataSize = Foreign.foreign ~stub:true "CFPlugInInstanceCreateWithInstanceDataSize" ((ptr CFAllocator.t) @-> llong @-> Foreign.funptr ((ptr void) @-> returning void) @-> (ptr CFString.t) @-> Foreign.funptr ((ptr CFPlugInInstance.t) @-> (ptr CFString.t) @-> (ptr (ptr void)) @-> returning bool) @-> returning (ptr CFPlugInInstance.t))
let _CFPlugInInstanceGetFactoryName = Foreign.foreign ~stub:true "CFPlugInInstanceGetFactoryName" ((ptr CFPlugInInstance.t) @-> returning (ptr CFString.t))
let _CFPlugInInstanceGetInstanceData = Foreign.foreign ~stub:true "CFPlugInInstanceGetInstanceData" ((ptr CFPlugInInstance.t) @-> returning (ptr void))
let _CFPlugInInstanceGetInterfaceFunctionTable = Foreign.foreign ~stub:true "CFPlugInInstanceGetInterfaceFunctionTable" ((ptr CFPlugInInstance.t) @-> (ptr CFString.t) @-> (ptr (ptr void)) @-> returning bool)
let _CFPlugInInstanceGetTypeID = Foreign.foreign ~stub:true "CFPlugInInstanceGetTypeID" (void @-> returning ullong)
let _CFPlugInIsLoadOnDemand = Foreign.foreign ~stub:true "CFPlugInIsLoadOnDemand" ((ptr CFBundle.t) @-> returning bool)
let _CFPlugInRegisterFactoryFunction = Foreign.foreign ~stub:true "CFPlugInRegisterFactoryFunction" ((ptr CFUUID.t) @-> Foreign.funptr ((ptr CFAllocator.t) @-> (ptr CFUUID.t) @-> returning (ptr void)) @-> returning bool)
let _CFPlugInRegisterFactoryFunctionByName = Foreign.foreign ~stub:true "CFPlugInRegisterFactoryFunctionByName" ((ptr CFUUID.t) @-> (ptr CFBundle.t) @-> (ptr CFString.t) @-> returning bool)
let _CFPlugInRegisterPlugInType = Foreign.foreign ~stub:true "CFPlugInRegisterPlugInType" ((ptr CFUUID.t) @-> (ptr CFUUID.t) @-> returning bool)
let _CFPlugInRemoveInstanceForFactory = Foreign.foreign ~stub:true "CFPlugInRemoveInstanceForFactory" ((ptr CFUUID.t) @-> returning void)
let _CFPlugInSetLoadOnDemand = Foreign.foreign ~stub:true "CFPlugInSetLoadOnDemand" ((ptr CFBundle.t) @-> bool @-> returning void)
let _CFPlugInUnregisterFactory = Foreign.foreign ~stub:true "CFPlugInUnregisterFactory" ((ptr CFUUID.t) @-> returning bool)
let _CFPlugInUnregisterPlugInType = Foreign.foreign ~stub:true "CFPlugInUnregisterPlugInType" ((ptr CFUUID.t) @-> (ptr CFUUID.t) @-> returning bool)
let _CFPreferencesAddSuitePreferencesToApp = Foreign.foreign ~stub:true "CFPreferencesAddSuitePreferencesToApp" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesAppSynchronize = Foreign.foreign ~stub:true "CFPreferencesAppSynchronize" ((ptr CFString.t) @-> returning bool)
let _CFPreferencesAppValueIsForced = Foreign.foreign ~stub:true "CFPreferencesAppValueIsForced" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning bool)
let _CFPreferencesCopyAppValue = Foreign.foreign ~stub:true "CFPreferencesCopyAppValue" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr void))
let _CFPreferencesCopyApplicationList = Foreign.foreign ~stub:true "CFPreferencesCopyApplicationList" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFPreferencesCopyKeyList = Foreign.foreign ~stub:true "CFPreferencesCopyKeyList" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFPreferencesCopyMultiple = Foreign.foreign ~stub:true "CFPreferencesCopyMultiple" ((ptr CFArray.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFDictionary.t))
let _CFPreferencesCopyValue = Foreign.foreign ~stub:true "CFPreferencesCopyValue" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr void))
let _CFPreferencesGetAppBooleanValue = Foreign.foreign ~stub:true "CFPreferencesGetAppBooleanValue" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr bool) @-> returning bool)
let _CFPreferencesGetAppIntegerValue = Foreign.foreign ~stub:true "CFPreferencesGetAppIntegerValue" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr bool) @-> returning llong)
let _CFPreferencesRemoveSuitePreferencesFromApp = Foreign.foreign ~stub:true "CFPreferencesRemoveSuitePreferencesFromApp" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesSetAppValue = Foreign.foreign ~stub:true "CFPreferencesSetAppValue" ((ptr CFString.t) @-> (ptr void) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesSetMultiple = Foreign.foreign ~stub:true "CFPreferencesSetMultiple" ((ptr CFDictionary.t) @-> (ptr CFArray.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesSetValue = Foreign.foreign ~stub:true "CFPreferencesSetValue" ((ptr CFString.t) @-> (ptr void) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFPreferencesSynchronize = Foreign.foreign ~stub:true "CFPreferencesSynchronize" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning bool)
let _CFPropertyListCreateData = Foreign.foreign ~stub:true "CFPropertyListCreateData" ((ptr CFAllocator.t) @-> (ptr void) @-> llong @-> ullong @-> (ptr (ptr CFError.t)) @-> returning (ptr CFData.t))
let _CFPropertyListCreateDeepCopy = Foreign.foreign ~stub:true "CFPropertyListCreateDeepCopy" ((ptr CFAllocator.t) @-> (ptr void) @-> ullong @-> returning (ptr void))
let _CFPropertyListCreateFromStream = Foreign.foreign ~stub:true "CFPropertyListCreateFromStream" ((ptr CFAllocator.t) @-> (ptr CFReadStream.t) @-> llong @-> ullong @-> (ptr llong) @-> (ptr (ptr CFString.t)) @-> returning (ptr void))
let _CFPropertyListCreateFromXMLData = Foreign.foreign ~stub:true "CFPropertyListCreateFromXMLData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> ullong @-> (ptr (ptr CFString.t)) @-> returning (ptr void))
let _CFPropertyListCreateWithData = Foreign.foreign ~stub:true "CFPropertyListCreateWithData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> ullong @-> (ptr llong) @-> (ptr (ptr CFError.t)) @-> returning (ptr void))
let _CFPropertyListCreateWithStream = Foreign.foreign ~stub:true "CFPropertyListCreateWithStream" ((ptr CFAllocator.t) @-> (ptr CFReadStream.t) @-> llong @-> ullong @-> (ptr llong) @-> (ptr (ptr CFError.t)) @-> returning (ptr void))
let _CFPropertyListCreateXMLData = Foreign.foreign ~stub:true "CFPropertyListCreateXMLData" ((ptr CFAllocator.t) @-> (ptr void) @-> returning (ptr CFData.t))
let _CFPropertyListIsValid = Foreign.foreign ~stub:true "CFPropertyListIsValid" ((ptr void) @-> llong @-> returning bool)
let _CFPropertyListWrite = Foreign.foreign ~stub:true "CFPropertyListWrite" ((ptr void) @-> (ptr CFWriteStream.t) @-> llong @-> ullong @-> (ptr (ptr CFError.t)) @-> returning llong)
let _CFPropertyListWriteToStream = Foreign.foreign ~stub:true "CFPropertyListWriteToStream" ((ptr void) @-> (ptr CFWriteStream.t) @-> llong @-> (ptr (ptr CFString.t)) @-> returning llong)
(* let _CFRangeMake = Foreign.foreign "Camlkit_CFRangeMake" (llong @-> llong @-> returning CFRange.t) *)
let _CFReadStreamClose = Foreign.foreign ~stub:true "CFReadStreamClose" ((ptr CFReadStream.t) @-> returning void)
let _CFReadStreamCopyDispatchQueue = Foreign.foreign ~stub:true "CFReadStreamCopyDispatchQueue" ((ptr CFReadStream.t) @-> returning id)
let _CFReadStreamCopyError = Foreign.foreign ~stub:true "CFReadStreamCopyError" ((ptr CFReadStream.t) @-> returning (ptr CFError.t))
let _CFReadStreamCopyProperty = Foreign.foreign ~stub:true "CFReadStreamCopyProperty" ((ptr CFReadStream.t) @-> (ptr CFString.t) @-> returning id)
let _CFReadStreamCreateWithBytesNoCopy = Foreign.foreign ~stub:true "CFReadStreamCreateWithBytesNoCopy" ((ptr CFAllocator.t) @-> string @-> llong @-> (ptr CFAllocator.t) @-> returning (ptr CFReadStream.t))
let _CFReadStreamCreateWithFile = Foreign.foreign ~stub:true "CFReadStreamCreateWithFile" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFReadStream.t))
let _CFReadStreamGetBuffer = Foreign.foreign ~stub:true "CFReadStreamGetBuffer" ((ptr CFReadStream.t) @-> llong @-> (ptr llong) @-> returning string)
let _CFReadStreamGetError = Foreign.foreign ~stub:true "CFReadStreamGetError" ((ptr CFReadStream.t) @-> returning CFStreamError.t)
let _CFReadStreamGetStatus = Foreign.foreign ~stub:true "CFReadStreamGetStatus" ((ptr CFReadStream.t) @-> returning llong)
let _CFReadStreamGetTypeID = Foreign.foreign ~stub:true "CFReadStreamGetTypeID" (void @-> returning ullong)
let _CFReadStreamHasBytesAvailable = Foreign.foreign ~stub:true "CFReadStreamHasBytesAvailable" ((ptr CFReadStream.t) @-> returning bool)
let _CFReadStreamOpen = Foreign.foreign ~stub:true "CFReadStreamOpen" ((ptr CFReadStream.t) @-> returning bool)
let _CFReadStreamRead = Foreign.foreign ~stub:true "CFReadStreamRead" ((ptr CFReadStream.t) @-> string @-> llong @-> returning llong)
let _CFReadStreamScheduleWithRunLoop = Foreign.foreign ~stub:true "CFReadStreamScheduleWithRunLoop" ((ptr CFReadStream.t) @-> (ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFReadStreamSetClient = Foreign.foreign ~stub:true "CFReadStreamSetClient" ((ptr CFReadStream.t) @-> ullong @-> Foreign.funptr ((ptr CFReadStream.t) @-> ullong @-> (ptr void) @-> returning void) @-> (ptr CFStreamClientContext.t) @-> returning bool)
let _CFReadStreamSetDispatchQueue = Foreign.foreign ~stub:true "CFReadStreamSetDispatchQueue" ((ptr CFReadStream.t) @-> id @-> returning void)
let _CFReadStreamSetProperty = Foreign.foreign ~stub:true "CFReadStreamSetProperty" ((ptr CFReadStream.t) @-> (ptr CFString.t) @-> id @-> returning bool)
let _CFReadStreamUnscheduleFromRunLoop = Foreign.foreign ~stub:true "CFReadStreamUnscheduleFromRunLoop" ((ptr CFReadStream.t) @-> (ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFRelease = Foreign.foreign ~stub:true "CFRelease" (id @-> returning void)
let _CFRetain = Foreign.foreign ~stub:true "CFRetain" (id @-> returning id)
let _CFRunLoopAddCommonMode = Foreign.foreign ~stub:true "CFRunLoopAddCommonMode" ((ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopAddObserver = Foreign.foreign ~stub:true "CFRunLoopAddObserver" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopObserver.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopAddSource = Foreign.foreign ~stub:true "CFRunLoopAddSource" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopSource.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopAddTimer = Foreign.foreign ~stub:true "CFRunLoopAddTimer" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopTimer.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopContainsObserver = Foreign.foreign ~stub:true "CFRunLoopContainsObserver" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopObserver.t) @-> (ptr CFString.t) @-> returning bool)
let _CFRunLoopContainsSource = Foreign.foreign ~stub:true "CFRunLoopContainsSource" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopSource.t) @-> (ptr CFString.t) @-> returning bool)
let _CFRunLoopContainsTimer = Foreign.foreign ~stub:true "CFRunLoopContainsTimer" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopTimer.t) @-> (ptr CFString.t) @-> returning bool)
let _CFRunLoopCopyAllModes = Foreign.foreign ~stub:true "CFRunLoopCopyAllModes" ((ptr CFRunLoop.t) @-> returning (ptr CFArray.t))
let _CFRunLoopCopyCurrentMode = Foreign.foreign ~stub:true "CFRunLoopCopyCurrentMode" ((ptr CFRunLoop.t) @-> returning (ptr CFString.t))
let _CFRunLoopGetCurrent = Foreign.foreign ~stub:true "CFRunLoopGetCurrent" (void @-> returning (ptr CFRunLoop.t))
let _CFRunLoopGetMain = Foreign.foreign ~stub:true "CFRunLoopGetMain" (void @-> returning (ptr CFRunLoop.t))
let _CFRunLoopGetNextTimerFireDate = Foreign.foreign ~stub:true "CFRunLoopGetNextTimerFireDate" ((ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning double)
let _CFRunLoopGetTypeID = Foreign.foreign ~stub:true "CFRunLoopGetTypeID" (void @-> returning ullong)
let _CFRunLoopIsWaiting = Foreign.foreign ~stub:true "CFRunLoopIsWaiting" ((ptr CFRunLoop.t) @-> returning bool)
let _CFRunLoopObserverCreate = Foreign.foreign ~stub:true "CFRunLoopObserverCreate" ((ptr CFAllocator.t) @-> ullong @-> bool @-> llong @-> Foreign.funptr ((ptr CFRunLoopObserver.t) @-> ullong @-> (ptr void) @-> returning void) @-> (ptr CFRunLoopObserverContext.t) @-> returning (ptr CFRunLoopObserver.t))
let _CFRunLoopObserverCreateWithHandler = Foreign.foreign ~stub:true "CFRunLoopObserverCreateWithHandler" ((ptr CFAllocator.t) @-> ullong @-> bool @-> llong @-> Foreign.funptr ((ptr CFRunLoopObserver.t) @-> ullong @-> returning void) @-> returning (ptr CFRunLoopObserver.t))
let _CFRunLoopObserverDoesRepeat = Foreign.foreign ~stub:true "CFRunLoopObserverDoesRepeat" ((ptr CFRunLoopObserver.t) @-> returning bool)
let _CFRunLoopObserverGetActivities = Foreign.foreign ~stub:true "CFRunLoopObserverGetActivities" ((ptr CFRunLoopObserver.t) @-> returning ullong)
let _CFRunLoopObserverGetContext = Foreign.foreign ~stub:true "CFRunLoopObserverGetContext" ((ptr CFRunLoopObserver.t) @-> (ptr CFRunLoopObserverContext.t) @-> returning void)
let _CFRunLoopObserverGetOrder = Foreign.foreign ~stub:true "CFRunLoopObserverGetOrder" ((ptr CFRunLoopObserver.t) @-> returning llong)
let _CFRunLoopObserverGetTypeID = Foreign.foreign ~stub:true "CFRunLoopObserverGetTypeID" (void @-> returning ullong)
let _CFRunLoopObserverInvalidate = Foreign.foreign ~stub:true "CFRunLoopObserverInvalidate" ((ptr CFRunLoopObserver.t) @-> returning void)
let _CFRunLoopObserverIsValid = Foreign.foreign ~stub:true "CFRunLoopObserverIsValid" ((ptr CFRunLoopObserver.t) @-> returning bool)
let _CFRunLoopPerformBlock = Foreign.foreign ~stub:true "CFRunLoopPerformBlock" ((ptr CFRunLoop.t) @-> id @-> Foreign.funptr (void @-> returning void) @-> returning void)
let _CFRunLoopRemoveObserver = Foreign.foreign ~stub:true "CFRunLoopRemoveObserver" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopObserver.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopRemoveSource = Foreign.foreign ~stub:true "CFRunLoopRemoveSource" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopSource.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopRemoveTimer = Foreign.foreign ~stub:true "CFRunLoopRemoveTimer" ((ptr CFRunLoop.t) @-> (ptr CFRunLoopTimer.t) @-> (ptr CFString.t) @-> returning void)
let _CFRunLoopRun = Foreign.foreign ~stub:true "CFRunLoopRun" (void @-> returning void)
let _CFRunLoopRunInMode = Foreign.foreign ~stub:true "CFRunLoopRunInMode" ((ptr CFString.t) @-> double @-> bool @-> returning int)
let _CFRunLoopSourceCreate = Foreign.foreign ~stub:true "CFRunLoopSourceCreate" ((ptr CFAllocator.t) @-> llong @-> (ptr CFRunLoopSourceContext.t) @-> returning (ptr CFRunLoopSource.t))
let _CFRunLoopSourceGetContext = Foreign.foreign ~stub:true "CFRunLoopSourceGetContext" ((ptr CFRunLoopSource.t) @-> (ptr CFRunLoopSourceContext.t) @-> returning void)
let _CFRunLoopSourceGetOrder = Foreign.foreign ~stub:true "CFRunLoopSourceGetOrder" ((ptr CFRunLoopSource.t) @-> returning llong)
let _CFRunLoopSourceGetTypeID = Foreign.foreign ~stub:true "CFRunLoopSourceGetTypeID" (void @-> returning ullong)
let _CFRunLoopSourceInvalidate = Foreign.foreign ~stub:true "CFRunLoopSourceInvalidate" ((ptr CFRunLoopSource.t) @-> returning void)
let _CFRunLoopSourceIsValid = Foreign.foreign ~stub:true "CFRunLoopSourceIsValid" ((ptr CFRunLoopSource.t) @-> returning bool)
let _CFRunLoopSourceSignal = Foreign.foreign ~stub:true "CFRunLoopSourceSignal" ((ptr CFRunLoopSource.t) @-> returning void)
let _CFRunLoopStop = Foreign.foreign ~stub:true "CFRunLoopStop" ((ptr CFRunLoop.t) @-> returning void)
let _CFRunLoopTimerCreate = Foreign.foreign ~stub:true "CFRunLoopTimerCreate" ((ptr CFAllocator.t) @-> double @-> double @-> ullong @-> llong @-> Foreign.funptr ((ptr CFRunLoopTimer.t) @-> (ptr void) @-> returning void) @-> (ptr CFRunLoopTimerContext.t) @-> returning (ptr CFRunLoopTimer.t))
let _CFRunLoopTimerCreateWithHandler = Foreign.foreign ~stub:true "CFRunLoopTimerCreateWithHandler" ((ptr CFAllocator.t) @-> double @-> double @-> ullong @-> llong @-> Foreign.funptr ((ptr CFRunLoopTimer.t) @-> returning void) @-> returning (ptr CFRunLoopTimer.t))
let _CFRunLoopTimerDoesRepeat = Foreign.foreign ~stub:true "CFRunLoopTimerDoesRepeat" ((ptr CFRunLoopTimer.t) @-> returning bool)
let _CFRunLoopTimerGetContext = Foreign.foreign ~stub:true "CFRunLoopTimerGetContext" ((ptr CFRunLoopTimer.t) @-> (ptr CFRunLoopTimerContext.t) @-> returning void)
let _CFRunLoopTimerGetInterval = Foreign.foreign ~stub:true "CFRunLoopTimerGetInterval" ((ptr CFRunLoopTimer.t) @-> returning double)
let _CFRunLoopTimerGetNextFireDate = Foreign.foreign ~stub:true "CFRunLoopTimerGetNextFireDate" ((ptr CFRunLoopTimer.t) @-> returning double)
let _CFRunLoopTimerGetOrder = Foreign.foreign ~stub:true "CFRunLoopTimerGetOrder" ((ptr CFRunLoopTimer.t) @-> returning llong)
let _CFRunLoopTimerGetTolerance = Foreign.foreign ~stub:true "CFRunLoopTimerGetTolerance" ((ptr CFRunLoopTimer.t) @-> returning double)
let _CFRunLoopTimerGetTypeID = Foreign.foreign ~stub:true "CFRunLoopTimerGetTypeID" (void @-> returning ullong)
let _CFRunLoopTimerInvalidate = Foreign.foreign ~stub:true "CFRunLoopTimerInvalidate" ((ptr CFRunLoopTimer.t) @-> returning void)
let _CFRunLoopTimerIsValid = Foreign.foreign ~stub:true "CFRunLoopTimerIsValid" ((ptr CFRunLoopTimer.t) @-> returning bool)
let _CFRunLoopTimerSetNextFireDate = Foreign.foreign ~stub:true "CFRunLoopTimerSetNextFireDate" ((ptr CFRunLoopTimer.t) @-> double @-> returning void)
let _CFRunLoopTimerSetTolerance = Foreign.foreign ~stub:true "CFRunLoopTimerSetTolerance" ((ptr CFRunLoopTimer.t) @-> double @-> returning void)
let _CFRunLoopWakeUp = Foreign.foreign ~stub:true "CFRunLoopWakeUp" ((ptr CFRunLoop.t) @-> returning void)
let _CFSetAddValue = Foreign.foreign ~stub:true "CFSetAddValue" ((ptr CFSet.t) @-> (ptr void) @-> returning void)
let _CFSetApplyFunction = Foreign.foreign ~stub:true "CFSetApplyFunction" ((ptr CFSet.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFSetContainsValue = Foreign.foreign ~stub:true "CFSetContainsValue" ((ptr CFSet.t) @-> (ptr void) @-> returning bool)
let _CFSetCreate = Foreign.foreign ~stub:true "CFSetCreate" ((ptr CFAllocator.t) @-> (ptr (ptr void)) @-> llong @-> (ptr CFSetCallBacks.t) @-> returning (ptr CFSet.t))
let _CFSetCreateCopy = Foreign.foreign ~stub:true "CFSetCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFSet.t) @-> returning (ptr CFSet.t))
let _CFSetCreateMutable = Foreign.foreign ~stub:true "CFSetCreateMutable" ((ptr CFAllocator.t) @-> llong @-> (ptr CFSetCallBacks.t) @-> returning (ptr CFSet.t))
let _CFSetCreateMutableCopy = Foreign.foreign ~stub:true "CFSetCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFSet.t) @-> returning (ptr CFSet.t))
let _CFSetGetCount = Foreign.foreign ~stub:true "CFSetGetCount" ((ptr CFSet.t) @-> returning llong)
let _CFSetGetCountOfValue = Foreign.foreign ~stub:true "CFSetGetCountOfValue" ((ptr CFSet.t) @-> (ptr void) @-> returning llong)
let _CFSetGetTypeID = Foreign.foreign ~stub:true "CFSetGetTypeID" (void @-> returning ullong)
let _CFSetGetValue = Foreign.foreign ~stub:true "CFSetGetValue" ((ptr CFSet.t) @-> (ptr void) @-> returning (ptr void))
let _CFSetGetValueIfPresent = Foreign.foreign ~stub:true "CFSetGetValueIfPresent" ((ptr CFSet.t) @-> (ptr void) @-> (ptr (ptr void)) @-> returning bool)
let _CFSetGetValues = Foreign.foreign ~stub:true "CFSetGetValues" ((ptr CFSet.t) @-> (ptr (ptr void)) @-> returning void)
let _CFSetRemoveAllValues = Foreign.foreign ~stub:true "CFSetRemoveAllValues" ((ptr CFSet.t) @-> returning void)
let _CFSetRemoveValue = Foreign.foreign ~stub:true "CFSetRemoveValue" ((ptr CFSet.t) @-> (ptr void) @-> returning void)
let _CFSetReplaceValue = Foreign.foreign ~stub:true "CFSetReplaceValue" ((ptr CFSet.t) @-> (ptr void) @-> returning void)
let _CFSetSetValue = Foreign.foreign ~stub:true "CFSetSetValue" ((ptr CFSet.t) @-> (ptr void) @-> returning void)
let _CFShow = Foreign.foreign ~stub:true "CFShow" (id @-> returning void)
let _CFShowStr = Foreign.foreign ~stub:true "CFShowStr" ((ptr CFString.t) @-> returning void)
let _CFSocketConnectToAddress = Foreign.foreign ~stub:true "CFSocketConnectToAddress" ((ptr CFSocket.t) @-> (ptr CFData.t) @-> double @-> returning llong)
let _CFSocketCopyAddress = Foreign.foreign ~stub:true "CFSocketCopyAddress" ((ptr CFSocket.t) @-> returning (ptr CFData.t))
let _CFSocketCopyPeerAddress = Foreign.foreign ~stub:true "CFSocketCopyPeerAddress" ((ptr CFSocket.t) @-> returning (ptr CFData.t))
let _CFSocketCopyRegisteredSocketSignature = Foreign.foreign ~stub:true "CFSocketCopyRegisteredSocketSignature" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> (ptr CFSocketSignature.t) @-> (ptr (ptr CFData.t)) @-> returning llong)
let _CFSocketCopyRegisteredValue = Foreign.foreign ~stub:true "CFSocketCopyRegisteredValue" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> (ptr (ptr void)) @-> (ptr (ptr CFData.t)) @-> returning llong)
let _CFSocketCreate = Foreign.foreign ~stub:true "CFSocketCreate" ((ptr CFAllocator.t) @-> int @-> int @-> int @-> ullong @-> Foreign.funptr ((ptr CFSocket.t) @-> ullong @-> (ptr CFData.t) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr CFSocketContext.t) @-> returning (ptr CFSocket.t))
let _CFSocketCreateConnectedToSocketSignature = Foreign.foreign ~stub:true "CFSocketCreateConnectedToSocketSignature" ((ptr CFAllocator.t) @-> (ptr CFSocketSignature.t) @-> ullong @-> Foreign.funptr ((ptr CFSocket.t) @-> ullong @-> (ptr CFData.t) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr CFSocketContext.t) @-> double @-> returning (ptr CFSocket.t))
let _CFSocketCreateRunLoopSource = Foreign.foreign ~stub:true "CFSocketCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFSocket.t) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFSocketCreateWithNative = Foreign.foreign ~stub:true "CFSocketCreateWithNative" ((ptr CFAllocator.t) @-> int @-> ullong @-> Foreign.funptr ((ptr CFSocket.t) @-> ullong @-> (ptr CFData.t) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr CFSocketContext.t) @-> returning (ptr CFSocket.t))
let _CFSocketCreateWithSocketSignature = Foreign.foreign ~stub:true "CFSocketCreateWithSocketSignature" ((ptr CFAllocator.t) @-> (ptr CFSocketSignature.t) @-> ullong @-> Foreign.funptr ((ptr CFSocket.t) @-> ullong @-> (ptr CFData.t) @-> (ptr void) @-> (ptr void) @-> returning void) @-> (ptr CFSocketContext.t) @-> returning (ptr CFSocket.t))
let _CFSocketDisableCallBacks = Foreign.foreign ~stub:true "CFSocketDisableCallBacks" ((ptr CFSocket.t) @-> ullong @-> returning void)
let _CFSocketEnableCallBacks = Foreign.foreign ~stub:true "CFSocketEnableCallBacks" ((ptr CFSocket.t) @-> ullong @-> returning void)
let _CFSocketGetContext = Foreign.foreign ~stub:true "CFSocketGetContext" ((ptr CFSocket.t) @-> (ptr CFSocketContext.t) @-> returning void)
let _CFSocketGetDefaultNameRegistryPortNumber = Foreign.foreign ~stub:true "CFSocketGetDefaultNameRegistryPortNumber" (void @-> returning ushort)
let _CFSocketGetNative = Foreign.foreign ~stub:true "CFSocketGetNative" ((ptr CFSocket.t) @-> returning int)
let _CFSocketGetSocketFlags = Foreign.foreign ~stub:true "CFSocketGetSocketFlags" ((ptr CFSocket.t) @-> returning ullong)
let _CFSocketGetTypeID = Foreign.foreign ~stub:true "CFSocketGetTypeID" (void @-> returning ullong)
let _CFSocketInvalidate = Foreign.foreign ~stub:true "CFSocketInvalidate" ((ptr CFSocket.t) @-> returning void)
let _CFSocketIsValid = Foreign.foreign ~stub:true "CFSocketIsValid" ((ptr CFSocket.t) @-> returning bool)
let _CFSocketRegisterSocketSignature = Foreign.foreign ~stub:true "CFSocketRegisterSocketSignature" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> (ptr CFSocketSignature.t) @-> returning llong)
let _CFSocketRegisterValue = Foreign.foreign ~stub:true "CFSocketRegisterValue" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> (ptr void) @-> returning llong)
let _CFSocketSendData = Foreign.foreign ~stub:true "CFSocketSendData" ((ptr CFSocket.t) @-> (ptr CFData.t) @-> (ptr CFData.t) @-> double @-> returning llong)
let _CFSocketSetAddress = Foreign.foreign ~stub:true "CFSocketSetAddress" ((ptr CFSocket.t) @-> (ptr CFData.t) @-> returning llong)
let _CFSocketSetDefaultNameRegistryPortNumber = Foreign.foreign ~stub:true "CFSocketSetDefaultNameRegistryPortNumber" (ushort @-> returning void)
let _CFSocketSetSocketFlags = Foreign.foreign ~stub:true "CFSocketSetSocketFlags" ((ptr CFSocket.t) @-> ullong @-> returning void)
let _CFSocketUnregister = Foreign.foreign ~stub:true "CFSocketUnregister" ((ptr CFSocketSignature.t) @-> double @-> (ptr CFString.t) @-> returning llong)
let _CFStreamCreateBoundPair = Foreign.foreign ~stub:true "CFStreamCreateBoundPair" ((ptr CFAllocator.t) @-> (ptr (ptr CFReadStream.t)) @-> (ptr (ptr CFWriteStream.t)) @-> llong @-> returning void)
let _CFStreamCreatePairWithPeerSocketSignature = Foreign.foreign ~stub:true "CFStreamCreatePairWithPeerSocketSignature" ((ptr CFAllocator.t) @-> (ptr CFSocketSignature.t) @-> (ptr (ptr CFReadStream.t)) @-> (ptr (ptr CFWriteStream.t)) @-> returning void)
let _CFStreamCreatePairWithSocket = Foreign.foreign ~stub:true "CFStreamCreatePairWithSocket" ((ptr CFAllocator.t) @-> int @-> (ptr (ptr CFReadStream.t)) @-> (ptr (ptr CFWriteStream.t)) @-> returning void)
let _CFStreamCreatePairWithSocketToHost = Foreign.foreign ~stub:true "CFStreamCreatePairWithSocketToHost" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> uint @-> (ptr (ptr CFReadStream.t)) @-> (ptr (ptr CFWriteStream.t)) @-> returning void)
let _CFStringAppend = Foreign.foreign ~stub:true "CFStringAppend" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFStringAppendCString = Foreign.foreign ~stub:true "CFStringAppendCString" ((ptr CFString.t) @-> string @-> uint @-> returning void)
let _CFStringAppendCharacters = Foreign.foreign ~stub:true "CFStringAppendCharacters" ((ptr CFString.t) @-> (ptr ushort) @-> llong @-> returning void)
let _CFStringAppendFormat = Foreign.foreign ~stub:true "CFStringAppendFormat" ((ptr CFString.t) @-> (ptr CFDictionary.t) @-> (ptr CFString.t) @-> returning void)
let _CFStringAppendFormatAndArguments = Foreign.foreign ~stub:true "CFStringAppendFormatAndArguments" ((ptr CFString.t) @-> (ptr CFDictionary.t) @-> (ptr CFString.t) @-> (ptr void) @-> returning void)
let _CFStringAppendPascalString = Foreign.foreign ~stub:true "CFStringAppendPascalString" ((ptr CFString.t) @-> string @-> uint @-> returning void)
let _CFStringCapitalize = Foreign.foreign ~stub:true "CFStringCapitalize" ((ptr CFString.t) @-> (ptr CFLocale.t) @-> returning void)
let _CFStringCompare = Foreign.foreign ~stub:true "CFStringCompare" ((ptr CFString.t) @-> (ptr CFString.t) @-> ullong @-> returning llong)
let _CFStringCompareWithOptions = Foreign.foreign ~stub:true "CFStringCompareWithOptions" ((ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> returning llong)
let _CFStringCompareWithOptionsAndLocale = Foreign.foreign ~stub:true "CFStringCompareWithOptionsAndLocale" ((ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> (ptr CFLocale.t) @-> returning llong)
let _CFStringConvertEncodingToIANACharSetName = Foreign.foreign ~stub:true "CFStringConvertEncodingToIANACharSetName" (uint @-> returning (ptr CFString.t))
let _CFStringConvertEncodingToNSStringEncoding = Foreign.foreign ~stub:true "CFStringConvertEncodingToNSStringEncoding" (uint @-> returning ullong)
let _CFStringConvertEncodingToWindowsCodepage = Foreign.foreign ~stub:true "CFStringConvertEncodingToWindowsCodepage" (uint @-> returning uint)
let _CFStringConvertIANACharSetNameToEncoding = Foreign.foreign ~stub:true "CFStringConvertIANACharSetNameToEncoding" ((ptr CFString.t) @-> returning uint)
let _CFStringConvertNSStringEncodingToEncoding = Foreign.foreign ~stub:true "CFStringConvertNSStringEncodingToEncoding" (ullong @-> returning uint)
let _CFStringConvertWindowsCodepageToEncoding = Foreign.foreign ~stub:true "CFStringConvertWindowsCodepageToEncoding" (uint @-> returning uint)
let _CFStringCreateArrayBySeparatingStrings = Foreign.foreign ~stub:true "CFStringCreateArrayBySeparatingStrings" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFArray.t))
let _CFStringCreateArrayWithFindResults = Foreign.foreign ~stub:true "CFStringCreateArrayWithFindResults" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> returning (ptr CFArray.t))
let _CFStringCreateByCombiningStrings = Foreign.foreign ~stub:true "CFStringCreateByCombiningStrings" ((ptr CFAllocator.t) @-> (ptr CFArray.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFStringCreateCopy = Foreign.foreign ~stub:true "CFStringCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFStringCreateExternalRepresentation = Foreign.foreign ~stub:true "CFStringCreateExternalRepresentation" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> uint @-> uchar @-> returning (ptr CFData.t))
let _CFStringCreateFromExternalRepresentation = Foreign.foreign ~stub:true "CFStringCreateFromExternalRepresentation" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> uint @-> returning (ptr CFString.t))
let _CFStringCreateMutable = Foreign.foreign ~stub:true "CFStringCreateMutable" ((ptr CFAllocator.t) @-> llong @-> returning (ptr CFString.t))
let _CFStringCreateMutableCopy = Foreign.foreign ~stub:true "CFStringCreateMutableCopy" ((ptr CFAllocator.t) @-> llong @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFStringCreateMutableWithExternalCharactersNoCopy = Foreign.foreign ~stub:true "CFStringCreateMutableWithExternalCharactersNoCopy" ((ptr CFAllocator.t) @-> (ptr ushort) @-> llong @-> llong @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithBytes = Foreign.foreign ~stub:true "CFStringCreateWithBytes" ((ptr CFAllocator.t) @-> string @-> llong @-> uint @-> bool @-> returning (ptr CFString.t))
let _CFStringCreateWithBytesNoCopy = Foreign.foreign ~stub:true "CFStringCreateWithBytesNoCopy" ((ptr CFAllocator.t) @-> string @-> llong @-> uint @-> bool @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithCString = Foreign.foreign ~stub:true "CFStringCreateWithCString" ((ptr CFAllocator.t) @-> string @-> uint @-> returning (ptr CFString.t))
let _CFStringCreateWithCStringNoCopy = Foreign.foreign ~stub:true "CFStringCreateWithCStringNoCopy" ((ptr CFAllocator.t) @-> string @-> uint @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithCharacters = Foreign.foreign ~stub:true "CFStringCreateWithCharacters" ((ptr CFAllocator.t) @-> (ptr ushort) @-> llong @-> returning (ptr CFString.t))
let _CFStringCreateWithCharactersNoCopy = Foreign.foreign ~stub:true "CFStringCreateWithCharactersNoCopy" ((ptr CFAllocator.t) @-> (ptr ushort) @-> llong @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithFileSystemRepresentation = Foreign.foreign ~stub:true "CFStringCreateWithFileSystemRepresentation" ((ptr CFAllocator.t) @-> string @-> returning (ptr CFString.t))
let _CFStringCreateWithFormat = Foreign.foreign ~stub:true "CFStringCreateWithFormat" ((ptr CFAllocator.t) @-> (ptr CFDictionary.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithFormatAndArguments = Foreign.foreign ~stub:true "CFStringCreateWithFormatAndArguments" ((ptr CFAllocator.t) @-> (ptr CFDictionary.t) @-> (ptr CFString.t) @-> (ptr void) @-> returning (ptr CFString.t))
let _CFStringCreateWithPascalString = Foreign.foreign ~stub:true "CFStringCreateWithPascalString" ((ptr CFAllocator.t) @-> string @-> uint @-> returning (ptr CFString.t))
let _CFStringCreateWithPascalStringNoCopy = Foreign.foreign ~stub:true "CFStringCreateWithPascalStringNoCopy" ((ptr CFAllocator.t) @-> string @-> uint @-> (ptr CFAllocator.t) @-> returning (ptr CFString.t))
let _CFStringCreateWithSubstring = Foreign.foreign ~stub:true "CFStringCreateWithSubstring" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> CFRange.t @-> returning (ptr CFString.t))
let _CFStringDelete = Foreign.foreign ~stub:true "CFStringDelete" ((ptr CFString.t) @-> CFRange.t @-> returning void)
let _CFStringFind = Foreign.foreign ~stub:true "CFStringFind" ((ptr CFString.t) @-> (ptr CFString.t) @-> ullong @-> returning CFRange.t)
let _CFStringFindAndReplace = Foreign.foreign ~stub:true "CFStringFindAndReplace" ((ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> returning llong)
let _CFStringFindCharacterFromSet = Foreign.foreign ~stub:true "CFStringFindCharacterFromSet" ((ptr CFString.t) @-> (ptr CFCharacterSet.t) @-> CFRange.t @-> ullong @-> (ptr CFRange.t) @-> returning bool)
let _CFStringFindWithOptions = Foreign.foreign ~stub:true "CFStringFindWithOptions" ((ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> (ptr CFRange.t) @-> returning bool)
let _CFStringFindWithOptionsAndLocale = Foreign.foreign ~stub:true "CFStringFindWithOptionsAndLocale" ((ptr CFString.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> (ptr CFLocale.t) @-> (ptr CFRange.t) @-> returning bool)
let _CFStringFold = Foreign.foreign ~stub:true "CFStringFold" ((ptr CFString.t) @-> ullong @-> (ptr CFLocale.t) @-> returning void)
let _CFStringGetBytes = Foreign.foreign ~stub:true "CFStringGetBytes" ((ptr CFString.t) @-> CFRange.t @-> uint @-> uchar @-> bool @-> string @-> llong @-> (ptr llong) @-> returning llong)
let _CFStringGetCString = Foreign.foreign ~stub:true "CFStringGetCString" ((ptr CFString.t) @-> string @-> llong @-> uint @-> returning bool)
let _CFStringGetCStringPtr = Foreign.foreign ~stub:true "CFStringGetCStringPtr" ((ptr CFString.t) @-> uint @-> returning string)
let _CFStringGetCharacterAtIndex = Foreign.foreign ~stub:true "CFStringGetCharacterAtIndex" ((ptr CFString.t) @-> llong @-> returning ushort)
(* let _CFStringGetCharacterFromInlineBuffer = Foreign.foreign "Camlkit_CFStringGetCharacterFromInlineBuffer" ((ptr CFStringInlineBuffer.t) @-> llong @-> returning ushort) *)
let _CFStringGetCharacters = Foreign.foreign ~stub:true "CFStringGetCharacters" ((ptr CFString.t) @-> CFRange.t @-> (ptr ushort) @-> returning void)
let _CFStringGetCharactersPtr = Foreign.foreign ~stub:true "CFStringGetCharactersPtr" ((ptr CFString.t) @-> returning (ptr ushort))
let _CFStringGetDoubleValue = Foreign.foreign ~stub:true "CFStringGetDoubleValue" ((ptr CFString.t) @-> returning double)
let _CFStringGetFastestEncoding = Foreign.foreign ~stub:true "CFStringGetFastestEncoding" ((ptr CFString.t) @-> returning uint)
let _CFStringGetFileSystemRepresentation = Foreign.foreign ~stub:true "CFStringGetFileSystemRepresentation" ((ptr CFString.t) @-> string @-> llong @-> returning bool)
let _CFStringGetHyphenationLocationBeforeIndex = Foreign.foreign ~stub:true "CFStringGetHyphenationLocationBeforeIndex" ((ptr CFString.t) @-> llong @-> CFRange.t @-> ullong @-> (ptr CFLocale.t) @-> (ptr uint) @-> returning llong)
let _CFStringGetIntValue = Foreign.foreign ~stub:true "CFStringGetIntValue" ((ptr CFString.t) @-> returning int)
let _CFStringGetLength = Foreign.foreign ~stub:true "CFStringGetLength" ((ptr CFString.t) @-> returning llong)
let _CFStringGetLineBounds = Foreign.foreign ~stub:true "CFStringGetLineBounds" ((ptr CFString.t) @-> CFRange.t @-> (ptr llong) @-> (ptr llong) @-> (ptr llong) @-> returning void)
let _CFStringGetListOfAvailableEncodings = Foreign.foreign ~stub:true "CFStringGetListOfAvailableEncodings" (void @-> returning (ptr uint))
(* let _CFStringGetLongCharacterForSurrogatePair = Foreign.foreign "Camlkit_CFStringGetLongCharacterForSurrogatePair" (ushort @-> ushort @-> returning uint) *)
let _CFStringGetMaximumSizeForEncoding = Foreign.foreign ~stub:true "CFStringGetMaximumSizeForEncoding" (llong @-> uint @-> returning llong)
let _CFStringGetMaximumSizeOfFileSystemRepresentation = Foreign.foreign ~stub:true "CFStringGetMaximumSizeOfFileSystemRepresentation" ((ptr CFString.t) @-> returning llong)
let _CFStringGetMostCompatibleMacStringEncoding = Foreign.foreign ~stub:true "CFStringGetMostCompatibleMacStringEncoding" (uint @-> returning uint)
let _CFStringGetNameOfEncoding = Foreign.foreign ~stub:true "CFStringGetNameOfEncoding" (uint @-> returning (ptr CFString.t))
let _CFStringGetParagraphBounds = Foreign.foreign ~stub:true "CFStringGetParagraphBounds" ((ptr CFString.t) @-> CFRange.t @-> (ptr llong) @-> (ptr llong) @-> (ptr llong) @-> returning void)
let _CFStringGetPascalString = Foreign.foreign ~stub:true "CFStringGetPascalString" ((ptr CFString.t) @-> string @-> llong @-> uint @-> returning bool)
let _CFStringGetPascalStringPtr = Foreign.foreign ~stub:true "CFStringGetPascalStringPtr" ((ptr CFString.t) @-> uint @-> returning string)
let _CFStringGetRangeOfComposedCharactersAtIndex = Foreign.foreign ~stub:true "CFStringGetRangeOfComposedCharactersAtIndex" ((ptr CFString.t) @-> llong @-> returning CFRange.t)
let _CFStringGetSmallestEncoding = Foreign.foreign ~stub:true "CFStringGetSmallestEncoding" ((ptr CFString.t) @-> returning uint)
(* let _CFStringGetSurrogatePairForLongCharacter = Foreign.foreign "Camlkit_CFStringGetSurrogatePairForLongCharacter" (uint @-> (ptr ushort) @-> returning bool) *)
let _CFStringGetSystemEncoding = Foreign.foreign ~stub:true "CFStringGetSystemEncoding" (void @-> returning uint)
let _CFStringGetTypeID = Foreign.foreign ~stub:true "CFStringGetTypeID" (void @-> returning ullong)
let _CFStringHasPrefix = Foreign.foreign ~stub:true "CFStringHasPrefix" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning bool)
let _CFStringHasSuffix = Foreign.foreign ~stub:true "CFStringHasSuffix" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning bool)
(* let _CFStringInitInlineBuffer = Foreign.foreign "Camlkit_CFStringInitInlineBuffer" ((ptr CFString.t) @-> (ptr CFStringInlineBuffer.t) @-> CFRange.t @-> returning void) *)
let _CFStringInsert = Foreign.foreign ~stub:true "CFStringInsert" ((ptr CFString.t) @-> llong @-> (ptr CFString.t) @-> returning void)
let _CFStringIsEncodingAvailable = Foreign.foreign ~stub:true "CFStringIsEncodingAvailable" (uint @-> returning bool)
let _CFStringIsHyphenationAvailableForLocale = Foreign.foreign ~stub:true "CFStringIsHyphenationAvailableForLocale" ((ptr CFLocale.t) @-> returning bool)
(* let _CFStringIsSurrogateHighCharacter = Foreign.foreign "Camlkit_CFStringIsSurrogateHighCharacter" (ushort @-> returning bool) *)
(* let _CFStringIsSurrogateLowCharacter = Foreign.foreign "Camlkit_CFStringIsSurrogateLowCharacter" (ushort @-> returning bool) *)
let _CFStringLowercase = Foreign.foreign ~stub:true "CFStringLowercase" ((ptr CFString.t) @-> (ptr CFLocale.t) @-> returning void)
let _CFStringNormalize = Foreign.foreign ~stub:true "CFStringNormalize" ((ptr CFString.t) @-> llong @-> returning void)
let _CFStringPad = Foreign.foreign ~stub:true "CFStringPad" ((ptr CFString.t) @-> (ptr CFString.t) @-> llong @-> llong @-> returning void)
let _CFStringReplace = Foreign.foreign ~stub:true "CFStringReplace" ((ptr CFString.t) @-> CFRange.t @-> (ptr CFString.t) @-> returning void)
let _CFStringReplaceAll = Foreign.foreign ~stub:true "CFStringReplaceAll" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFStringSetExternalCharactersNoCopy = Foreign.foreign ~stub:true "CFStringSetExternalCharactersNoCopy" ((ptr CFString.t) @-> (ptr ushort) @-> llong @-> llong @-> returning void)
let _CFStringTokenizerAdvanceToNextToken = Foreign.foreign ~stub:true "CFStringTokenizerAdvanceToNextToken" ((ptr CFStringTokenizer.t) @-> returning ullong)
let _CFStringTokenizerCopyBestStringLanguage = Foreign.foreign ~stub:true "CFStringTokenizerCopyBestStringLanguage" ((ptr CFString.t) @-> CFRange.t @-> returning (ptr CFString.t))
let _CFStringTokenizerCopyCurrentTokenAttribute = Foreign.foreign ~stub:true "CFStringTokenizerCopyCurrentTokenAttribute" ((ptr CFStringTokenizer.t) @-> ullong @-> returning id)
let _CFStringTokenizerCreate = Foreign.foreign ~stub:true "CFStringTokenizerCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> CFRange.t @-> ullong @-> (ptr CFLocale.t) @-> returning (ptr CFStringTokenizer.t))
let _CFStringTokenizerGetCurrentSubTokens = Foreign.foreign ~stub:true "CFStringTokenizerGetCurrentSubTokens" ((ptr CFStringTokenizer.t) @-> (ptr CFRange.t) @-> llong @-> (ptr CFArray.t) @-> returning llong)
let _CFStringTokenizerGetCurrentTokenRange = Foreign.foreign ~stub:true "CFStringTokenizerGetCurrentTokenRange" ((ptr CFStringTokenizer.t) @-> returning CFRange.t)
let _CFStringTokenizerGetTypeID = Foreign.foreign ~stub:true "CFStringTokenizerGetTypeID" (void @-> returning ullong)
let _CFStringTokenizerGoToTokenAtIndex = Foreign.foreign ~stub:true "CFStringTokenizerGoToTokenAtIndex" ((ptr CFStringTokenizer.t) @-> llong @-> returning ullong)
let _CFStringTokenizerSetString = Foreign.foreign ~stub:true "CFStringTokenizerSetString" ((ptr CFStringTokenizer.t) @-> (ptr CFString.t) @-> CFRange.t @-> returning void)
let _CFStringTransform = Foreign.foreign ~stub:true "CFStringTransform" ((ptr CFString.t) @-> (ptr CFRange.t) @-> (ptr CFString.t) @-> bool @-> returning bool)
let _CFStringTrim = Foreign.foreign ~stub:true "CFStringTrim" ((ptr CFString.t) @-> (ptr CFString.t) @-> returning void)
let _CFStringTrimWhitespace = Foreign.foreign ~stub:true "CFStringTrimWhitespace" ((ptr CFString.t) @-> returning void)
let _CFStringUppercase = Foreign.foreign ~stub:true "CFStringUppercase" ((ptr CFString.t) @-> (ptr CFLocale.t) @-> returning void)
(* let _CFSwapInt16 = Foreign.foreign "Camlkit_CFSwapInt16" (ushort @-> returning ushort) *)
(* let _CFSwapInt16BigToHost = Foreign.foreign "Camlkit_CFSwapInt16BigToHost" (ushort @-> returning ushort) *)
(* let _CFSwapInt16HostToBig = Foreign.foreign "Camlkit_CFSwapInt16HostToBig" (ushort @-> returning ushort) *)
(* let _CFSwapInt16HostToLittle = Foreign.foreign "Camlkit_CFSwapInt16HostToLittle" (ushort @-> returning ushort) *)
(* let _CFSwapInt16LittleToHost = Foreign.foreign "Camlkit_CFSwapInt16LittleToHost" (ushort @-> returning ushort) *)
(* let _CFSwapInt32 = Foreign.foreign "Camlkit_CFSwapInt32" (uint @-> returning uint) *)
(* let _CFSwapInt32BigToHost = Foreign.foreign "Camlkit_CFSwapInt32BigToHost" (uint @-> returning uint) *)
(* let _CFSwapInt32HostToBig = Foreign.foreign "Camlkit_CFSwapInt32HostToBig" (uint @-> returning uint) *)
(* let _CFSwapInt32HostToLittle = Foreign.foreign "Camlkit_CFSwapInt32HostToLittle" (uint @-> returning uint) *)
(* let _CFSwapInt32LittleToHost = Foreign.foreign "Camlkit_CFSwapInt32LittleToHost" (uint @-> returning uint) *)
(* let _CFSwapInt64 = Foreign.foreign "Camlkit_CFSwapInt64" (ullong @-> returning ullong) *)
(* let _CFSwapInt64BigToHost = Foreign.foreign "Camlkit_CFSwapInt64BigToHost" (ullong @-> returning ullong) *)
(* let _CFSwapInt64HostToBig = Foreign.foreign "Camlkit_CFSwapInt64HostToBig" (ullong @-> returning ullong) *)
(* let _CFSwapInt64HostToLittle = Foreign.foreign "Camlkit_CFSwapInt64HostToLittle" (ullong @-> returning ullong) *)
(* let _CFSwapInt64LittleToHost = Foreign.foreign "Camlkit_CFSwapInt64LittleToHost" (ullong @-> returning ullong) *)
let _CFTimeZoneCopyAbbreviation = Foreign.foreign ~stub:true "CFTimeZoneCopyAbbreviation" ((ptr CFTimeZone.t) @-> double @-> returning (ptr CFString.t))
let _CFTimeZoneCopyAbbreviationDictionary = Foreign.foreign ~stub:true "CFTimeZoneCopyAbbreviationDictionary" (void @-> returning (ptr CFDictionary.t))
let _CFTimeZoneCopyDefault = Foreign.foreign ~stub:true "CFTimeZoneCopyDefault" (void @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneCopyKnownNames = Foreign.foreign ~stub:true "CFTimeZoneCopyKnownNames" (void @-> returning (ptr CFArray.t))
let _CFTimeZoneCopyLocalizedName = Foreign.foreign ~stub:true "CFTimeZoneCopyLocalizedName" ((ptr CFTimeZone.t) @-> llong @-> (ptr CFLocale.t) @-> returning (ptr CFString.t))
let _CFTimeZoneCopySystem = Foreign.foreign ~stub:true "CFTimeZoneCopySystem" (void @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneCreate = Foreign.foreign ~stub:true "CFTimeZoneCreate" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFData.t) @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneCreateWithName = Foreign.foreign ~stub:true "CFTimeZoneCreateWithName" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> bool @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneCreateWithTimeIntervalFromGMT = Foreign.foreign ~stub:true "CFTimeZoneCreateWithTimeIntervalFromGMT" ((ptr CFAllocator.t) @-> double @-> returning (ptr CFTimeZone.t))
let _CFTimeZoneGetData = Foreign.foreign ~stub:true "CFTimeZoneGetData" ((ptr CFTimeZone.t) @-> returning (ptr CFData.t))
let _CFTimeZoneGetDaylightSavingTimeOffset = Foreign.foreign ~stub:true "CFTimeZoneGetDaylightSavingTimeOffset" ((ptr CFTimeZone.t) @-> double @-> returning double)
let _CFTimeZoneGetName = Foreign.foreign ~stub:true "CFTimeZoneGetName" ((ptr CFTimeZone.t) @-> returning (ptr CFString.t))
let _CFTimeZoneGetNextDaylightSavingTimeTransition = Foreign.foreign ~stub:true "CFTimeZoneGetNextDaylightSavingTimeTransition" ((ptr CFTimeZone.t) @-> double @-> returning double)
let _CFTimeZoneGetSecondsFromGMT = Foreign.foreign ~stub:true "CFTimeZoneGetSecondsFromGMT" ((ptr CFTimeZone.t) @-> double @-> returning double)
let _CFTimeZoneGetTypeID = Foreign.foreign ~stub:true "CFTimeZoneGetTypeID" (void @-> returning ullong)
let _CFTimeZoneIsDaylightSavingTime = Foreign.foreign ~stub:true "CFTimeZoneIsDaylightSavingTime" ((ptr CFTimeZone.t) @-> double @-> returning bool)
let _CFTimeZoneResetSystem = Foreign.foreign ~stub:true "CFTimeZoneResetSystem" (void @-> returning void)
let _CFTimeZoneSetAbbreviationDictionary = Foreign.foreign ~stub:true "CFTimeZoneSetAbbreviationDictionary" ((ptr CFDictionary.t) @-> returning void)
let _CFTimeZoneSetDefault = Foreign.foreign ~stub:true "CFTimeZoneSetDefault" ((ptr CFTimeZone.t) @-> returning void)
let _CFTreeAppendChild = Foreign.foreign ~stub:true "CFTreeAppendChild" ((ptr CFTree.t) @-> (ptr CFTree.t) @-> returning void)
let _CFTreeApplyFunctionToChildren = Foreign.foreign ~stub:true "CFTreeApplyFunctionToChildren" ((ptr CFTree.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CFTreeCreate = Foreign.foreign ~stub:true "CFTreeCreate" ((ptr CFAllocator.t) @-> (ptr CFTreeContext.t) @-> returning (ptr CFTree.t))
let _CFTreeFindRoot = Foreign.foreign ~stub:true "CFTreeFindRoot" ((ptr CFTree.t) @-> returning (ptr CFTree.t))
let _CFTreeGetChildAtIndex = Foreign.foreign ~stub:true "CFTreeGetChildAtIndex" ((ptr CFTree.t) @-> llong @-> returning (ptr CFTree.t))
let _CFTreeGetChildCount = Foreign.foreign ~stub:true "CFTreeGetChildCount" ((ptr CFTree.t) @-> returning llong)
let _CFTreeGetChildren = Foreign.foreign ~stub:true "CFTreeGetChildren" ((ptr CFTree.t) @-> (ptr (ptr CFTree.t)) @-> returning void)
let _CFTreeGetContext = Foreign.foreign ~stub:true "CFTreeGetContext" ((ptr CFTree.t) @-> (ptr CFTreeContext.t) @-> returning void)
let _CFTreeGetFirstChild = Foreign.foreign ~stub:true "CFTreeGetFirstChild" ((ptr CFTree.t) @-> returning (ptr CFTree.t))
let _CFTreeGetNextSibling = Foreign.foreign ~stub:true "CFTreeGetNextSibling" ((ptr CFTree.t) @-> returning (ptr CFTree.t))
let _CFTreeGetParent = Foreign.foreign ~stub:true "CFTreeGetParent" ((ptr CFTree.t) @-> returning (ptr CFTree.t))
let _CFTreeGetTypeID = Foreign.foreign ~stub:true "CFTreeGetTypeID" (void @-> returning ullong)
let _CFTreeInsertSibling = Foreign.foreign ~stub:true "CFTreeInsertSibling" ((ptr CFTree.t) @-> (ptr CFTree.t) @-> returning void)
let _CFTreePrependChild = Foreign.foreign ~stub:true "CFTreePrependChild" ((ptr CFTree.t) @-> (ptr CFTree.t) @-> returning void)
let _CFTreeRemove = Foreign.foreign ~stub:true "CFTreeRemove" ((ptr CFTree.t) @-> returning void)
let _CFTreeRemoveAllChildren = Foreign.foreign ~stub:true "CFTreeRemoveAllChildren" ((ptr CFTree.t) @-> returning void)
let _CFTreeSetContext = Foreign.foreign ~stub:true "CFTreeSetContext" ((ptr CFTree.t) @-> (ptr CFTreeContext.t) @-> returning void)
let _CFTreeSortChildren = Foreign.foreign ~stub:true "CFTreeSortChildren" ((ptr CFTree.t) @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> (ptr void) @-> returning llong) @-> (ptr void) @-> returning void)
let _CFURLCanBeDecomposed = Foreign.foreign ~stub:true "CFURLCanBeDecomposed" ((ptr CFURL.t) @-> returning bool)
let _CFURLClearResourcePropertyCache = Foreign.foreign ~stub:true "CFURLClearResourcePropertyCache" ((ptr CFURL.t) @-> returning void)
let _CFURLClearResourcePropertyCacheForKey = Foreign.foreign ~stub:true "CFURLClearResourcePropertyCacheForKey" ((ptr CFURL.t) @-> (ptr CFString.t) @-> returning void)
let _CFURLCopyAbsoluteURL = Foreign.foreign ~stub:true "CFURLCopyAbsoluteURL" ((ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCopyFileSystemPath = Foreign.foreign ~stub:true "CFURLCopyFileSystemPath" ((ptr CFURL.t) @-> llong @-> returning (ptr CFString.t))
let _CFURLCopyFragment = Foreign.foreign ~stub:true "CFURLCopyFragment" ((ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFURLCopyHostName = Foreign.foreign ~stub:true "CFURLCopyHostName" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyLastPathComponent = Foreign.foreign ~stub:true "CFURLCopyLastPathComponent" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyNetLocation = Foreign.foreign ~stub:true "CFURLCopyNetLocation" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyParameterString = Foreign.foreign ~stub:true "CFURLCopyParameterString" ((ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFURLCopyPassword = Foreign.foreign ~stub:true "CFURLCopyPassword" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyPath = Foreign.foreign ~stub:true "CFURLCopyPath" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyPathExtension = Foreign.foreign ~stub:true "CFURLCopyPathExtension" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyQueryString = Foreign.foreign ~stub:true "CFURLCopyQueryString" ((ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFURLCopyResourcePropertiesForKeys = Foreign.foreign ~stub:true "CFURLCopyResourcePropertiesForKeys" ((ptr CFURL.t) @-> (ptr CFArray.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFDictionary.t))
let _CFURLCopyResourcePropertyForKey = Foreign.foreign ~stub:true "CFURLCopyResourcePropertyForKey" ((ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr void) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLCopyResourceSpecifier = Foreign.foreign ~stub:true "CFURLCopyResourceSpecifier" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyScheme = Foreign.foreign ~stub:true "CFURLCopyScheme" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCopyStrictPath = Foreign.foreign ~stub:true "CFURLCopyStrictPath" ((ptr CFURL.t) @-> (ptr bool) @-> returning (ptr CFString.t))
let _CFURLCopyUserName = Foreign.foreign ~stub:true "CFURLCopyUserName" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLCreateAbsoluteURLWithBytes = Foreign.foreign ~stub:true "CFURLCreateAbsoluteURLWithBytes" ((ptr CFAllocator.t) @-> string @-> llong @-> uint @-> (ptr CFURL.t) @-> bool @-> returning (ptr CFURL.t))
let _CFURLCreateBookmarkData = Foreign.foreign ~stub:true "CFURLCreateBookmarkData" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> ullong @-> (ptr CFArray.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFData.t))
let _CFURLCreateBookmarkDataFromAliasRecord = Foreign.foreign ~stub:true "CFURLCreateBookmarkDataFromAliasRecord" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> returning (ptr CFData.t))
let _CFURLCreateBookmarkDataFromFile = Foreign.foreign ~stub:true "CFURLCreateBookmarkDataFromFile" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFData.t))
let _CFURLCreateByResolvingBookmarkData = Foreign.foreign ~stub:true "CFURLCreateByResolvingBookmarkData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> ullong @-> (ptr CFURL.t) @-> (ptr CFArray.t) @-> (ptr bool) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFURL.t))
let _CFURLCreateCopyAppendingPathComponent = Foreign.foreign ~stub:true "CFURLCreateCopyAppendingPathComponent" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> bool @-> returning (ptr CFURL.t))
let _CFURLCreateCopyAppendingPathExtension = Foreign.foreign ~stub:true "CFURLCreateCopyAppendingPathExtension" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> returning (ptr CFURL.t))
let _CFURLCreateCopyDeletingLastPathComponent = Foreign.foreign ~stub:true "CFURLCreateCopyDeletingLastPathComponent" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreateCopyDeletingPathExtension = Foreign.foreign ~stub:true "CFURLCreateCopyDeletingPathExtension" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreateData = Foreign.foreign ~stub:true "CFURLCreateData" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> uint @-> bool @-> returning (ptr CFData.t))
let _CFURLCreateDataAndPropertiesFromResource = Foreign.foreign ~stub:true "CFURLCreateDataAndPropertiesFromResource" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFData.t)) @-> (ptr (ptr CFDictionary.t)) @-> (ptr CFArray.t) @-> (ptr int) @-> returning bool)
let _CFURLCreateFilePathURL = Foreign.foreign ~stub:true "CFURLCreateFilePathURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFURL.t))
let _CFURLCreateFileReferenceURL = Foreign.foreign ~stub:true "CFURLCreateFileReferenceURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning (ptr CFURL.t))
let _CFURLCreateFromFSRef = Foreign.foreign ~stub:true "CFURLCreateFromFSRef" ((ptr CFAllocator.t) @-> (ptr void) @-> returning (ptr CFURL.t))
let _CFURLCreateFromFileSystemRepresentation = Foreign.foreign ~stub:true "CFURLCreateFromFileSystemRepresentation" ((ptr CFAllocator.t) @-> string @-> llong @-> bool @-> returning (ptr CFURL.t))
let _CFURLCreateFromFileSystemRepresentationRelativeToBase = Foreign.foreign ~stub:true "CFURLCreateFromFileSystemRepresentationRelativeToBase" ((ptr CFAllocator.t) @-> string @-> llong @-> bool @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreatePropertyFromResource = Foreign.foreign ~stub:true "CFURLCreatePropertyFromResource" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr int) @-> returning id)
let _CFURLCreateResourcePropertiesForKeysFromBookmarkData = Foreign.foreign ~stub:true "CFURLCreateResourcePropertiesForKeysFromBookmarkData" ((ptr CFAllocator.t) @-> (ptr CFArray.t) @-> (ptr CFData.t) @-> returning (ptr CFDictionary.t))
let _CFURLCreateResourcePropertyForKeyFromBookmarkData = Foreign.foreign ~stub:true "CFURLCreateResourcePropertyForKeyFromBookmarkData" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFData.t) @-> returning id)
let _CFURLCreateStringByAddingPercentEscapes = Foreign.foreign ~stub:true "CFURLCreateStringByAddingPercentEscapes" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> uint @-> returning (ptr CFString.t))
let _CFURLCreateStringByReplacingPercentEscapes = Foreign.foreign ~stub:true "CFURLCreateStringByReplacingPercentEscapes" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning (ptr CFString.t))
let _CFURLCreateStringByReplacingPercentEscapesUsingEncoding = Foreign.foreign ~stub:true "CFURLCreateStringByReplacingPercentEscapesUsingEncoding" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> uint @-> returning (ptr CFString.t))
let _CFURLCreateWithBytes = Foreign.foreign ~stub:true "CFURLCreateWithBytes" ((ptr CFAllocator.t) @-> string @-> llong @-> uint @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreateWithFileSystemPath = Foreign.foreign ~stub:true "CFURLCreateWithFileSystemPath" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> llong @-> bool @-> returning (ptr CFURL.t))
let _CFURLCreateWithFileSystemPathRelativeToBase = Foreign.foreign ~stub:true "CFURLCreateWithFileSystemPathRelativeToBase" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> llong @-> bool @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLCreateWithString = Foreign.foreign ~stub:true "CFURLCreateWithString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLDestroyResource = Foreign.foreign ~stub:true "CFURLDestroyResource" ((ptr CFURL.t) @-> (ptr int) @-> returning bool)
let _CFURLEnumeratorCreateForDirectoryURL = Foreign.foreign ~stub:true "CFURLEnumeratorCreateForDirectoryURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> ullong @-> (ptr CFArray.t) @-> returning (ptr CFURLEnumerator.t))
let _CFURLEnumeratorCreateForMountedVolumes = Foreign.foreign ~stub:true "CFURLEnumeratorCreateForMountedVolumes" ((ptr CFAllocator.t) @-> ullong @-> (ptr CFArray.t) @-> returning (ptr CFURLEnumerator.t))
let _CFURLEnumeratorGetDescendentLevel = Foreign.foreign ~stub:true "CFURLEnumeratorGetDescendentLevel" ((ptr CFURLEnumerator.t) @-> returning llong)
let _CFURLEnumeratorGetNextURL = Foreign.foreign ~stub:true "CFURLEnumeratorGetNextURL" ((ptr CFURLEnumerator.t) @-> (ptr (ptr CFURL.t)) @-> (ptr (ptr CFError.t)) @-> returning llong)
let _CFURLEnumeratorGetSourceDidChange = Foreign.foreign ~stub:true "CFURLEnumeratorGetSourceDidChange" ((ptr CFURLEnumerator.t) @-> returning bool)
let _CFURLEnumeratorGetTypeID = Foreign.foreign ~stub:true "CFURLEnumeratorGetTypeID" (void @-> returning ullong)
let _CFURLEnumeratorSkipDescendents = Foreign.foreign ~stub:true "CFURLEnumeratorSkipDescendents" ((ptr CFURLEnumerator.t) @-> returning void)
let _CFURLGetBaseURL = Foreign.foreign ~stub:true "CFURLGetBaseURL" ((ptr CFURL.t) @-> returning (ptr CFURL.t))
let _CFURLGetByteRangeForComponent = Foreign.foreign ~stub:true "CFURLGetByteRangeForComponent" ((ptr CFURL.t) @-> llong @-> (ptr CFRange.t) @-> returning CFRange.t)
let _CFURLGetBytes = Foreign.foreign ~stub:true "CFURLGetBytes" ((ptr CFURL.t) @-> string @-> llong @-> returning llong)
let _CFURLGetFSRef = Foreign.foreign ~stub:true "CFURLGetFSRef" ((ptr CFURL.t) @-> (ptr void) @-> returning bool)
let _CFURLGetFileSystemRepresentation = Foreign.foreign ~stub:true "CFURLGetFileSystemRepresentation" ((ptr CFURL.t) @-> bool @-> string @-> llong @-> returning bool)
let _CFURLGetPortNumber = Foreign.foreign ~stub:true "CFURLGetPortNumber" ((ptr CFURL.t) @-> returning int)
let _CFURLGetString = Foreign.foreign ~stub:true "CFURLGetString" ((ptr CFURL.t) @-> returning (ptr CFString.t))
let _CFURLGetTypeID = Foreign.foreign ~stub:true "CFURLGetTypeID" (void @-> returning ullong)
let _CFURLHasDirectoryPath = Foreign.foreign ~stub:true "CFURLHasDirectoryPath" ((ptr CFURL.t) @-> returning bool)
let _CFURLIsFileReferenceURL = Foreign.foreign ~stub:true "CFURLIsFileReferenceURL" ((ptr CFURL.t) @-> returning bool)
let _CFURLResourceIsReachable = Foreign.foreign ~stub:true "CFURLResourceIsReachable" ((ptr CFURL.t) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLSetResourcePropertiesForKeys = Foreign.foreign ~stub:true "CFURLSetResourcePropertiesForKeys" ((ptr CFURL.t) @-> (ptr CFDictionary.t) @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLSetResourcePropertyForKey = Foreign.foreign ~stub:true "CFURLSetResourcePropertyForKey" ((ptr CFURL.t) @-> (ptr CFString.t) @-> id @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLSetTemporaryResourcePropertyForKey = Foreign.foreign ~stub:true "CFURLSetTemporaryResourcePropertyForKey" ((ptr CFURL.t) @-> (ptr CFString.t) @-> id @-> returning void)
let _CFURLStartAccessingSecurityScopedResource = Foreign.foreign ~stub:true "CFURLStartAccessingSecurityScopedResource" ((ptr CFURL.t) @-> returning bool)
let _CFURLStopAccessingSecurityScopedResource = Foreign.foreign ~stub:true "CFURLStopAccessingSecurityScopedResource" ((ptr CFURL.t) @-> returning void)
let _CFURLWriteBookmarkDataToFile = Foreign.foreign ~stub:true "CFURLWriteBookmarkDataToFile" ((ptr CFData.t) @-> (ptr CFURL.t) @-> ullong @-> (ptr (ptr CFError.t)) @-> returning bool)
let _CFURLWriteDataAndPropertiesToResource = Foreign.foreign ~stub:true "CFURLWriteDataAndPropertiesToResource" ((ptr CFURL.t) @-> (ptr CFData.t) @-> (ptr CFDictionary.t) @-> (ptr int) @-> returning bool)
let _CFUUIDCreate = Foreign.foreign ~stub:true "CFUUIDCreate" ((ptr CFAllocator.t) @-> returning (ptr CFUUID.t))
let _CFUUIDCreateFromString = Foreign.foreign ~stub:true "CFUUIDCreateFromString" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> returning (ptr CFUUID.t))
let _CFUUIDCreateFromUUIDBytes = Foreign.foreign ~stub:true "CFUUIDCreateFromUUIDBytes" ((ptr CFAllocator.t) @-> CFUUIDBytes.t @-> returning (ptr CFUUID.t))
let _CFUUIDCreateString = Foreign.foreign ~stub:true "CFUUIDCreateString" ((ptr CFAllocator.t) @-> (ptr CFUUID.t) @-> returning (ptr CFString.t))
let _CFUUIDCreateWithBytes = Foreign.foreign ~stub:true "CFUUIDCreateWithBytes" ((ptr CFAllocator.t) @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> returning (ptr CFUUID.t))
let _CFUUIDGetConstantUUIDWithBytes = Foreign.foreign ~stub:true "CFUUIDGetConstantUUIDWithBytes" ((ptr CFAllocator.t) @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> uchar @-> returning (ptr CFUUID.t))
let _CFUUIDGetTypeID = Foreign.foreign ~stub:true "CFUUIDGetTypeID" (void @-> returning ullong)
let _CFUUIDGetUUIDBytes = Foreign.foreign ~stub:true "CFUUIDGetUUIDBytes" ((ptr CFUUID.t) @-> returning CFUUIDBytes.t)
let _CFUserNotificationCancel = Foreign.foreign ~stub:true "CFUserNotificationCancel" ((ptr CFUserNotification.t) @-> returning int)
(* let _CFUserNotificationCheckBoxChecked = Foreign.foreign "Camlkit_CFUserNotificationCheckBoxChecked" (llong @-> returning ullong) *)
let _CFUserNotificationCreate = Foreign.foreign ~stub:true "CFUserNotificationCreate" ((ptr CFAllocator.t) @-> double @-> ullong @-> (ptr int) @-> (ptr CFDictionary.t) @-> returning (ptr CFUserNotification.t))
let _CFUserNotificationCreateRunLoopSource = Foreign.foreign ~stub:true "CFUserNotificationCreateRunLoopSource" ((ptr CFAllocator.t) @-> (ptr CFUserNotification.t) @-> Foreign.funptr ((ptr CFUserNotification.t) @-> ullong @-> returning void) @-> llong @-> returning (ptr CFRunLoopSource.t))
let _CFUserNotificationDisplayAlert = Foreign.foreign ~stub:true "CFUserNotificationDisplayAlert" (double @-> ullong @-> (ptr CFURL.t) @-> (ptr CFURL.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr ullong) @-> returning int)
let _CFUserNotificationDisplayNotice = Foreign.foreign ~stub:true "CFUserNotificationDisplayNotice" (double @-> ullong @-> (ptr CFURL.t) @-> (ptr CFURL.t) @-> (ptr CFURL.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> (ptr CFString.t) @-> returning int)
let _CFUserNotificationGetResponseDictionary = Foreign.foreign ~stub:true "CFUserNotificationGetResponseDictionary" ((ptr CFUserNotification.t) @-> returning (ptr CFDictionary.t))
let _CFUserNotificationGetResponseValue = Foreign.foreign ~stub:true "CFUserNotificationGetResponseValue" ((ptr CFUserNotification.t) @-> (ptr CFString.t) @-> llong @-> returning (ptr CFString.t))
let _CFUserNotificationGetTypeID = Foreign.foreign ~stub:true "CFUserNotificationGetTypeID" (void @-> returning ullong)
(* let _CFUserNotificationPopUpSelection = Foreign.foreign "Camlkit_CFUserNotificationPopUpSelection" (llong @-> returning ullong) *)
let _CFUserNotificationReceiveResponse = Foreign.foreign ~stub:true "CFUserNotificationReceiveResponse" ((ptr CFUserNotification.t) @-> double @-> (ptr ullong) @-> returning int)
(* let _CFUserNotificationSecureTextField = Foreign.foreign "Camlkit_CFUserNotificationSecureTextField" (llong @-> returning ullong) *)
let _CFUserNotificationUpdate = Foreign.foreign ~stub:true "CFUserNotificationUpdate" ((ptr CFUserNotification.t) @-> double @-> ullong @-> (ptr CFDictionary.t) @-> returning int)
let _CFWriteStreamCanAcceptBytes = Foreign.foreign ~stub:true "CFWriteStreamCanAcceptBytes" ((ptr CFWriteStream.t) @-> returning bool)
let _CFWriteStreamClose = Foreign.foreign ~stub:true "CFWriteStreamClose" ((ptr CFWriteStream.t) @-> returning void)
let _CFWriteStreamCopyDispatchQueue = Foreign.foreign ~stub:true "CFWriteStreamCopyDispatchQueue" ((ptr CFWriteStream.t) @-> returning id)
let _CFWriteStreamCopyError = Foreign.foreign ~stub:true "CFWriteStreamCopyError" ((ptr CFWriteStream.t) @-> returning (ptr CFError.t))
let _CFWriteStreamCopyProperty = Foreign.foreign ~stub:true "CFWriteStreamCopyProperty" ((ptr CFWriteStream.t) @-> (ptr CFString.t) @-> returning id)
let _CFWriteStreamCreateWithAllocatedBuffers = Foreign.foreign ~stub:true "CFWriteStreamCreateWithAllocatedBuffers" ((ptr CFAllocator.t) @-> (ptr CFAllocator.t) @-> returning (ptr CFWriteStream.t))
let _CFWriteStreamCreateWithBuffer = Foreign.foreign ~stub:true "CFWriteStreamCreateWithBuffer" ((ptr CFAllocator.t) @-> string @-> llong @-> returning (ptr CFWriteStream.t))
let _CFWriteStreamCreateWithFile = Foreign.foreign ~stub:true "CFWriteStreamCreateWithFile" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> returning (ptr CFWriteStream.t))
let _CFWriteStreamGetError = Foreign.foreign ~stub:true "CFWriteStreamGetError" ((ptr CFWriteStream.t) @-> returning CFStreamError.t)
let _CFWriteStreamGetStatus = Foreign.foreign ~stub:true "CFWriteStreamGetStatus" ((ptr CFWriteStream.t) @-> returning llong)
let _CFWriteStreamGetTypeID = Foreign.foreign ~stub:true "CFWriteStreamGetTypeID" (void @-> returning ullong)
let _CFWriteStreamOpen = Foreign.foreign ~stub:true "CFWriteStreamOpen" ((ptr CFWriteStream.t) @-> returning bool)
let _CFWriteStreamScheduleWithRunLoop = Foreign.foreign ~stub:true "CFWriteStreamScheduleWithRunLoop" ((ptr CFWriteStream.t) @-> (ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFWriteStreamSetClient = Foreign.foreign ~stub:true "CFWriteStreamSetClient" ((ptr CFWriteStream.t) @-> ullong @-> Foreign.funptr ((ptr CFWriteStream.t) @-> ullong @-> (ptr void) @-> returning void) @-> (ptr CFStreamClientContext.t) @-> returning bool)
let _CFWriteStreamSetDispatchQueue = Foreign.foreign ~stub:true "CFWriteStreamSetDispatchQueue" ((ptr CFWriteStream.t) @-> id @-> returning void)
let _CFWriteStreamSetProperty = Foreign.foreign ~stub:true "CFWriteStreamSetProperty" ((ptr CFWriteStream.t) @-> (ptr CFString.t) @-> id @-> returning bool)
let _CFWriteStreamUnscheduleFromRunLoop = Foreign.foreign ~stub:true "CFWriteStreamUnscheduleFromRunLoop" ((ptr CFWriteStream.t) @-> (ptr CFRunLoop.t) @-> (ptr CFString.t) @-> returning void)
let _CFWriteStreamWrite = Foreign.foreign ~stub:true "CFWriteStreamWrite" ((ptr CFWriteStream.t) @-> string @-> llong @-> returning llong)
let _CFXMLCreateStringByEscapingEntities = Foreign.foreign ~stub:true "CFXMLCreateStringByEscapingEntities" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFString.t))
let _CFXMLCreateStringByUnescapingEntities = Foreign.foreign ~stub:true "CFXMLCreateStringByUnescapingEntities" ((ptr CFAllocator.t) @-> (ptr CFString.t) @-> (ptr CFDictionary.t) @-> returning (ptr CFString.t))
let _CFXMLNodeCreate = Foreign.foreign ~stub:true "CFXMLNodeCreate" ((ptr CFAllocator.t) @-> llong @-> (ptr CFString.t) @-> (ptr void) @-> llong @-> returning (ptr CFXMLNode.t))
let _CFXMLNodeCreateCopy = Foreign.foreign ~stub:true "CFXMLNodeCreateCopy" ((ptr CFAllocator.t) @-> (ptr CFXMLNode.t) @-> returning (ptr CFXMLNode.t))
let _CFXMLNodeGetInfoPtr = Foreign.foreign ~stub:true "CFXMLNodeGetInfoPtr" ((ptr CFXMLNode.t) @-> returning (ptr void))
let _CFXMLNodeGetString = Foreign.foreign ~stub:true "CFXMLNodeGetString" ((ptr CFXMLNode.t) @-> returning (ptr CFString.t))
let _CFXMLNodeGetTypeCode = Foreign.foreign ~stub:true "CFXMLNodeGetTypeCode" ((ptr CFXMLNode.t) @-> returning llong)
let _CFXMLNodeGetTypeID = Foreign.foreign ~stub:true "CFXMLNodeGetTypeID" (void @-> returning ullong)
let _CFXMLNodeGetVersion = Foreign.foreign ~stub:true "CFXMLNodeGetVersion" ((ptr CFXMLNode.t) @-> returning llong)
let _CFXMLParserAbort = Foreign.foreign ~stub:true "CFXMLParserAbort" ((ptr CFXMLParser.t) @-> llong @-> (ptr CFString.t) @-> returning void)
let _CFXMLParserCopyErrorDescription = Foreign.foreign ~stub:true "CFXMLParserCopyErrorDescription" ((ptr CFXMLParser.t) @-> returning (ptr CFString.t))
let _CFXMLParserCreate = Foreign.foreign ~stub:true "CFXMLParserCreate" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> (ptr CFXMLParserCallBacks.t) @-> (ptr CFXMLParserContext.t) @-> returning (ptr CFXMLParser.t))
let _CFXMLParserCreateWithDataFromURL = Foreign.foreign ~stub:true "CFXMLParserCreateWithDataFromURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> (ptr CFXMLParserCallBacks.t) @-> (ptr CFXMLParserContext.t) @-> returning (ptr CFXMLParser.t))
let _CFXMLParserGetCallBacks = Foreign.foreign ~stub:true "CFXMLParserGetCallBacks" ((ptr CFXMLParser.t) @-> (ptr CFXMLParserCallBacks.t) @-> returning void)
let _CFXMLParserGetContext = Foreign.foreign ~stub:true "CFXMLParserGetContext" ((ptr CFXMLParser.t) @-> (ptr CFXMLParserContext.t) @-> returning void)
let _CFXMLParserGetDocument = Foreign.foreign ~stub:true "CFXMLParserGetDocument" ((ptr CFXMLParser.t) @-> returning (ptr void))
let _CFXMLParserGetLineNumber = Foreign.foreign ~stub:true "CFXMLParserGetLineNumber" ((ptr CFXMLParser.t) @-> returning llong)
let _CFXMLParserGetLocation = Foreign.foreign ~stub:true "CFXMLParserGetLocation" ((ptr CFXMLParser.t) @-> returning llong)
let _CFXMLParserGetSourceURL = Foreign.foreign ~stub:true "CFXMLParserGetSourceURL" ((ptr CFXMLParser.t) @-> returning (ptr CFURL.t))
let _CFXMLParserGetStatusCode = Foreign.foreign ~stub:true "CFXMLParserGetStatusCode" ((ptr CFXMLParser.t) @-> returning llong)
let _CFXMLParserGetTypeID = Foreign.foreign ~stub:true "CFXMLParserGetTypeID" (void @-> returning ullong)
let _CFXMLParserParse = Foreign.foreign ~stub:true "CFXMLParserParse" ((ptr CFXMLParser.t) @-> returning bool)
let _CFXMLTreeCreateFromData = Foreign.foreign ~stub:true "CFXMLTreeCreateFromData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> returning (ptr CFTree.t))
let _CFXMLTreeCreateFromDataWithError = Foreign.foreign ~stub:true "CFXMLTreeCreateFromDataWithError" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> (ptr (ptr CFDictionary.t)) @-> returning (ptr CFTree.t))
let _CFXMLTreeCreateWithDataFromURL = Foreign.foreign ~stub:true "CFXMLTreeCreateWithDataFromURL" ((ptr CFAllocator.t) @-> (ptr CFURL.t) @-> ullong @-> llong @-> returning (ptr CFTree.t))
let _CFXMLTreeCreateWithNode = Foreign.foreign ~stub:true "CFXMLTreeCreateWithNode" ((ptr CFAllocator.t) @-> (ptr CFXMLNode.t) @-> returning (ptr CFTree.t))
let _CFXMLTreeCreateXMLData = Foreign.foreign ~stub:true "CFXMLTreeCreateXMLData" ((ptr CFAllocator.t) @-> (ptr CFTree.t) @-> returning (ptr CFData.t))
let _CFXMLTreeGetNode = Foreign.foreign ~stub:true "CFXMLTreeGetNode" ((ptr CFTree.t) @-> returning (ptr CFXMLNode.t))
