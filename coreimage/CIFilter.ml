(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "CIFilter"

module C = struct
  let _CAMLParserStartElement x self = msg_send ~self ~cmd:(selector "CAMLParserStartElement:") ~typ:(id @-> returning (void)) x
  let _CMYKHalftone self = msg_send ~self ~cmd:(selector "CMYKHalftone") ~typ:(returning (id))
  let _KMeansFilter self = msg_send ~self ~cmd:(selector "KMeansFilter") ~typ:(returning (id))
  let _LabDeltaE self = msg_send ~self ~cmd:(selector "LabDeltaE") ~typ:(returning (id))
  let _PDF417BarcodeGenerator self = msg_send ~self ~cmd:(selector "PDF417BarcodeGenerator") ~typ:(returning (id))
  let _QRCodeGenerator self = msg_send ~self ~cmd:(selector "QRCodeGenerator") ~typ:(returning (id))
  let accordionFoldTransitionFilter self = msg_send ~self ~cmd:(selector "accordionFoldTransitionFilter") ~typ:(returning (id))
  let addFilterToSkip x self = msg_send ~self ~cmd:(selector "addFilterToSkip:") ~typ:(id @-> returning (void)) x
  let additionCompositingFilter self = msg_send ~self ~cmd:(selector "additionCompositingFilter") ~typ:(returning (id))
  let affineClampFilter self = msg_send ~self ~cmd:(selector "affineClampFilter") ~typ:(returning (id))
  let affineTileFilter self = msg_send ~self ~cmd:(selector "affineTileFilter") ~typ:(returning (id))
  let allCategories x self = msg_send ~self ~cmd:(selector "allCategories:") ~typ:(bool @-> returning (id)) x
  let areaAverageFilter self = msg_send ~self ~cmd:(selector "areaAverageFilter") ~typ:(returning (id))
  let areaHistogramFilter self = msg_send ~self ~cmd:(selector "areaHistogramFilter") ~typ:(returning (id))
  let areaLogarithmicHistogramFilter self = msg_send ~self ~cmd:(selector "areaLogarithmicHistogramFilter") ~typ:(returning (id))
  let areaMaximumAlphaFilter self = msg_send ~self ~cmd:(selector "areaMaximumAlphaFilter") ~typ:(returning (id))
  let areaMaximumFilter self = msg_send ~self ~cmd:(selector "areaMaximumFilter") ~typ:(returning (id))
  let areaMinMaxFilter self = msg_send ~self ~cmd:(selector "areaMinMaxFilter") ~typ:(returning (id))
  let areaMinMaxRedFilter self = msg_send ~self ~cmd:(selector "areaMinMaxRedFilter") ~typ:(returning (id))
  let areaMinimumAlphaFilter self = msg_send ~self ~cmd:(selector "areaMinimumAlphaFilter") ~typ:(returning (id))
  let areaMinimumFilter self = msg_send ~self ~cmd:(selector "areaMinimumFilter") ~typ:(returning (id))
  let attributedTextImageGeneratorFilter self = msg_send ~self ~cmd:(selector "attributedTextImageGeneratorFilter") ~typ:(returning (id))
  let aztecCodeGeneratorFilter self = msg_send ~self ~cmd:(selector "aztecCodeGeneratorFilter") ~typ:(returning (id))
  let barcodeGeneratorFilter self = msg_send ~self ~cmd:(selector "barcodeGeneratorFilter") ~typ:(returning (id))
  let barsSwipeTransitionFilter self = msg_send ~self ~cmd:(selector "barsSwipeTransitionFilter") ~typ:(returning (id))
  let bicubicScaleTransformFilter self = msg_send ~self ~cmd:(selector "bicubicScaleTransformFilter") ~typ:(returning (id))
  let blendWithAlphaMaskFilter self = msg_send ~self ~cmd:(selector "blendWithAlphaMaskFilter") ~typ:(returning (id))
  let blendWithBlueMaskFilter self = msg_send ~self ~cmd:(selector "blendWithBlueMaskFilter") ~typ:(returning (id))
  let blendWithMaskFilter self = msg_send ~self ~cmd:(selector "blendWithMaskFilter") ~typ:(returning (id))
  let blendWithRedMaskFilter self = msg_send ~self ~cmd:(selector "blendWithRedMaskFilter") ~typ:(returning (id))
  let bloomFilter self = msg_send ~self ~cmd:(selector "bloomFilter") ~typ:(returning (id))
  let blurredRectangleGeneratorFilter self = msg_send ~self ~cmd:(selector "blurredRectangleGeneratorFilter") ~typ:(returning (id))
  let bokehBlurFilter self = msg_send ~self ~cmd:(selector "bokehBlurFilter") ~typ:(returning (id))
  let boxBlurFilter self = msg_send ~self ~cmd:(selector "boxBlurFilter") ~typ:(returning (id))
  let bumpDistortionFilter self = msg_send ~self ~cmd:(selector "bumpDistortionFilter") ~typ:(returning (id))
  let bumpDistortionLinearFilter self = msg_send ~self ~cmd:(selector "bumpDistortionLinearFilter") ~typ:(returning (id))
  let cannyEdgeDetectorFilter self = msg_send ~self ~cmd:(selector "cannyEdgeDetectorFilter") ~typ:(returning (id))
  let checkerboardGeneratorFilter self = msg_send ~self ~cmd:(selector "checkerboardGeneratorFilter") ~typ:(returning (id))
  let circleSplashDistortionFilter self = msg_send ~self ~cmd:(selector "circleSplashDistortionFilter") ~typ:(returning (id))
  let circularScreenFilter self = msg_send ~self ~cmd:(selector "circularScreenFilter") ~typ:(returning (id))
  let circularWrapFilter self = msg_send ~self ~cmd:(selector "circularWrapFilter") ~typ:(returning (id))
  let clearCache self = msg_send ~self ~cmd:(selector "clearCache") ~typ:(returning (void))
  let code128BarcodeGeneratorFilter self = msg_send ~self ~cmd:(selector "code128BarcodeGeneratorFilter") ~typ:(returning (id))
  let colorAbsoluteDifferenceFilter self = msg_send ~self ~cmd:(selector "colorAbsoluteDifferenceFilter") ~typ:(returning (id))
  let colorBlendModeFilter self = msg_send ~self ~cmd:(selector "colorBlendModeFilter") ~typ:(returning (id))
  let colorBurnBlendModeFilter self = msg_send ~self ~cmd:(selector "colorBurnBlendModeFilter") ~typ:(returning (id))
  let colorClampFilter self = msg_send ~self ~cmd:(selector "colorClampFilter") ~typ:(returning (id))
  let colorControlsFilter self = msg_send ~self ~cmd:(selector "colorControlsFilter") ~typ:(returning (id))
  let colorCrossPolynomialFilter self = msg_send ~self ~cmd:(selector "colorCrossPolynomialFilter") ~typ:(returning (id))
  let colorCubeFilter self = msg_send ~self ~cmd:(selector "colorCubeFilter") ~typ:(returning (id))
  let colorCubeWithColorSpaceFilter self = msg_send ~self ~cmd:(selector "colorCubeWithColorSpaceFilter") ~typ:(returning (id))
  let colorCubesMixedWithMaskFilter self = msg_send ~self ~cmd:(selector "colorCubesMixedWithMaskFilter") ~typ:(returning (id))
  let colorCurvesFilter self = msg_send ~self ~cmd:(selector "colorCurvesFilter") ~typ:(returning (id))
  let colorDodgeBlendModeFilter self = msg_send ~self ~cmd:(selector "colorDodgeBlendModeFilter") ~typ:(returning (id))
  let colorInvertFilter self = msg_send ~self ~cmd:(selector "colorInvertFilter") ~typ:(returning (id))
  let colorMapFilter self = msg_send ~self ~cmd:(selector "colorMapFilter") ~typ:(returning (id))
  let colorMatrixFilter self = msg_send ~self ~cmd:(selector "colorMatrixFilter") ~typ:(returning (id))
  let colorMonochromeFilter self = msg_send ~self ~cmd:(selector "colorMonochromeFilter") ~typ:(returning (id))
  let colorPolynomialFilter self = msg_send ~self ~cmd:(selector "colorPolynomialFilter") ~typ:(returning (id))
  let colorPosterizeFilter self = msg_send ~self ~cmd:(selector "colorPosterizeFilter") ~typ:(returning (id))
  let colorThresholdFilter self = msg_send ~self ~cmd:(selector "colorThresholdFilter") ~typ:(returning (id))
  let colorThresholdOtsuFilter self = msg_send ~self ~cmd:(selector "colorThresholdOtsuFilter") ~typ:(returning (id))
  let columnAverageFilter self = msg_send ~self ~cmd:(selector "columnAverageFilter") ~typ:(returning (id))
  let comicEffectFilter self = msg_send ~self ~cmd:(selector "comicEffectFilter") ~typ:(returning (id))
  let convertLabToRGBFilter self = msg_send ~self ~cmd:(selector "convertLabToRGBFilter") ~typ:(returning (id))
  let convertRGBtoLabFilter self = msg_send ~self ~cmd:(selector "convertRGBtoLabFilter") ~typ:(returning (id))
  let convolution3X3Filter self = msg_send ~self ~cmd:(selector "convolution3X3Filter") ~typ:(returning (id))
  let convolution5X5Filter self = msg_send ~self ~cmd:(selector "convolution5X5Filter") ~typ:(returning (id))
  let convolution7X7Filter self = msg_send ~self ~cmd:(selector "convolution7X7Filter") ~typ:(returning (id))
  let convolution9HorizontalFilter self = msg_send ~self ~cmd:(selector "convolution9HorizontalFilter") ~typ:(returning (id))
  let convolution9VerticalFilter self = msg_send ~self ~cmd:(selector "convolution9VerticalFilter") ~typ:(returning (id))
  let convolutionRGB3X3Filter self = msg_send ~self ~cmd:(selector "convolutionRGB3X3Filter") ~typ:(returning (id))
  let convolutionRGB5X5Filter self = msg_send ~self ~cmd:(selector "convolutionRGB5X5Filter") ~typ:(returning (id))
  let convolutionRGB7X7Filter self = msg_send ~self ~cmd:(selector "convolutionRGB7X7Filter") ~typ:(returning (id))
  let convolutionRGB9HorizontalFilter self = msg_send ~self ~cmd:(selector "convolutionRGB9HorizontalFilter") ~typ:(returning (id))
  let convolutionRGB9VerticalFilter self = msg_send ~self ~cmd:(selector "convolutionRGB9VerticalFilter") ~typ:(returning (id))
  let copyMachineTransitionFilter self = msg_send ~self ~cmd:(selector "copyMachineTransitionFilter") ~typ:(returning (id))
  let coreMLModelFilter self = msg_send ~self ~cmd:(selector "coreMLModelFilter") ~typ:(returning (id))
  let crystallizeFilter self = msg_send ~self ~cmd:(selector "crystallizeFilter") ~typ:(returning (id))
  let customAttributes self = msg_send ~self ~cmd:(selector "customAttributes") ~typ:(returning (id))
  let darkenBlendModeFilter self = msg_send ~self ~cmd:(selector "darkenBlendModeFilter") ~typ:(returning (id))
  let depthOfFieldFilter self = msg_send ~self ~cmd:(selector "depthOfFieldFilter") ~typ:(returning (id))
  let depthToDisparityFilter self = msg_send ~self ~cmd:(selector "depthToDisparityFilter") ~typ:(returning (id))
  let differenceBlendModeFilter self = msg_send ~self ~cmd:(selector "differenceBlendModeFilter") ~typ:(returning (id))
  let discBlurFilter self = msg_send ~self ~cmd:(selector "discBlurFilter") ~typ:(returning (id))
  let disintegrateWithMaskTransitionFilter self = msg_send ~self ~cmd:(selector "disintegrateWithMaskTransitionFilter") ~typ:(returning (id))
  let disparityToDepthFilter self = msg_send ~self ~cmd:(selector "disparityToDepthFilter") ~typ:(returning (id))
  let displacementDistortionFilter self = msg_send ~self ~cmd:(selector "displacementDistortionFilter") ~typ:(returning (id))
  let dissolveTransitionFilter self = msg_send ~self ~cmd:(selector "dissolveTransitionFilter") ~typ:(returning (id))
  let ditherFilter self = msg_send ~self ~cmd:(selector "ditherFilter") ~typ:(returning (id))
  let divideBlendModeFilter self = msg_send ~self ~cmd:(selector "divideBlendModeFilter") ~typ:(returning (id))
  let documentEnhancerFilter self = msg_send ~self ~cmd:(selector "documentEnhancerFilter") ~typ:(returning (id))
  let dotScreenFilter self = msg_send ~self ~cmd:(selector "dotScreenFilter") ~typ:(returning (id))
  let drosteFilter self = msg_send ~self ~cmd:(selector "drosteFilter") ~typ:(returning (id))
  let edgePreserveUpsampleFilter self = msg_send ~self ~cmd:(selector "edgePreserveUpsampleFilter") ~typ:(returning (id))
  let edgeWorkFilter self = msg_send ~self ~cmd:(selector "edgeWorkFilter") ~typ:(returning (id))
  let edgesFilter self = msg_send ~self ~cmd:(selector "edgesFilter") ~typ:(returning (id))
  let eightfoldReflectedTileFilter self = msg_send ~self ~cmd:(selector "eightfoldReflectedTileFilter") ~typ:(returning (id))
  let exchangeImplementationsForClass self = msg_send ~self ~cmd:(selector "exchangeImplementationsForClass") ~typ:(returning (bool))
  let exclusionBlendModeFilter self = msg_send ~self ~cmd:(selector "exclusionBlendModeFilter") ~typ:(returning (id))
  let exposureAdjustFilter self = msg_send ~self ~cmd:(selector "exposureAdjustFilter") ~typ:(returning (id))
  let falseColorFilter self = msg_send ~self ~cmd:(selector "falseColorFilter") ~typ:(returning (id))
  let filterArrayFromSerializedXMP x ~inputImageExtent ~error self = msg_send ~self ~cmd:(selector "filterArrayFromSerializedXMP:inputImageExtent:error:") ~typ:(id @-> CGRect.t @-> ptr (id) @-> returning (id)) x inputImageExtent error
  let filterName x ~replacement self = msg_send ~self ~cmd:(selector "filterName:replacement:") ~typ:(id @-> id @-> returning (id)) x replacement
  let filterName1 x ~append ~arguments self = msg_send ~self ~cmd:(selector "filterName:append:arguments:") ~typ:(id @-> id @-> id @-> returning (id)) x append arguments
  let filterName2 x ~replacement ~arguments self = msg_send ~self ~cmd:(selector "filterName:replacement:arguments:") ~typ:(id @-> id @-> id @-> returning (id)) x replacement arguments
  let filterName3 x ~prepend ~imageName ~arguments self = msg_send ~self ~cmd:(selector "filterName:prepend:imageName:arguments:") ~typ:(id @-> id @-> id @-> id @-> returning (id)) x prepend imageName arguments
  let filterNamesInCategories x self = msg_send ~self ~cmd:(selector "filterNamesInCategories:") ~typ:(id @-> returning (id)) x
  let filterNamesInCategory x self = msg_send ~self ~cmd:(selector "filterNamesInCategory:") ~typ:(id @-> returning (id)) x
  let filterWithCVPixelBuffer x ~properties ~options self = msg_send ~self ~cmd:(selector "filterWithCVPixelBuffer:properties:options:") ~typ:(ptr void @-> id @-> id @-> returning (id)) x properties options
  let filterWithImageData x ~options self = msg_send ~self ~cmd:(selector "filterWithImageData:options:") ~typ:(id @-> id @-> returning (id)) x options
  let filterWithImageURL x ~options self = msg_send ~self ~cmd:(selector "filterWithImageURL:options:") ~typ:(id @-> id @-> returning (id)) x options
  let filterWithName x self = msg_send ~self ~cmd:(selector "filterWithName:") ~typ:(id @-> returning (id)) x
  let filterWithName1 x ~compatibilityVersion self = msg_send ~self ~cmd:(selector "filterWithName:compatibilityVersion:") ~typ:(id @-> int @-> returning (id)) x compatibilityVersion
  let filterWithName2 x ~keysAndValues self = msg_send ~self ~cmd:(selector "filterWithName:keysAndValues:") ~typ:(id @-> id @-> returning (id)) x keysAndValues
  let filterWithName3 x ~setDefaults self = msg_send ~self ~cmd:(selector "filterWithName:setDefaults:") ~typ:(id @-> bool @-> returning (id)) x setDefaults
  let filterWithName4 x ~withInputParameters self = msg_send ~self ~cmd:(selector "filterWithName:withInputParameters:") ~typ:(id @-> id @-> returning (id)) x withInputParameters
  let filterWithName5 x ~compatibilityVersion ~keysAndValues self = msg_send ~self ~cmd:(selector "filterWithName:compatibilityVersion:keysAndValues:") ~typ:(id @-> int @-> id @-> returning (id)) x compatibilityVersion keysAndValues
  let filterWithString x self = msg_send ~self ~cmd:(selector "filterWithString:") ~typ:(id @-> returning (id)) x
  let flashTransitionFilter self = msg_send ~self ~cmd:(selector "flashTransitionFilter") ~typ:(returning (id))
  let fourfoldReflectedTileFilter self = msg_send ~self ~cmd:(selector "fourfoldReflectedTileFilter") ~typ:(returning (id))
  let fourfoldRotatedTileFilter self = msg_send ~self ~cmd:(selector "fourfoldRotatedTileFilter") ~typ:(returning (id))
  let fourfoldTranslatedTileFilter self = msg_send ~self ~cmd:(selector "fourfoldTranslatedTileFilter") ~typ:(returning (id))
  let gaborGradientsFilter self = msg_send ~self ~cmd:(selector "gaborGradientsFilter") ~typ:(returning (id))
  let gammaAdjustFilter self = msg_send ~self ~cmd:(selector "gammaAdjustFilter") ~typ:(returning (id))
  let gaussianBlurFilter self = msg_send ~self ~cmd:(selector "gaussianBlurFilter") ~typ:(returning (id))
  let gaussianGradientFilter self = msg_send ~self ~cmd:(selector "gaussianGradientFilter") ~typ:(returning (id))
  let getMinMaxSimulatedApertureFrom x ~minValue ~maxValue ~version self = msg_send ~self ~cmd:(selector "getMinMaxSimulatedApertureFrom:minValue:maxValue:version:") ~typ:(ptr void @-> ptr (float) @-> ptr (float) @-> ptr (int) @-> returning (int)) x minValue maxValue version
  let glassDistortionFilter self = msg_send ~self ~cmd:(selector "glassDistortionFilter") ~typ:(returning (id))
  let glassLozengeFilter self = msg_send ~self ~cmd:(selector "glassLozengeFilter") ~typ:(returning (id))
  let glideReflectedTileFilter self = msg_send ~self ~cmd:(selector "glideReflectedTileFilter") ~typ:(returning (id))
  let gloomFilter self = msg_send ~self ~cmd:(selector "gloomFilter") ~typ:(returning (id))
  let hardLightBlendModeFilter self = msg_send ~self ~cmd:(selector "hardLightBlendModeFilter") ~typ:(returning (id))
  let hatchedScreenFilter self = msg_send ~self ~cmd:(selector "hatchedScreenFilter") ~typ:(returning (id))
  let heightFieldFromMaskFilter self = msg_send ~self ~cmd:(selector "heightFieldFromMaskFilter") ~typ:(returning (id))
  let hexagonalPixellateFilter self = msg_send ~self ~cmd:(selector "hexagonalPixellateFilter") ~typ:(returning (id))
  let highlightShadowAdjustFilter self = msg_send ~self ~cmd:(selector "highlightShadowAdjustFilter") ~typ:(returning (id))
  let histogramDisplayFilter self = msg_send ~self ~cmd:(selector "histogramDisplayFilter") ~typ:(returning (id))
  let holeDistortionFilter self = msg_send ~self ~cmd:(selector "holeDistortionFilter") ~typ:(returning (id))
  let hueAdjustFilter self = msg_send ~self ~cmd:(selector "hueAdjustFilter") ~typ:(returning (id))
  let hueBlendModeFilter self = msg_send ~self ~cmd:(selector "hueBlendModeFilter") ~typ:(returning (id))
  let hueSaturationValueGradientFilter self = msg_send ~self ~cmd:(selector "hueSaturationValueGradientFilter") ~typ:(returning (id))
  let indexForWrapperNumber x self = msg_send ~self ~cmd:(selector "indexForWrapperNumber:") ~typ:(uint @-> returning (uint)) x
  let kaleidoscopeFilter self = msg_send ~self ~cmd:(selector "kaleidoscopeFilter") ~typ:(returning (id))
  let keyPathsForValuesAffectingValueForKey x self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingValueForKey:") ~typ:(id @-> returning (id)) x
  let keystoneCorrectionCombinedFilter self = msg_send ~self ~cmd:(selector "keystoneCorrectionCombinedFilter") ~typ:(returning (id))
  let keystoneCorrectionHorizontalFilter self = msg_send ~self ~cmd:(selector "keystoneCorrectionHorizontalFilter") ~typ:(returning (id))
  let keystoneCorrectionVerticalFilter self = msg_send ~self ~cmd:(selector "keystoneCorrectionVerticalFilter") ~typ:(returning (id))
  let lanczosScaleTransformFilter self = msg_send ~self ~cmd:(selector "lanczosScaleTransformFilter") ~typ:(returning (id))
  let lenticularHaloGeneratorFilter self = msg_send ~self ~cmd:(selector "lenticularHaloGeneratorFilter") ~typ:(returning (id))
  let lightTunnelFilter self = msg_send ~self ~cmd:(selector "lightTunnelFilter") ~typ:(returning (id))
  let lightenBlendModeFilter self = msg_send ~self ~cmd:(selector "lightenBlendModeFilter") ~typ:(returning (id))
  let lineOverlayFilter self = msg_send ~self ~cmd:(selector "lineOverlayFilter") ~typ:(returning (id))
  let lineScreenFilter self = msg_send ~self ~cmd:(selector "lineScreenFilter") ~typ:(returning (id))
  let linearBurnBlendModeFilter self = msg_send ~self ~cmd:(selector "linearBurnBlendModeFilter") ~typ:(returning (id))
  let linearDodgeBlendModeFilter self = msg_send ~self ~cmd:(selector "linearDodgeBlendModeFilter") ~typ:(returning (id))
  let linearGradientFilter self = msg_send ~self ~cmd:(selector "linearGradientFilter") ~typ:(returning (id))
  let linearLightBlendModeFilter self = msg_send ~self ~cmd:(selector "linearLightBlendModeFilter") ~typ:(returning (id))
  let linearToSRGBToneCurveFilter self = msg_send ~self ~cmd:(selector "linearToSRGBToneCurveFilter") ~typ:(returning (id))
  let localizedDescriptionForFilterName x self = msg_send ~self ~cmd:(selector "localizedDescriptionForFilterName:") ~typ:(id @-> returning (id)) x
  let localizedNameForCategory x self = msg_send ~self ~cmd:(selector "localizedNameForCategory:") ~typ:(id @-> returning (id)) x
  let localizedNameForFilterName x self = msg_send ~self ~cmd:(selector "localizedNameForFilterName:") ~typ:(id @-> returning (id)) x
  let localizedReferenceDocumentationForFilterName x self = msg_send ~self ~cmd:(selector "localizedReferenceDocumentationForFilterName:") ~typ:(id @-> returning (id)) x
  let luminosityBlendModeFilter self = msg_send ~self ~cmd:(selector "luminosityBlendModeFilter") ~typ:(returning (id))
  let maskToAlphaFilter self = msg_send ~self ~cmd:(selector "maskToAlphaFilter") ~typ:(returning (id))
  let maskedVariableBlurFilter self = msg_send ~self ~cmd:(selector "maskedVariableBlurFilter") ~typ:(returning (id))
  let maxSDOFRenderingVersionSupported self = msg_send ~self ~cmd:(selector "maxSDOFRenderingVersionSupported") ~typ:(returning (int))
  let maximumComponentFilter self = msg_send ~self ~cmd:(selector "maximumComponentFilter") ~typ:(returning (id))
  let maximumCompositingFilter self = msg_send ~self ~cmd:(selector "maximumCompositingFilter") ~typ:(returning (id))
  let medianFilter self = msg_send ~self ~cmd:(selector "medianFilter") ~typ:(returning (id))
  let meshGeneratorFilter self = msg_send ~self ~cmd:(selector "meshGeneratorFilter") ~typ:(returning (id))
  let metalFilterWithName x self = msg_send ~self ~cmd:(selector "metalFilterWithName:") ~typ:(id @-> returning (id)) x
  let metalFilterWithName' x ~withInputParameters self = msg_send ~self ~cmd:(selector "metalFilterWithName:withInputParameters:") ~typ:(id @-> id @-> returning (id)) x withInputParameters
  let minSDOFRenderingVersionSupported self = msg_send ~self ~cmd:(selector "minSDOFRenderingVersionSupported") ~typ:(returning (int))
  let minimumComponentFilter self = msg_send ~self ~cmd:(selector "minimumComponentFilter") ~typ:(returning (id))
  let minimumCompositingFilter self = msg_send ~self ~cmd:(selector "minimumCompositingFilter") ~typ:(returning (id))
  let mixFilter self = msg_send ~self ~cmd:(selector "mixFilter") ~typ:(returning (id))
  let modTransitionFilter self = msg_send ~self ~cmd:(selector "modTransitionFilter") ~typ:(returning (id))
  let morphologyGradientFilter self = msg_send ~self ~cmd:(selector "morphologyGradientFilter") ~typ:(returning (id))
  let morphologyMaximumFilter self = msg_send ~self ~cmd:(selector "morphologyMaximumFilter") ~typ:(returning (id))
  let morphologyMinimumFilter self = msg_send ~self ~cmd:(selector "morphologyMinimumFilter") ~typ:(returning (id))
  let morphologyRectangleMaximumFilter self = msg_send ~self ~cmd:(selector "morphologyRectangleMaximumFilter") ~typ:(returning (id))
  let morphologyRectangleMinimumFilter self = msg_send ~self ~cmd:(selector "morphologyRectangleMinimumFilter") ~typ:(returning (id))
  let motionBlurFilter self = msg_send ~self ~cmd:(selector "motionBlurFilter") ~typ:(returning (id))
  let multiplyBlendModeFilter self = msg_send ~self ~cmd:(selector "multiplyBlendModeFilter") ~typ:(returning (id))
  let multiplyCompositingFilter self = msg_send ~self ~cmd:(selector "multiplyCompositingFilter") ~typ:(returning (id))
  let ninePartStretchedFilter self = msg_send ~self ~cmd:(selector "ninePartStretchedFilter") ~typ:(returning (id))
  let ninePartTiledFilter self = msg_send ~self ~cmd:(selector "ninePartTiledFilter") ~typ:(returning (id))
  let noiseReductionFilter self = msg_send ~self ~cmd:(selector "noiseReductionFilter") ~typ:(returning (id))
  let opTileFilter self = msg_send ~self ~cmd:(selector "opTileFilter") ~typ:(returning (id))
  let overlayBlendModeFilter self = msg_send ~self ~cmd:(selector "overlayBlendModeFilter") ~typ:(returning (id))
  let pageCurlTransitionFilter self = msg_send ~self ~cmd:(selector "pageCurlTransitionFilter") ~typ:(returning (id))
  let pageCurlWithShadowTransitionFilter self = msg_send ~self ~cmd:(selector "pageCurlWithShadowTransitionFilter") ~typ:(returning (id))
  let paletteCentroidFilter self = msg_send ~self ~cmd:(selector "paletteCentroidFilter") ~typ:(returning (id))
  let palettizeFilter self = msg_send ~self ~cmd:(selector "palettizeFilter") ~typ:(returning (id))
  let parallelogramTileFilter self = msg_send ~self ~cmd:(selector "parallelogramTileFilter") ~typ:(returning (id))
  let personSegmentationFilter self = msg_send ~self ~cmd:(selector "personSegmentationFilter") ~typ:(returning (id))
  let perspectiveCorrectionFilter self = msg_send ~self ~cmd:(selector "perspectiveCorrectionFilter") ~typ:(returning (id))
  let perspectiveRotateFilter self = msg_send ~self ~cmd:(selector "perspectiveRotateFilter") ~typ:(returning (id))
  let perspectiveTileFilter self = msg_send ~self ~cmd:(selector "perspectiveTileFilter") ~typ:(returning (id))
  let perspectiveTransformFilter self = msg_send ~self ~cmd:(selector "perspectiveTransformFilter") ~typ:(returning (id))
  let perspectiveTransformWithExtentFilter self = msg_send ~self ~cmd:(selector "perspectiveTransformWithExtentFilter") ~typ:(returning (id))
  let photoEffectChromeFilter self = msg_send ~self ~cmd:(selector "photoEffectChromeFilter") ~typ:(returning (id))
  let photoEffectFadeFilter self = msg_send ~self ~cmd:(selector "photoEffectFadeFilter") ~typ:(returning (id))
  let photoEffectInstantFilter self = msg_send ~self ~cmd:(selector "photoEffectInstantFilter") ~typ:(returning (id))
  let photoEffectMonoFilter self = msg_send ~self ~cmd:(selector "photoEffectMonoFilter") ~typ:(returning (id))
  let photoEffectNoirFilter self = msg_send ~self ~cmd:(selector "photoEffectNoirFilter") ~typ:(returning (id))
  let photoEffectProcessFilter self = msg_send ~self ~cmd:(selector "photoEffectProcessFilter") ~typ:(returning (id))
  let photoEffectTonalFilter self = msg_send ~self ~cmd:(selector "photoEffectTonalFilter") ~typ:(returning (id))
  let photoEffectTransferFilter self = msg_send ~self ~cmd:(selector "photoEffectTransferFilter") ~typ:(returning (id))
  let pinLightBlendModeFilter self = msg_send ~self ~cmd:(selector "pinLightBlendModeFilter") ~typ:(returning (id))
  let pinchDistortionFilter self = msg_send ~self ~cmd:(selector "pinchDistortionFilter") ~typ:(returning (id))
  let pixellateFilter self = msg_send ~self ~cmd:(selector "pixellateFilter") ~typ:(returning (id))
  let pointillizeFilter self = msg_send ~self ~cmd:(selector "pointillizeFilter") ~typ:(returning (id))
  let prewarmedFilterFromString x self = msg_send ~self ~cmd:(selector "prewarmedFilterFromString:") ~typ:(id @-> returning (id)) x
  let radialGradientFilter self = msg_send ~self ~cmd:(selector "radialGradientFilter") ~typ:(returning (id))
  let randomGeneratorFilter self = msg_send ~self ~cmd:(selector "randomGeneratorFilter") ~typ:(returning (id))
  let registerFilterName x ~constructor ~classAttributes self = msg_send ~self ~cmd:(selector "registerFilterName:constructor:classAttributes:") ~typ:(id @-> id @-> id @-> returning (void)) x constructor classAttributes
  let rippleTransitionFilter self = msg_send ~self ~cmd:(selector "rippleTransitionFilter") ~typ:(returning (id))
  let roundedRectangleGeneratorFilter self = msg_send ~self ~cmd:(selector "roundedRectangleGeneratorFilter") ~typ:(returning (id))
  let roundedRectangleStrokeGeneratorFilter self = msg_send ~self ~cmd:(selector "roundedRectangleStrokeGeneratorFilter") ~typ:(returning (id))
  let rowAverageFilter self = msg_send ~self ~cmd:(selector "rowAverageFilter") ~typ:(returning (id))
  let sRGBToneCurveToLinearFilter self = msg_send ~self ~cmd:(selector "sRGBToneCurveToLinearFilter") ~typ:(returning (id))
  let saliencyMapFilter self = msg_send ~self ~cmd:(selector "saliencyMapFilter") ~typ:(returning (id))
  let saturationBlendModeFilter self = msg_send ~self ~cmd:(selector "saturationBlendModeFilter") ~typ:(returning (id))
  let screenBlendModeFilter self = msg_send ~self ~cmd:(selector "screenBlendModeFilter") ~typ:(returning (id))
  let sepiaToneFilter self = msg_send ~self ~cmd:(selector "sepiaToneFilter") ~typ:(returning (id))
  let serializedXMPFromFilters x ~inputImageExtent self = msg_send ~self ~cmd:(selector "serializedXMPFromFilters:inputImageExtent:") ~typ:(id @-> CGRect.t @-> returning (id)) x inputImageExtent
  let shadedMaterialFilter self = msg_send ~self ~cmd:(selector "shadedMaterialFilter") ~typ:(returning (id))
  let sharpenLuminanceFilter self = msg_send ~self ~cmd:(selector "sharpenLuminanceFilter") ~typ:(returning (id))
  let sixfoldReflectedTileFilter self = msg_send ~self ~cmd:(selector "sixfoldReflectedTileFilter") ~typ:(returning (id))
  let sixfoldRotatedTileFilter self = msg_send ~self ~cmd:(selector "sixfoldRotatedTileFilter") ~typ:(returning (id))
  let smoothLinearGradientFilter self = msg_send ~self ~cmd:(selector "smoothLinearGradientFilter") ~typ:(returning (id))
  let sobelGradientsFilter self = msg_send ~self ~cmd:(selector "sobelGradientsFilter") ~typ:(returning (id))
  let softLightBlendModeFilter self = msg_send ~self ~cmd:(selector "softLightBlendModeFilter") ~typ:(returning (id))
  let sourceAtopCompositingFilter self = msg_send ~self ~cmd:(selector "sourceAtopCompositingFilter") ~typ:(returning (id))
  let sourceInCompositingFilter self = msg_send ~self ~cmd:(selector "sourceInCompositingFilter") ~typ:(returning (id))
  let sourceOutCompositingFilter self = msg_send ~self ~cmd:(selector "sourceOutCompositingFilter") ~typ:(returning (id))
  let sourceOverCompositingFilter self = msg_send ~self ~cmd:(selector "sourceOverCompositingFilter") ~typ:(returning (id))
  let spotColorFilter self = msg_send ~self ~cmd:(selector "spotColorFilter") ~typ:(returning (id))
  let spotLightFilter self = msg_send ~self ~cmd:(selector "spotLightFilter") ~typ:(returning (id))
  let starShineGeneratorFilter self = msg_send ~self ~cmd:(selector "starShineGeneratorFilter") ~typ:(returning (id))
  let straightenFilter self = msg_send ~self ~cmd:(selector "straightenFilter") ~typ:(returning (id))
  let stretchCropFilter self = msg_send ~self ~cmd:(selector "stretchCropFilter") ~typ:(returning (id))
  let stripesGeneratorFilter self = msg_send ~self ~cmd:(selector "stripesGeneratorFilter") ~typ:(returning (id))
  let subtractBlendModeFilter self = msg_send ~self ~cmd:(selector "subtractBlendModeFilter") ~typ:(returning (id))
  let sunbeamsGeneratorFilter self = msg_send ~self ~cmd:(selector "sunbeamsGeneratorFilter") ~typ:(returning (id))
  let supportedRawCameraModels self = msg_send ~self ~cmd:(selector "supportedRawCameraModels") ~typ:(returning (id))
  let supportsSecureCoding self = msg_send ~self ~cmd:(selector "supportsSecureCoding") ~typ:(returning (bool))
  let swipeTransitionFilter self = msg_send ~self ~cmd:(selector "swipeTransitionFilter") ~typ:(returning (id))
  let temperatureAndTintFilter self = msg_send ~self ~cmd:(selector "temperatureAndTintFilter") ~typ:(returning (id))
  let textImageGeneratorFilter self = msg_send ~self ~cmd:(selector "textImageGeneratorFilter") ~typ:(returning (id))
  let thermalFilter self = msg_send ~self ~cmd:(selector "thermalFilter") ~typ:(returning (id))
  let toneCurveFilter self = msg_send ~self ~cmd:(selector "toneCurveFilter") ~typ:(returning (id))
  let torusLensDistortionFilter self = msg_send ~self ~cmd:(selector "torusLensDistortionFilter") ~typ:(returning (id))
  let triangleKaleidoscopeFilter self = msg_send ~self ~cmd:(selector "triangleKaleidoscopeFilter") ~typ:(returning (id))
  let triangleTileFilter self = msg_send ~self ~cmd:(selector "triangleTileFilter") ~typ:(returning (id))
  let twelvefoldReflectedTileFilter self = msg_send ~self ~cmd:(selector "twelvefoldReflectedTileFilter") ~typ:(returning (id))
  let twirlDistortionFilter self = msg_send ~self ~cmd:(selector "twirlDistortionFilter") ~typ:(returning (id))
  let unregisterFilterName x self = msg_send ~self ~cmd:(selector "unregisterFilterName:") ~typ:(id @-> returning (void)) x
  let unsharpMaskFilter self = msg_send ~self ~cmd:(selector "unsharpMaskFilter") ~typ:(returning (id))
  let vibranceFilter self = msg_send ~self ~cmd:(selector "vibranceFilter") ~typ:(returning (id))
  let vignetteEffectFilter self = msg_send ~self ~cmd:(selector "vignetteEffectFilter") ~typ:(returning (id))
  let vignetteFilter self = msg_send ~self ~cmd:(selector "vignetteFilter") ~typ:(returning (id))
  let vividLightBlendModeFilter self = msg_send ~self ~cmd:(selector "vividLightBlendModeFilter") ~typ:(returning (id))
  let vortexDistortionFilter self = msg_send ~self ~cmd:(selector "vortexDistortionFilter") ~typ:(returning (id))
  let whitePointAdjustFilter self = msg_send ~self ~cmd:(selector "whitePointAdjustFilter") ~typ:(returning (id))
  let wrapClassIfNeeded x self = msg_send ~self ~cmd:(selector "wrapClassIfNeeded:") ~typ:(_Class @-> returning (bool)) x
  let xRayFilter self = msg_send ~self ~cmd:(selector "xRayFilter") ~typ:(returning (id))
  let zoomBlurFilter self = msg_send ~self ~cmd:(selector "zoomBlurFilter") ~typ:(returning (id))
end

let _CAMLParser x ~setValue ~forKey self = msg_send ~self ~cmd:(selector "CAMLParser:setValue:forKey:") ~typ:(id @-> id @-> id @-> returning (void)) x setValue forKey
let _CAMLType self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning (id))
let _CAMLTypeForKey x self = msg_send ~self ~cmd:(selector "CAMLTypeForKey:") ~typ:(id @-> returning (id)) x
let apply x self = msg_send ~self ~cmd:(selector "apply:") ~typ:(id @-> returning (id)) x
let apply1 x ~arguments ~options self = msg_send ~self ~cmd:(selector "apply:arguments:options:") ~typ:(id @-> id @-> id @-> returning (id)) x arguments options
let apply2 x ~image ~arguments ~inSpace self = msg_send ~self ~cmd:(selector "apply:image:arguments:inSpace:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (id)) x image arguments inSpace
let apply3 x ~image ~arguments ~inoutSpace self = msg_send ~self ~cmd:(selector "apply:image:arguments:inoutSpace:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (id)) x image arguments inoutSpace
let attributes self = msg_send ~self ~cmd:(selector "attributes") ~typ:(returning (id))
let compatibilityVersion self = msg_send ~self ~cmd:(selector "compatibilityVersion") ~typ:(returning (int))
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x
let customAttributes self = msg_send ~self ~cmd:(selector "customAttributes") ~typ:(returning (id))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let debugDescription self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning (id))
let debugQuickLookObject self = msg_send ~self ~cmd:(selector "debugQuickLookObject") ~typ:(returning (id))
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let enabled self = msg_send ~self ~cmd:(selector "enabled") ~typ:(returning (bool))
let encodeWithCAMLWriter x self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning (void)) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong))
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let inputKeys self = msg_send ~self ~cmd:(selector "inputKeys") ~typ:(returning (id))
let isEnabled self = msg_send ~self ~cmd:(selector "isEnabled") ~typ:(returning (bool))
let mutableCopyWithZone x self = msg_send ~self ~cmd:(selector "mutableCopyWithZone:") ~typ:(id @-> returning (id)) x
let name self = msg_send ~self ~cmd:(selector "name") ~typ:(returning (id))
let outputImage self = msg_send ~self ~cmd:(selector "outputImage") ~typ:(returning (id))
let outputImageCatchAll x self = msg_send ~self ~cmd:(selector "outputImageCatchAll:") ~typ:(uint @-> returning (id)) x
let outputKeys self = msg_send ~self ~cmd:(selector "outputKeys") ~typ:(returning (id))
let prewarmingString self = msg_send ~self ~cmd:(selector "prewarmingString") ~typ:(returning (id))
let setDefaults self = msg_send ~self ~cmd:(selector "setDefaults") ~typ:(returning (void))
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning (void)) x
let setIdentity self = msg_send ~self ~cmd:(selector "setIdentity") ~typ:(returning (void))
let setName x self = msg_send ~self ~cmd:(selector "setName:") ~typ:(id @-> returning (void)) x
let setOption x ~forKey self = msg_send ~self ~cmd:(selector "setOption:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let setUserInfo x self = msg_send ~self ~cmd:(selector "setUserInfo:") ~typ:(id @-> returning (void)) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let setValue' x ~forUndefinedKey self = msg_send ~self ~cmd:(selector "setValue:forUndefinedKey:") ~typ:(id @-> id @-> returning (void)) x forUndefinedKey
let userInfo self = msg_send ~self ~cmd:(selector "userInfo") ~typ:(returning (id))
let valueForUndefinedKey x self = msg_send ~self ~cmd:(selector "valueForUndefinedKey:") ~typ:(id @-> returning (id)) x
let verifyPrewarmedFilter x self = msg_send ~self ~cmd:(selector "verifyPrewarmedFilter:") ~typ:(id @-> returning (bool)) x
let wrappedOutputImage10 self = msg_send ~self ~cmd:(selector "wrappedOutputImage10") ~typ:(returning (id))
let wrappedOutputImage11 self = msg_send ~self ~cmd:(selector "wrappedOutputImage11") ~typ:(returning (id))
let wrappedOutputImage12 self = msg_send ~self ~cmd:(selector "wrappedOutputImage12") ~typ:(returning (id))
let wrappedOutputImage13 self = msg_send ~self ~cmd:(selector "wrappedOutputImage13") ~typ:(returning (id))
let wrappedOutputImage14 self = msg_send ~self ~cmd:(selector "wrappedOutputImage14") ~typ:(returning (id))
let wrappedOutputImage15 self = msg_send ~self ~cmd:(selector "wrappedOutputImage15") ~typ:(returning (id))
let wrappedOutputImage16 self = msg_send ~self ~cmd:(selector "wrappedOutputImage16") ~typ:(returning (id))
let wrappedOutputImage17 self = msg_send ~self ~cmd:(selector "wrappedOutputImage17") ~typ:(returning (id))
let wrappedOutputImage18 self = msg_send ~self ~cmd:(selector "wrappedOutputImage18") ~typ:(returning (id))
let wrappedOutputImage19 self = msg_send ~self ~cmd:(selector "wrappedOutputImage19") ~typ:(returning (id))
let wrappedOutputImage20 self = msg_send ~self ~cmd:(selector "wrappedOutputImage20") ~typ:(returning (id))
let wrappedOutputImage21 self = msg_send ~self ~cmd:(selector "wrappedOutputImage21") ~typ:(returning (id))
let wrappedOutputImage22 self = msg_send ~self ~cmd:(selector "wrappedOutputImage22") ~typ:(returning (id))
let wrappedOutputImage23 self = msg_send ~self ~cmd:(selector "wrappedOutputImage23") ~typ:(returning (id))
let wrappedOutputImage24 self = msg_send ~self ~cmd:(selector "wrappedOutputImage24") ~typ:(returning (id))
let wrappedOutputImage25 self = msg_send ~self ~cmd:(selector "wrappedOutputImage25") ~typ:(returning (id))
let wrappedOutputImage26 self = msg_send ~self ~cmd:(selector "wrappedOutputImage26") ~typ:(returning (id))
let wrappedOutputImage27 self = msg_send ~self ~cmd:(selector "wrappedOutputImage27") ~typ:(returning (id))
let wrappedOutputImage28 self = msg_send ~self ~cmd:(selector "wrappedOutputImage28") ~typ:(returning (id))
let wrappedOutputImage29 self = msg_send ~self ~cmd:(selector "wrappedOutputImage29") ~typ:(returning (id))
let wrappedOutputImage30 self = msg_send ~self ~cmd:(selector "wrappedOutputImage30") ~typ:(returning (id))
let wrappedOutputImage31 self = msg_send ~self ~cmd:(selector "wrappedOutputImage31") ~typ:(returning (id))
let wrappedOutputImage32 self = msg_send ~self ~cmd:(selector "wrappedOutputImage32") ~typ:(returning (id))
let wrappedOutputImage33 self = msg_send ~self ~cmd:(selector "wrappedOutputImage33") ~typ:(returning (id))
let wrappedOutputImage34 self = msg_send ~self ~cmd:(selector "wrappedOutputImage34") ~typ:(returning (id))
let wrappedOutputImage35 self = msg_send ~self ~cmd:(selector "wrappedOutputImage35") ~typ:(returning (id))
let wrappedOutputImage36 self = msg_send ~self ~cmd:(selector "wrappedOutputImage36") ~typ:(returning (id))
let wrappedOutputImage37 self = msg_send ~self ~cmd:(selector "wrappedOutputImage37") ~typ:(returning (id))
let wrappedOutputImage38 self = msg_send ~self ~cmd:(selector "wrappedOutputImage38") ~typ:(returning (id))
let wrappedOutputImage39 self = msg_send ~self ~cmd:(selector "wrappedOutputImage39") ~typ:(returning (id))
let wrappedOutputImage40 self = msg_send ~self ~cmd:(selector "wrappedOutputImage40") ~typ:(returning (id))
let wrappedOutputImage41 self = msg_send ~self ~cmd:(selector "wrappedOutputImage41") ~typ:(returning (id))
let wrappedOutputImage42 self = msg_send ~self ~cmd:(selector "wrappedOutputImage42") ~typ:(returning (id))
let wrappedOutputImage43 self = msg_send ~self ~cmd:(selector "wrappedOutputImage43") ~typ:(returning (id))
let wrappedOutputImage44 self = msg_send ~self ~cmd:(selector "wrappedOutputImage44") ~typ:(returning (id))
let wrappedOutputImage45 self = msg_send ~self ~cmd:(selector "wrappedOutputImage45") ~typ:(returning (id))
let wrappedOutputImage46 self = msg_send ~self ~cmd:(selector "wrappedOutputImage46") ~typ:(returning (id))
let wrappedOutputImage47 self = msg_send ~self ~cmd:(selector "wrappedOutputImage47") ~typ:(returning (id))
let wrappedOutputImage48 self = msg_send ~self ~cmd:(selector "wrappedOutputImage48") ~typ:(returning (id))
let wrappedOutputImage49 self = msg_send ~self ~cmd:(selector "wrappedOutputImage49") ~typ:(returning (id))
let wrappedOutputImage50 self = msg_send ~self ~cmd:(selector "wrappedOutputImage50") ~typ:(returning (id))
let wrappedOutputImage51 self = msg_send ~self ~cmd:(selector "wrappedOutputImage51") ~typ:(returning (id))
let wrappedOutputImage52 self = msg_send ~self ~cmd:(selector "wrappedOutputImage52") ~typ:(returning (id))
let wrappedOutputImage53 self = msg_send ~self ~cmd:(selector "wrappedOutputImage53") ~typ:(returning (id))
let wrappedOutputImage54 self = msg_send ~self ~cmd:(selector "wrappedOutputImage54") ~typ:(returning (id))
let wrappedOutputImage55 self = msg_send ~self ~cmd:(selector "wrappedOutputImage55") ~typ:(returning (id))
let wrappedOutputImage56 self = msg_send ~self ~cmd:(selector "wrappedOutputImage56") ~typ:(returning (id))
let wrappedOutputImage57 self = msg_send ~self ~cmd:(selector "wrappedOutputImage57") ~typ:(returning (id))
let wrappedOutputImage58 self = msg_send ~self ~cmd:(selector "wrappedOutputImage58") ~typ:(returning (id))
let wrappedOutputImage59 self = msg_send ~self ~cmd:(selector "wrappedOutputImage59") ~typ:(returning (id))
let wrappedOutputImage60 self = msg_send ~self ~cmd:(selector "wrappedOutputImage60") ~typ:(returning (id))
let wrappedOutputImage61 self = msg_send ~self ~cmd:(selector "wrappedOutputImage61") ~typ:(returning (id))
let wrappedOutputImage62 self = msg_send ~self ~cmd:(selector "wrappedOutputImage62") ~typ:(returning (id))
let wrappedOutputImage63 self = msg_send ~self ~cmd:(selector "wrappedOutputImage63") ~typ:(returning (id))
let wrappedOutputImage64 self = msg_send ~self ~cmd:(selector "wrappedOutputImage64") ~typ:(returning (id))
let wrappedOutputImage65 self = msg_send ~self ~cmd:(selector "wrappedOutputImage65") ~typ:(returning (id))
let wrappedOutputImage66 self = msg_send ~self ~cmd:(selector "wrappedOutputImage66") ~typ:(returning (id))
let wrappedOutputImage67 self = msg_send ~self ~cmd:(selector "wrappedOutputImage67") ~typ:(returning (id))
let wrappedOutputImage68 self = msg_send ~self ~cmd:(selector "wrappedOutputImage68") ~typ:(returning (id))
let wrappedOutputImage69 self = msg_send ~self ~cmd:(selector "wrappedOutputImage69") ~typ:(returning (id))
let wrappedOutputImage70 self = msg_send ~self ~cmd:(selector "wrappedOutputImage70") ~typ:(returning (id))
let wrappedOutputImage71 self = msg_send ~self ~cmd:(selector "wrappedOutputImage71") ~typ:(returning (id))
let wrappedOutputImage72 self = msg_send ~self ~cmd:(selector "wrappedOutputImage72") ~typ:(returning (id))
let wrappedOutputImage73 self = msg_send ~self ~cmd:(selector "wrappedOutputImage73") ~typ:(returning (id))
let wrappedOutputImage74 self = msg_send ~self ~cmd:(selector "wrappedOutputImage74") ~typ:(returning (id))
let wrappedOutputImage75 self = msg_send ~self ~cmd:(selector "wrappedOutputImage75") ~typ:(returning (id))
let wrappedOutputImage76 self = msg_send ~self ~cmd:(selector "wrappedOutputImage76") ~typ:(returning (id))
let wrappedOutputImage77 self = msg_send ~self ~cmd:(selector "wrappedOutputImage77") ~typ:(returning (id))
let wrappedOutputImage78 self = msg_send ~self ~cmd:(selector "wrappedOutputImage78") ~typ:(returning (id))
let wrappedOutputImage79 self = msg_send ~self ~cmd:(selector "wrappedOutputImage79") ~typ:(returning (id))
let wrappedOutputImage80 self = msg_send ~self ~cmd:(selector "wrappedOutputImage80") ~typ:(returning (id))
let wrappedOutputImage81 self = msg_send ~self ~cmd:(selector "wrappedOutputImage81") ~typ:(returning (id))
let wrappedOutputImage82 self = msg_send ~self ~cmd:(selector "wrappedOutputImage82") ~typ:(returning (id))
let wrappedOutputImage83 self = msg_send ~self ~cmd:(selector "wrappedOutputImage83") ~typ:(returning (id))
let wrappedOutputImage84 self = msg_send ~self ~cmd:(selector "wrappedOutputImage84") ~typ:(returning (id))
let wrappedOutputImage85 self = msg_send ~self ~cmd:(selector "wrappedOutputImage85") ~typ:(returning (id))
let wrappedOutputImage86 self = msg_send ~self ~cmd:(selector "wrappedOutputImage86") ~typ:(returning (id))
let wrappedOutputImage87 self = msg_send ~self ~cmd:(selector "wrappedOutputImage87") ~typ:(returning (id))
let wrappedOutputImage88 self = msg_send ~self ~cmd:(selector "wrappedOutputImage88") ~typ:(returning (id))
let wrappedOutputImage89 self = msg_send ~self ~cmd:(selector "wrappedOutputImage89") ~typ:(returning (id))
let wrappedOutputImage90 self = msg_send ~self ~cmd:(selector "wrappedOutputImage90") ~typ:(returning (id))
let wrappedOutputImage91 self = msg_send ~self ~cmd:(selector "wrappedOutputImage91") ~typ:(returning (id))
let wrappedOutputImage92 self = msg_send ~self ~cmd:(selector "wrappedOutputImage92") ~typ:(returning (id))
let wrappedOutputImage93 self = msg_send ~self ~cmd:(selector "wrappedOutputImage93") ~typ:(returning (id))
let wrappedOutputImage94 self = msg_send ~self ~cmd:(selector "wrappedOutputImage94") ~typ:(returning (id))
let wrappedOutputImage95 self = msg_send ~self ~cmd:(selector "wrappedOutputImage95") ~typ:(returning (id))
let wrappedOutputImage96 self = msg_send ~self ~cmd:(selector "wrappedOutputImage96") ~typ:(returning (id))
let wrappedOutputImage97 self = msg_send ~self ~cmd:(selector "wrappedOutputImage97") ~typ:(returning (id))
let wrappedOutputImage98 self = msg_send ~self ~cmd:(selector "wrappedOutputImage98") ~typ:(returning (id))
let wrappedOutputImage99 self = msg_send ~self ~cmd:(selector "wrappedOutputImage99") ~typ:(returning (id))