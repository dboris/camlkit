(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "CIImage"

module C = struct
  let blackImage self = msg_send ~self ~cmd:(selector "blackImage") ~typ:(returning (id))
  let blueImage self = msg_send ~self ~cmd:(selector "blueImage") ~typ:(returning (id))
  let clearImage self = msg_send ~self ~cmd:(selector "clearImage") ~typ:(returning (id))
  let clearImage' x self = msg_send ~self ~cmd:(selector "clearImage:") ~typ:(CGRect.t @-> returning (id)) x
  let cyanImage self = msg_send ~self ~cmd:(selector "cyanImage") ~typ:(returning (id))
  let emptyImage self = msg_send ~self ~cmd:(selector "emptyImage") ~typ:(returning (id))
  let grayImage self = msg_send ~self ~cmd:(selector "grayImage") ~typ:(returning (id))
  let greenImage self = msg_send ~self ~cmd:(selector "greenImage") ~typ:(returning (id))
  let imageForRenderingWithMPS x ~orNonMPS self = msg_send ~self ~cmd:(selector "imageForRenderingWithMPS:orNonMPS:") ~typ:(id @-> id @-> returning (id)) x orNonMPS
  let imageForRenderingWithMetal x ~orNonMetal self = msg_send ~self ~cmd:(selector "imageForRenderingWithMetal:orNonMetal:") ~typ:(id @-> id @-> returning (id)) x orNonMetal
  let imageForRenderingWithMetalContext x ~orOpenGLContextUsingMetal ~orNonMetalContext self = msg_send ~self ~cmd:(selector "imageForRenderingWithMetalContext:orOpenGLContextUsingMetal:orNonMetalContext:") ~typ:(id @-> id @-> id @-> returning (id)) x orOpenGLContextUsingMetal orNonMetalContext
  let imageWithArrayOfImages x ~selector_ self = msg_send ~self ~cmd:(selector "imageWithArrayOfImages:selector:") ~typ:(id @-> ptr void @-> returning (id)) x selector_
  let imageWithAttributedString x ~format self = msg_send ~self ~cmd:(selector "imageWithAttributedString:format:") ~typ:(id @-> int @-> returning (id)) x format
  let imageWithAttributedString' x ~format ~options self = msg_send ~self ~cmd:(selector "imageWithAttributedString:format:options:") ~typ:(id @-> int @-> id @-> returning (id)) x format options
  let imageWithBitmapData x ~bytesPerRow ~size ~format ~colorSpace self = msg_send ~self ~cmd:(selector "imageWithBitmapData:bytesPerRow:size:format:colorSpace:") ~typ:(id @-> ullong @-> CGSize.t @-> int @-> ptr void @-> returning (id)) x (ULLong.of_int bytesPerRow) size format colorSpace
  let imageWithBitmapData' x ~bytesPerRow ~size ~format ~options self = msg_send ~self ~cmd:(selector "imageWithBitmapData:bytesPerRow:size:format:options:") ~typ:(id @-> ullong @-> CGSize.t @-> int @-> id @-> returning (id)) x (ULLong.of_int bytesPerRow) size format options
  let imageWithCGImage x self = msg_send ~self ~cmd:(selector "imageWithCGImage:") ~typ:(id @-> returning (id)) x
  let imageWithCGImage' x ~options self = msg_send ~self ~cmd:(selector "imageWithCGImage:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithCGImageSource x ~index ~options self = msg_send ~self ~cmd:(selector "imageWithCGImageSource:index:options:") ~typ:(ptr void @-> ullong @-> id @-> returning (id)) x (ULLong.of_int index) options
  let imageWithCGLayer x self = msg_send ~self ~cmd:(selector "imageWithCGLayer:") ~typ:(ptr void @-> returning (id)) x
  let imageWithCGLayer' x ~options self = msg_send ~self ~cmd:(selector "imageWithCGLayer:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
  let imageWithCVImageBuffer x self = msg_send ~self ~cmd:(selector "imageWithCVImageBuffer:") ~typ:(ptr void @-> returning (id)) x
  let imageWithCVImageBuffer' x ~options self = msg_send ~self ~cmd:(selector "imageWithCVImageBuffer:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
  let imageWithCVPixelBuffer x self = msg_send ~self ~cmd:(selector "imageWithCVPixelBuffer:") ~typ:(ptr void @-> returning (id)) x
  let imageWithCVPixelBuffer' x ~options self = msg_send ~self ~cmd:(selector "imageWithCVPixelBuffer:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
  let imageWithColor x self = msg_send ~self ~cmd:(selector "imageWithColor:") ~typ:(id @-> returning (id)) x
  let imageWithContentsOfFile x self = msg_send ~self ~cmd:(selector "imageWithContentsOfFile:") ~typ:(id @-> returning (id)) x
  let imageWithContentsOfFile' x ~options self = msg_send ~self ~cmd:(selector "imageWithContentsOfFile:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithContentsOfURL x self = msg_send ~self ~cmd:(selector "imageWithContentsOfURL:") ~typ:(id @-> returning (id)) x
  let imageWithContentsOfURL' x ~options self = msg_send ~self ~cmd:(selector "imageWithContentsOfURL:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithData x self = msg_send ~self ~cmd:(selector "imageWithData:") ~typ:(id @-> returning (id)) x
  let imageWithData' x ~options self = msg_send ~self ~cmd:(selector "imageWithData:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithDepthData x self = msg_send ~self ~cmd:(selector "imageWithDepthData:") ~typ:(id @-> returning (id)) x
  let imageWithDepthData' x ~options self = msg_send ~self ~cmd:(selector "imageWithDepthData:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithIOSurface x self = msg_send ~self ~cmd:(selector "imageWithIOSurface:") ~typ:(ptr void @-> returning (id)) x
  let imageWithIOSurface' x ~options self = msg_send ~self ~cmd:(selector "imageWithIOSurface:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
  let imageWithImageProvider x ~size ~format ~colorSpace ~options self = msg_send ~self ~cmd:(selector "imageWithImageProvider:size::format:colorSpace:options:") ~typ:(id @-> ullong @-> ullong @-> int @-> ptr void @-> id @-> returning (id)) x size format colorSpace options
  let imageWithImageProvider' x ~userInfo ~size ~format ~flipped ~colorSpace self = msg_send ~self ~cmd:(selector "imageWithImageProvider:userInfo:size:format:flipped:colorSpace:") ~typ:(id @-> id @-> CGSize.t @-> int @-> bool @-> ptr void @-> returning (id)) x userInfo size format flipped colorSpace
  let imageWithInternalRepresentation x self = msg_send ~self ~cmd:(selector "imageWithInternalRepresentation:") ~typ:(ptr (void) @-> returning (id)) x
  let imageWithMTLTexture x ~options self = msg_send ~self ~cmd:(selector "imageWithMTLTexture:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithPortaitEffectsMatte x self = msg_send ~self ~cmd:(selector "imageWithPortaitEffectsMatte:") ~typ:(id @-> returning (id)) x
  let imageWithPortaitEffectsMatte' x ~options self = msg_send ~self ~cmd:(selector "imageWithPortaitEffectsMatte:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithPortraitEffectsMatte x self = msg_send ~self ~cmd:(selector "imageWithPortraitEffectsMatte:") ~typ:(id @-> returning (id)) x
  let imageWithPortraitEffectsMatte' x ~options self = msg_send ~self ~cmd:(selector "imageWithPortraitEffectsMatte:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithSemanticSegmentationMatte x self = msg_send ~self ~cmd:(selector "imageWithSemanticSegmentationMatte:") ~typ:(id @-> returning (id)) x
  let imageWithSemanticSegmentationMatte' x ~options self = msg_send ~self ~cmd:(selector "imageWithSemanticSegmentationMatte:options:") ~typ:(id @-> id @-> returning (id)) x options
  let imageWithTexture x ~size ~options self = msg_send ~self ~cmd:(selector "imageWithTexture:size:options:") ~typ:(uint @-> CGSize.t @-> id @-> returning (id)) x size options
  let imageWithTexture1 x ~size ~flipped ~colorSpace self = msg_send ~self ~cmd:(selector "imageWithTexture:size:flipped:colorSpace:") ~typ:(uint @-> CGSize.t @-> bool @-> ptr void @-> returning (id)) x size flipped colorSpace
  let imageWithTexture2 x ~size ~flipped ~options self = msg_send ~self ~cmd:(selector "imageWithTexture:size:flipped:options:") ~typ:(uint @-> CGSize.t @-> bool @-> id @-> returning (id)) x size flipped options
  let imageWithYCCImage x ~matrix ~fullRange ~colorSpace self = msg_send ~self ~cmd:(selector "imageWithYCCImage:matrix:fullRange:colorSpace:") ~typ:(id @-> int @-> bool @-> ptr void @-> returning (id)) x matrix fullRange colorSpace
  let imageWithYCCImage' x ~matrix ~fullRange ~precision ~colorSpace self = msg_send ~self ~cmd:(selector "imageWithYCCImage:matrix:fullRange:precision:colorSpace:") ~typ:(id @-> int @-> bool @-> int @-> ptr void @-> returning (id)) x matrix fullRange precision colorSpace
  let imageWithYImage x ~_CrCbImage ~_CrCbScale ~matrix ~fullRange ~colorSpace self = msg_send ~self ~cmd:(selector "imageWithYImage:CrCbImage:CrCbScale:matrix:fullRange:colorSpace:") ~typ:(id @-> id @-> int @-> int @-> bool @-> ptr void @-> returning (id)) x _CrCbImage _CrCbScale matrix fullRange colorSpace
  let imageWithYImage' x ~_CrCbImage ~_CrCbScale ~matrix ~fullRange ~precision ~colorSpace self = msg_send ~self ~cmd:(selector "imageWithYImage:CrCbImage:CrCbScale:matrix:fullRange:precision:colorSpace:") ~typ:(id @-> id @-> int @-> int @-> bool @-> int @-> ptr void @-> returning (id)) x _CrCbImage _CrCbScale matrix fullRange precision colorSpace
  let imageYCC444 x ~matrix ~fullRange ~colorSpace self = msg_send ~self ~cmd:(selector "imageYCC444:matrix:fullRange:colorSpace:") ~typ:(id @-> int @-> bool @-> ptr void @-> returning (id)) x matrix fullRange colorSpace
  let imageYCC444' x ~matrix ~fullRange ~precision ~colorSpace self = msg_send ~self ~cmd:(selector "imageYCC444:matrix:fullRange:precision:colorSpace:") ~typ:(id @-> int @-> bool @-> int @-> ptr void @-> returning (id)) x matrix fullRange precision colorSpace
  let magentaImage self = msg_send ~self ~cmd:(selector "magentaImage") ~typ:(returning (id))
  let noiseImage self = msg_send ~self ~cmd:(selector "noiseImage") ~typ:(returning (id))
  let noiseImageNearest self = msg_send ~self ~cmd:(selector "noiseImageNearest") ~typ:(returning (id))
  let noiseImagePadded self = msg_send ~self ~cmd:(selector "noiseImagePadded") ~typ:(returning (id))
  let nullImage self = msg_send ~self ~cmd:(selector "nullImage") ~typ:(returning (id))
  let redImage self = msg_send ~self ~cmd:(selector "redImage") ~typ:(returning (id))
  let smartColorAdjustmentsForValue x ~andStatistics self = msg_send ~self ~cmd:(selector "smartColorAdjustmentsForValue:andStatistics:") ~typ:(double @-> id @-> returning (id)) x andStatistics
  let smartToneAdjustmentsForValue x ~andStatistics self = msg_send ~self ~cmd:(selector "smartToneAdjustmentsForValue:andStatistics:") ~typ:(double @-> id @-> returning (id)) x andStatistics
  let smartToneAdjustmentsForValue' x ~localLightAutoValue ~andStatistics self = msg_send ~self ~cmd:(selector "smartToneAdjustmentsForValue:localLightAutoValue:andStatistics:") ~typ:(double @-> double @-> id @-> returning (id)) x localLightAutoValue andStatistics
  let supportsSecureCoding self = msg_send ~self ~cmd:(selector "supportsSecureCoding") ~typ:(returning (bool))
  let whiteImage self = msg_send ~self ~cmd:(selector "whiteImage") ~typ:(returning (id))
  let yellowImage self = msg_send ~self ~cmd:(selector "yellowImage") ~typ:(returning (id))
end

let _CAMLType self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning (id))
let _CGImage self = msg_send ~self ~cmd:(selector "CGImage") ~typ:(returning (id))
let _TIFFRepresentation self = msg_send ~self ~cmd:(selector "TIFFRepresentation") ~typ:(returning (id))
let autoAdjustmentFilters self = msg_send ~self ~cmd:(selector "autoAdjustmentFilters") ~typ:(returning (id))
let autoAdjustmentFiltersWithImageProperties x ~options self = msg_send ~self ~cmd:(selector "autoAdjustmentFiltersWithImageProperties:options:") ~typ:(id @-> id @-> returning (id)) x options
let autoAdjustmentFiltersWithOptions x self = msg_send ~self ~cmd:(selector "autoAdjustmentFiltersWithOptions:") ~typ:(id @-> returning (id)) x
let autoPerspectiveFilterWithOptions x self = msg_send ~self ~cmd:(selector "autoPerspectiveFilterWithOptions:") ~typ:(id @-> returning (id)) x
let autoPerspectiveResultWithOptions x self = msg_send ~self ~cmd:(selector "autoPerspectiveResultWithOptions:") ~typ:(id @-> returning (id)) x
let autoRedEyeFilterWithFeatures x ~options self = msg_send ~self ~cmd:(selector "autoRedEyeFilterWithFeatures:options:") ~typ:(id @-> id @-> returning (id)) x options
let autoRedEyeFilterWithFeatures' x ~imageProperties ~options self = msg_send ~self ~cmd:(selector "autoRedEyeFilterWithFeatures:imageProperties:options:") ~typ:(id @-> id @-> id @-> returning (id)) x imageProperties options
let autoRotateFilterFFT x ~image ~inputRect ~minTiltAngle ~maxTiltAngle ~detectVerticalLines ~thrVertAngle ~thrDomAngleDiff self = msg_send ~self ~cmd:(selector "autoRotateFilterFFT:image:inputRect:minTiltAngle:maxTiltAngle:detectVerticalLines:thrVertAngle:thrDomAngleDiff:") ~typ:(id @-> id @-> CGRect.t @-> float @-> float @-> bool @-> float @-> float @-> returning (id)) x image inputRect minTiltAngle maxTiltAngle detectVerticalLines thrVertAngle thrDomAngleDiff
let baseColorSpace self = msg_send ~self ~cmd:(selector "baseColorSpace") ~typ:(returning (ptr void))
let cacheHint self = msg_send ~self ~cmd:(selector "cacheHint") ~typ:(returning (bool))
let calcIntersection x ~slope1 ~pt2 ~slope2 self = msg_send_stret ~self ~cmd:(selector "calcIntersection:slope1:pt2:slope2:") ~typ:(CGPoint.t @-> CGPoint.t @-> CGPoint.t @-> CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x slope1 pt2 slope2
let colorSpace self = msg_send ~self ~cmd:(selector "colorSpace") ~typ:(returning (ptr void))
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let debugDescription self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning (id))
let definition self = msg_send ~self ~cmd:(selector "definition") ~typ:(returning (id))
let depthData self = msg_send ~self ~cmd:(selector "depthData") ~typ:(returning (id))
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let digest self = msg_send ~self ~cmd:(selector "digest") ~typ:(returning (ullong))
let encodeWithCAMLWriter x self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning (void)) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let extent self = msg_send_stret ~self ~cmd:(selector "extent") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let filteredImage x ~keysAndValues self = msg_send ~self ~cmd:(selector "filteredImage:keysAndValues:") ~typ:(id @-> id @-> returning (id)) x keysAndValues
let getAutoRotateFilter x ~ciImage ~inputRect ~rotateCropRect ~minTiltAngle ~maxTiltAngle ~detectVerticalLines ~thrVertAngle ~thrDomAngleDiff self = msg_send ~self ~cmd:(selector "getAutoRotateFilter:ciImage:inputRect:rotateCropRect:minTiltAngle:maxTiltAngle:detectVerticalLines:thrVertAngle:thrDomAngleDiff:") ~typ:(id @-> id @-> CGRect.t @-> ptr (CGRect.t) @-> float @-> float @-> bool @-> float @-> float @-> returning (id)) x ciImage inputRect rotateCropRect minTiltAngle maxTiltAngle detectVerticalLines thrVertAngle thrDomAngleDiff
let getAutocropRect x ~rotateXfrm ~inputImageRect ~clipRect self = msg_send ~self ~cmd:(selector "getAutocropRect:rotateXfrm:inputImageRect:clipRect:") ~typ:(id @-> ptr void @-> CGRect.t @-> ptr (CGRect.t) @-> returning (void)) x rotateXfrm inputImageRect clipRect
let imageByApplyingCGOrientation x self = msg_send ~self ~cmd:(selector "imageByApplyingCGOrientation:") ~typ:(uint @-> returning (id)) x
let imageByApplyingFilter x self = msg_send ~self ~cmd:(selector "imageByApplyingFilter:") ~typ:(id @-> returning (id)) x
let imageByApplyingFilter' x ~withInputParameters self = msg_send ~self ~cmd:(selector "imageByApplyingFilter:withInputParameters:") ~typ:(id @-> id @-> returning (id)) x withInputParameters
let imageByApplyingGaussianBlurWithSigma x self = msg_send ~self ~cmd:(selector "imageByApplyingGaussianBlurWithSigma:") ~typ:(double @-> returning (id)) x
let imageByApplyingOrientation x self = msg_send ~self ~cmd:(selector "imageByApplyingOrientation:") ~typ:(int @-> returning (id)) x
let imageByApplyingTransform x self = msg_send ~self ~cmd:(selector "imageByApplyingTransform:") ~typ:(ptr void @-> returning (id)) x
let imageByApplyingTransform' x ~highQualityDownsample self = msg_send ~self ~cmd:(selector "imageByApplyingTransform:highQualityDownsample:") ~typ:(ptr void @-> bool @-> returning (id)) x highQualityDownsample
let imageByClampingToExtent self = msg_send ~self ~cmd:(selector "imageByClampingToExtent") ~typ:(returning (id))
let imageByClampingToRect x self = msg_send ~self ~cmd:(selector "imageByClampingToRect:") ~typ:(CGRect.t @-> returning (id)) x
let imageByColorMatchingColorSpaceToWorkingSpace x self = msg_send ~self ~cmd:(selector "imageByColorMatchingColorSpaceToWorkingSpace:") ~typ:(ptr void @-> returning (id)) x
let imageByColorMatchingWorkingSpaceToColorSpace x self = msg_send ~self ~cmd:(selector "imageByColorMatchingWorkingSpaceToColorSpace:") ~typ:(ptr void @-> returning (id)) x
let imageByColorMatchingWorkingSpaceToRGBorGrayColorSpace x self = msg_send ~self ~cmd:(selector "imageByColorMatchingWorkingSpaceToRGBorGrayColorSpace:") ~typ:(ptr void @-> returning (id)) x
let imageByCompositingOverImage x self = msg_send ~self ~cmd:(selector "imageByCompositingOverImage:") ~typ:(id @-> returning (id)) x
let imageByConvertingLabToWorkingSpace self = msg_send ~self ~cmd:(selector "imageByConvertingLabToWorkingSpace") ~typ:(returning (id))
let imageByConvertingWorkingSpaceToLab self = msg_send ~self ~cmd:(selector "imageByConvertingWorkingSpaceToLab") ~typ:(returning (id))
let imageByCroppingToRect x self = msg_send ~self ~cmd:(selector "imageByCroppingToRect:") ~typ:(CGRect.t @-> returning (id)) x
let imageByInsertingIntermediate self = msg_send ~self ~cmd:(selector "imageByInsertingIntermediate") ~typ:(returning (id))
let imageByInsertingIntermediate' x self = msg_send ~self ~cmd:(selector "imageByInsertingIntermediate:") ~typ:(bool @-> returning (id)) x
let imageByPremultiplyingAlpha self = msg_send ~self ~cmd:(selector "imageByPremultiplyingAlpha") ~typ:(returning (id))
let imageBySamplingLinear self = msg_send ~self ~cmd:(selector "imageBySamplingLinear") ~typ:(returning (id))
let imageBySamplingNearest self = msg_send ~self ~cmd:(selector "imageBySamplingNearest") ~typ:(returning (id))
let imageBySettingAlphaOneInExtent x self = msg_send ~self ~cmd:(selector "imageBySettingAlphaOneInExtent:") ~typ:(CGRect.t @-> returning (id)) x
let imageBySettingProperties x self = msg_send ~self ~cmd:(selector "imageBySettingProperties:") ~typ:(id @-> returning (id)) x
let imageBySettingPropertiesNoCopy x self = msg_send ~self ~cmd:(selector "imageBySettingPropertiesNoCopy:") ~typ:(id @-> returning (id)) x
let imageByTaggingWithColorSpace x self = msg_send ~self ~cmd:(selector "imageByTaggingWithColorSpace:") ~typ:(ptr void @-> returning (id)) x
let imageByToneMappingColorSpaceToWorkingSpace x self = msg_send ~self ~cmd:(selector "imageByToneMappingColorSpaceToWorkingSpace:") ~typ:(ptr void @-> returning (id)) x
let imageByUnpremultiplyingAlpha self = msg_send ~self ~cmd:(selector "imageByUnpremultiplyingAlpha") ~typ:(returning (id))
let imageWithExtent x ~processorDescription ~argumentDigest ~inputFormat ~outputFormat ~options ~roiCallback ~processor self = msg_send ~self ~cmd:(selector "imageWithExtent:processorDescription:argumentDigest:inputFormat:outputFormat:options:roiCallback:processor:") ~typ:(CGRect.t @-> id @-> ullong @-> int @-> int @-> id @-> ptr void @-> ptr void @-> returning (id)) x processorDescription (ULLong.of_int argumentDigest) inputFormat outputFormat options roiCallback processor
let imageWithMesh x ~transform self = msg_send ~self ~cmd:(selector "imageWithMesh:transform:") ~typ:(id @-> ptr void @-> returning (id)) x transform
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initAuxiliaryWithImageSource x ~index ~options ~depth self = msg_send ~self ~cmd:(selector "initAuxiliaryWithImageSource:index:options:depth:") ~typ:(ptr void @-> ullong @-> id @-> bool @-> returning (id)) x (ULLong.of_int index) options depth
let initForRenderingWithMPS x ~orNonMPS self = msg_send ~self ~cmd:(selector "initForRenderingWithMPS:orNonMPS:") ~typ:(id @-> id @-> returning (id)) x orNonMPS
let initForRenderingWithMetal x ~orNonMetal self = msg_send ~self ~cmd:(selector "initForRenderingWithMetal:orNonMetal:") ~typ:(id @-> id @-> returning (id)) x orNonMetal
let initForRenderingWithMetalContext x ~orOpenGLContextUsingMetal ~orNonMetalContext self = msg_send ~self ~cmd:(selector "initForRenderingWithMetalContext:orOpenGLContextUsingMetal:orNonMetalContext:") ~typ:(id @-> id @-> id @-> returning (id)) x orOpenGLContextUsingMetal orNonMetalContext
let initMatteWithImageSource x ~options self = msg_send ~self ~cmd:(selector "initMatteWithImageSource:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
let initWithArrayOfImages x ~selector_ self = msg_send ~self ~cmd:(selector "initWithArrayOfImages:selector:") ~typ:(id @-> ptr void @-> returning (id)) x selector_
let initWithAttributedString x ~format self = msg_send ~self ~cmd:(selector "initWithAttributedString:format:") ~typ:(id @-> int @-> returning (id)) x format
let initWithAttributedString' x ~format ~options self = msg_send ~self ~cmd:(selector "initWithAttributedString:format:options:") ~typ:(id @-> int @-> id @-> returning (id)) x format options
let initWithBitmapData x ~bytesPerRow ~size ~format ~colorSpace self = msg_send ~self ~cmd:(selector "initWithBitmapData:bytesPerRow:size:format:colorSpace:") ~typ:(id @-> ullong @-> CGSize.t @-> int @-> ptr void @-> returning (id)) x (ULLong.of_int bytesPerRow) size format colorSpace
let initWithBitmapData' x ~bytesPerRow ~size ~format ~options self = msg_send ~self ~cmd:(selector "initWithBitmapData:bytesPerRow:size:format:options:") ~typ:(id @-> ullong @-> CGSize.t @-> int @-> id @-> returning (id)) x (ULLong.of_int bytesPerRow) size format options
let initWithCGImage x self = msg_send ~self ~cmd:(selector "initWithCGImage:") ~typ:(id @-> returning (id)) x
let initWithCGImage' x ~options self = msg_send ~self ~cmd:(selector "initWithCGImage:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithCGImageSource x ~index ~options self = msg_send ~self ~cmd:(selector "initWithCGImageSource:index:options:") ~typ:(ptr void @-> ullong @-> id @-> returning (id)) x (ULLong.of_int index) options
let initWithCGLayer x self = msg_send ~self ~cmd:(selector "initWithCGLayer:") ~typ:(ptr void @-> returning (id)) x
let initWithCGLayer' x ~options self = msg_send ~self ~cmd:(selector "initWithCGLayer:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
let initWithCVImageBuffer x self = msg_send ~self ~cmd:(selector "initWithCVImageBuffer:") ~typ:(ptr void @-> returning (id)) x
let initWithCVImageBuffer' x ~options self = msg_send ~self ~cmd:(selector "initWithCVImageBuffer:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
let initWithCVPixelBuffer x self = msg_send ~self ~cmd:(selector "initWithCVPixelBuffer:") ~typ:(ptr void @-> returning (id)) x
let initWithCVPixelBuffer' x ~options self = msg_send ~self ~cmd:(selector "initWithCVPixelBuffer:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithColor x self = msg_send ~self ~cmd:(selector "initWithColor:") ~typ:(id @-> returning (id)) x
let initWithColorR x ~_G ~_B ~_A self = msg_send ~self ~cmd:(selector "initWithColorR:G:B:A:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x _G _B _A
let initWithContentsOfFile x self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:") ~typ:(id @-> returning (id)) x
let initWithContentsOfFile' x ~options self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithContentsOfURL x self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:") ~typ:(id @-> returning (id)) x
let initWithContentsOfURL' x ~options self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithData x self = msg_send ~self ~cmd:(selector "initWithData:") ~typ:(id @-> returning (id)) x
let initWithData' x ~options self = msg_send ~self ~cmd:(selector "initWithData:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithDepthData x self = msg_send ~self ~cmd:(selector "initWithDepthData:") ~typ:(id @-> returning (id)) x
let initWithDepthData' x ~options self = msg_send ~self ~cmd:(selector "initWithDepthData:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithEmptyClearColor self = msg_send ~self ~cmd:(selector "initWithEmptyClearColor") ~typ:(returning (id))
let initWithIOSurface x self = msg_send ~self ~cmd:(selector "initWithIOSurface:") ~typ:(ptr void @-> returning (id)) x
let initWithIOSurface1 x ~options self = msg_send ~self ~cmd:(selector "initWithIOSurface:options:") ~typ:(ptr void @-> id @-> returning (id)) x options
let initWithIOSurface2 x ~plane ~format ~options self = msg_send ~self ~cmd:(selector "initWithIOSurface:plane:format:options:") ~typ:(ptr void @-> ullong @-> int @-> id @-> returning (id)) x (ULLong.of_int plane) format options
let initWithImageProvider x ~size ~format ~colorSpace ~options self = msg_send ~self ~cmd:(selector "initWithImageProvider:size::format:colorSpace:options:") ~typ:(id @-> ullong @-> ullong @-> int @-> ptr void @-> id @-> returning (id)) x size format colorSpace options
let initWithImageProvider1 x ~userInfo ~size ~format ~flipped ~colorSpace self = msg_send ~self ~cmd:(selector "initWithImageProvider:userInfo:size:format:flipped:colorSpace:") ~typ:(id @-> id @-> CGSize.t @-> int @-> bool @-> ptr void @-> returning (id)) x userInfo size format flipped colorSpace
let initWithImageProvider2 x ~width ~height ~format ~colorSpace ~options self = msg_send ~self ~cmd:(selector "initWithImageProvider:width:height:format:colorSpace:options:") ~typ:(ptr void @-> ullong @-> ullong @-> int @-> ptr void @-> id @-> returning (id)) x (ULLong.of_int width) (ULLong.of_int height) format colorSpace options
let initWithMTLTexture x ~options self = msg_send ~self ~cmd:(selector "initWithMTLTexture:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithPortaitEffectsMatte x self = msg_send ~self ~cmd:(selector "initWithPortaitEffectsMatte:") ~typ:(id @-> returning (id)) x
let initWithPortaitEffectsMatte' x ~options self = msg_send ~self ~cmd:(selector "initWithPortaitEffectsMatte:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithPortraitEffectsMatte x self = msg_send ~self ~cmd:(selector "initWithPortraitEffectsMatte:") ~typ:(id @-> returning (id)) x
let initWithPortraitEffectsMatte' x ~options self = msg_send ~self ~cmd:(selector "initWithPortraitEffectsMatte:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithSemanticSegmentationMatte x self = msg_send ~self ~cmd:(selector "initWithSemanticSegmentationMatte:") ~typ:(id @-> returning (id)) x
let initWithSemanticSegmentationMatte' x ~options self = msg_send ~self ~cmd:(selector "initWithSemanticSegmentationMatte:options:") ~typ:(id @-> id @-> returning (id)) x options
let initWithTexture x ~size ~options self = msg_send ~self ~cmd:(selector "initWithTexture:size:options:") ~typ:(uint @-> CGSize.t @-> id @-> returning (id)) x size options
let initWithTexture1 x ~size ~flipped ~colorSpace self = msg_send ~self ~cmd:(selector "initWithTexture:size:flipped:colorSpace:") ~typ:(uint @-> CGSize.t @-> bool @-> ptr void @-> returning (id)) x size flipped colorSpace
let initWithTexture2 x ~size ~flipped ~options self = msg_send ~self ~cmd:(selector "initWithTexture:size:flipped:options:") ~typ:(uint @-> CGSize.t @-> bool @-> id @-> returning (id)) x size flipped options
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning (bool))
let localLightStatistics self = msg_send ~self ~cmd:(selector "localLightStatistics") ~typ:(returning (id))
let localLightStatisticsNoProxy self = msg_send ~self ~cmd:(selector "localLightStatisticsNoProxy") ~typ:(returning (id))
let localLightStatisticsWithProxy x self = msg_send ~self ~cmd:(selector "localLightStatisticsWithProxy:") ~typ:(bool @-> returning (id)) x
let metalImageByApplyingFilter x self = msg_send ~self ~cmd:(selector "metalImageByApplyingFilter:") ~typ:(id @-> returning (id)) x
let metalImageByApplyingFilter' x ~withInputParameters self = msg_send ~self ~cmd:(selector "metalImageByApplyingFilter:withInputParameters:") ~typ:(id @-> id @-> returning (id)) x withInputParameters
let outputFormat self = msg_send ~self ~cmd:(selector "outputFormat") ~typ:(returning (int))
let pixelBuffer self = msg_send ~self ~cmd:(selector "pixelBuffer") ~typ:(returning (ptr void))
let pointWithDictionary x ~name ~index ~transformedBy self = msg_send_stret ~self ~cmd:(selector "pointWithDictionary:name:index:transformedBy:") ~typ:(id @-> id @-> int @-> ptr void @-> returning (CGPoint.t)) ~return_type:CGPoint.t x name index transformedBy
let portraitEffectsMatte self = msg_send ~self ~cmd:(selector "portraitEffectsMatte") ~typ:(returning (id))
let printTree self = msg_send ~self ~cmd:(selector "printTree") ~typ:(returning (void))
let properties self = msg_send ~self ~cmd:(selector "properties") ~typ:(returning (id))
let recipeDigest self = msg_send ~self ~cmd:(selector "recipeDigest") ~typ:(returning (ullong))
let regionOfInterestForImage x ~inRect self = msg_send_stret ~self ~cmd:(selector "regionOfInterestForImage:inRect:") ~typ:(id @-> CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x inRect
let semanticSegmentationMatte self = msg_send ~self ~cmd:(selector "semanticSegmentationMatte") ~typ:(returning (id))
let setCacheHint x self = msg_send ~self ~cmd:(selector "setCacheHint:") ~typ:(bool @-> returning (void)) x
let setUserInfo x self = msg_send ~self ~cmd:(selector "setUserInfo:") ~typ:(id @-> returning (void)) x
let setValue x ~forKeyPath self = msg_send ~self ~cmd:(selector "setValue:forKeyPath:") ~typ:(id @-> id @-> returning (void)) x forKeyPath
let smartBlackAndWhiteAdjustmentsForValue x ~andStatistics self = msg_send ~self ~cmd:(selector "smartBlackAndWhiteAdjustmentsForValue:andStatistics:") ~typ:(double @-> id @-> returning (id)) x andStatistics
let smartBlackAndWhiteStatistics self = msg_send ~self ~cmd:(selector "smartBlackAndWhiteStatistics") ~typ:(returning (id))
let smartColorAdjustmentsForValue x ~andStatistics self = msg_send ~self ~cmd:(selector "smartColorAdjustmentsForValue:andStatistics:") ~typ:(double @-> id @-> returning (id)) x andStatistics
let smartColorStatistics self = msg_send ~self ~cmd:(selector "smartColorStatistics") ~typ:(returning (id))
let smartToneAdjustmentsForValue x ~andStatistics self = msg_send ~self ~cmd:(selector "smartToneAdjustmentsForValue:andStatistics:") ~typ:(double @-> id @-> returning (id)) x andStatistics
let smartToneAdjustmentsForValue' x ~localLightAutoValue ~andStatistics self = msg_send ~self ~cmd:(selector "smartToneAdjustmentsForValue:localLightAutoValue:andStatistics:") ~typ:(double @-> double @-> id @-> returning (id)) x localLightAutoValue andStatistics
let smartToneStatistics self = msg_send ~self ~cmd:(selector "smartToneStatistics") ~typ:(returning (id))
let url self = msg_send ~self ~cmd:(selector "url") ~typ:(returning (id))
let userInfo self = msg_send ~self ~cmd:(selector "userInfo") ~typ:(returning (id))
let writeToTIFF x self = msg_send ~self ~cmd:(selector "writeToTIFF:") ~typ:(id @-> returning (void)) x