(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

open CoreFoundation

let abCaseInsensitiveIsEqual' imp = Define.method_spec ~cmd:(selector "abCaseInsensitiveIsEqual:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let abDictionaryWithValuesForKeyPaths' imp = Define.method_spec ~cmd:(selector "abDictionaryWithValuesForKeyPaths:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let abRemoveObserverIgnoringExceptions'forKeyPath' imp = Define.method_spec ~cmd:(selector "abRemoveObserverIgnoringExceptions:forKeyPath:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let accessibilityActivate imp = Define.method_spec ~cmd:(selector "accessibilityActivate") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityActivationPoint imp = Define.method_spec ~cmd:(selector "accessibilityActivationPoint") ~typ:(returning (CGPoint.t)) ~enc:"{CGPoint=dd}16@0:8" imp
let accessibilityAddTemporaryChild' imp = Define.method_spec ~cmd:(selector "accessibilityAddTemporaryChild:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let accessibilityAllowsOverriddenAttributesWhenIgnored imp = Define.method_spec ~cmd:(selector "accessibilityAllowsOverriddenAttributesWhenIgnored") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityArrayAttributeCount' imp = Define.method_spec ~cmd:(selector "accessibilityArrayAttributeCount:") ~typ:(id @-> returning (ullong)) ~enc:"Q24@0:8@16" imp
let accessibilityArrayAttributeValues'index'maxCount' imp = Define.method_spec ~cmd:(selector "accessibilityArrayAttributeValues:index:maxCount:") ~typ:(id @-> ullong @-> ullong @-> returning (id)) ~enc:"@40@0:8@16Q24Q32" imp
let accessibilityAssistiveTechnologyFocusedIdentifiers imp = Define.method_spec ~cmd:(selector "accessibilityAssistiveTechnologyFocusedIdentifiers") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityAttributeValue'forParameter' imp = Define.method_spec ~cmd:(selector "accessibilityAttributeValue:forParameter:") ~typ:(id @-> id @-> returning (id)) ~enc:"@32@0:8@16@24" imp
let accessibilityAttributedHint imp = Define.method_spec ~cmd:(selector "accessibilityAttributedHint") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityAttributedLabel imp = Define.method_spec ~cmd:(selector "accessibilityAttributedLabel") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityAttributedUserInputLabels imp = Define.method_spec ~cmd:(selector "accessibilityAttributedUserInputLabels") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityAttributedValue imp = Define.method_spec ~cmd:(selector "accessibilityAttributedValue") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityAttributedValueForStringAttributeAttributeForParameter' imp = Define.method_spec ~cmd:(selector "accessibilityAttributedValueForStringAttributeAttributeForParameter:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let accessibilityBrailleMapRenderRegion imp = Define.method_spec ~cmd:(selector "accessibilityBrailleMapRenderRegion") ~typ:(returning (CGRect.t)) ~enc:"{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8" imp
let accessibilityBrailleMapRenderer imp = Define.method_spec ~cmd:(selector "accessibilityBrailleMapRenderer") ~typ:(returning ((ptr void))) ~enc:"@?16@0:8" imp
let accessibilityContainer imp = Define.method_spec ~cmd:(selector "accessibilityContainer") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityContainerType imp = Define.method_spec ~cmd:(selector "accessibilityContainerType") ~typ:(returning (llong)) ~enc:"q16@0:8" imp
let accessibilityCustomActions imp = Define.method_spec ~cmd:(selector "accessibilityCustomActions") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityCustomRotors imp = Define.method_spec ~cmd:(selector "accessibilityCustomRotors") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityDecodeOverriddenAttributes' imp = Define.method_spec ~cmd:(selector "accessibilityDecodeOverriddenAttributes:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let accessibilityDecrement imp = Define.method_spec ~cmd:(selector "accessibilityDecrement") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let accessibilityDragSourceDescriptors imp = Define.method_spec ~cmd:(selector "accessibilityDragSourceDescriptors") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityDropPointDescriptors imp = Define.method_spec ~cmd:(selector "accessibilityDropPointDescriptors") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityElementAtIndex' imp = Define.method_spec ~cmd:(selector "accessibilityElementAtIndex:") ~typ:(llong @-> returning (id)) ~enc:"@24@0:8q16" imp
let accessibilityElementCount imp = Define.method_spec ~cmd:(selector "accessibilityElementCount") ~typ:(returning (llong)) ~enc:"q16@0:8" imp
let accessibilityElementDidBecomeFocused imp = Define.method_spec ~cmd:(selector "accessibilityElementDidBecomeFocused") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let accessibilityElementDidLoseFocus imp = Define.method_spec ~cmd:(selector "accessibilityElementDidLoseFocus") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let accessibilityElementIsFocused imp = Define.method_spec ~cmd:(selector "accessibilityElementIsFocused") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityElements imp = Define.method_spec ~cmd:(selector "accessibilityElements") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityElementsHidden imp = Define.method_spec ~cmd:(selector "accessibilityElementsHidden") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityEncodeOverriddenAttributes' imp = Define.method_spec ~cmd:(selector "accessibilityEncodeOverriddenAttributes:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let accessibilityFrame imp = Define.method_spec ~cmd:(selector "accessibilityFrame") ~typ:(returning (CGRect.t)) ~enc:"{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8" imp
let accessibilityHeaderElements imp = Define.method_spec ~cmd:(selector "accessibilityHeaderElements") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityHint imp = Define.method_spec ~cmd:(selector "accessibilityHint") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityIdentification imp = Define.method_spec ~cmd:(selector "accessibilityIdentification") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityIdentifier imp = Define.method_spec ~cmd:(selector "accessibilityIdentifier") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityIncrement imp = Define.method_spec ~cmd:(selector "accessibilityIncrement") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let accessibilityIndexForChildUIElementAttributeForParameter' imp = Define.method_spec ~cmd:(selector "accessibilityIndexForChildUIElementAttributeForParameter:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let accessibilityIndexOfChild' imp = Define.method_spec ~cmd:(selector "accessibilityIndexOfChild:") ~typ:(id @-> returning (ullong)) ~enc:"Q24@0:8@16" imp
let accessibilityLabel imp = Define.method_spec ~cmd:(selector "accessibilityLabel") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityLanguage imp = Define.method_spec ~cmd:(selector "accessibilityLanguage") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityLocalizedStringKey imp = Define.method_spec ~cmd:(selector "accessibilityLocalizedStringKey") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityNavigationStyle imp = Define.method_spec ~cmd:(selector "accessibilityNavigationStyle") ~typ:(returning (llong)) ~enc:"q16@0:8" imp
let accessibilityOverriddenAttributes imp = Define.method_spec ~cmd:(selector "accessibilityOverriddenAttributes") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityParameterizedAttributeNames imp = Define.method_spec ~cmd:(selector "accessibilityParameterizedAttributeNames") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityPath imp = Define.method_spec ~cmd:(selector "accessibilityPath") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityPerformEscape imp = Define.method_spec ~cmd:(selector "accessibilityPerformEscape") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityPerformMagicTap imp = Define.method_spec ~cmd:(selector "accessibilityPerformMagicTap") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityPerformShowMenuOfChild' imp = Define.method_spec ~cmd:(selector "accessibilityPerformShowMenuOfChild:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let accessibilityPresenterProcessIdentifier imp = Define.method_spec ~cmd:(selector "accessibilityPresenterProcessIdentifier") ~typ:(returning (int)) ~enc:"i16@0:8" imp
let accessibilityRemoveTemporaryChild' imp = Define.method_spec ~cmd:(selector "accessibilityRemoveTemporaryChild:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let accessibilityReplaceRange'withText' imp = Define.method_spec ~cmd:(selector "accessibilityReplaceRange:withText:") ~typ:(NSRange.t @-> id @-> returning (bool)) ~enc:"c40@0:8{_NSRange=QQ}16@32" imp
let accessibilityRespondsToUserInteraction imp = Define.method_spec ~cmd:(selector "accessibilityRespondsToUserInteraction") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityScroll' imp = Define.method_spec ~cmd:(selector "accessibilityScroll:") ~typ:(llong @-> returning (bool)) ~enc:"c24@0:8q16" imp
let accessibilitySetIdentification' imp = Define.method_spec ~cmd:(selector "accessibilitySetIdentification:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let accessibilitySetOverrideValue'forAttribute' imp = Define.method_spec ~cmd:(selector "accessibilitySetOverrideValue:forAttribute:") ~typ:(id @-> id @-> returning (bool)) ~enc:"c32@0:8@16@24" imp
let accessibilitySetPresenterProcessIdentifier' imp = Define.method_spec ~cmd:(selector "accessibilitySetPresenterProcessIdentifier:") ~typ:(int @-> returning (void)) ~enc:"v20@0:8i16" imp
let accessibilityShouldSendNotification' imp = Define.method_spec ~cmd:(selector "accessibilityShouldSendNotification:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let accessibilityShouldUseUniqueId imp = Define.method_spec ~cmd:(selector "accessibilityShouldUseUniqueId") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilitySupportsCustomElementData imp = Define.method_spec ~cmd:(selector "accessibilitySupportsCustomElementData") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilitySupportsNotifications imp = Define.method_spec ~cmd:(selector "accessibilitySupportsNotifications") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilitySupportsOverriddenAttributes imp = Define.method_spec ~cmd:(selector "accessibilitySupportsOverriddenAttributes") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityTemporaryChildren imp = Define.method_spec ~cmd:(selector "accessibilityTemporaryChildren") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityTextualContext imp = Define.method_spec ~cmd:(selector "accessibilityTextualContext") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityTraits imp = Define.method_spec ~cmd:(selector "accessibilityTraits") ~typ:(returning (ullong)) ~enc:"Q16@0:8" imp
let accessibilityUserInputLabels imp = Define.method_spec ~cmd:(selector "accessibilityUserInputLabels") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityValue imp = Define.method_spec ~cmd:(selector "accessibilityValue") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let accessibilityViewIsModal imp = Define.method_spec ~cmd:(selector "accessibilityViewIsModal") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let accessibilityVisibleArea imp = Define.method_spec ~cmd:(selector "accessibilityVisibleArea") ~typ:(returning (double)) ~enc:"d16@0:8" imp
let addChainedObservers' imp = Define.method_spec ~cmd:(selector "addChainedObservers:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let addObject'toBothSidesOfRelationshipWithKey' imp = Define.method_spec ~cmd:(selector "addObject:toBothSidesOfRelationshipWithKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let addObject'toPropertyWithKey' imp = Define.method_spec ~cmd:(selector "addObject:toPropertyWithKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let addObservationTransformer' imp = Define.method_spec ~cmd:(selector "addObservationTransformer:") ~typ:((ptr void) @-> returning (id)) ~enc:"@24@0:8@?16" imp
let addObserver' imp = Define.method_spec ~cmd:(selector "addObserver:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let addObserver'forKeyPath'options'context' imp = Define.method_spec ~cmd:(selector "addObserver:forKeyPath:options:context:") ~typ:(id @-> id @-> ullong @-> (ptr void) @-> returning (void)) ~enc:"v48@0:8@16@24Q32^v40" imp
let addObserver'forObservableKeyPath' imp = Define.method_spec ~cmd:(selector "addObserver:forObservableKeyPath:") ~typ:(id @-> id @-> returning (id)) ~enc:"@32@0:8@16@24" imp
let addObserverBlock' imp = Define.method_spec ~cmd:(selector "addObserverBlock:") ~typ:((ptr void) @-> returning (id)) ~enc:"@24@0:8@?16" imp
let akToolbarButtonItemType imp = Define.method_spec ~cmd:(selector "akToolbarButtonItemType") ~typ:(returning (ullong)) ~enc:"Q16@0:8" imp
let allPropertyKeys imp = Define.method_spec ~cmd:(selector "allPropertyKeys") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let allowsWeakReference imp = Define.method_spec ~cmd:(selector "allowsWeakReference") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let associatedObjectForKey' imp = Define.method_spec ~cmd:(selector "associatedObjectForKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let attributeKeys imp = Define.method_spec ~cmd:(selector "attributeKeys") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let autoContentAccessingProxy imp = Define.method_spec ~cmd:(selector "autoContentAccessingProxy") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let autorelease imp = Define.method_spec ~cmd:(selector "autorelease") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let awakeAfterUsingCoder' imp = Define.method_spec ~cmd:(selector "awakeAfterUsingCoder:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let awakeFromNib imp = Define.method_spec ~cmd:(selector "awakeFromNib") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let beginBSMResourceActivity' imp = Define.method_spec ~cmd:(selector "beginBSMResourceActivity:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let bind'toObject'withKeyPath'options' imp = Define.method_spec ~cmd:(selector "bind:toObject:withKeyPath:options:") ~typ:(id @-> id @-> id @-> id @-> returning (void)) ~enc:"v48@0:8@16@24@32@40" imp
let boolValueSafe imp = Define.method_spec ~cmd:(selector "boolValueSafe") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let boolValueSafe' imp = Define.method_spec ~cmd:(selector "boolValueSafe:") ~typ:((ptr int) @-> returning (bool)) ~enc:"c24@0:8^i16" imp
let class_ imp = Define.method_spec ~cmd:(selector "class") ~typ:(returning (_Class)) ~enc:"#16@0:8" imp
let classCode imp = Define.method_spec ~cmd:(selector "classCode") ~typ:(returning (uint)) ~enc:"I16@0:8" imp
let classDescription imp = Define.method_spec ~cmd:(selector "classDescription") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let classDescriptionForDestinationKey' imp = Define.method_spec ~cmd:(selector "classDescriptionForDestinationKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let classForArchiver imp = Define.method_spec ~cmd:(selector "classForArchiver") ~typ:(returning (_Class)) ~enc:"#16@0:8" imp
let classForCoder imp = Define.method_spec ~cmd:(selector "classForCoder") ~typ:(returning (_Class)) ~enc:"#16@0:8" imp
let classForKeyedArchiver imp = Define.method_spec ~cmd:(selector "classForKeyedArchiver") ~typ:(returning (_Class)) ~enc:"#16@0:8" imp
let classForPortCoder imp = Define.method_spec ~cmd:(selector "classForPortCoder") ~typ:(returning (_Class)) ~enc:"#16@0:8" imp
let className imp = Define.method_spec ~cmd:(selector "className") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let clearProperties imp = Define.method_spec ~cmd:(selector "clearProperties") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let coerceValue'forKey' imp = Define.method_spec ~cmd:(selector "coerceValue:forKey:") ~typ:(id @-> id @-> returning (id)) ~enc:"@32@0:8@16@24" imp
let coerceValueForScriptingProperties' imp = Define.method_spec ~cmd:(selector "coerceValueForScriptingProperties:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let conformsToProtocol' imp = Define.method_spec ~cmd:(selector "conformsToProtocol:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let conformsToProtocolCached' imp = Define.method_spec ~cmd:(selector "conformsToProtocolCached:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let copy imp = Define.method_spec ~cmd:(selector "copy") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let copyScriptingValue'forKey'withProperties' imp = Define.method_spec ~cmd:(selector "copyScriptingValue:forKey:withProperties:") ~typ:(id @-> id @-> id @-> returning (id)) ~enc:"@40@0:8@16@24@32" imp
let cplClearProperties' imp = Define.method_spec ~cmd:(selector "cplClearProperties:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let cplCopyProperties'fromObject'withCopyBlock' imp = Define.method_spec ~cmd:(selector "cplCopyProperties:fromObject:withCopyBlock:") ~typ:(id @-> id @-> (ptr void) @-> returning (void)) ~enc:"v40@0:8@16@24@?32" imp
let cplCopyPropertiesFromObject'withCopyBlock' imp = Define.method_spec ~cmd:(selector "cplCopyPropertiesFromObject:withCopyBlock:") ~typ:(id @-> (ptr void) @-> returning (void)) ~enc:"v32@0:8@16@?24" imp
let cplDecodePropertiesFromCoder' imp = Define.method_spec ~cmd:(selector "cplDecodePropertiesFromCoder:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let cplDeepCopy imp = Define.method_spec ~cmd:(selector "cplDeepCopy") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let cplEncodePropertiesWithCoder' imp = Define.method_spec ~cmd:(selector "cplEncodePropertiesWithCoder:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let cplFullDescription imp = Define.method_spec ~cmd:(selector "cplFullDescription") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let cplHash imp = Define.method_spec ~cmd:(selector "cplHash") ~typ:(returning (ullong)) ~enc:"Q16@0:8" imp
let cplIsEqual' imp = Define.method_spec ~cmd:(selector "cplIsEqual:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let cplIsEqual'withEqualityBlock' imp = Define.method_spec ~cmd:(selector "cplIsEqual:withEqualityBlock:") ~typ:(id @-> (ptr void) @-> returning (bool)) ~enc:"c32@0:8@16@?24" imp
let cplProperties'areEqualToPropertiesOf'diffTracker'withEqualityBlock' imp = Define.method_spec ~cmd:(selector "cplProperties:areEqualToPropertiesOf:diffTracker:withEqualityBlock:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning (bool)) ~enc:"c48@0:8@16@24@32@?40" imp
let cplProperties'areEqualToPropertiesOf'withEqualityBlock' imp = Define.method_spec ~cmd:(selector "cplProperties:areEqualToPropertiesOf:withEqualityBlock:") ~typ:(id @-> id @-> (ptr void) @-> returning (bool)) ~enc:"c40@0:8@16@24@?32" imp
let cplSpecialHash imp = Define.method_spec ~cmd:(selector "cplSpecialHash") ~typ:(returning (ullong)) ~enc:"Q16@0:8" imp
let cplSpecialIsEqual' imp = Define.method_spec ~cmd:(selector "cplSpecialIsEqual:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let createKeyValueBindingForKey'typeMask' imp = Define.method_spec ~cmd:(selector "createKeyValueBindingForKey:typeMask:") ~typ:(id @-> ullong @-> returning (id)) ~enc:"@32@0:8@16Q24" imp
let currentContextCanExecuteSelector' imp = Define.method_spec ~cmd:(selector "currentContextCanExecuteSelector:") ~typ:(_SEL @-> returning (bool)) ~enc:"c24@0:8:16" imp
let dealloc imp = Define.method_spec ~cmd:(selector "dealloc") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let debugDescription imp = Define.method_spec ~cmd:(selector "debugDescription") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let defaultAccessibilityTraits imp = Define.method_spec ~cmd:(selector "defaultAccessibilityTraits") ~typ:(returning (ullong)) ~enc:"Q16@0:8" imp
let description imp = Define.method_spec ~cmd:(selector "description") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let descriptionAtIndent' imp = Define.method_spec ~cmd:(selector "descriptionAtIndent:") ~typ:(ullong @-> returning (id)) ~enc:"@24@0:8Q16" imp
let dictionaryWithValuesForKeys' imp = Define.method_spec ~cmd:(selector "dictionaryWithValuesForKeys:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let didChange'valuesAtIndexes'forKey' imp = Define.method_spec ~cmd:(selector "didChange:valuesAtIndexes:forKey:") ~typ:(ullong @-> id @-> id @-> returning (void)) ~enc:"v40@0:8Q16@24@32" imp
let didChangeValueForKey' imp = Define.method_spec ~cmd:(selector "didChangeValueForKey:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let didChangeValueForKey'withSetMutation'usingObjects' imp = Define.method_spec ~cmd:(selector "didChangeValueForKey:withSetMutation:usingObjects:") ~typ:(id @-> ullong @-> id @-> returning (void)) ~enc:"v40@0:8@16Q24@32" imp
let doesContain' imp = Define.method_spec ~cmd:(selector "doesContain:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let doesNotRecognizeSelector' imp = Define.method_spec ~cmd:(selector "doesNotRecognizeSelector:") ~typ:(_SEL @-> returning (void)) ~enc:"v24@0:8:16" imp
let doubleValueSafe imp = Define.method_spec ~cmd:(selector "doubleValueSafe") ~typ:(returning (double)) ~enc:"d16@0:8" imp
let doubleValueSafe' imp = Define.method_spec ~cmd:(selector "doubleValueSafe:") ~typ:((ptr int) @-> returning (double)) ~enc:"d24@0:8^i16" imp
let encodeWithCAMLWriter' imp = Define.method_spec ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let endBSMResourceActivity' imp = Define.method_spec ~cmd:(selector "endBSMResourceActivity:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let entityName imp = Define.method_spec ~cmd:(selector "entityName") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let exposedBindings imp = Define.method_spec ~cmd:(selector "exposedBindings") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let finalize imp = Define.method_spec ~cmd:(selector "finalize") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let finishObserving imp = Define.method_spec ~cmd:(selector "finishObserving") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let flushKeyBindings imp = Define.method_spec ~cmd:(selector "flushKeyBindings") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let forwardInvocation' imp = Define.method_spec ~cmd:(selector "forwardInvocation:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let forwardingTargetForSelector' imp = Define.method_spec ~cmd:(selector "forwardingTargetForSelector:") ~typ:(_SEL @-> returning (id)) ~enc:"@24@0:8:16" imp
let handleInvalidExecutionContextForSelector'requirement' imp = Define.method_spec ~cmd:(selector "handleInvalidExecutionContextForSelector:requirement:") ~typ:(_SEL @-> int @-> returning (void)) ~enc:"v28@0:8:16i24" imp
let handleQueryWithUnboundKey' imp = Define.method_spec ~cmd:(selector "handleQueryWithUnboundKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let handleTakeValue'forUnboundKey' imp = Define.method_spec ~cmd:(selector "handleTakeValue:forUnboundKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let hash imp = Define.method_spec ~cmd:(selector "hash") ~typ:(returning (ullong)) ~enc:"Q16@0:8" imp
let implementsSelector' imp = Define.method_spec ~cmd:(selector "implementsSelector:") ~typ:(_SEL @-> returning (bool)) ~enc:"c24@0:8:16" imp
let indexOfAccessibilityElement' imp = Define.method_spec ~cmd:(selector "indexOfAccessibilityElement:") ~typ:(id @-> returning (llong)) ~enc:"q24@0:8@16" imp
let infoForBinding' imp = Define.method_spec ~cmd:(selector "infoForBinding:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let init imp = Define.method_spec ~cmd:(selector "init") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let initFromPQLResultSet'error' imp = Define.method_spec ~cmd:(selector "initFromPQLResultSet:error:") ~typ:(id @-> (ptr id) @-> returning (id)) ~enc:"@32@0:8@16^@24" imp
let initWithCPLArchiver' imp = Define.method_spec ~cmd:(selector "initWithCPLArchiver:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let insertValue'atIndex'inPropertyWithKey' imp = Define.method_spec ~cmd:(selector "insertValue:atIndex:inPropertyWithKey:") ~typ:(id @-> ullong @-> id @-> returning (void)) ~enc:"v40@0:8@16Q24@32" imp
let insertValue'inPropertyWithKey' imp = Define.method_spec ~cmd:(selector "insertValue:inPropertyWithKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let int64ValueSafe imp = Define.method_spec ~cmd:(selector "int64ValueSafe") ~typ:(returning (llong)) ~enc:"q16@0:8" imp
let int64ValueSafe' imp = Define.method_spec ~cmd:(selector "int64ValueSafe:") ~typ:((ptr int) @-> returning (llong)) ~enc:"q24@0:8^i16" imp
let inverseForRelationshipKey' imp = Define.method_spec ~cmd:(selector "inverseForRelationshipKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let isAXAttributedString imp = Define.method_spec ~cmd:(selector "isAXAttributedString") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let isAccessibilityElement imp = Define.method_spec ~cmd:(selector "isAccessibilityElement") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let isAccessibilityElementByDefault imp = Define.method_spec ~cmd:(selector "isAccessibilityElementByDefault") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let isCaseInsensitiveLike' imp = Define.method_spec ~cmd:(selector "isCaseInsensitiveLike:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isElementAccessibilityExposedToInterfaceBuilder imp = Define.method_spec ~cmd:(selector "isElementAccessibilityExposedToInterfaceBuilder") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let isEqual' imp = Define.method_spec ~cmd:(selector "isEqual:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isEqualTo' imp = Define.method_spec ~cmd:(selector "isEqualTo:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isFault imp = Define.method_spec ~cmd:(selector "isFault") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let isGreaterThan' imp = Define.method_spec ~cmd:(selector "isGreaterThan:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isGreaterThanOrEqualTo' imp = Define.method_spec ~cmd:(selector "isGreaterThanOrEqualTo:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isKindOfClass' imp = Define.method_spec ~cmd:(selector "isKindOfClass:") ~typ:(_Class @-> returning (bool)) ~enc:"c24@0:8#16" imp
let isLessThan' imp = Define.method_spec ~cmd:(selector "isLessThan:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isLessThanOrEqualTo' imp = Define.method_spec ~cmd:(selector "isLessThanOrEqualTo:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isLike' imp = Define.method_spec ~cmd:(selector "isLike:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isMemberOfClass' imp = Define.method_spec ~cmd:(selector "isMemberOfClass:") ~typ:(_Class @-> returning (bool)) ~enc:"c24@0:8#16" imp
let isNotEqualTo' imp = Define.method_spec ~cmd:(selector "isNotEqualTo:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let isNull imp = Define.method_spec ~cmd:(selector "isNull") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let isProxy imp = Define.method_spec ~cmd:(selector "isProxy") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let isToManyKey' imp = Define.method_spec ~cmd:(selector "isToManyKey:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let keyValueBindingForKey'typeMask' imp = Define.method_spec ~cmd:(selector "keyValueBindingForKey:typeMask:") ~typ:(id @-> ullong @-> returning (id)) ~enc:"@32@0:8@16Q24" imp
let matchesValue'usingComparison' imp = Define.method_spec ~cmd:(selector "matchesValue:usingComparison:") ~typ:(id @-> llong @-> returning (bool)) ~enc:"c32@0:8@16q24" imp
let methodDescriptionForSelector' imp = Define.method_spec ~cmd:(selector "methodDescriptionForSelector:") ~typ:(_SEL @-> returning ((ptr void))) ~enc:"^{objc_method_description=:*}24@0:8:16" imp
let methodForSelector' imp = Define.method_spec ~cmd:(selector "methodForSelector:") ~typ:(_SEL @-> returning ((ptr (ptr void)))) ~enc:"^?24@0:8:16" imp
let methodSignatureForSelector' imp = Define.method_spec ~cmd:(selector "methodSignatureForSelector:") ~typ:(_SEL @-> returning (id)) ~enc:"@24@0:8:16" imp
let multicaster'queueForSelector' imp = Define.method_spec ~cmd:(selector "multicaster:queueForSelector:") ~typ:(id @-> _SEL @-> returning (id)) ~enc:"@32@0:8@16:24" imp
let mutableArrayValueForKey' imp = Define.method_spec ~cmd:(selector "mutableArrayValueForKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let mutableArrayValueForKeyPath' imp = Define.method_spec ~cmd:(selector "mutableArrayValueForKeyPath:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let mutableCopy imp = Define.method_spec ~cmd:(selector "mutableCopy") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let mutableOrderedSetValueForKey' imp = Define.method_spec ~cmd:(selector "mutableOrderedSetValueForKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let mutableOrderedSetValueForKeyPath' imp = Define.method_spec ~cmd:(selector "mutableOrderedSetValueForKeyPath:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let mutableSetValueForKey' imp = Define.method_spec ~cmd:(selector "mutableSetValueForKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let mutableSetValueForKeyPath' imp = Define.method_spec ~cmd:(selector "mutableSetValueForKeyPath:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let newScriptingObjectOfClass'forValueForKey'withContentsValue'properties' imp = Define.method_spec ~cmd:(selector "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") ~typ:(_Class @-> id @-> id @-> id @-> returning (id)) ~enc:"@48@0:8#16@24@32@40" imp
let objectSpecifier imp = Define.method_spec ~cmd:(selector "objectSpecifier") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let objectWithStoreLibraryPersonalizationRelativeModelObject' imp = Define.method_spec ~cmd:(selector "objectWithStoreLibraryPersonalizationRelativeModelObject:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let observationInfo imp = Define.method_spec ~cmd:(selector "observationInfo") ~typ:(returning ((ptr void))) ~enc:"^v16@0:8" imp
let observeValueForKeyPath'ofObject'change'context' imp = Define.method_spec ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning (void)) ~enc:"v48@0:8@16@24@32^v40" imp
let optionDescriptionsForBinding' imp = Define.method_spec ~cmd:(selector "optionDescriptionsForBinding:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let ownsDestinationObjectsForRelationshipKey' imp = Define.method_spec ~cmd:(selector "ownsDestinationObjectsForRelationshipKey:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let performSelector' imp = Define.method_spec ~cmd:(selector "performSelector:") ~typ:(_SEL @-> returning (id)) ~enc:"@24@0:8:16" imp
let performSelector'object'afterDelay' imp = Define.method_spec ~cmd:(selector "performSelector:object:afterDelay:") ~typ:(_SEL @-> id @-> double @-> returning (void)) ~enc:"v40@0:8:16@24d32" imp
let performSelector'onThread'withObject'waitUntilDone' imp = Define.method_spec ~cmd:(selector "performSelector:onThread:withObject:waitUntilDone:") ~typ:(_SEL @-> id @-> id @-> bool @-> returning (void)) ~enc:"v44@0:8:16@24@32c40" imp
let performSelector'onThread'withObject'waitUntilDone'modes' imp = Define.method_spec ~cmd:(selector "performSelector:onThread:withObject:waitUntilDone:modes:") ~typ:(_SEL @-> id @-> id @-> bool @-> id @-> returning (void)) ~enc:"v52@0:8:16@24@32c40@44" imp
let performSelector'withObject' imp = Define.method_spec ~cmd:(selector "performSelector:withObject:") ~typ:(_SEL @-> id @-> returning (id)) ~enc:"@32@0:8:16@24" imp
let performSelector'withObject'afterDelay' imp = Define.method_spec ~cmd:(selector "performSelector:withObject:afterDelay:") ~typ:(_SEL @-> id @-> double @-> returning (void)) ~enc:"v40@0:8:16@24d32" imp
let performSelector'withObject'afterDelay'ignoreMenuTracking' imp = Define.method_spec ~cmd:(selector "performSelector:withObject:afterDelay:ignoreMenuTracking:") ~typ:(_SEL @-> id @-> double @-> bool @-> returning (void)) ~enc:"v44@0:8:16@24d32c40" imp
let performSelector'withObject'afterDelay'inModes' imp = Define.method_spec ~cmd:(selector "performSelector:withObject:afterDelay:inModes:") ~typ:(_SEL @-> id @-> double @-> id @-> returning (void)) ~enc:"v48@0:8:16@24d32@40" imp
let performSelector'withObject'withObject' imp = Define.method_spec ~cmd:(selector "performSelector:withObject:withObject:") ~typ:(_SEL @-> id @-> id @-> returning (id)) ~enc:"@40@0:8:16@24@32" imp
let performSelectorInBackground'withObject' imp = Define.method_spec ~cmd:(selector "performSelectorInBackground:withObject:") ~typ:(_SEL @-> id @-> returning (void)) ~enc:"v32@0:8:16@24" imp
let performSelectorOnMainThread'withObject'waitUntilDone' imp = Define.method_spec ~cmd:(selector "performSelectorOnMainThread:withObject:waitUntilDone:") ~typ:(_SEL @-> id @-> bool @-> returning (void)) ~enc:"v36@0:8:16@24c32" imp
let performSelectorOnMainThread'withObject'waitUntilDone'modes' imp = Define.method_spec ~cmd:(selector "performSelectorOnMainThread:withObject:waitUntilDone:modes:") ~typ:(_SEL @-> id @-> bool @-> id @-> returning (void)) ~enc:"v44@0:8:16@24c32@36" imp
let personalizationScopedPropertiesForProperties' imp = Define.method_spec ~cmd:(selector "personalizationScopedPropertiesForProperties:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let pkaxRespondsToSelector'fromExtrasProtocol' imp = Define.method_spec ~cmd:(selector "pkaxRespondsToSelector:fromExtrasProtocol:") ~typ:(_SEL @-> id @-> returning (bool)) ~enc:"c32@0:8:16@24" imp
let pkaxValueForKey' imp = Define.method_spec ~cmd:(selector "pkaxValueForKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let plistArchiveWithCPLArchiver' imp = Define.method_spec ~cmd:(selector "plistArchiveWithCPLArchiver:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let prepareForInterfaceBuilder imp = Define.method_spec ~cmd:(selector "prepareForInterfaceBuilder") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let receiveObservedError' imp = Define.method_spec ~cmd:(selector "receiveObservedError:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let receiveObservedValue' imp = Define.method_spec ~cmd:(selector "receiveObservedValue:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let registerBSMResourceClient' imp = Define.method_spec ~cmd:(selector "registerBSMResourceClient:") ~typ:(id @-> returning (bool)) ~enc:"c24@0:8@16" imp
let relativeModelObjectForStoreLibraryPersonalization imp = Define.method_spec ~cmd:(selector "relativeModelObjectForStoreLibraryPersonalization") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let release imp = Define.method_spec ~cmd:(selector "release") ~typ:(returning (void)) ~enc:"Vv16@0:8" imp
let releaseOnMainThread imp = Define.method_spec ~cmd:(selector "releaseOnMainThread") ~typ:(returning (void)) ~enc:"v16@0:8" imp
let removeObject'fromBothSidesOfRelationshipWithKey' imp = Define.method_spec ~cmd:(selector "removeObject:fromBothSidesOfRelationshipWithKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let removeObject'fromPropertyWithKey' imp = Define.method_spec ~cmd:(selector "removeObject:fromPropertyWithKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let removeObservation' imp = Define.method_spec ~cmd:(selector "removeObservation:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let removeObservation'forObservableKeyPath' imp = Define.method_spec ~cmd:(selector "removeObservation:forObservableKeyPath:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let removeObserver'forKeyPath' imp = Define.method_spec ~cmd:(selector "removeObserver:forKeyPath:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let removeObserver'forKeyPath'context' imp = Define.method_spec ~cmd:(selector "removeObserver:forKeyPath:context:") ~typ:(id @-> id @-> (ptr void) @-> returning (void)) ~enc:"v40@0:8@16@24^v32" imp
let removeValueAtIndex'fromPropertyWithKey' imp = Define.method_spec ~cmd:(selector "removeValueAtIndex:fromPropertyWithKey:") ~typ:(ullong @-> id @-> returning (void)) ~enc:"v32@0:8Q16@24" imp
let replaceValueAtIndex'inPropertyWithKey'withValue' imp = Define.method_spec ~cmd:(selector "replaceValueAtIndex:inPropertyWithKey:withValue:") ~typ:(ullong @-> id @-> id @-> returning (void)) ~enc:"v40@0:8Q16@24@32" imp
let replacementObjectForArchiver' imp = Define.method_spec ~cmd:(selector "replacementObjectForArchiver:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let replacementObjectForCoder' imp = Define.method_spec ~cmd:(selector "replacementObjectForCoder:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let replacementObjectForKeyedArchiver' imp = Define.method_spec ~cmd:(selector "replacementObjectForKeyedArchiver:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let replacementObjectForPortCoder' imp = Define.method_spec ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let resourceAccessIdentifier imp = Define.method_spec ~cmd:(selector "resourceAccessIdentifier") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let respondsToSelector' imp = Define.method_spec ~cmd:(selector "respondsToSelector:") ~typ:(_SEL @-> returning (bool)) ~enc:"c24@0:8:16" imp
let retain imp = Define.method_spec ~cmd:(selector "retain") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let retainCount imp = Define.method_spec ~cmd:(selector "retainCount") ~typ:(returning (ullong)) ~enc:"Q16@0:8" imp
let retainWeakReference imp = Define.method_spec ~cmd:(selector "retainWeakReference") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let runBlockWithBSMResourceAccess' imp = Define.method_spec ~cmd:(selector "runBlockWithBSMResourceAccess:") ~typ:((ptr void) @-> returning (bool)) ~enc:"c24@0:8@?16" imp
let scriptingProperties imp = Define.method_spec ~cmd:(selector "scriptingProperties") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let scriptingValueForSpecifier' imp = Define.method_spec ~cmd:(selector "scriptingValueForSpecifier:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let self_ imp = Define.method_spec ~cmd:(selector "self") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let setAccessibilityActivationPoint' imp = Define.method_spec ~cmd:(selector "setAccessibilityActivationPoint:") ~typ:(CGPoint.t @-> returning (void)) ~enc:"v32@0:8{CGPoint=dd}16" imp
let setAccessibilityAttributedHint' imp = Define.method_spec ~cmd:(selector "setAccessibilityAttributedHint:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityAttributedLabel' imp = Define.method_spec ~cmd:(selector "setAccessibilityAttributedLabel:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityAttributedUserInputLabels' imp = Define.method_spec ~cmd:(selector "setAccessibilityAttributedUserInputLabels:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityAttributedValue' imp = Define.method_spec ~cmd:(selector "setAccessibilityAttributedValue:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityBrailleMapRenderRegion' imp = Define.method_spec ~cmd:(selector "setAccessibilityBrailleMapRenderRegion:") ~typ:(CGRect.t @-> returning (void)) ~enc:"v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16" imp
let setAccessibilityBrailleMapRenderer' imp = Define.method_spec ~cmd:(selector "setAccessibilityBrailleMapRenderer:") ~typ:((ptr void) @-> returning (void)) ~enc:"v24@0:8@?16" imp
let setAccessibilityContainer' imp = Define.method_spec ~cmd:(selector "setAccessibilityContainer:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityContainerType' imp = Define.method_spec ~cmd:(selector "setAccessibilityContainerType:") ~typ:(llong @-> returning (void)) ~enc:"v24@0:8q16" imp
let setAccessibilityCustomActions' imp = Define.method_spec ~cmd:(selector "setAccessibilityCustomActions:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityCustomRotors' imp = Define.method_spec ~cmd:(selector "setAccessibilityCustomRotors:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityDragSourceDescriptors' imp = Define.method_spec ~cmd:(selector "setAccessibilityDragSourceDescriptors:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityDropPointDescriptors' imp = Define.method_spec ~cmd:(selector "setAccessibilityDropPointDescriptors:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityElements' imp = Define.method_spec ~cmd:(selector "setAccessibilityElements:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityElementsHidden' imp = Define.method_spec ~cmd:(selector "setAccessibilityElementsHidden:") ~typ:(bool @-> returning (void)) ~enc:"v20@0:8c16" imp
let setAccessibilityFrame' imp = Define.method_spec ~cmd:(selector "setAccessibilityFrame:") ~typ:(CGRect.t @-> returning (void)) ~enc:"v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16" imp
let setAccessibilityHeaderElements' imp = Define.method_spec ~cmd:(selector "setAccessibilityHeaderElements:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityHint' imp = Define.method_spec ~cmd:(selector "setAccessibilityHint:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityIdentifier' imp = Define.method_spec ~cmd:(selector "setAccessibilityIdentifier:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityLabel' imp = Define.method_spec ~cmd:(selector "setAccessibilityLabel:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityLanguage' imp = Define.method_spec ~cmd:(selector "setAccessibilityLanguage:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityNavigationStyle' imp = Define.method_spec ~cmd:(selector "setAccessibilityNavigationStyle:") ~typ:(llong @-> returning (void)) ~enc:"v24@0:8q16" imp
let setAccessibilityPath' imp = Define.method_spec ~cmd:(selector "setAccessibilityPath:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityRespondsToUserInteraction' imp = Define.method_spec ~cmd:(selector "setAccessibilityRespondsToUserInteraction:") ~typ:(bool @-> returning (void)) ~enc:"v20@0:8c16" imp
let setAccessibilityTextualContext' imp = Define.method_spec ~cmd:(selector "setAccessibilityTextualContext:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityTraits' imp = Define.method_spec ~cmd:(selector "setAccessibilityTraits:") ~typ:(ullong @-> returning (void)) ~enc:"v24@0:8Q16" imp
let setAccessibilityUserInputLabels' imp = Define.method_spec ~cmd:(selector "setAccessibilityUserInputLabels:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityValue' imp = Define.method_spec ~cmd:(selector "setAccessibilityValue:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setAccessibilityViewIsModal' imp = Define.method_spec ~cmd:(selector "setAccessibilityViewIsModal:") ~typ:(bool @-> returning (void)) ~enc:"v20@0:8c16" imp
let setAssociatedObject'forKey' imp = Define.method_spec ~cmd:(selector "setAssociatedObject:forKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let setIsAccessibilityElement' imp = Define.method_spec ~cmd:(selector "setIsAccessibilityElement:") ~typ:(bool @-> returning (void)) ~enc:"v20@0:8c16" imp
let setNilValueForKey' imp = Define.method_spec ~cmd:(selector "setNilValueForKey:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setObservation'forObservingKeyPath' imp = Define.method_spec ~cmd:(selector "setObservation:forObservingKeyPath:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let setObservationInfo' imp = Define.method_spec ~cmd:(selector "setObservationInfo:") ~typ:((ptr void) @-> returning (void)) ~enc:"v24@0:8^v16" imp
let setResourceAccessIdentifier' imp = Define.method_spec ~cmd:(selector "setResourceAccessIdentifier:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setScriptingProperties' imp = Define.method_spec ~cmd:(selector "setScriptingProperties:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setShouldGroupAccessibilityChildren' imp = Define.method_spec ~cmd:(selector "setShouldGroupAccessibilityChildren:") ~typ:(bool @-> returning (void)) ~enc:"v20@0:8c16" imp
let setUserInterfaceItemIdentifier' imp = Define.method_spec ~cmd:(selector "setUserInterfaceItemIdentifier:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let setValue'forKey' imp = Define.method_spec ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let setValue'forKeyPath' imp = Define.method_spec ~cmd:(selector "setValue:forKeyPath:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let setValue'forUndefinedKey' imp = Define.method_spec ~cmd:(selector "setValue:forUndefinedKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let setValuesForKeysWithDictionary' imp = Define.method_spec ~cmd:(selector "setValuesForKeysWithDictionary:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let shouldGroupAccessibilityChildren imp = Define.method_spec ~cmd:(selector "shouldGroupAccessibilityChildren") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let storedAccessibilityActivationPoint imp = Define.method_spec ~cmd:(selector "storedAccessibilityActivationPoint") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedAccessibilityContainerType imp = Define.method_spec ~cmd:(selector "storedAccessibilityContainerType") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedAccessibilityElementsHidden imp = Define.method_spec ~cmd:(selector "storedAccessibilityElementsHidden") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedAccessibilityFrame imp = Define.method_spec ~cmd:(selector "storedAccessibilityFrame") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedAccessibilityIdentifier imp = Define.method_spec ~cmd:(selector "storedAccessibilityIdentifier") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedAccessibilityNavigationStyle imp = Define.method_spec ~cmd:(selector "storedAccessibilityNavigationStyle") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedAccessibilityRespondsToUserInteraction imp = Define.method_spec ~cmd:(selector "storedAccessibilityRespondsToUserInteraction") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedAccessibilityTraits imp = Define.method_spec ~cmd:(selector "storedAccessibilityTraits") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedAccessibilityViewIsModal imp = Define.method_spec ~cmd:(selector "storedAccessibilityViewIsModal") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedClassNameForCPLArchiver' imp = Define.method_spec ~cmd:(selector "storedClassNameForCPLArchiver:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let storedIsAccessibilityElement imp = Define.method_spec ~cmd:(selector "storedIsAccessibilityElement") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedShouldGroupAccessibilityChildren imp = Define.method_spec ~cmd:(selector "storedShouldGroupAccessibilityChildren") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let storedValueForKey' imp = Define.method_spec ~cmd:(selector "storedValueForKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let stringValueSafe imp = Define.method_spec ~cmd:(selector "stringValueSafe") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let stringValueSafe' imp = Define.method_spec ~cmd:(selector "stringValueSafe:") ~typ:((ptr int) @-> returning (id)) ~enc:"@24@0:8^i16" imp
let superclass imp = Define.method_spec ~cmd:(selector "superclass") ~typ:(returning (_Class)) ~enc:"#16@0:8" imp
let supportsBSXPCSecureCoding imp = Define.method_spec ~cmd:(selector "supportsBSXPCSecureCoding") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let supportsRBSXPCSecureCoding imp = Define.method_spec ~cmd:(selector "supportsRBSXPCSecureCoding") ~typ:(returning (bool)) ~enc:"c16@0:8" imp
let takeStoredValue'forKey' imp = Define.method_spec ~cmd:(selector "takeStoredValue:forKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let takeStoredValuesFromDictionary' imp = Define.method_spec ~cmd:(selector "takeStoredValuesFromDictionary:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let takeValue'forKey' imp = Define.method_spec ~cmd:(selector "takeValue:forKey:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let takeValue'forKeyPath' imp = Define.method_spec ~cmd:(selector "takeValue:forKeyPath:") ~typ:(id @-> id @-> returning (void)) ~enc:"v32@0:8@16@24" imp
let takeValuesFromDictionary' imp = Define.method_spec ~cmd:(selector "takeValuesFromDictionary:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let toManyRelationshipKeys imp = Define.method_spec ~cmd:(selector "toManyRelationshipKeys") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let toOneRelationshipKeys imp = Define.method_spec ~cmd:(selector "toOneRelationshipKeys") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let toPBCodable imp = Define.method_spec ~cmd:(selector "toPBCodable") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let uiPresentationManager imp = Define.method_spec ~cmd:(selector "uiPresentationManager") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let unableToSetNilForKey' imp = Define.method_spec ~cmd:(selector "unableToSetNilForKey:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let unbind' imp = Define.method_spec ~cmd:(selector "unbind:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let unregisterBSMResourceClient' imp = Define.method_spec ~cmd:(selector "unregisterBSMResourceClient:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let userInterfaceItemIdentifier imp = Define.method_spec ~cmd:(selector "userInterfaceItemIdentifier") ~typ:(returning (id)) ~enc:"@16@0:8" imp
let utf8ValueSafe imp = Define.method_spec ~cmd:(selector "utf8ValueSafe") ~typ:(returning (string)) ~enc:"r*16@0:8" imp
let utf8ValueSafe' imp = Define.method_spec ~cmd:(selector "utf8ValueSafe:") ~typ:((ptr int) @-> returning (string)) ~enc:"r*24@0:8^i16" imp
let validateTakeValue'forKeyPath' imp = Define.method_spec ~cmd:(selector "validateTakeValue:forKeyPath:") ~typ:(id @-> id @-> returning (id)) ~enc:"@32@0:8@16@24" imp
let validateValue'forKey' imp = Define.method_spec ~cmd:(selector "validateValue:forKey:") ~typ:((ptr id) @-> id @-> returning (id)) ~enc:"@32@0:8^@16@24" imp
let validateValue'forKey'error' imp = Define.method_spec ~cmd:(selector "validateValue:forKey:error:") ~typ:((ptr id) @-> id @-> (ptr id) @-> returning (bool)) ~enc:"c40@0:8N^@16@24o^@32" imp
let validateValue'forKeyPath'error' imp = Define.method_spec ~cmd:(selector "validateValue:forKeyPath:error:") ~typ:((ptr id) @-> id @-> (ptr id) @-> returning (bool)) ~enc:"c40@0:8N^@16@24o^@32" imp
let valueAtIndex'inPropertyWithKey' imp = Define.method_spec ~cmd:(selector "valueAtIndex:inPropertyWithKey:") ~typ:(ullong @-> id @-> returning (id)) ~enc:"@32@0:8Q16@24" imp
let valueClassForBinding' imp = Define.method_spec ~cmd:(selector "valueClassForBinding:") ~typ:(id @-> returning (_Class)) ~enc:"#24@0:8@16" imp
let valueForKey' imp = Define.method_spec ~cmd:(selector "valueForKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let valueForKeyPath' imp = Define.method_spec ~cmd:(selector "valueForKeyPath:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let valueForUndefinedKey' imp = Define.method_spec ~cmd:(selector "valueForUndefinedKey:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let valueWithName'inPropertyWithKey' imp = Define.method_spec ~cmd:(selector "valueWithName:inPropertyWithKey:") ~typ:(id @-> id @-> returning (id)) ~enc:"@32@0:8@16@24" imp
let valueWithUniqueID'inPropertyWithKey' imp = Define.method_spec ~cmd:(selector "valueWithUniqueID:inPropertyWithKey:") ~typ:(id @-> id @-> returning (id)) ~enc:"@32@0:8@16@24" imp
let valuesForKeys' imp = Define.method_spec ~cmd:(selector "valuesForKeys:") ~typ:(id @-> returning (id)) ~enc:"@24@0:8@16" imp
let willChange'valuesAtIndexes'forKey' imp = Define.method_spec ~cmd:(selector "willChange:valuesAtIndexes:forKey:") ~typ:(ullong @-> id @-> id @-> returning (void)) ~enc:"v40@0:8Q16@24@32" imp
let willChangeValueForKey' imp = Define.method_spec ~cmd:(selector "willChangeValueForKey:") ~typ:(id @-> returning (void)) ~enc:"v24@0:8@16" imp
let willChangeValueForKey'withSetMutation'usingObjects' imp = Define.method_spec ~cmd:(selector "willChangeValueForKey:withSetMutation:usingObjects:") ~typ:(id @-> ullong @-> id @-> returning (void)) ~enc:"v40@0:8@16Q24@32" imp
let zone imp = Define.method_spec ~cmd:(selector "zone") ~typ:(returning ((ptr void))) ~enc:"^{_NSZone=}16@0:8" imp
