(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open CoreFoundation
open CoreGraphics

(** Apple docs: {{:https://developer.apple.com/documentation/foundation/nsstring?language=objc}NSString} *)

let self = get_class "NSString"

let _CAMLType self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning id)
let _CKBase64DecodedString self = msg_send ~self ~cmd:(selector "CKBase64DecodedString") ~typ:(returning id)
let _CKBase64EncodedURLSafeString self = msg_send ~self ~cmd:(selector "CKBase64EncodedURLSafeString") ~typ:(returning id)
let _CKMangledDocumentNameForURLFragment self = msg_send ~self ~cmd:(selector "CKMangledDocumentNameForURLFragment") ~typ:(returning id)
let _CKNilIfLengthZero self = msg_send ~self ~cmd:(selector "CKNilIfLengthZero") ~typ:(returning id)
let _CKSHA256 self = msg_send ~self ~cmd:(selector "CKSHA256") ~typ:(returning id)
let _CKSafeHashStringForPathComponent self = msg_send ~self ~cmd:(selector "CKSafeHashStringForPathComponent") ~typ:(returning id)
let _CKSafeStringForPathComponent self = msg_send ~self ~cmd:(selector "CKSafeStringForPathComponent") ~typ:(returning id)
let _CKSafeStringForURLPathComponent self = msg_send ~self ~cmd:(selector "CKSafeStringForURLPathComponent") ~typ:(returning id)
let _CKSafeStringForURLWithCharsToBeEscaped x self = msg_send ~self ~cmd:(selector "CKSafeStringForURLWithCharsToBeEscaped:") ~typ:(id @-> returning id) x
let _CKSanitizedPath self = msg_send ~self ~cmd:(selector "CKSanitizedPath") ~typ:(returning id)
let _CKStringByReplacingUUIDsWithString x self = msg_send ~self ~cmd:(selector "CKStringByReplacingUUIDsWithString:") ~typ:(id @-> returning id) x
let _CKUnmangledDocumentNameFromURLFragment self = msg_send ~self ~cmd:(selector "CKUnmangledDocumentNameFromURLFragment") ~typ:(returning id)
let _DMCAppendDeviceName self = msg_send ~self ~cmd:(selector "DMCAppendDeviceName") ~typ:(returning id)
let _DMCAppendGreenteaSuffix self = msg_send ~self ~cmd:(selector "DMCAppendGreenteaSuffix") ~typ:(returning id)
let _IDSFormattedDestinationID self = msg_send ~self ~cmd:(selector "IDSFormattedDestinationID") ~typ:(returning id)
let _LTRString self = msg_send ~self ~cmd:(selector "LTRString") ~typ:(returning id)
let _RTLString self = msg_send ~self ~cmd:(selector "RTLString") ~typ:(returning id)
let _UTF8String self = msg_send ~self ~cmd:(selector "UTF8String") ~typ:(returning string)
let abCaseNormalizedCopy self = msg_send ~self ~cmd:(selector "abCaseNormalizedCopy") ~typ:(returning id)
let abEnumerateCharactersWithOptions x ~usingBlock self = msg_send ~self ~cmd:(selector "abEnumerateCharactersWithOptions:usingBlock:") ~typ:(ullong @-> (ptr void) @-> returning void) (ULLong.of_int x) usingBlock
let abNameComponentTokens self = msg_send ~self ~cmd:(selector "abNameComponentTokens") ~typ:(returning id)
let abNameComponentTokensUsingLocale x ~inferredNameOrder self = msg_send ~self ~cmd:(selector "abNameComponentTokensUsingLocale:inferredNameOrder:") ~typ:(id @-> (ptr llong) @-> returning id) x inferredNameOrder
let abNormalizedUID self = msg_send ~self ~cmd:(selector "abNormalizedUID") ~typ:(returning id)
let abSha1HashString self = msg_send ~self ~cmd:(selector "abSha1HashString") ~typ:(returning id)
let abStandardizedPhoneNumber self = msg_send ~self ~cmd:(selector "abStandardizedPhoneNumber") ~typ:(returning id)
let abStringByRemovingPunctuation self = msg_send ~self ~cmd:(selector "abStringByRemovingPunctuation") ~typ:(returning id)
let abUIDWithTableName x self = msg_send ~self ~cmd:(selector "abUIDWithTableName:") ~typ:(id @-> returning id) x
let abVCardDataRepresentation self = msg_send ~self ~cmd:(selector "abVCardDataRepresentation") ~typ:(returning id)
let abWords self = msg_send ~self ~cmd:(selector "abWords") ~typ:(returning id)
let associatedPerson self = msg_send ~self ~cmd:(selector "associatedPerson") ~typ:(returning id)
let axAttributedStringWithAttributes x self = msg_send ~self ~cmd:(selector "axAttributedStringWithAttributes:") ~typ:(id @-> returning id) x
let boolValue self = msg_send ~self ~cmd:(selector "boolValue") ~typ:(returning bool)
let boundingRectWithSize x ~options ~attributes self = msg_send_stret ~self ~cmd:(selector "boundingRectWithSize:options:attributes:") ~typ:(CGSize.t @-> llong @-> id @-> returning CGRect.t) ~return_type:CGRect.t x (LLong.of_int options) attributes
let boundingRectWithSize' x ~options ~attributes ~context self = msg_send_stret ~self ~cmd:(selector "boundingRectWithSize:options:attributes:context:") ~typ:(CGSize.t @-> llong @-> id @-> id @-> returning CGRect.t) ~return_type:CGRect.t x (LLong.of_int options) attributes context
let c2UniformlyDistributedIdentifier self = msg_send ~self ~cmd:(selector "c2UniformlyDistributedIdentifier") ~typ:(returning ullong)
let cString self = msg_send ~self ~cmd:(selector "cString") ~typ:(returning string)
let cStringLength self = msg_send ~self ~cmd:(selector "cStringLength") ~typ:(returning ullong)
let cStringUsingEncoding x self = msg_send ~self ~cmd:(selector "cStringUsingEncoding:") ~typ:(ullong @-> returning string) (ULLong.of_int x)
let canBeConvertedToEncoding x self = msg_send ~self ~cmd:(selector "canBeConvertedToEncoding:") ~typ:(ullong @-> returning bool) (ULLong.of_int x)
let capitalizedString self = msg_send ~self ~cmd:(selector "capitalizedString") ~typ:(returning id)
let capitalizedStringWithLocale x self = msg_send ~self ~cmd:(selector "capitalizedStringWithLocale:") ~typ:(id @-> returning id) x
let caseInsensitiveCompare x self = msg_send ~self ~cmd:(selector "caseInsensitiveCompare:") ~typ:(id @-> returning llong) x
let characterAtIndex x self = msg_send ~self ~cmd:(selector "characterAtIndex:") ~typ:(ullong @-> returning ushort) (ULLong.of_int x)
let ckShortDescription self = msg_send ~self ~cmd:(selector "ckShortDescription") ~typ:(returning id)
let classForCoder self = msg_send ~self ~cmd:(selector "classForCoder") ~typ:(returning _Class)
let cnLabelForPerson x self = msg_send ~self ~cmd:(selector "cnLabelForPerson:") ~typ:(id @-> returning id) x
let commonPrefixWithString x ~options self = msg_send ~self ~cmd:(selector "commonPrefixWithString:options:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int options)
let compare x self = msg_send ~self ~cmd:(selector "compare:") ~typ:(id @-> returning llong) x
let compare1 x ~options self = msg_send ~self ~cmd:(selector "compare:options:") ~typ:(id @-> ullong @-> returning llong) x (ULLong.of_int options)
let compare2 x ~options ~range self = msg_send ~self ~cmd:(selector "compare:options:range:") ~typ:(id @-> ullong @-> NSRange.t @-> returning llong) x (ULLong.of_int options) range
let compare3 x ~options ~range ~locale self = msg_send ~self ~cmd:(selector "compare:options:range:locale:") ~typ:(id @-> ullong @-> NSRange.t @-> id @-> returning llong) x (ULLong.of_int options) range locale
let comparePlaylistString x self = msg_send ~self ~cmd:(selector "comparePlaylistString:") ~typ:(id @-> returning llong) x
let compareTrackString x self = msg_send ~self ~cmd:(selector "compareTrackString:") ~typ:(id @-> returning llong) x
let compareTrimmedTrackString x self = msg_send ~self ~cmd:(selector "compareTrimmedTrackString:") ~typ:(id @-> returning llong) x
let compareVersionString x self = msg_send ~self ~cmd:(selector "compareVersionString:") ~typ:(id @-> returning llong) x
let completePathIntoString x ~caseSensitive ~matchesIntoArray ~filterTypes self = msg_send ~self ~cmd:(selector "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") ~typ:((ptr id) @-> bool @-> (ptr id) @-> id @-> returning ullong) x caseSensitive matchesIntoArray filterTypes
let componentsByLanguage x self = msg_send ~self ~cmd:(selector "componentsByLanguage:") ~typ:(int @-> returning id) x
let componentsSeparatedByCharactersInSet x self = msg_send ~self ~cmd:(selector "componentsSeparatedByCharactersInSet:") ~typ:(id @-> returning id) x
let componentsSeparatedByString x self = msg_send ~self ~cmd:(selector "componentsSeparatedByString:") ~typ:(id @-> returning id) x
let containsCaseInsensitiveRegEx x self = msg_send ~self ~cmd:(selector "containsCaseInsensitiveRegEx:") ~typ:(id @-> returning bool) x
let containsRegEx x self = msg_send ~self ~cmd:(selector "containsRegEx:") ~typ:(id @-> returning bool) x
let containsString x self = msg_send ~self ~cmd:(selector "containsString:") ~typ:(id @-> returning bool) x
let containsSubstring x self = msg_send ~self ~cmd:(selector "containsSubstring:") ~typ:(id @-> returning bool) x
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:((ptr void) @-> returning id) x
let cutStringByResolvingAndStandardizingPath self = msg_send ~self ~cmd:(selector "cutStringByResolvingAndStandardizingPath") ~typ:(returning id)
let dataUsingEncoding x self = msg_send ~self ~cmd:(selector "dataUsingEncoding:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let dataUsingEncoding' x ~allowLossyConversion self = msg_send ~self ~cmd:(selector "dataUsingEncoding:allowLossyConversion:") ~typ:(ullong @-> bool @-> returning id) (ULLong.of_int x) allowLossyConversion
let decimalValue self = msg_send ~self ~cmd:(selector "decimalValue") ~typ:(returning void)
let decomposedStringWithCanonicalMapping self = msg_send ~self ~cmd:(selector "decomposedStringWithCanonicalMapping") ~typ:(returning id)
let decomposedStringWithCompatibilityMapping self = msg_send ~self ~cmd:(selector "decomposedStringWithCompatibilityMapping") ~typ:(returning id)
let dedup self = msg_send ~self ~cmd:(selector "dedup") ~typ:(returning id)
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let destinationIdIsCallControlCode self = msg_send ~self ~cmd:(selector "destinationIdIsCallControlCode") ~typ:(returning bool)
let destinationIdIsEmailAddress self = msg_send ~self ~cmd:(selector "destinationIdIsEmailAddress") ~typ:(returning bool)
let destinationIdIsHardware self = msg_send ~self ~cmd:(selector "destinationIdIsHardware") ~typ:(returning bool)
let destinationIdIsPhoneNumber self = msg_send ~self ~cmd:(selector "destinationIdIsPhoneNumber") ~typ:(returning bool)
let destinationIdIsPseudonym self = msg_send ~self ~cmd:(selector "destinationIdIsPseudonym") ~typ:(returning bool)
let destinationIdIsTemporary self = msg_send ~self ~cmd:(selector "destinationIdIsTemporary") ~typ:(returning bool)
let destinationIdIsTokenURI self = msg_send ~self ~cmd:(selector "destinationIdIsTokenURI") ~typ:(returning bool)
let destinationLightweightStatus self = msg_send ~self ~cmd:(selector "destinationLightweightStatus") ~typ:(returning id)
let destinationURIs self = msg_send ~self ~cmd:(selector "destinationURIs") ~typ:(returning id)
let displayableString self = msg_send ~self ~cmd:(selector "displayableString") ~typ:(returning id)
let doubleValue self = msg_send ~self ~cmd:(selector "doubleValue") ~typ:(returning double)
let drawAtPoint x ~withAttributes self = msg_send ~self ~cmd:(selector "drawAtPoint:withAttributes:") ~typ:(CGPoint.t @-> id @-> returning void) x withAttributes
let drawAtPoint1 x ~withFont self = msg_send_stret ~self ~cmd:(selector "drawAtPoint:withFont:") ~typ:(CGPoint.t @-> id @-> returning CGSize.t) ~return_type:CGSize.t x withFont
let drawAtPoint2 x ~forWidth ~withFont ~lineBreakMode self = msg_send_stret ~self ~cmd:(selector "drawAtPoint:forWidth:withFont:lineBreakMode:") ~typ:(CGPoint.t @-> double @-> id @-> llong @-> returning CGSize.t) ~return_type:CGSize.t x forWidth withFont (LLong.of_int lineBreakMode)
let drawAtPoint3 x ~forWidth ~withFont ~lineBreakMode ~letterSpacing self = msg_send_stret ~self ~cmd:(selector "drawAtPoint:forWidth:withFont:lineBreakMode:letterSpacing:") ~typ:(CGPoint.t @-> double @-> id @-> llong @-> double @-> returning CGSize.t) ~return_type:CGSize.t x forWidth withFont (LLong.of_int lineBreakMode) letterSpacing
let drawAtPoint4 x ~forWidth ~withFont ~fontSize ~lineBreakMode ~baselineAdjustment self = msg_send_stret ~self ~cmd:(selector "drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:") ~typ:(CGPoint.t @-> double @-> id @-> double @-> llong @-> llong @-> returning CGSize.t) ~return_type:CGSize.t x forWidth withFont fontSize (LLong.of_int lineBreakMode) (LLong.of_int baselineAdjustment)
let drawAtPoint5 x ~forWidth ~withFont ~lineBreakMode ~letterSpacing ~includeEmoji self = msg_send_stret ~self ~cmd:(selector "drawAtPoint:forWidth:withFont:lineBreakMode:letterSpacing:includeEmoji:") ~typ:(CGPoint.t @-> double @-> id @-> llong @-> double @-> bool @-> returning CGSize.t) ~return_type:CGSize.t x forWidth withFont (LLong.of_int lineBreakMode) letterSpacing includeEmoji
let drawAtPoint6 x ~forWidth ~withFont ~fontSize ~lineBreakMode ~baselineAdjustment ~includeEmoji self = msg_send_stret ~self ~cmd:(selector "drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:includeEmoji:") ~typ:(CGPoint.t @-> double @-> id @-> double @-> llong @-> llong @-> bool @-> returning CGSize.t) ~return_type:CGSize.t x forWidth withFont fontSize (LLong.of_int lineBreakMode) (LLong.of_int baselineAdjustment) includeEmoji
let drawAtPoint7 x ~forWidth ~withFont ~minFontSize ~actualFontSize ~lineBreakMode ~baselineAdjustment self = msg_send_stret ~self ~cmd:(selector "drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:") ~typ:(CGPoint.t @-> double @-> id @-> double @-> (ptr double) @-> llong @-> llong @-> returning CGSize.t) ~return_type:CGSize.t x forWidth withFont minFontSize actualFontSize (LLong.of_int lineBreakMode) (LLong.of_int baselineAdjustment)
let drawAtPoint8 x ~forWidth ~withFont ~minFontSize ~actualFontSize ~lineBreakMode ~baselineAdjustment ~includeEmoji self = msg_send_stret ~self ~cmd:(selector "drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:includeEmoji:") ~typ:(CGPoint.t @-> double @-> id @-> double @-> (ptr double) @-> llong @-> llong @-> bool @-> returning CGSize.t) ~return_type:CGSize.t x forWidth withFont minFontSize actualFontSize (LLong.of_int lineBreakMode) (LLong.of_int baselineAdjustment) includeEmoji
let drawInRect x ~withAttributes self = msg_send ~self ~cmd:(selector "drawInRect:withAttributes:") ~typ:(CGRect.t @-> id @-> returning void) x withAttributes
let drawInRect1 x ~withFont self = msg_send_stret ~self ~cmd:(selector "drawInRect:withFont:") ~typ:(CGRect.t @-> id @-> returning CGSize.t) ~return_type:CGSize.t x withFont
let drawInRect2 x ~withFont ~lineBreakMode self = msg_send_stret ~self ~cmd:(selector "drawInRect:withFont:lineBreakMode:") ~typ:(CGRect.t @-> id @-> llong @-> returning CGSize.t) ~return_type:CGSize.t x withFont (LLong.of_int lineBreakMode)
let drawInRect3 x ~withFont ~lineBreakMode ~alignment self = msg_send_stret ~self ~cmd:(selector "drawInRect:withFont:lineBreakMode:alignment:") ~typ:(CGRect.t @-> id @-> llong @-> llong @-> returning CGSize.t) ~return_type:CGSize.t x withFont (LLong.of_int lineBreakMode) (LLong.of_int alignment)
let drawInRect4 x ~withFont ~lineBreakMode ~alignment ~lineSpacing self = msg_send_stret ~self ~cmd:(selector "drawInRect:withFont:lineBreakMode:alignment:lineSpacing:") ~typ:(CGRect.t @-> id @-> llong @-> llong @-> int @-> returning CGSize.t) ~return_type:CGSize.t x withFont (LLong.of_int lineBreakMode) (LLong.of_int alignment) lineSpacing
let drawInRect5 x ~withFont ~lineBreakMode ~alignment ~lineSpacing ~includeEmoji self = msg_send_stret ~self ~cmd:(selector "drawInRect:withFont:lineBreakMode:alignment:lineSpacing:includeEmoji:") ~typ:(CGRect.t @-> id @-> llong @-> llong @-> int @-> bool @-> returning CGSize.t) ~return_type:CGSize.t x withFont (LLong.of_int lineBreakMode) (LLong.of_int alignment) lineSpacing includeEmoji
let drawWithRect x ~options ~attributes self = msg_send ~self ~cmd:(selector "drawWithRect:options:attributes:") ~typ:(CGRect.t @-> llong @-> id @-> returning void) x (LLong.of_int options) attributes
let drawWithRect' x ~options ~attributes ~context self = msg_send ~self ~cmd:(selector "drawWithRect:options:attributes:context:") ~typ:(CGRect.t @-> llong @-> id @-> id @-> returning void) x (LLong.of_int options) attributes context
let editDistanceFrom x self = msg_send ~self ~cmd:(selector "editDistanceFrom:") ~typ:(id @-> returning ullong) x
let encodeWithCAMLWriter x self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning void) x
let encodeWithCSCoder x self = msg_send ~self ~cmd:(selector "encodeWithCSCoder:") ~typ:(id @-> returning void) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let encodedBytesAndReturnLength x ~error self = msg_send ~self ~cmd:(selector "encodedBytesAndReturnLength:error:") ~typ:((ptr ullong) @-> (ptr id) @-> returning string) x error
let encodedDataAndReturnError x self = msg_send ~self ~cmd:(selector "encodedDataAndReturnError:") ~typ:((ptr id) @-> returning id) x
let endsSentence self = msg_send ~self ~cmd:(selector "endsSentence") ~typ:(returning bool)
let enumerateLinesUsingBlock x self = msg_send ~self ~cmd:(selector "enumerateLinesUsingBlock:") ~typ:((ptr void) @-> returning void) x
let enumerateLinguisticTagsInRange x ~scheme ~options ~orthography ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:") ~typ:(NSRange.t @-> id @-> ullong @-> id @-> (ptr void) @-> returning void) x scheme (ULLong.of_int options) orthography usingBlock
let enumerateSubstringsInRange x ~options ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateSubstringsInRange:options:usingBlock:") ~typ:(NSRange.t @-> ullong @-> (ptr void) @-> returning void) x (ULLong.of_int options) usingBlock
let fastestEncoding self = msg_send ~self ~cmd:(selector "fastestEncoding") ~typ:(returning ullong)
let fileSystemRepresentation self = msg_send ~self ~cmd:(selector "fileSystemRepresentation") ~typ:(returning string)
let firstCharacter self = msg_send ~self ~cmd:(selector "firstCharacter") ~typ:(returning id)
let floatValue self = msg_send ~self ~cmd:(selector "floatValue") ~typ:(returning float)
let formatConfiguration self = msg_send ~self ~cmd:(selector "formatConfiguration") ~typ:(returning id)
let formatForDisplayIfPhoneNumber self = msg_send ~self ~cmd:(selector "formatForDisplayIfPhoneNumber") ~typ:(returning id)
let formattedDisplayID self = msg_send ~self ~cmd:(selector "formattedDisplayID") ~typ:(returning id)
let formattedPhoneNumber self = msg_send ~self ~cmd:(selector "formattedPhoneNumber") ~typ:(returning id)
let getBytes x ~maxLength ~filledLength ~encoding ~allowLossyConversion ~range ~remainingRange self = msg_send ~self ~cmd:(selector "getBytes:maxLength:filledLength:encoding:allowLossyConversion:range:remainingRange:") ~typ:(string @-> ullong @-> (ptr ullong) @-> ullong @-> bool @-> NSRange.t @-> (ptr NSRange.t) @-> returning bool) x (ULLong.of_int maxLength) filledLength (ULLong.of_int encoding) allowLossyConversion range remainingRange
let getBytes' x ~maxLength ~usedLength ~encoding ~options ~range ~remainingRange self = msg_send ~self ~cmd:(selector "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") ~typ:((ptr void) @-> ullong @-> (ptr ullong) @-> ullong @-> ullong @-> NSRange.t @-> (ptr NSRange.t) @-> returning bool) x (ULLong.of_int maxLength) usedLength (ULLong.of_int encoding) (ULLong.of_int options) range remainingRange
let getCString x self = msg_send ~self ~cmd:(selector "getCString:") ~typ:(string @-> returning void) x
let getCString1 x ~maxLength self = msg_send ~self ~cmd:(selector "getCString:maxLength:") ~typ:(string @-> ullong @-> returning void) x (ULLong.of_int maxLength)
let getCString2 x ~maxLength ~encoding self = msg_send ~self ~cmd:(selector "getCString:maxLength:encoding:") ~typ:(string @-> ullong @-> ullong @-> returning bool) x (ULLong.of_int maxLength) (ULLong.of_int encoding)
let getCString3 x ~maxLength ~range ~remainingRange self = msg_send ~self ~cmd:(selector "getCString:maxLength:range:remainingRange:") ~typ:(string @-> ullong @-> NSRange.t @-> (ptr NSRange.t) @-> returning void) x (ULLong.of_int maxLength) range remainingRange
let getCharacters x self = msg_send ~self ~cmd:(selector "getCharacters:") ~typ:((ptr ushort) @-> returning void) x
let getCharacters' x ~range self = msg_send ~self ~cmd:(selector "getCharacters:range:") ~typ:((ptr ushort) @-> NSRange.t @-> returning void) x range
let getExternalRepresentation x ~extendedAttributes ~forWritingToURLOrPath ~usingEncoding ~error self = msg_send ~self ~cmd:(selector "getExternalRepresentation:extendedAttributes:forWritingToURLOrPath:usingEncoding:error:") ~typ:((ptr id) @-> (ptr id) @-> id @-> ullong @-> (ptr id) @-> returning bool) x extendedAttributes forWritingToURLOrPath (ULLong.of_int usingEncoding) error
let getFileSystemRepresentation x ~maxLength self = msg_send ~self ~cmd:(selector "getFileSystemRepresentation:maxLength:") ~typ:(string @-> ullong @-> returning bool) x (ULLong.of_int maxLength)
let getLineStart x ~end_ ~contentsEnd ~forRange self = msg_send ~self ~cmd:(selector "getLineStart:end:contentsEnd:forRange:") ~typ:((ptr ullong) @-> (ptr ullong) @-> (ptr ullong) @-> NSRange.t @-> returning void) x end_ contentsEnd forRange
let getParagraphStart x ~end_ ~contentsEnd ~forRange self = msg_send ~self ~cmd:(selector "getParagraphStart:end:contentsEnd:forRange:") ~typ:((ptr ullong) @-> (ptr ullong) @-> (ptr ullong) @-> NSRange.t @-> returning void) x end_ contentsEnd forRange
let hasColorGlyphsInRange x ~attributes self = msg_send ~self ~cmd:(selector "hasColorGlyphsInRange:attributes:") ~typ:(NSRange.t @-> id @-> returning bool) x attributes
let hasMobileMeSuffix self = msg_send ~self ~cmd:(selector "hasMobileMeSuffix") ~typ:(returning bool)
let hasPrefix x self = msg_send ~self ~cmd:(selector "hasPrefix:") ~typ:(id @-> returning bool) x
let hasSubstringInSet x self = msg_send ~self ~cmd:(selector "hasSubstringInSet:") ~typ:(id @-> returning bool) x
let hasSuffix x self = msg_send ~self ~cmd:(selector "hasSuffix:") ~typ:(id @-> returning bool) x
let hasSuffixInsensitive x self = msg_send ~self ~cmd:(selector "hasSuffixInsensitive:") ~typ:(id @-> returning bool) x
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning ullong)
let hexValue self = msg_send ~self ~cmd:(selector "hexValue") ~typ:(returning uint)
let imageMetadataFromFileName self = msg_send ~self ~cmd:(selector "imageMetadataFromFileName") ~typ:(returning id)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initWithBytesNoCopy x ~length ~encoding ~deallocator self = msg_send ~self ~cmd:(selector "initWithBytesNoCopy:length:encoding:deallocator:") ~typ:((ptr void) @-> ullong @-> ullong @-> (ptr void) @-> returning id) x (ULLong.of_int length) (ULLong.of_int encoding) deallocator
let initWithBytesNoCopy' x ~length ~encoding ~freeWhenDone self = msg_send ~self ~cmd:(selector "initWithBytesNoCopy:length:encoding:freeWhenDone:") ~typ:((ptr void) @-> ullong @-> ullong @-> bool @-> returning id) x (ULLong.of_int length) (ULLong.of_int encoding) freeWhenDone
let initWithCString x self = msg_send ~self ~cmd:(selector "initWithCString:") ~typ:(string @-> returning id) x
let initWithCString1 x ~encoding self = msg_send ~self ~cmd:(selector "initWithCString:encoding:") ~typ:(string @-> ullong @-> returning id) x (ULLong.of_int encoding)
let initWithCString2 x ~length self = msg_send ~self ~cmd:(selector "initWithCString:length:") ~typ:(string @-> ullong @-> returning id) x (ULLong.of_int length)
let initWithCStringNoCopy x ~length ~freeWhenDone self = msg_send ~self ~cmd:(selector "initWithCStringNoCopy:length:freeWhenDone:") ~typ:(string @-> ullong @-> bool @-> returning id) x (ULLong.of_int length) freeWhenDone
let initWithCharacters x ~length self = msg_send ~self ~cmd:(selector "initWithCharacters:length:") ~typ:((ptr ushort) @-> ullong @-> returning id) x (ULLong.of_int length)
let initWithCharactersNoCopy x ~length ~deallocator self = msg_send ~self ~cmd:(selector "initWithCharactersNoCopy:length:deallocator:") ~typ:((ptr ushort) @-> ullong @-> (ptr void) @-> returning id) x (ULLong.of_int length) deallocator
let initWithCharactersNoCopy' x ~length ~freeWhenDone self = msg_send ~self ~cmd:(selector "initWithCharactersNoCopy:length:freeWhenDone:") ~typ:((ptr ushort) @-> ullong @-> bool @-> returning id) x (ULLong.of_int length) freeWhenDone
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithContentsOfFile x self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:") ~typ:(id @-> returning id) x
let initWithContentsOfFile1 x ~encoding ~error self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:encoding:error:") ~typ:(id @-> ullong @-> (ptr id) @-> returning id) x (ULLong.of_int encoding) error
let initWithContentsOfFile2 x ~usedEncoding ~error self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:usedEncoding:error:") ~typ:(id @-> (ptr ullong) @-> (ptr id) @-> returning id) x usedEncoding error
let initWithContentsOfURL x self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:") ~typ:(id @-> returning id) x
let initWithContentsOfURL1 x ~encoding ~error self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:encoding:error:") ~typ:(id @-> ullong @-> (ptr id) @-> returning id) x (ULLong.of_int encoding) error
let initWithContentsOfURL2 x ~usedEncoding ~error self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:usedEncoding:error:") ~typ:(id @-> (ptr ullong) @-> (ptr id) @-> returning id) x usedEncoding error
let initWithData x ~encoding self = msg_send ~self ~cmd:(selector "initWithData:encoding:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int encoding)
let initWithData' x ~usedEncoding self = msg_send ~self ~cmd:(selector "initWithData:usedEncoding:") ~typ:(id @-> (ptr ullong) @-> returning id) x usedEncoding
let initWithFormat x self = msg_send ~self ~cmd:(selector "initWithFormat:") ~typ:(id @-> returning id) x
let initWithFormat1 x ~arguments self = msg_send ~self ~cmd:(selector "initWithFormat:arguments:") ~typ:(id @-> (ptr (ptr void)) @-> returning id) x arguments
let initWithFormat2 x ~locale self = msg_send ~self ~cmd:(selector "initWithFormat:locale:") ~typ:(id @-> id @-> returning id) x locale
let initWithFormat3 x ~locale ~arguments self = msg_send ~self ~cmd:(selector "initWithFormat:locale:arguments:") ~typ:(id @-> id @-> (ptr (ptr void)) @-> returning id) x locale arguments
let initWithPasteboardPropertyList x ~ofType self = msg_send ~self ~cmd:(selector "initWithPasteboardPropertyList:ofType:") ~typ:(id @-> id @-> returning id) x ofType
let initWithStdString x ~copy self = msg_send ~self ~cmd:(selector "initWithStdString:copy:") ~typ:((ptr void) @-> bool @-> returning id) x copy
let initWithString x self = msg_send ~self ~cmd:(selector "initWithString:") ~typ:(id @-> returning id) x
let initWithUTF8String x self = msg_send ~self ~cmd:(selector "initWithUTF8String:") ~typ:(string @-> returning id) x
let initWithValidatedFormat x ~validFormatSpecifiers ~locale ~arguments ~error self = msg_send ~self ~cmd:(selector "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:") ~typ:(id @-> id @-> id @-> (ptr (ptr void)) @-> (ptr id) @-> returning id) x validFormatSpecifiers locale arguments error
let intValue self = msg_send ~self ~cmd:(selector "intValue") ~typ:(returning int)
let integerValue self = msg_send ~self ~cmd:(selector "integerValue") ~typ:(returning llong)
let isAbsolutePath self = msg_send ~self ~cmd:(selector "isAbsolutePath") ~typ:(returning bool)
let isCaseInsensitiveLike x self = msg_send ~self ~cmd:(selector "isCaseInsensitiveLike:") ~typ:(id @-> returning bool) x
let isDelete self = msg_send ~self ~cmd:(selector "isDelete") ~typ:(returning bool)
let isDirectory self = msg_send ~self ~cmd:(selector "isDirectory") ~typ:(returning bool)
let isEqual x self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning bool) x
let isEqualToBlockListAddress x self = msg_send ~self ~cmd:(selector "isEqualToBlockListAddress:") ~typ:(id @-> returning bool) x
let isEqualToIgnoringCase x self = msg_send ~self ~cmd:(selector "isEqualToIgnoringCase:") ~typ:(id @-> returning bool) x
let isEqualToPhoneNumber x self = msg_send ~self ~cmd:(selector "isEqualToPhoneNumber:") ~typ:(id @-> returning bool) x
let isEqualToString x self = msg_send ~self ~cmd:(selector "isEqualToString:") ~typ:(id @-> returning bool) x
let isLeftAssociative self = msg_send ~self ~cmd:(selector "isLeftAssociative") ~typ:(returning bool)
let isLike x self = msg_send ~self ~cmd:(selector "isLike:") ~typ:(id @-> returning bool) x
let isNaturallyRTL self = msg_send ~self ~cmd:(selector "isNaturallyRTL") ~typ:(returning bool)
let isNewlineOrReturn self = msg_send ~self ~cmd:(selector "isNewlineOrReturn") ~typ:(returning bool)
let isPlainSpace self = msg_send ~self ~cmd:(selector "isPlainSpace") ~typ:(returning bool)
let isSpace self = msg_send ~self ~cmd:(selector "isSpace") ~typ:(returning bool)
let isSpaceOrReturn self = msg_send ~self ~cmd:(selector "isSpaceOrReturn") ~typ:(returning bool)
let isTripledPunctuation self = msg_send ~self ~cmd:(selector "isTripledPunctuation") ~typ:(returning bool)
let lastPathComponent self = msg_send ~self ~cmd:(selector "lastPathComponent") ~typ:(returning id)
let length self = msg_send ~self ~cmd:(selector "length") ~typ:(returning ullong)
let lengthOfBytesUsingEncoding x self = msg_send ~self ~cmd:(selector "lengthOfBytesUsingEncoding:") ~typ:(ullong @-> returning ullong) (ULLong.of_int x)
let lineRangeForRange x self = msg_send_stret ~self ~cmd:(selector "lineRangeForRange:") ~typ:(NSRange.t @-> returning NSRange.t) ~return_type:NSRange.t x
let linguisticTagsInRange x ~scheme ~options ~orthography ~tokenRanges self = msg_send ~self ~cmd:(selector "linguisticTagsInRange:scheme:options:orthography:tokenRanges:") ~typ:(NSRange.t @-> id @-> ullong @-> id @-> (ptr id) @-> returning id) x scheme (ULLong.of_int options) orthography tokenRanges
let loadDataWithTypeIdentifier x ~forItemProviderCompletionHandler self = msg_send ~self ~cmd:(selector "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:") ~typ:(id @-> (ptr void) @-> returning id) x forItemProviderCompletionHandler
let localeIdentifierWithUpdatedScript x self = msg_send ~self ~cmd:(selector "localeIdentifierWithUpdatedScript:") ~typ:(id @-> returning id) x
let localizeForLanguage x self = msg_send ~self ~cmd:(selector "localizeForLanguage:") ~typ:(id @-> returning id) x
let localizedCapitalizedString self = msg_send ~self ~cmd:(selector "localizedCapitalizedString") ~typ:(returning id)
let localizedCaseInsensitiveCompare x self = msg_send ~self ~cmd:(selector "localizedCaseInsensitiveCompare:") ~typ:(id @-> returning llong) x
let localizedCaseInsensitiveContainsString x self = msg_send ~self ~cmd:(selector "localizedCaseInsensitiveContainsString:") ~typ:(id @-> returning bool) x
let localizedCompare x self = msg_send ~self ~cmd:(selector "localizedCompare:") ~typ:(id @-> returning llong) x
let localizedCompareToString x self = msg_send ~self ~cmd:(selector "localizedCompareToString:") ~typ:(id @-> returning llong) x
let localizedHasPrefix x self = msg_send ~self ~cmd:(selector "localizedHasPrefix:") ~typ:(id @-> returning bool) x
let localizedHasSuffix x self = msg_send ~self ~cmd:(selector "localizedHasSuffix:") ~typ:(id @-> returning bool) x
let localizedLowercaseString self = msg_send ~self ~cmd:(selector "localizedLowercaseString") ~typ:(returning id)
let localizedStandardCompare x self = msg_send ~self ~cmd:(selector "localizedStandardCompare:") ~typ:(id @-> returning llong) x
let localizedStandardContainsString x self = msg_send ~self ~cmd:(selector "localizedStandardContainsString:") ~typ:(id @-> returning bool) x
let localizedStandardRangeOfString x self = msg_send_stret ~self ~cmd:(selector "localizedStandardRangeOfString:") ~typ:(id @-> returning NSRange.t) ~return_type:NSRange.t x
let localizedUppercaseString self = msg_send ~self ~cmd:(selector "localizedUppercaseString") ~typ:(returning id)
let longLongValue self = msg_send ~self ~cmd:(selector "longLongValue") ~typ:(returning llong)
let looksLikeEmailAddress self = msg_send ~self ~cmd:(selector "looksLikeEmailAddress") ~typ:(returning bool)
let looksLikeNumberInput self = msg_send ~self ~cmd:(selector "looksLikeNumberInput") ~typ:(returning bool)
let looksLikeURL self = msg_send ~self ~cmd:(selector "looksLikeURL") ~typ:(returning bool)
let lossyCString self = msg_send ~self ~cmd:(selector "lossyCString") ~typ:(returning string)
let lowercaseString self = msg_send ~self ~cmd:(selector "lowercaseString") ~typ:(returning id)
let lowercaseStringWithLocale x self = msg_send ~self ~cmd:(selector "lowercaseStringWithLocale:") ~typ:(id @-> returning id) x
let matchesPattern x self = msg_send ~self ~cmd:(selector "matchesPattern:") ~typ:(id @-> returning bool) x
let matchesPattern' x ~caseInsensitive self = msg_send ~self ~cmd:(selector "matchesPattern:caseInsensitive:") ~typ:(id @-> bool @-> returning bool) x caseInsensitive
let matchesValue x ~usingComparison self = msg_send ~self ~cmd:(selector "matchesValue:usingComparison:") ~typ:(id @-> llong @-> returning bool) x (LLong.of_int usingComparison)
let maximumLengthOfBytesUsingEncoding x self = msg_send ~self ~cmd:(selector "maximumLengthOfBytesUsingEncoding:") ~typ:(ullong @-> returning ullong) (ULLong.of_int x)
let mkServerFormattedString self = msg_send ~self ~cmd:(selector "mkServerFormattedString") ~typ:(returning id)
let mobileMeDomain self = msg_send ~self ~cmd:(selector "mobileMeDomain") ~typ:(returning id)
let mutableCopyWithZone x self = msg_send ~self ~cmd:(selector "mutableCopyWithZone:") ~typ:((ptr void) @-> returning id) x
let normalizedDestination self = msg_send ~self ~cmd:(selector "normalizedDestination") ~typ:(returning id)
let normalizedTokenURI self = msg_send ~self ~cmd:(selector "normalizedTokenURI") ~typ:(returning id)
let paragraphRangeForRange x self = msg_send_stret ~self ~cmd:(selector "paragraphRangeForRange:") ~typ:(NSRange.t @-> returning NSRange.t) ~return_type:NSRange.t x
let pasteboardPropertyListForType x self = msg_send ~self ~cmd:(selector "pasteboardPropertyListForType:") ~typ:(id @-> returning id) x
let pathComponents self = msg_send ~self ~cmd:(selector "pathComponents") ~typ:(returning id)
let pathExtension self = msg_send ~self ~cmd:(selector "pathExtension") ~typ:(returning id)
let pathStringForDisplay self = msg_send ~self ~cmd:(selector "pathStringForDisplay") ~typ:(returning id)
let pinyinStringFromPinyinWithToneNumber self = msg_send ~self ~cmd:(selector "pinyinStringFromPinyinWithToneNumber") ~typ:(returning id)
let precomposedStringWithCanonicalMapping self = msg_send ~self ~cmd:(selector "precomposedStringWithCanonicalMapping") ~typ:(returning id)
let precomposedStringWithCompatibilityMapping self = msg_send ~self ~cmd:(selector "precomposedStringWithCompatibilityMapping") ~typ:(returning id)
let propertyList self = msg_send ~self ~cmd:(selector "propertyList") ~typ:(returning id)
let propertyListFromStringsFileFormat self = msg_send ~self ~cmd:(selector "propertyListFromStringsFileFormat") ~typ:(returning id)
let queryKeysAndValues self = msg_send ~self ~cmd:(selector "queryKeysAndValues") ~typ:(returning id)
let quotedStringRepresentation self = msg_send ~self ~cmd:(selector "quotedStringRepresentation") ~typ:(returning id)
let rangeOfCharacterFromSet x self = msg_send_stret ~self ~cmd:(selector "rangeOfCharacterFromSet:") ~typ:(id @-> returning NSRange.t) ~return_type:NSRange.t x
let rangeOfCharacterFromSet1 x ~options self = msg_send_stret ~self ~cmd:(selector "rangeOfCharacterFromSet:options:") ~typ:(id @-> ullong @-> returning NSRange.t) ~return_type:NSRange.t x (ULLong.of_int options)
let rangeOfCharacterFromSet2 x ~options ~range self = msg_send_stret ~self ~cmd:(selector "rangeOfCharacterFromSet:options:range:") ~typ:(id @-> ullong @-> NSRange.t @-> returning NSRange.t) ~return_type:NSRange.t x (ULLong.of_int options) range
let rangeOfComposedCharacterSequenceAtIndex x self = msg_send_stret ~self ~cmd:(selector "rangeOfComposedCharacterSequenceAtIndex:") ~typ:(ullong @-> returning NSRange.t) ~return_type:NSRange.t (ULLong.of_int x)
let rangeOfComposedCharacterSequencesForRange x self = msg_send_stret ~self ~cmd:(selector "rangeOfComposedCharacterSequencesForRange:") ~typ:(NSRange.t @-> returning NSRange.t) ~return_type:NSRange.t x
let rangeOfGraphicalSegmentAtIndex x self = msg_send_stret ~self ~cmd:(selector "rangeOfGraphicalSegmentAtIndex:") ~typ:(ullong @-> returning NSRange.t) ~return_type:NSRange.t (ULLong.of_int x)
let rangeOfString x self = msg_send_stret ~self ~cmd:(selector "rangeOfString:") ~typ:(id @-> returning NSRange.t) ~return_type:NSRange.t x
let rangeOfString1 x ~options self = msg_send_stret ~self ~cmd:(selector "rangeOfString:options:") ~typ:(id @-> ullong @-> returning NSRange.t) ~return_type:NSRange.t x (ULLong.of_int options)
let rangeOfString2 x ~options ~range self = msg_send_stret ~self ~cmd:(selector "rangeOfString:options:range:") ~typ:(id @-> ullong @-> NSRange.t @-> returning NSRange.t) ~return_type:NSRange.t x (ULLong.of_int options) range
let rangeOfString3 x ~options ~range ~locale self = msg_send_stret ~self ~cmd:(selector "rangeOfString:options:range:locale:") ~typ:(id @-> ullong @-> NSRange.t @-> id @-> returning NSRange.t) ~return_type:NSRange.t x (ULLong.of_int options) range locale
let redactedForWiFi self = msg_send ~self ~cmd:(selector "redactedForWiFi") ~typ:(returning id)
let removingROSPPrefix self = msg_send ~self ~cmd:(selector "removingROSPPrefix") ~typ:(returning id)
let replacementObjectForPortCoder x self = msg_send ~self ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning id) x
let roomNameIsProbablyAutomaticallyGenerated self = msg_send ~self ~cmd:(selector "roomNameIsProbablyAutomaticallyGenerated") ~typ:(returning bool)
let scaleableResourceMetadataFromFileName self = msg_send ~self ~cmd:(selector "scaleableResourceMetadataFromFileName") ~typ:(returning id)
let scriptingBeginsWith x self = msg_send ~self ~cmd:(selector "scriptingBeginsWith:") ~typ:(id @-> returning bool) x
let scriptingContains x self = msg_send ~self ~cmd:(selector "scriptingContains:") ~typ:(id @-> returning bool) x
let scriptingEndsWith x self = msg_send ~self ~cmd:(selector "scriptingEndsWith:") ~typ:(id @-> returning bool) x
let scriptingIsEqualTo x self = msg_send ~self ~cmd:(selector "scriptingIsEqualTo:") ~typ:(id @-> returning bool) x
let scriptingIsGreaterThan x self = msg_send ~self ~cmd:(selector "scriptingIsGreaterThan:") ~typ:(id @-> returning bool) x
let scriptingIsGreaterThanOrEqualTo x self = msg_send ~self ~cmd:(selector "scriptingIsGreaterThanOrEqualTo:") ~typ:(id @-> returning bool) x
let scriptingIsLessThan x self = msg_send ~self ~cmd:(selector "scriptingIsLessThan:") ~typ:(id @-> returning bool) x
let scriptingIsLessThanOrEqualTo x self = msg_send ~self ~cmd:(selector "scriptingIsLessThanOrEqualTo:") ~typ:(id @-> returning bool) x
let serverFormattedString self = msg_send ~self ~cmd:(selector "serverFormattedString") ~typ:(returning id)
let sha224 self = msg_send ~self ~cmd:(selector "sha224") ~typ:(returning id)
let significantText self = msg_send_stret ~self ~cmd:(selector "significantText") ~typ:(returning NSRange.t) ~return_type:NSRange.t
let simplifiedChineseCompare x self = msg_send ~self ~cmd:(selector "simplifiedChineseCompare:") ~typ:(id @-> returning llong) x
let sizeWithAttributes x self = msg_send_stret ~self ~cmd:(selector "sizeWithAttributes:") ~typ:(id @-> returning CGSize.t) ~return_type:CGSize.t x
let sizeWithFont x self = msg_send_stret ~self ~cmd:(selector "sizeWithFont:") ~typ:(id @-> returning CGSize.t) ~return_type:CGSize.t x
let sizeWithFont1 x ~constrainedToSize self = msg_send_stret ~self ~cmd:(selector "sizeWithFont:constrainedToSize:") ~typ:(id @-> CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x constrainedToSize
let sizeWithFont2 x ~constrainedToSize ~lineBreakMode self = msg_send_stret ~self ~cmd:(selector "sizeWithFont:constrainedToSize:lineBreakMode:") ~typ:(id @-> CGSize.t @-> llong @-> returning CGSize.t) ~return_type:CGSize.t x constrainedToSize (LLong.of_int lineBreakMode)
let sizeWithFont3 x ~forWidth ~lineBreakMode self = msg_send_stret ~self ~cmd:(selector "sizeWithFont:forWidth:lineBreakMode:") ~typ:(id @-> double @-> llong @-> returning CGSize.t) ~return_type:CGSize.t x forWidth (LLong.of_int lineBreakMode)
let sizeWithFont4 x ~constrainedToSize ~lineBreakMode ~lineSpacing self = msg_send_stret ~self ~cmd:(selector "sizeWithFont:constrainedToSize:lineBreakMode:lineSpacing:") ~typ:(id @-> CGSize.t @-> llong @-> int @-> returning CGSize.t) ~return_type:CGSize.t x constrainedToSize (LLong.of_int lineBreakMode) lineSpacing
let sizeWithFont5 x ~forWidth ~lineBreakMode ~letterSpacing self = msg_send_stret ~self ~cmd:(selector "sizeWithFont:forWidth:lineBreakMode:letterSpacing:") ~typ:(id @-> double @-> llong @-> double @-> returning CGSize.t) ~return_type:CGSize.t x forWidth (LLong.of_int lineBreakMode) letterSpacing
let sizeWithFont6 x ~minFontSize ~actualFontSize ~forWidth ~lineBreakMode self = msg_send_stret ~self ~cmd:(selector "sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:") ~typ:(id @-> double @-> (ptr double) @-> double @-> llong @-> returning CGSize.t) ~return_type:CGSize.t x minFontSize actualFontSize forWidth (LLong.of_int lineBreakMode)
let smallestEncoding self = msg_send ~self ~cmd:(selector "smallestEncoding") ~typ:(returning ullong)
let sqliteBind x ~index self = msg_send ~self ~cmd:(selector "sqliteBind:index:") ~typ:((ptr void) @-> int @-> returning void) x index
let standardizedURLPath self = msg_send ~self ~cmd:(selector "standardizedURLPath") ~typ:(returning id)
let stdString self = msg_send_stret ~self ~cmd:(selector "stdString") ~typ:(returning id) ~return_type:id
let stringByAbbreviatingWithTildeInPath self = msg_send ~self ~cmd:(selector "stringByAbbreviatingWithTildeInPath") ~typ:(returning id)
let stringByAddingPercentEncodingWithAllowedCharacters x self = msg_send ~self ~cmd:(selector "stringByAddingPercentEncodingWithAllowedCharacters:") ~typ:(id @-> returning id) x
let stringByAddingPercentEscapes self = msg_send ~self ~cmd:(selector "stringByAddingPercentEscapes") ~typ:(returning id)
let stringByAddingPercentEscapesUsingEncoding x self = msg_send ~self ~cmd:(selector "stringByAddingPercentEscapesUsingEncoding:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let stringByAddingURLEscapes self = msg_send ~self ~cmd:(selector "stringByAddingURLEscapes") ~typ:(returning id)
let stringByAppendingFormat x self = msg_send ~self ~cmd:(selector "stringByAppendingFormat:") ~typ:(id @-> returning id) x
let stringByAppendingPathComponent x self = msg_send ~self ~cmd:(selector "stringByAppendingPathComponent:") ~typ:(id @-> returning id) x
let stringByAppendingPathComponent' x ~conformingToType self = msg_send ~self ~cmd:(selector "stringByAppendingPathComponent:conformingToType:") ~typ:(id @-> id @-> returning id) x conformingToType
let stringByAppendingPathExtension x self = msg_send ~self ~cmd:(selector "stringByAppendingPathExtension:") ~typ:(id @-> returning id) x
let stringByAppendingPathExtensionForType x self = msg_send ~self ~cmd:(selector "stringByAppendingPathExtensionForType:") ~typ:(id @-> returning id) x
let stringByAppendingString x self = msg_send ~self ~cmd:(selector "stringByAppendingString:") ~typ:(id @-> returning id) x
let stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber x self = msg_send ~self ~cmd:(selector "stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let stringByApplyingTransform x ~reverse self = msg_send ~self ~cmd:(selector "stringByApplyingTransform:reverse:") ~typ:(id @-> bool @-> returning id) x reverse
let stringByConvertingPathToURL self = msg_send ~self ~cmd:(selector "stringByConvertingPathToURL") ~typ:(returning id)
let stringByConvertingURLToPath self = msg_send ~self ~cmd:(selector "stringByConvertingURLToPath") ~typ:(returning id)
let stringByDeletingLastPathComponent self = msg_send ~self ~cmd:(selector "stringByDeletingLastPathComponent") ~typ:(returning id)
let stringByDeletingPathExtension self = msg_send ~self ~cmd:(selector "stringByDeletingPathExtension") ~typ:(returning id)
let stringByExpandingTildeInPath self = msg_send ~self ~cmd:(selector "stringByExpandingTildeInPath") ~typ:(returning id)
let stringByFoldingWithOptions x ~locale self = msg_send ~self ~cmd:(selector "stringByFoldingWithOptions:locale:") ~typ:(ullong @-> id @-> returning id) (ULLong.of_int x) locale
let stringByLeftPaddingToLength x ~withString ~startingAtIndex self = msg_send ~self ~cmd:(selector "stringByLeftPaddingToLength:withString:startingAtIndex:") ~typ:(ullong @-> id @-> ullong @-> returning id) (ULLong.of_int x) withString (ULLong.of_int startingAtIndex)
let stringByPaddingToLength x ~withString ~startingAtIndex self = msg_send ~self ~cmd:(selector "stringByPaddingToLength:withString:startingAtIndex:") ~typ:(ullong @-> id @-> ullong @-> returning id) (ULLong.of_int x) withString (ULLong.of_int startingAtIndex)
let stringByRemovingCharactersFromSet x self = msg_send ~self ~cmd:(selector "stringByRemovingCharactersFromSet:") ~typ:(id @-> returning id) x
let stringByRemovingPercentEncoding self = msg_send ~self ~cmd:(selector "stringByRemovingPercentEncoding") ~typ:(returning id)
let stringByRemovingPercentEscapes self = msg_send ~self ~cmd:(selector "stringByRemovingPercentEscapes") ~typ:(returning id)
let stringByRemovingURLEscapes self = msg_send ~self ~cmd:(selector "stringByRemovingURLEscapes") ~typ:(returning id)
let stringByRemovingWhitespace self = msg_send ~self ~cmd:(selector "stringByRemovingWhitespace") ~typ:(returning id)
let stringByReplacingCharacter x ~withCharacter self = msg_send ~self ~cmd:(selector "stringByReplacingCharacter:withCharacter:") ~typ:(uint @-> uint @-> returning id) x withCharacter
let stringByReplacingCharactersInRange x ~withString self = msg_send ~self ~cmd:(selector "stringByReplacingCharactersInRange:withString:") ~typ:(NSRange.t @-> id @-> returning id) x withString
let stringByReplacingCharactersInSet x ~withCharacter self = msg_send ~self ~cmd:(selector "stringByReplacingCharactersInSet:withCharacter:") ~typ:((ptr CFCharacterSet.t) @-> uint @-> returning id) x withCharacter
let stringByReplacingOccurrencesOfString x ~withString self = msg_send ~self ~cmd:(selector "stringByReplacingOccurrencesOfString:withString:") ~typ:(id @-> id @-> returning id) x withString
let stringByReplacingOccurrencesOfString' x ~withString ~options ~range self = msg_send ~self ~cmd:(selector "stringByReplacingOccurrencesOfString:withString:options:range:") ~typ:(id @-> id @-> ullong @-> NSRange.t @-> returning id) x withString (ULLong.of_int options) range
let stringByReplacingPercentEscapesUsingEncoding x self = msg_send ~self ~cmd:(selector "stringByReplacingPercentEscapesUsingEncoding:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let stringByResolvingAndStandardizingPath self = msg_send ~self ~cmd:(selector "stringByResolvingAndStandardizingPath") ~typ:(returning id)
let stringByResolvingSymlinksInPath self = msg_send ~self ~cmd:(selector "stringByResolvingSymlinksInPath") ~typ:(returning id)
let stringByStandardizingPath self = msg_send ~self ~cmd:(selector "stringByStandardizingPath") ~typ:(returning id)
let stringByStrippingDiacritics self = msg_send ~self ~cmd:(selector "stringByStrippingDiacritics") ~typ:(returning id)
let stringByStrippingLeadingAndTrailingWhitespaceAndQuotes self = msg_send ~self ~cmd:(selector "stringByStrippingLeadingAndTrailingWhitespaceAndQuotes") ~typ:(returning id)
let stringByTrimming self = msg_send ~self ~cmd:(selector "stringByTrimming") ~typ:(returning id)
let stringByTrimmingCharactersInCFCharacterSet x self = msg_send ~self ~cmd:(selector "stringByTrimmingCharactersInCFCharacterSet:") ~typ:((ptr CFCharacterSet.t) @-> returning id) x
let stringByTrimmingCharactersInSet x self = msg_send ~self ~cmd:(selector "stringByTrimmingCharactersInSet:") ~typ:(id @-> returning id) x
let stringByTrimmingColumnSensitive self = msg_send ~self ~cmd:(selector "stringByTrimmingColumnSensitive") ~typ:(returning id)
let stringByTrimmingIgnoredLeadingCharacters self = msg_send ~self ~cmd:(selector "stringByTrimmingIgnoredLeadingCharacters") ~typ:(returning id)
let stringByTrimmingLastCharacter self = msg_send ~self ~cmd:(selector "stringByTrimmingLastCharacter") ~typ:(returning id)
let stringByTrimmingLeadingCharactersInSet x self = msg_send ~self ~cmd:(selector "stringByTrimmingLeadingCharactersInSet:") ~typ:(id @-> returning id) x
let stringByTrimmingLeadingSpaces self = msg_send ~self ~cmd:(selector "stringByTrimmingLeadingSpaces") ~typ:(returning id)
let stringByTrimmingLeadingWhitespace self = msg_send ~self ~cmd:(selector "stringByTrimmingLeadingWhitespace") ~typ:(returning id)
let stringByTrimmingLeadingWhitespaceAndNewline self = msg_send ~self ~cmd:(selector "stringByTrimmingLeadingWhitespaceAndNewline") ~typ:(returning id)
let stringByTrimmingTrailingCharactersInSet x self = msg_send ~self ~cmd:(selector "stringByTrimmingTrailingCharactersInSet:") ~typ:(id @-> returning id) x
let stringByTrimmingTrailingWhitespace self = msg_send ~self ~cmd:(selector "stringByTrimmingTrailingWhitespace") ~typ:(returning id)
let stringByTrimmingTrailingWhitespaceAndNewline self = msg_send ~self ~cmd:(selector "stringByTrimmingTrailingWhitespaceAndNewline") ~typ:(returning id)
let stringByTrimmingTrailingWhitespaceFromEachLine self = msg_send ~self ~cmd:(selector "stringByTrimmingTrailingWhitespaceFromEachLine") ~typ:(returning id)
let stringMarkingUpcaseTransitionsWithDelimiter2 x self = msg_send ~self ~cmd:(selector "stringMarkingUpcaseTransitionsWithDelimiter2:") ~typ:(id @-> returning id) x
let stringRepresentation self = msg_send ~self ~cmd:(selector "stringRepresentation") ~typ:(returning id)
let stringWithLTREmbedding self = msg_send ~self ~cmd:(selector "stringWithLTREmbedding") ~typ:(returning id)
let stringWithSpaceAtEnds self = msg_send ~self ~cmd:(selector "stringWithSpaceAtEnds") ~typ:(returning id)
let stringWithoutAmpersand self = msg_send ~self ~cmd:(selector "stringWithoutAmpersand") ~typ:(returning id)
let stringsByAppendingPaths x self = msg_send ~self ~cmd:(selector "stringsByAppendingPaths:") ~typ:(id @-> returning id) x
let stripMobileMSuffixIfPresent self = msg_send ~self ~cmd:(selector "stripMobileMSuffixIfPresent") ~typ:(returning id)
let strokeStringFromNumberString self = msg_send ~self ~cmd:(selector "strokeStringFromNumberString") ~typ:(returning id)
let substringFromIndex x self = msg_send ~self ~cmd:(selector "substringFromIndex:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let substringToIndex x self = msg_send ~self ~cmd:(selector "substringToIndex:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let substringWithRange x self = msg_send ~self ~cmd:(selector "substringWithRange:") ~typ:(NSRange.t @-> returning id) x
let toneFromPinyinSyllableWithNumber self = msg_send ~self ~cmd:(selector "toneFromPinyinSyllableWithNumber") ~typ:(returning id)
let traditionalChinesePinyinCompare x self = msg_send ~self ~cmd:(selector "traditionalChinesePinyinCompare:") ~typ:(id @-> returning llong) x
let traditionalChineseZhuyinCompare x self = msg_send ~self ~cmd:(selector "traditionalChineseZhuyinCompare:") ~typ:(id @-> returning llong) x
let trimmedString self = msg_send ~self ~cmd:(selector "trimmedString") ~typ:(returning id)
let uniqueSavePath self = msg_send ~self ~cmd:(selector "uniqueSavePath") ~typ:(returning id)
let unsignedIntValue self = msg_send ~self ~cmd:(selector "unsignedIntValue") ~typ:(returning uint)
let uppercaseString self = msg_send ~self ~cmd:(selector "uppercaseString") ~typ:(returning id)
let uppercaseStringWithLocale x self = msg_send ~self ~cmd:(selector "uppercaseStringWithLocale:") ~typ:(id @-> returning id) x
let urlFromString self = msg_send ~self ~cmd:(selector "urlFromString") ~typ:(returning id)
let validateGSName x self = msg_send ~self ~cmd:(selector "validateGSName:") ~typ:((ptr id) @-> returning bool) x
let validateGSNameAllowingDot x ~error self = msg_send ~self ~cmd:(selector "validateGSNameAllowingDot:error:") ~typ:(bool @-> (ptr id) @-> returning bool) x error
let variantFittingPresentationWidth x self = msg_send ~self ~cmd:(selector "variantFittingPresentationWidth:") ~typ:(llong @-> returning id) (LLong.of_int x)
let vertexID self = msg_send ~self ~cmd:(selector "vertexID") ~typ:(returning id)
let writableTypeIdentifiersForItemProvider self = msg_send ~self ~cmd:(selector "writableTypeIdentifiersForItemProvider") ~typ:(returning id)
let writableTypesForPasteboard x self = msg_send ~self ~cmd:(selector "writableTypesForPasteboard:") ~typ:(id @-> returning id) x
let writeToFile x ~atomically self = msg_send ~self ~cmd:(selector "writeToFile:atomically:") ~typ:(id @-> bool @-> returning bool) x atomically
let writeToFile' x ~atomically ~encoding ~error self = msg_send ~self ~cmd:(selector "writeToFile:atomically:encoding:error:") ~typ:(id @-> bool @-> ullong @-> (ptr id) @-> returning bool) x atomically (ULLong.of_int encoding) error
let writeToURL x ~atomically self = msg_send ~self ~cmd:(selector "writeToURL:atomically:") ~typ:(id @-> bool @-> returning bool) x atomically
let writeToURL' x ~atomically ~encoding ~error self = msg_send ~self ~cmd:(selector "writeToURL:atomically:encoding:error:") ~typ:(id @-> bool @-> ullong @-> (ptr id) @-> returning bool) x atomically (ULLong.of_int encoding) error
let zhuyinSyllableFromPinyinSyllable self = msg_send ~self ~cmd:(selector "zhuyinSyllableFromPinyinSyllable") ~typ:(returning id)