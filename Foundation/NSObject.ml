(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

open CoreFoundation

(** Apple docs: {{:https://developer.apple.com/documentation//nsobject?language=objc}NSObject} *)

let self = get_class "NSObject"

let _CAMLType self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning id)
let _CAMLTypeForKey x self = msg_send ~self ~cmd:(selector "CAMLTypeForKey:") ~typ:(id @-> returning id) x
let _CAMLTypeSupportedForKey x self = msg_send ~self ~cmd:(selector "CAMLTypeSupportedForKey:") ~typ:(id @-> returning bool) x
let _CKAssignToContainerWithID x self = msg_send ~self ~cmd:(selector "CKAssignToContainerWithID:") ~typ:(id @-> returning void) x
let _CKDescription self = msg_send ~self ~cmd:(selector "CKDescription") ~typ:(returning id)
let _CKDescriptionPropertiesWithPublic x ~private_ ~shouldExpand self = msg_send ~self ~cmd:(selector "CKDescriptionPropertiesWithPublic:private:shouldExpand:") ~typ:(bool @-> bool @-> bool @-> returning id) x private_ shouldExpand
let _CKDescriptionRedact x ~avoidShortDescription self = msg_send ~self ~cmd:(selector "CKDescriptionRedact:avoidShortDescription:") ~typ:(bool @-> bool @-> returning id) x avoidShortDescription
let _CKExpandedDescription self = msg_send ~self ~cmd:(selector "CKExpandedDescription") ~typ:(returning id)
let _CKHashedDescription self = msg_send ~self ~cmd:(selector "CKHashedDescription") ~typ:(returning id)
let _CKObjectDescriptionRedact x self = msg_send ~self ~cmd:(selector "CKObjectDescriptionRedact:") ~typ:(bool @-> returning id) x
let _CKObjectDescriptionRedact' x ~avoidShortDescription self = msg_send ~self ~cmd:(selector "CKObjectDescriptionRedact:avoidShortDescription:") ~typ:(bool @-> bool @-> returning id) x avoidShortDescription
let _CKPropertiesDescription self = msg_send ~self ~cmd:(selector "CKPropertiesDescription") ~typ:(returning id)
let _CKPropertiesDescriptionStringFromProperties x self = msg_send ~self ~cmd:(selector "CKPropertiesDescriptionStringFromProperties:") ~typ:(id @-> returning id) x
let _CKRedactedDescription self = msg_send ~self ~cmd:(selector "CKRedactedDescription") ~typ:(returning id)
let _CKSingleLineDescription self = msg_send ~self ~cmd:(selector "CKSingleLineDescription") ~typ:(returning id)
let _CKUnredactedDescription self = msg_send ~self ~cmd:(selector "CKUnredactedDescription") ~typ:(returning id)
let _NSRepresentation self = msg_send ~self ~cmd:(selector "NSRepresentation") ~typ:(returning id)
let _RBSIsXPCObject self = msg_send ~self ~cmd:(selector "RBSIsXPCObject") ~typ:(returning bool)
let abCaseInsensitiveIsEqual x self = msg_send ~self ~cmd:(selector "abCaseInsensitiveIsEqual:") ~typ:(id @-> returning bool) x
let abDictionaryWithValuesForKeyPaths x self = msg_send ~self ~cmd:(selector "abDictionaryWithValuesForKeyPaths:") ~typ:(id @-> returning id) x
let abRemoveObserverIgnoringExceptions x ~forKeyPath self = msg_send ~self ~cmd:(selector "abRemoveObserverIgnoringExceptions:forKeyPath:") ~typ:(id @-> id @-> returning void) x forKeyPath
let accessibilityActivate self = msg_send ~self ~cmd:(selector "accessibilityActivate") ~typ:(returning bool)
let accessibilityActivationPoint self = msg_send_stret ~self ~cmd:(selector "accessibilityActivationPoint") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let accessibilityAddTemporaryChild x self = msg_send ~self ~cmd:(selector "accessibilityAddTemporaryChild:") ~typ:(id @-> returning void) x
let accessibilityAllowsOverriddenAttributesWhenIgnored self = msg_send ~self ~cmd:(selector "accessibilityAllowsOverriddenAttributesWhenIgnored") ~typ:(returning bool)
let accessibilityArrayAttributeCount x self = msg_send ~self ~cmd:(selector "accessibilityArrayAttributeCount:") ~typ:(id @-> returning ullong) x |> ULLong.to_int
let accessibilityArrayAttributeValues x ~index ~maxCount self = msg_send ~self ~cmd:(selector "accessibilityArrayAttributeValues:index:maxCount:") ~typ:(id @-> ullong @-> ullong @-> returning id) x (ULLong.of_int index) (ULLong.of_int maxCount)
let accessibilityAssistiveTechnologyFocusedIdentifiers self = msg_send ~self ~cmd:(selector "accessibilityAssistiveTechnologyFocusedIdentifiers") ~typ:(returning id)
let accessibilityAttributeValue x ~forParameter self = msg_send ~self ~cmd:(selector "accessibilityAttributeValue:forParameter:") ~typ:(id @-> id @-> returning id) x forParameter
let accessibilityAttributedHint self = msg_send ~self ~cmd:(selector "accessibilityAttributedHint") ~typ:(returning id)
let accessibilityAttributedLabel self = msg_send ~self ~cmd:(selector "accessibilityAttributedLabel") ~typ:(returning id)
let accessibilityAttributedUserInputLabels self = msg_send ~self ~cmd:(selector "accessibilityAttributedUserInputLabels") ~typ:(returning id)
let accessibilityAttributedValue self = msg_send ~self ~cmd:(selector "accessibilityAttributedValue") ~typ:(returning id)
let accessibilityAttributedValueForStringAttributeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityAttributedValueForStringAttributeAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityBrailleMapRenderRegion self = msg_send_stret ~self ~cmd:(selector "accessibilityBrailleMapRenderRegion") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let accessibilityBrailleMapRenderer self = msg_send ~self ~cmd:(selector "accessibilityBrailleMapRenderer") ~typ:(returning (ptr void))
let accessibilityContainer self = msg_send ~self ~cmd:(selector "accessibilityContainer") ~typ:(returning id)
let accessibilityContainerType self = msg_send ~self ~cmd:(selector "accessibilityContainerType") ~typ:(returning llong) |> LLong.to_int
let accessibilityCustomActions self = msg_send ~self ~cmd:(selector "accessibilityCustomActions") ~typ:(returning id)
let accessibilityCustomRotors self = msg_send ~self ~cmd:(selector "accessibilityCustomRotors") ~typ:(returning id)
let accessibilityDecodeOverriddenAttributes x self = msg_send ~self ~cmd:(selector "accessibilityDecodeOverriddenAttributes:") ~typ:(id @-> returning void) x
let accessibilityDecrement self = msg_send ~self ~cmd:(selector "accessibilityDecrement") ~typ:(returning void)
let accessibilityDragSourceDescriptors self = msg_send ~self ~cmd:(selector "accessibilityDragSourceDescriptors") ~typ:(returning id)
let accessibilityDropPointDescriptors self = msg_send ~self ~cmd:(selector "accessibilityDropPointDescriptors") ~typ:(returning id)
let accessibilityElementAtIndex x self = msg_send ~self ~cmd:(selector "accessibilityElementAtIndex:") ~typ:(llong @-> returning id) (LLong.of_int x)
let accessibilityElementCount self = msg_send ~self ~cmd:(selector "accessibilityElementCount") ~typ:(returning llong) |> LLong.to_int
let accessibilityElementDidBecomeFocused self = msg_send ~self ~cmd:(selector "accessibilityElementDidBecomeFocused") ~typ:(returning void)
let accessibilityElementDidLoseFocus self = msg_send ~self ~cmd:(selector "accessibilityElementDidLoseFocus") ~typ:(returning void)
let accessibilityElementIsFocused self = msg_send ~self ~cmd:(selector "accessibilityElementIsFocused") ~typ:(returning bool)
let accessibilityElements self = msg_send ~self ~cmd:(selector "accessibilityElements") ~typ:(returning id)
let accessibilityElementsHidden self = msg_send ~self ~cmd:(selector "accessibilityElementsHidden") ~typ:(returning bool)
let accessibilityEncodeOverriddenAttributes x self = msg_send ~self ~cmd:(selector "accessibilityEncodeOverriddenAttributes:") ~typ:(id @-> returning void) x
let accessibilityFrame self = msg_send_stret ~self ~cmd:(selector "accessibilityFrame") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let accessibilityHeaderElements self = msg_send ~self ~cmd:(selector "accessibilityHeaderElements") ~typ:(returning id)
let accessibilityHint self = msg_send ~self ~cmd:(selector "accessibilityHint") ~typ:(returning id)
let accessibilityIdentification self = msg_send ~self ~cmd:(selector "accessibilityIdentification") ~typ:(returning id)
let accessibilityIdentifier self = msg_send ~self ~cmd:(selector "accessibilityIdentifier") ~typ:(returning id)
let accessibilityIncrement self = msg_send ~self ~cmd:(selector "accessibilityIncrement") ~typ:(returning void)
let accessibilityIndexForChildUIElementAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityIndexForChildUIElementAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityIndexOfChild x self = msg_send ~self ~cmd:(selector "accessibilityIndexOfChild:") ~typ:(id @-> returning ullong) x |> ULLong.to_int
let accessibilityLabel self = msg_send ~self ~cmd:(selector "accessibilityLabel") ~typ:(returning id)
let accessibilityLanguage self = msg_send ~self ~cmd:(selector "accessibilityLanguage") ~typ:(returning id)
let accessibilityLocalizedStringKey self = msg_send ~self ~cmd:(selector "accessibilityLocalizedStringKey") ~typ:(returning id)
let accessibilityNavigationStyle self = msg_send ~self ~cmd:(selector "accessibilityNavigationStyle") ~typ:(returning llong) |> LLong.to_int
let accessibilityOverriddenAttributes self = msg_send ~self ~cmd:(selector "accessibilityOverriddenAttributes") ~typ:(returning id)
let accessibilityParameterizedAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityParameterizedAttributeNames") ~typ:(returning id)
let accessibilityPath self = msg_send ~self ~cmd:(selector "accessibilityPath") ~typ:(returning id)
let accessibilityPerformEscape self = msg_send ~self ~cmd:(selector "accessibilityPerformEscape") ~typ:(returning bool)
let accessibilityPerformMagicTap self = msg_send ~self ~cmd:(selector "accessibilityPerformMagicTap") ~typ:(returning bool)
let accessibilityPerformShowMenuOfChild x self = msg_send ~self ~cmd:(selector "accessibilityPerformShowMenuOfChild:") ~typ:(id @-> returning bool) x
let accessibilityPresenterProcessIdentifier self = msg_send ~self ~cmd:(selector "accessibilityPresenterProcessIdentifier") ~typ:(returning int)
let accessibilityRemoveTemporaryChild x self = msg_send ~self ~cmd:(selector "accessibilityRemoveTemporaryChild:") ~typ:(id @-> returning void) x
let accessibilityReplaceRange x ~withText self = msg_send ~self ~cmd:(selector "accessibilityReplaceRange:withText:") ~typ:(NSRange.t @-> id @-> returning bool) x withText
let accessibilityRespondsToUserInteraction self = msg_send ~self ~cmd:(selector "accessibilityRespondsToUserInteraction") ~typ:(returning bool)
let accessibilityScroll x self = msg_send ~self ~cmd:(selector "accessibilityScroll:") ~typ:(llong @-> returning bool) (LLong.of_int x)
let accessibilitySetIdentification x self = msg_send ~self ~cmd:(selector "accessibilitySetIdentification:") ~typ:(id @-> returning void) x
let accessibilitySetOverrideValue x ~forAttribute self = msg_send ~self ~cmd:(selector "accessibilitySetOverrideValue:forAttribute:") ~typ:(id @-> id @-> returning bool) x forAttribute
let accessibilitySetPresenterProcessIdentifier x self = msg_send ~self ~cmd:(selector "accessibilitySetPresenterProcessIdentifier:") ~typ:(int @-> returning void) x
let accessibilityShouldSendNotification x self = msg_send ~self ~cmd:(selector "accessibilityShouldSendNotification:") ~typ:(id @-> returning bool) x
let accessibilityShouldUseUniqueId self = msg_send ~self ~cmd:(selector "accessibilityShouldUseUniqueId") ~typ:(returning bool)
let accessibilitySupportsCustomElementData self = msg_send ~self ~cmd:(selector "accessibilitySupportsCustomElementData") ~typ:(returning bool)
let accessibilitySupportsNotifications self = msg_send ~self ~cmd:(selector "accessibilitySupportsNotifications") ~typ:(returning bool)
let accessibilitySupportsOverriddenAttributes self = msg_send ~self ~cmd:(selector "accessibilitySupportsOverriddenAttributes") ~typ:(returning bool)
let accessibilityTemporaryChildren self = msg_send ~self ~cmd:(selector "accessibilityTemporaryChildren") ~typ:(returning id)
let accessibilityTextualContext self = msg_send ~self ~cmd:(selector "accessibilityTextualContext") ~typ:(returning id)
let accessibilityTraits self = msg_send ~self ~cmd:(selector "accessibilityTraits") ~typ:(returning ullong) |> ULLong.to_int
let accessibilityUserInputLabels self = msg_send ~self ~cmd:(selector "accessibilityUserInputLabels") ~typ:(returning id)
let accessibilityValue self = msg_send ~self ~cmd:(selector "accessibilityValue") ~typ:(returning id)
let accessibilityViewIsModal self = msg_send ~self ~cmd:(selector "accessibilityViewIsModal") ~typ:(returning bool)
let accessibilityVisibleArea self = msg_send ~self ~cmd:(selector "accessibilityVisibleArea") ~typ:(returning double)
let addChainedObservers x self = msg_send ~self ~cmd:(selector "addChainedObservers:") ~typ:(id @-> returning id) x
let addObject x ~toBothSidesOfRelationshipWithKey self = msg_send ~self ~cmd:(selector "addObject:toBothSidesOfRelationshipWithKey:") ~typ:(id @-> id @-> returning void) x toBothSidesOfRelationshipWithKey
let addObject' x ~toPropertyWithKey self = msg_send ~self ~cmd:(selector "addObject:toPropertyWithKey:") ~typ:(id @-> id @-> returning void) x toPropertyWithKey
let addObservationTransformer x self = msg_send ~self ~cmd:(selector "addObservationTransformer:") ~typ:((ptr void) @-> returning id) x
let addObserver x self = msg_send ~self ~cmd:(selector "addObserver:") ~typ:(id @-> returning id) x
let addObserver1 x ~forObservableKeyPath self = msg_send ~self ~cmd:(selector "addObserver:forObservableKeyPath:") ~typ:(id @-> id @-> returning id) x forObservableKeyPath
let addObserver2 x ~forKeyPath ~options ~context self = msg_send ~self ~cmd:(selector "addObserver:forKeyPath:options:context:") ~typ:(id @-> id @-> ullong @-> (ptr void) @-> returning void) x forKeyPath (ULLong.of_int options) context
let addObserverBlock x self = msg_send ~self ~cmd:(selector "addObserverBlock:") ~typ:((ptr void) @-> returning id) x
let akToolbarButtonItemType self = msg_send ~self ~cmd:(selector "akToolbarButtonItemType") ~typ:(returning ullong) |> ULLong.to_int
let allPropertyKeys self = msg_send ~self ~cmd:(selector "allPropertyKeys") ~typ:(returning id)
let allowsWeakReference self = msg_send ~self ~cmd:(selector "allowsWeakReference") ~typ:(returning bool)
let associatedObjectForKey x self = msg_send ~self ~cmd:(selector "associatedObjectForKey:") ~typ:(id @-> returning id) x
let attributeKeys self = msg_send ~self ~cmd:(selector "attributeKeys") ~typ:(returning id)
let autoContentAccessingProxy self = msg_send ~self ~cmd:(selector "autoContentAccessingProxy") ~typ:(returning id)
let autorelease self = msg_send ~self ~cmd:(selector "autorelease") ~typ:(returning id)
let awakeAfterUsingCoder x self = msg_send ~self ~cmd:(selector "awakeAfterUsingCoder:") ~typ:(id @-> returning id) x
let awakeFromNib self = msg_send ~self ~cmd:(selector "awakeFromNib") ~typ:(returning void)
let beginBSMResourceActivity x self = msg_send ~self ~cmd:(selector "beginBSMResourceActivity:") ~typ:(id @-> returning id) x
let bind x ~toObject ~withKeyPath ~options self = msg_send ~self ~cmd:(selector "bind:toObject:withKeyPath:options:") ~typ:(id @-> id @-> id @-> id @-> returning void) x toObject withKeyPath options
let boolValueSafe self = msg_send ~self ~cmd:(selector "boolValueSafe") ~typ:(returning bool)
let boolValueSafe' x self = msg_send ~self ~cmd:(selector "boolValueSafe:") ~typ:((ptr int) @-> returning bool) x
let class_ self = msg_send ~self ~cmd:(selector "class") ~typ:(returning _Class)
let classCode self = msg_send ~self ~cmd:(selector "classCode") ~typ:(returning uint)
let classDescription self = msg_send ~self ~cmd:(selector "classDescription") ~typ:(returning id)
let classDescriptionForDestinationKey x self = msg_send ~self ~cmd:(selector "classDescriptionForDestinationKey:") ~typ:(id @-> returning id) x
let classForArchiver self = msg_send ~self ~cmd:(selector "classForArchiver") ~typ:(returning _Class)
let classForCoder self = msg_send ~self ~cmd:(selector "classForCoder") ~typ:(returning _Class)
let classForKeyedArchiver self = msg_send ~self ~cmd:(selector "classForKeyedArchiver") ~typ:(returning _Class)
let classForPortCoder self = msg_send ~self ~cmd:(selector "classForPortCoder") ~typ:(returning _Class)
let className self = msg_send ~self ~cmd:(selector "className") ~typ:(returning id)
let clearProperties self = msg_send ~self ~cmd:(selector "clearProperties") ~typ:(returning void)
let coerceValue x ~forKey self = msg_send ~self ~cmd:(selector "coerceValue:forKey:") ~typ:(id @-> id @-> returning id) x forKey
let coerceValueForScriptingProperties x self = msg_send ~self ~cmd:(selector "coerceValueForScriptingProperties:") ~typ:(id @-> returning id) x
let conformsToProtocol x self = msg_send ~self ~cmd:(selector "conformsToProtocol:") ~typ:(id @-> returning bool) x
let conformsToProtocolCached x self = msg_send ~self ~cmd:(selector "conformsToProtocolCached:") ~typ:(id @-> returning bool) x
let copy self = msg_send ~self ~cmd:(selector "copy") ~typ:(returning id)
let copyScriptingValue x ~forKey ~withProperties self = msg_send ~self ~cmd:(selector "copyScriptingValue:forKey:withProperties:") ~typ:(id @-> id @-> id @-> returning id) x forKey withProperties
let cplClearProperties x self = msg_send ~self ~cmd:(selector "cplClearProperties:") ~typ:(id @-> returning void) x
let cplCopyProperties x ~fromObject ~withCopyBlock self = msg_send ~self ~cmd:(selector "cplCopyProperties:fromObject:withCopyBlock:") ~typ:(id @-> id @-> (ptr void) @-> returning void) x fromObject withCopyBlock
let cplCopyPropertiesFromObject x ~withCopyBlock self = msg_send ~self ~cmd:(selector "cplCopyPropertiesFromObject:withCopyBlock:") ~typ:(id @-> (ptr void) @-> returning void) x withCopyBlock
let cplDecodePropertiesFromCoder x self = msg_send ~self ~cmd:(selector "cplDecodePropertiesFromCoder:") ~typ:(id @-> returning void) x
let cplDeepCopy self = msg_send ~self ~cmd:(selector "cplDeepCopy") ~typ:(returning id)
let cplEncodePropertiesWithCoder x self = msg_send ~self ~cmd:(selector "cplEncodePropertiesWithCoder:") ~typ:(id @-> returning void) x
let cplFullDescription self = msg_send ~self ~cmd:(selector "cplFullDescription") ~typ:(returning id)
let cplHash self = msg_send ~self ~cmd:(selector "cplHash") ~typ:(returning ullong) |> ULLong.to_int
let cplIsEqual x self = msg_send ~self ~cmd:(selector "cplIsEqual:") ~typ:(id @-> returning bool) x
let cplIsEqual' x ~withEqualityBlock self = msg_send ~self ~cmd:(selector "cplIsEqual:withEqualityBlock:") ~typ:(id @-> (ptr void) @-> returning bool) x withEqualityBlock
let cplProperties x ~areEqualToPropertiesOf ~withEqualityBlock self = msg_send ~self ~cmd:(selector "cplProperties:areEqualToPropertiesOf:withEqualityBlock:") ~typ:(id @-> id @-> (ptr void) @-> returning bool) x areEqualToPropertiesOf withEqualityBlock
let cplProperties' x ~areEqualToPropertiesOf ~diffTracker ~withEqualityBlock self = msg_send ~self ~cmd:(selector "cplProperties:areEqualToPropertiesOf:diffTracker:withEqualityBlock:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning bool) x areEqualToPropertiesOf diffTracker withEqualityBlock
let cplSpecialHash self = msg_send ~self ~cmd:(selector "cplSpecialHash") ~typ:(returning ullong) |> ULLong.to_int
let cplSpecialIsEqual x self = msg_send ~self ~cmd:(selector "cplSpecialIsEqual:") ~typ:(id @-> returning bool) x
let createKeyValueBindingForKey x ~typeMask self = msg_send ~self ~cmd:(selector "createKeyValueBindingForKey:typeMask:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int typeMask)
let currentContextCanExecuteSelector x self = msg_send ~self ~cmd:(selector "currentContextCanExecuteSelector:") ~typ:(_SEL @-> returning bool) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let debugDescription self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning id)
let defaultAccessibilityTraits self = msg_send ~self ~cmd:(selector "defaultAccessibilityTraits") ~typ:(returning ullong) |> ULLong.to_int
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let descriptionAtIndent x self = msg_send ~self ~cmd:(selector "descriptionAtIndent:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let dictionaryWithValuesForKeys x self = msg_send ~self ~cmd:(selector "dictionaryWithValuesForKeys:") ~typ:(id @-> returning id) x
let didChange x ~valuesAtIndexes ~forKey self = msg_send ~self ~cmd:(selector "didChange:valuesAtIndexes:forKey:") ~typ:(ullong @-> id @-> id @-> returning void) (ULLong.of_int x) valuesAtIndexes forKey
let didChangeValueForKey x self = msg_send ~self ~cmd:(selector "didChangeValueForKey:") ~typ:(id @-> returning void) x
let didChangeValueForKey' x ~withSetMutation ~usingObjects self = msg_send ~self ~cmd:(selector "didChangeValueForKey:withSetMutation:usingObjects:") ~typ:(id @-> ullong @-> id @-> returning void) x (ULLong.of_int withSetMutation) usingObjects
let doesContain x self = msg_send ~self ~cmd:(selector "doesContain:") ~typ:(id @-> returning bool) x
let doesNotRecognizeSelector x self = msg_send ~self ~cmd:(selector "doesNotRecognizeSelector:") ~typ:(_SEL @-> returning void) x
let doubleValueSafe self = msg_send ~self ~cmd:(selector "doubleValueSafe") ~typ:(returning double)
let doubleValueSafe' x self = msg_send ~self ~cmd:(selector "doubleValueSafe:") ~typ:((ptr int) @-> returning double) x
let encodeWithCAMLWriter x self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning void) x
let endBSMResourceActivity x self = msg_send ~self ~cmd:(selector "endBSMResourceActivity:") ~typ:(id @-> returning void) x
let entityName self = msg_send ~self ~cmd:(selector "entityName") ~typ:(returning id)
let exposedBindings self = msg_send ~self ~cmd:(selector "exposedBindings") ~typ:(returning id)
let finalize self = msg_send ~self ~cmd:(selector "finalize") ~typ:(returning void)
let finishObserving self = msg_send ~self ~cmd:(selector "finishObserving") ~typ:(returning void)
let flushKeyBindings self = msg_send ~self ~cmd:(selector "flushKeyBindings") ~typ:(returning void)
let forwardInvocation x self = msg_send ~self ~cmd:(selector "forwardInvocation:") ~typ:(id @-> returning void) x
let forwardingTargetForSelector x self = msg_send ~self ~cmd:(selector "forwardingTargetForSelector:") ~typ:(_SEL @-> returning id) x
let handleInvalidExecutionContextForSelector x ~requirement self = msg_send ~self ~cmd:(selector "handleInvalidExecutionContextForSelector:requirement:") ~typ:(_SEL @-> int @-> returning void) x requirement
let handleQueryWithUnboundKey x self = msg_send ~self ~cmd:(selector "handleQueryWithUnboundKey:") ~typ:(id @-> returning id) x
let handleTakeValue x ~forUnboundKey self = msg_send ~self ~cmd:(selector "handleTakeValue:forUnboundKey:") ~typ:(id @-> id @-> returning void) x forUnboundKey
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning ullong) |> ULLong.to_int
let implementsSelector x self = msg_send ~self ~cmd:(selector "implementsSelector:") ~typ:(_SEL @-> returning bool) x
let indexOfAccessibilityElement x self = msg_send ~self ~cmd:(selector "indexOfAccessibilityElement:") ~typ:(id @-> returning llong) x |> LLong.to_int
let infoForBinding x self = msg_send ~self ~cmd:(selector "infoForBinding:") ~typ:(id @-> returning id) x
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initFromPQLResultSet x ~error self = msg_send ~self ~cmd:(selector "initFromPQLResultSet:error:") ~typ:(id @-> (ptr id) @-> returning id) x error
let initWithCPLArchiver x self = msg_send ~self ~cmd:(selector "initWithCPLArchiver:") ~typ:(id @-> returning id) x
let insertValue x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "insertValue:inPropertyWithKey:") ~typ:(id @-> id @-> returning void) x inPropertyWithKey
let insertValue' x ~atIndex ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "insertValue:atIndex:inPropertyWithKey:") ~typ:(id @-> ullong @-> id @-> returning void) x (ULLong.of_int atIndex) inPropertyWithKey
let int64ValueSafe self = msg_send ~self ~cmd:(selector "int64ValueSafe") ~typ:(returning llong) |> LLong.to_int
let int64ValueSafe' x self = msg_send ~self ~cmd:(selector "int64ValueSafe:") ~typ:((ptr int) @-> returning llong) x |> LLong.to_int
let inverseForRelationshipKey x self = msg_send ~self ~cmd:(selector "inverseForRelationshipKey:") ~typ:(id @-> returning id) x
let isAXAttributedString self = msg_send ~self ~cmd:(selector "isAXAttributedString") ~typ:(returning bool)
let isAccessibilityElement self = msg_send ~self ~cmd:(selector "isAccessibilityElement") ~typ:(returning bool)
let isAccessibilityElementByDefault self = msg_send ~self ~cmd:(selector "isAccessibilityElementByDefault") ~typ:(returning bool)
let isCaseInsensitiveLike x self = msg_send ~self ~cmd:(selector "isCaseInsensitiveLike:") ~typ:(id @-> returning bool) x
let isElementAccessibilityExposedToInterfaceBuilder self = msg_send ~self ~cmd:(selector "isElementAccessibilityExposedToInterfaceBuilder") ~typ:(returning bool)
let isEqual x self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning bool) x
let isEqualTo x self = msg_send ~self ~cmd:(selector "isEqualTo:") ~typ:(id @-> returning bool) x
let isFault self = msg_send ~self ~cmd:(selector "isFault") ~typ:(returning bool)
let isGreaterThan x self = msg_send ~self ~cmd:(selector "isGreaterThan:") ~typ:(id @-> returning bool) x
let isGreaterThanOrEqualTo x self = msg_send ~self ~cmd:(selector "isGreaterThanOrEqualTo:") ~typ:(id @-> returning bool) x
let isKindOfClass x self = msg_send ~self ~cmd:(selector "isKindOfClass:") ~typ:(_Class @-> returning bool) x
let isLessThan x self = msg_send ~self ~cmd:(selector "isLessThan:") ~typ:(id @-> returning bool) x
let isLessThanOrEqualTo x self = msg_send ~self ~cmd:(selector "isLessThanOrEqualTo:") ~typ:(id @-> returning bool) x
let isLike x self = msg_send ~self ~cmd:(selector "isLike:") ~typ:(id @-> returning bool) x
let isMemberOfClass x self = msg_send ~self ~cmd:(selector "isMemberOfClass:") ~typ:(_Class @-> returning bool) x
let isNotEqualTo x self = msg_send ~self ~cmd:(selector "isNotEqualTo:") ~typ:(id @-> returning bool) x
let isNull self = msg_send ~self ~cmd:(selector "isNull") ~typ:(returning bool)
let isProxy self = msg_send ~self ~cmd:(selector "isProxy") ~typ:(returning bool)
let isToManyKey x self = msg_send ~self ~cmd:(selector "isToManyKey:") ~typ:(id @-> returning bool) x
let keyValueBindingForKey x ~typeMask self = msg_send ~self ~cmd:(selector "keyValueBindingForKey:typeMask:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int typeMask)
let matchesValue x ~usingComparison self = msg_send ~self ~cmd:(selector "matchesValue:usingComparison:") ~typ:(id @-> llong @-> returning bool) x (LLong.of_int usingComparison)
let methodDescriptionForSelector x self = msg_send ~self ~cmd:(selector "methodDescriptionForSelector:") ~typ:(_SEL @-> returning (ptr void)) x
let methodForSelector x self = msg_send ~self ~cmd:(selector "methodForSelector:") ~typ:(_SEL @-> returning (ptr (ptr void))) x
let methodSignatureForSelector x self = msg_send ~self ~cmd:(selector "methodSignatureForSelector:") ~typ:(_SEL @-> returning id) x
let multicaster x ~queueForSelector self = msg_send ~self ~cmd:(selector "multicaster:queueForSelector:") ~typ:(id @-> _SEL @-> returning id) x queueForSelector
let mutableArrayValueForKey x self = msg_send ~self ~cmd:(selector "mutableArrayValueForKey:") ~typ:(id @-> returning id) x
let mutableArrayValueForKeyPath x self = msg_send ~self ~cmd:(selector "mutableArrayValueForKeyPath:") ~typ:(id @-> returning id) x
let mutableCopy self = msg_send ~self ~cmd:(selector "mutableCopy") ~typ:(returning id)
let mutableOrderedSetValueForKey x self = msg_send ~self ~cmd:(selector "mutableOrderedSetValueForKey:") ~typ:(id @-> returning id) x
let mutableOrderedSetValueForKeyPath x self = msg_send ~self ~cmd:(selector "mutableOrderedSetValueForKeyPath:") ~typ:(id @-> returning id) x
let mutableSetValueForKey x self = msg_send ~self ~cmd:(selector "mutableSetValueForKey:") ~typ:(id @-> returning id) x
let mutableSetValueForKeyPath x self = msg_send ~self ~cmd:(selector "mutableSetValueForKeyPath:") ~typ:(id @-> returning id) x
let newScriptingObjectOfClass x ~forValueForKey ~withContentsValue ~properties self = msg_send ~self ~cmd:(selector "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") ~typ:(_Class @-> id @-> id @-> id @-> returning id) x forValueForKey withContentsValue properties
let objectSpecifier self = msg_send ~self ~cmd:(selector "objectSpecifier") ~typ:(returning id)
let objectWithStoreLibraryPersonalizationRelativeModelObject x self = msg_send ~self ~cmd:(selector "objectWithStoreLibraryPersonalizationRelativeModelObject:") ~typ:(id @-> returning id) x
let observationInfo self = msg_send ~self ~cmd:(selector "observationInfo") ~typ:(returning (ptr void))
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x ofObject change context
let optionDescriptionsForBinding x self = msg_send ~self ~cmd:(selector "optionDescriptionsForBinding:") ~typ:(id @-> returning id) x
let ownsDestinationObjectsForRelationshipKey x self = msg_send ~self ~cmd:(selector "ownsDestinationObjectsForRelationshipKey:") ~typ:(id @-> returning bool) x
let performSelector x self = msg_send ~self ~cmd:(selector "performSelector:") ~typ:(_SEL @-> returning id) x
let performSelector1 x ~withObject self = msg_send ~self ~cmd:(selector "performSelector:withObject:") ~typ:(_SEL @-> id @-> returning id) x withObject
let performSelector2 x ~object_ ~afterDelay self = msg_send ~self ~cmd:(selector "performSelector:object:afterDelay:") ~typ:(_SEL @-> id @-> double @-> returning void) x object_ afterDelay
let performSelector3 x ~withObject ~afterDelay self = msg_send ~self ~cmd:(selector "performSelector:withObject:afterDelay:") ~typ:(_SEL @-> id @-> double @-> returning void) x withObject afterDelay
let performSelector4 x ~withObject ~withObject_ self = msg_send ~self ~cmd:(selector "performSelector:withObject:withObject:") ~typ:(_SEL @-> id @-> id @-> returning id) x withObject withObject_
let performSelector5 x ~onThread ~withObject ~waitUntilDone self = msg_send ~self ~cmd:(selector "performSelector:onThread:withObject:waitUntilDone:") ~typ:(_SEL @-> id @-> id @-> bool @-> returning void) x onThread withObject waitUntilDone
let performSelector6 x ~withObject ~afterDelay ~ignoreMenuTracking self = msg_send ~self ~cmd:(selector "performSelector:withObject:afterDelay:ignoreMenuTracking:") ~typ:(_SEL @-> id @-> double @-> bool @-> returning void) x withObject afterDelay ignoreMenuTracking
let performSelector7 x ~withObject ~afterDelay ~inModes self = msg_send ~self ~cmd:(selector "performSelector:withObject:afterDelay:inModes:") ~typ:(_SEL @-> id @-> double @-> id @-> returning void) x withObject afterDelay inModes
let performSelector8 x ~onThread ~withObject ~waitUntilDone ~modes self = msg_send ~self ~cmd:(selector "performSelector:onThread:withObject:waitUntilDone:modes:") ~typ:(_SEL @-> id @-> id @-> bool @-> id @-> returning void) x onThread withObject waitUntilDone modes
let performSelectorInBackground x ~withObject self = msg_send ~self ~cmd:(selector "performSelectorInBackground:withObject:") ~typ:(_SEL @-> id @-> returning void) x withObject
let performSelectorOnMainThread x ~withObject ~waitUntilDone self = msg_send ~self ~cmd:(selector "performSelectorOnMainThread:withObject:waitUntilDone:") ~typ:(_SEL @-> id @-> bool @-> returning void) x withObject waitUntilDone
let performSelectorOnMainThread' x ~withObject ~waitUntilDone ~modes self = msg_send ~self ~cmd:(selector "performSelectorOnMainThread:withObject:waitUntilDone:modes:") ~typ:(_SEL @-> id @-> bool @-> id @-> returning void) x withObject waitUntilDone modes
let personalizationScopedPropertiesForProperties x self = msg_send ~self ~cmd:(selector "personalizationScopedPropertiesForProperties:") ~typ:(id @-> returning id) x
let pkaxRespondsToSelector x ~fromExtrasProtocol self = msg_send ~self ~cmd:(selector "pkaxRespondsToSelector:fromExtrasProtocol:") ~typ:(_SEL @-> id @-> returning bool) x fromExtrasProtocol
let pkaxValueForKey x self = msg_send ~self ~cmd:(selector "pkaxValueForKey:") ~typ:(id @-> returning id) x
let plistArchiveWithCPLArchiver x self = msg_send ~self ~cmd:(selector "plistArchiveWithCPLArchiver:") ~typ:(id @-> returning id) x
let prepareForInterfaceBuilder self = msg_send ~self ~cmd:(selector "prepareForInterfaceBuilder") ~typ:(returning void)
let receiveObservedError x self = msg_send ~self ~cmd:(selector "receiveObservedError:") ~typ:(id @-> returning void) x
let receiveObservedValue x self = msg_send ~self ~cmd:(selector "receiveObservedValue:") ~typ:(id @-> returning void) x
let registerBSMResourceClient x self = msg_send ~self ~cmd:(selector "registerBSMResourceClient:") ~typ:(id @-> returning bool) x
let relativeModelObjectForStoreLibraryPersonalization self = msg_send ~self ~cmd:(selector "relativeModelObjectForStoreLibraryPersonalization") ~typ:(returning id)
let release self = msg_send ~self ~cmd:(selector "release") ~typ:(returning void)
let releaseOnMainThread self = msg_send ~self ~cmd:(selector "releaseOnMainThread") ~typ:(returning void)
let removeObject x ~fromBothSidesOfRelationshipWithKey self = msg_send ~self ~cmd:(selector "removeObject:fromBothSidesOfRelationshipWithKey:") ~typ:(id @-> id @-> returning void) x fromBothSidesOfRelationshipWithKey
let removeObject' x ~fromPropertyWithKey self = msg_send ~self ~cmd:(selector "removeObject:fromPropertyWithKey:") ~typ:(id @-> id @-> returning void) x fromPropertyWithKey
let removeObservation x self = msg_send ~self ~cmd:(selector "removeObservation:") ~typ:(id @-> returning void) x
let removeObservation' x ~forObservableKeyPath self = msg_send ~self ~cmd:(selector "removeObservation:forObservableKeyPath:") ~typ:(id @-> id @-> returning void) x forObservableKeyPath
let removeObserver x ~forKeyPath self = msg_send ~self ~cmd:(selector "removeObserver:forKeyPath:") ~typ:(id @-> id @-> returning void) x forKeyPath
let removeObserver' x ~forKeyPath ~context self = msg_send ~self ~cmd:(selector "removeObserver:forKeyPath:context:") ~typ:(id @-> id @-> (ptr void) @-> returning void) x forKeyPath context
let removeValueAtIndex x ~fromPropertyWithKey self = msg_send ~self ~cmd:(selector "removeValueAtIndex:fromPropertyWithKey:") ~typ:(ullong @-> id @-> returning void) (ULLong.of_int x) fromPropertyWithKey
let replaceValueAtIndex x ~inPropertyWithKey ~withValue self = msg_send ~self ~cmd:(selector "replaceValueAtIndex:inPropertyWithKey:withValue:") ~typ:(ullong @-> id @-> id @-> returning void) (ULLong.of_int x) inPropertyWithKey withValue
let replacementObjectForArchiver x self = msg_send ~self ~cmd:(selector "replacementObjectForArchiver:") ~typ:(id @-> returning id) x
let replacementObjectForCoder x self = msg_send ~self ~cmd:(selector "replacementObjectForCoder:") ~typ:(id @-> returning id) x
let replacementObjectForKeyedArchiver x self = msg_send ~self ~cmd:(selector "replacementObjectForKeyedArchiver:") ~typ:(id @-> returning id) x
let replacementObjectForPortCoder x self = msg_send ~self ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning id) x
let resourceAccessIdentifier self = msg_send ~self ~cmd:(selector "resourceAccessIdentifier") ~typ:(returning id)
let respondsToSelector x self = msg_send ~self ~cmd:(selector "respondsToSelector:") ~typ:(_SEL @-> returning bool) x
let retain self = msg_send ~self ~cmd:(selector "retain") ~typ:(returning id)
let retainCount self = msg_send ~self ~cmd:(selector "retainCount") ~typ:(returning ullong) |> ULLong.to_int
let retainWeakReference self = msg_send ~self ~cmd:(selector "retainWeakReference") ~typ:(returning bool)
let runBlockWithBSMResourceAccess x self = msg_send ~self ~cmd:(selector "runBlockWithBSMResourceAccess:") ~typ:((ptr void) @-> returning bool) x
let scriptingProperties self = msg_send ~self ~cmd:(selector "scriptingProperties") ~typ:(returning id)
let scriptingValueForSpecifier x self = msg_send ~self ~cmd:(selector "scriptingValueForSpecifier:") ~typ:(id @-> returning id) x
let self_ self = msg_send ~self ~cmd:(selector "self") ~typ:(returning id)
let setAccessibilityActivationPoint x self = msg_send ~self ~cmd:(selector "setAccessibilityActivationPoint:") ~typ:(CGPoint.t @-> returning void) x
let setAccessibilityAttributedHint x self = msg_send ~self ~cmd:(selector "setAccessibilityAttributedHint:") ~typ:(id @-> returning void) x
let setAccessibilityAttributedLabel x self = msg_send ~self ~cmd:(selector "setAccessibilityAttributedLabel:") ~typ:(id @-> returning void) x
let setAccessibilityAttributedUserInputLabels x self = msg_send ~self ~cmd:(selector "setAccessibilityAttributedUserInputLabels:") ~typ:(id @-> returning void) x
let setAccessibilityAttributedValue x self = msg_send ~self ~cmd:(selector "setAccessibilityAttributedValue:") ~typ:(id @-> returning void) x
let setAccessibilityBrailleMapRenderRegion x self = msg_send ~self ~cmd:(selector "setAccessibilityBrailleMapRenderRegion:") ~typ:(CGRect.t @-> returning void) x
let setAccessibilityBrailleMapRenderer x self = msg_send ~self ~cmd:(selector "setAccessibilityBrailleMapRenderer:") ~typ:((ptr void) @-> returning void) x
let setAccessibilityContainer x self = msg_send ~self ~cmd:(selector "setAccessibilityContainer:") ~typ:(id @-> returning void) x
let setAccessibilityContainerType x self = msg_send ~self ~cmd:(selector "setAccessibilityContainerType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityCustomActions x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomActions:") ~typ:(id @-> returning void) x
let setAccessibilityCustomRotors x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomRotors:") ~typ:(id @-> returning void) x
let setAccessibilityDragSourceDescriptors x self = msg_send ~self ~cmd:(selector "setAccessibilityDragSourceDescriptors:") ~typ:(id @-> returning void) x
let setAccessibilityDropPointDescriptors x self = msg_send ~self ~cmd:(selector "setAccessibilityDropPointDescriptors:") ~typ:(id @-> returning void) x
let setAccessibilityElements x self = msg_send ~self ~cmd:(selector "setAccessibilityElements:") ~typ:(id @-> returning void) x
let setAccessibilityElementsHidden x self = msg_send ~self ~cmd:(selector "setAccessibilityElementsHidden:") ~typ:(bool @-> returning void) x
let setAccessibilityFrame x self = msg_send ~self ~cmd:(selector "setAccessibilityFrame:") ~typ:(CGRect.t @-> returning void) x
let setAccessibilityHeaderElements x self = msg_send ~self ~cmd:(selector "setAccessibilityHeaderElements:") ~typ:(id @-> returning void) x
let setAccessibilityHint x self = msg_send ~self ~cmd:(selector "setAccessibilityHint:") ~typ:(id @-> returning void) x
let setAccessibilityIdentifier x self = msg_send ~self ~cmd:(selector "setAccessibilityIdentifier:") ~typ:(id @-> returning void) x
let setAccessibilityLabel x self = msg_send ~self ~cmd:(selector "setAccessibilityLabel:") ~typ:(id @-> returning void) x
let setAccessibilityLanguage x self = msg_send ~self ~cmd:(selector "setAccessibilityLanguage:") ~typ:(id @-> returning void) x
let setAccessibilityNavigationStyle x self = msg_send ~self ~cmd:(selector "setAccessibilityNavigationStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityPath x self = msg_send ~self ~cmd:(selector "setAccessibilityPath:") ~typ:(id @-> returning void) x
let setAccessibilityRespondsToUserInteraction x self = msg_send ~self ~cmd:(selector "setAccessibilityRespondsToUserInteraction:") ~typ:(bool @-> returning void) x
let setAccessibilityTextualContext x self = msg_send ~self ~cmd:(selector "setAccessibilityTextualContext:") ~typ:(id @-> returning void) x
let setAccessibilityTraits x self = msg_send ~self ~cmd:(selector "setAccessibilityTraits:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setAccessibilityUserInputLabels x self = msg_send ~self ~cmd:(selector "setAccessibilityUserInputLabels:") ~typ:(id @-> returning void) x
let setAccessibilityValue x self = msg_send ~self ~cmd:(selector "setAccessibilityValue:") ~typ:(id @-> returning void) x
let setAccessibilityViewIsModal x self = msg_send ~self ~cmd:(selector "setAccessibilityViewIsModal:") ~typ:(bool @-> returning void) x
let setAssociatedObject x ~forKey self = msg_send ~self ~cmd:(selector "setAssociatedObject:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let setIsAccessibilityElement x self = msg_send ~self ~cmd:(selector "setIsAccessibilityElement:") ~typ:(bool @-> returning void) x
let setNilValueForKey x self = msg_send ~self ~cmd:(selector "setNilValueForKey:") ~typ:(id @-> returning void) x
let setObservation x ~forObservingKeyPath self = msg_send ~self ~cmd:(selector "setObservation:forObservingKeyPath:") ~typ:(id @-> id @-> returning void) x forObservingKeyPath
let setObservationInfo x self = msg_send ~self ~cmd:(selector "setObservationInfo:") ~typ:((ptr void) @-> returning void) x
let setResourceAccessIdentifier x self = msg_send ~self ~cmd:(selector "setResourceAccessIdentifier:") ~typ:(id @-> returning void) x
let setScriptingProperties x self = msg_send ~self ~cmd:(selector "setScriptingProperties:") ~typ:(id @-> returning void) x
let setShouldGroupAccessibilityChildren x self = msg_send ~self ~cmd:(selector "setShouldGroupAccessibilityChildren:") ~typ:(bool @-> returning void) x
let setUserInterfaceItemIdentifier x self = msg_send ~self ~cmd:(selector "setUserInterfaceItemIdentifier:") ~typ:(id @-> returning void) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let setValue1 x ~forKeyPath self = msg_send ~self ~cmd:(selector "setValue:forKeyPath:") ~typ:(id @-> id @-> returning void) x forKeyPath
let setValue2 x ~forUndefinedKey self = msg_send ~self ~cmd:(selector "setValue:forUndefinedKey:") ~typ:(id @-> id @-> returning void) x forUndefinedKey
let setValuesForKeysWithDictionary x self = msg_send ~self ~cmd:(selector "setValuesForKeysWithDictionary:") ~typ:(id @-> returning void) x
let shouldGroupAccessibilityChildren self = msg_send ~self ~cmd:(selector "shouldGroupAccessibilityChildren") ~typ:(returning bool)
let storedAccessibilityActivationPoint self = msg_send ~self ~cmd:(selector "storedAccessibilityActivationPoint") ~typ:(returning id)
let storedAccessibilityContainerType self = msg_send ~self ~cmd:(selector "storedAccessibilityContainerType") ~typ:(returning id)
let storedAccessibilityElementsHidden self = msg_send ~self ~cmd:(selector "storedAccessibilityElementsHidden") ~typ:(returning id)
let storedAccessibilityFrame self = msg_send ~self ~cmd:(selector "storedAccessibilityFrame") ~typ:(returning id)
let storedAccessibilityIdentifier self = msg_send ~self ~cmd:(selector "storedAccessibilityIdentifier") ~typ:(returning id)
let storedAccessibilityNavigationStyle self = msg_send ~self ~cmd:(selector "storedAccessibilityNavigationStyle") ~typ:(returning id)
let storedAccessibilityRespondsToUserInteraction self = msg_send ~self ~cmd:(selector "storedAccessibilityRespondsToUserInteraction") ~typ:(returning id)
let storedAccessibilityTraits self = msg_send ~self ~cmd:(selector "storedAccessibilityTraits") ~typ:(returning id)
let storedAccessibilityViewIsModal self = msg_send ~self ~cmd:(selector "storedAccessibilityViewIsModal") ~typ:(returning id)
let storedClassNameForCPLArchiver x self = msg_send ~self ~cmd:(selector "storedClassNameForCPLArchiver:") ~typ:(id @-> returning id) x
let storedIsAccessibilityElement self = msg_send ~self ~cmd:(selector "storedIsAccessibilityElement") ~typ:(returning id)
let storedShouldGroupAccessibilityChildren self = msg_send ~self ~cmd:(selector "storedShouldGroupAccessibilityChildren") ~typ:(returning id)
let storedValueForKey x self = msg_send ~self ~cmd:(selector "storedValueForKey:") ~typ:(id @-> returning id) x
let stringValueSafe self = msg_send ~self ~cmd:(selector "stringValueSafe") ~typ:(returning id)
let stringValueSafe' x self = msg_send ~self ~cmd:(selector "stringValueSafe:") ~typ:((ptr int) @-> returning id) x
let superclass self = msg_send ~self ~cmd:(selector "superclass") ~typ:(returning _Class)
let supportsBSXPCSecureCoding self = msg_send ~self ~cmd:(selector "supportsBSXPCSecureCoding") ~typ:(returning bool)
let supportsRBSXPCSecureCoding self = msg_send ~self ~cmd:(selector "supportsRBSXPCSecureCoding") ~typ:(returning bool)
let takeStoredValue x ~forKey self = msg_send ~self ~cmd:(selector "takeStoredValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let takeStoredValuesFromDictionary x self = msg_send ~self ~cmd:(selector "takeStoredValuesFromDictionary:") ~typ:(id @-> returning void) x
let takeValue x ~forKey self = msg_send ~self ~cmd:(selector "takeValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let takeValue' x ~forKeyPath self = msg_send ~self ~cmd:(selector "takeValue:forKeyPath:") ~typ:(id @-> id @-> returning void) x forKeyPath
let takeValuesFromDictionary x self = msg_send ~self ~cmd:(selector "takeValuesFromDictionary:") ~typ:(id @-> returning void) x
let toManyRelationshipKeys self = msg_send ~self ~cmd:(selector "toManyRelationshipKeys") ~typ:(returning id)
let toOneRelationshipKeys self = msg_send ~self ~cmd:(selector "toOneRelationshipKeys") ~typ:(returning id)
let toPBCodable self = msg_send ~self ~cmd:(selector "toPBCodable") ~typ:(returning id)
let uiPresentationManager self = msg_send ~self ~cmd:(selector "uiPresentationManager") ~typ:(returning id)
let unableToSetNilForKey x self = msg_send ~self ~cmd:(selector "unableToSetNilForKey:") ~typ:(id @-> returning void) x
let unbind x self = msg_send ~self ~cmd:(selector "unbind:") ~typ:(id @-> returning void) x
let unregisterBSMResourceClient x self = msg_send ~self ~cmd:(selector "unregisterBSMResourceClient:") ~typ:(id @-> returning void) x
let userInterfaceItemIdentifier self = msg_send ~self ~cmd:(selector "userInterfaceItemIdentifier") ~typ:(returning id)
let utf8ValueSafe self = msg_send ~self ~cmd:(selector "utf8ValueSafe") ~typ:(returning string)
let utf8ValueSafe' x self = msg_send ~self ~cmd:(selector "utf8ValueSafe:") ~typ:((ptr int) @-> returning string) x
let validateTakeValue x ~forKeyPath self = msg_send ~self ~cmd:(selector "validateTakeValue:forKeyPath:") ~typ:(id @-> id @-> returning id) x forKeyPath
let validateValue x ~forKey self = msg_send ~self ~cmd:(selector "validateValue:forKey:") ~typ:((ptr id) @-> id @-> returning id) x forKey
let validateValue1 x ~forKey ~error self = msg_send ~self ~cmd:(selector "validateValue:forKey:error:") ~typ:((ptr id) @-> id @-> (ptr id) @-> returning bool) x forKey error
let validateValue2 x ~forKeyPath ~error self = msg_send ~self ~cmd:(selector "validateValue:forKeyPath:error:") ~typ:((ptr id) @-> id @-> (ptr id) @-> returning bool) x forKeyPath error
let valueAtIndex x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueAtIndex:inPropertyWithKey:") ~typ:(ullong @-> id @-> returning id) (ULLong.of_int x) inPropertyWithKey
let valueClassForBinding x self = msg_send ~self ~cmd:(selector "valueClassForBinding:") ~typ:(id @-> returning _Class) x
let valueForKey x self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning id) x
let valueForKeyPath x self = msg_send ~self ~cmd:(selector "valueForKeyPath:") ~typ:(id @-> returning id) x
let valueForUndefinedKey x self = msg_send ~self ~cmd:(selector "valueForUndefinedKey:") ~typ:(id @-> returning id) x
let valueWithName x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueWithName:inPropertyWithKey:") ~typ:(id @-> id @-> returning id) x inPropertyWithKey
let valueWithUniqueID x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueWithUniqueID:inPropertyWithKey:") ~typ:(id @-> id @-> returning id) x inPropertyWithKey
let valuesForKeys x self = msg_send ~self ~cmd:(selector "valuesForKeys:") ~typ:(id @-> returning id) x
let willChange x ~valuesAtIndexes ~forKey self = msg_send ~self ~cmd:(selector "willChange:valuesAtIndexes:forKey:") ~typ:(ullong @-> id @-> id @-> returning void) (ULLong.of_int x) valuesAtIndexes forKey
let willChangeValueForKey x self = msg_send ~self ~cmd:(selector "willChangeValueForKey:") ~typ:(id @-> returning void) x
let willChangeValueForKey' x ~withSetMutation ~usingObjects self = msg_send ~self ~cmd:(selector "willChangeValueForKey:withSetMutation:usingObjects:") ~typ:(id @-> ullong @-> id @-> returning void) x (ULLong.of_int withSetMutation) usingObjects
let zone self = msg_send ~self ~cmd:(selector "zone") ~typ:(returning (ptr void))