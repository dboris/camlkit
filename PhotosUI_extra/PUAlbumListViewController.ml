(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open UIKit

(** Apple docs: {{:https://developer.apple.com/documentation/photosui/pualbumlistviewcontroller?language=objc}PUAlbumListViewController} *)

let self = get_class "PUAlbumListViewController"

let albumListCellContentView x ~performDeleteAction self = msg_send ~self ~cmd:(selector "albumListCellContentView:performDeleteAction:") ~typ:(id @-> id @-> returning void) x performDeleteAction
let albumListCellContentView' x ~didEndRetitlingFromTitle ~toTitle self = msg_send ~self ~cmd:(selector "albumListCellContentView:didEndRetitlingFromTitle:toTitle:") ~typ:(id @-> id @-> id @-> returning void) x didEndRetitlingFromTitle toTitle
let albumListCellContentViewShouldBeginRetitling x self = msg_send ~self ~cmd:(selector "albumListCellContentViewShouldBeginRetitling:") ~typ:(id @-> returning bool) x
let albumListTableViewCell x ~willChangeState self = msg_send ~self ~cmd:(selector "albumListTableViewCell:willChangeState:") ~typ:(id @-> ullong @-> returning void) x (ULLong.of_int willChangeState)
let albumListTransitionContext self = msg_send ~self ~cmd:(selector "albumListTransitionContext") ~typ:(returning id)
let albumsSection self = msg_send ~self ~cmd:(selector "albumsSection") ~typ:(returning llong)
let albumsSections self = msg_send_stret ~self ~cmd:(selector "albumsSections") ~typ:(returning NSRange.t) ~return_type:NSRange.t
let assetsFilterPredicate self = msg_send ~self ~cmd:(selector "assetsFilterPredicate") ~typ:(returning id)
let backgroundColorForTableView self = msg_send ~self ~cmd:(selector "backgroundColorForTableView") ~typ:(returning id)
let bestReferenceItemIndexPath self = msg_send ~self ~cmd:(selector "bestReferenceItemIndexPath") ~typ:(returning id)
let canNavigateToCollection x self = msg_send ~self ~cmd:(selector "canNavigateToCollection:") ~typ:(id @-> returning bool) x
let canPerformAction x ~withSender self = msg_send ~self ~cmd:(selector "canPerformAction:withSender:") ~typ:(_SEL @-> id @-> returning bool) x withSender
let canPresentPicker self = msg_send ~self ~cmd:(selector "canPresentPicker") ~typ:(returning bool)
let canShowAggregateItem self = msg_send ~self ~cmd:(selector "canShowAggregateItem") ~typ:(returning bool)
let canShowAvatarViews self = msg_send ~self ~cmd:(selector "canShowAvatarViews") ~typ:(returning bool)
let canShowSyncProgress self = msg_send ~self ~cmd:(selector "canShowSyncProgress") ~typ:(returning bool)
let collection self = msg_send ~self ~cmd:(selector "collection") ~typ:(returning id)
let collectionAtIndexPath x self = msg_send ~self ~cmd:(selector "collectionAtIndexPath:") ~typ:(id @-> returning id) x
let collectionView self = msg_send ~self ~cmd:(selector "collectionView") ~typ:(returning id)
let collectionView1 x ~canFocusItemAtIndexPath self = msg_send ~self ~cmd:(selector "collectionView:canFocusItemAtIndexPath:") ~typ:(id @-> id @-> returning bool) x canFocusItemAtIndexPath
let collectionView2 x ~canReorderItemAtIndexPath self = msg_send ~self ~cmd:(selector "collectionView:canReorderItemAtIndexPath:") ~typ:(id @-> id @-> returning bool) x canReorderItemAtIndexPath
let collectionView3 x ~cellForItemAtIndexPath self = msg_send ~self ~cmd:(selector "collectionView:cellForItemAtIndexPath:") ~typ:(id @-> id @-> returning id) x cellForItemAtIndexPath
let collectionView4 x ~didSelectItemAtIndexPath self = msg_send ~self ~cmd:(selector "collectionView:didSelectItemAtIndexPath:") ~typ:(id @-> id @-> returning void) x didSelectItemAtIndexPath
let collectionView5 x ~numberOfItemsInSection self = msg_send ~self ~cmd:(selector "collectionView:numberOfItemsInSection:") ~typ:(id @-> llong @-> returning llong) x (LLong.of_int numberOfItemsInSection)
let collectionView6 x ~shouldHighlightItemAtIndexPath self = msg_send ~self ~cmd:(selector "collectionView:shouldHighlightItemAtIndexPath:") ~typ:(id @-> id @-> returning bool) x shouldHighlightItemAtIndexPath
let collectionView7 x ~targetIndexPathForMoveFromIndexPath ~toProposedIndexPath self = msg_send ~self ~cmd:(selector "collectionView:targetIndexPathForMoveFromIndexPath:toProposedIndexPath:") ~typ:(id @-> id @-> id @-> returning id) x targetIndexPathForMoveFromIndexPath toProposedIndexPath
let collectionView8 x ~transitionLayoutForOldLayout ~newLayout self = msg_send ~self ~cmd:(selector "collectionView:transitionLayoutForOldLayout:newLayout:") ~typ:(id @-> id @-> id @-> returning id) x transitionLayoutForOldLayout newLayout
let collectionView9 x ~viewForSupplementaryElementOfKind ~atIndexPath self = msg_send ~self ~cmd:(selector "collectionView:viewForSupplementaryElementOfKind:atIndexPath:") ~typ:(id @-> id @-> id @-> returning id) x viewForSupplementaryElementOfKind atIndexPath
let collectionView10 x ~moveItemAtIndexPath ~toIndexPath ~completionHandler self = msg_send ~self ~cmd:(selector "collectionView:moveItemAtIndexPath:toIndexPath:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x moveItemAtIndexPath toIndexPath completionHandler
let completionHandler self = msg_send ~self ~cmd:(selector "completionHandler") ~typ:(returning (ptr void))
let configureSupplementaryView x ~ofKind ~forIndexPath self = msg_send ~self ~cmd:(selector "configureSupplementaryView:ofKind:forIndexPath:") ~typ:(id @-> id @-> id @-> returning void) x ofKind forIndexPath
let dataSource self = msg_send ~self ~cmd:(selector "dataSource") ~typ:(returning id)
let dataSourceManager self = msg_send ~self ~cmd:(selector "dataSourceManager") ~typ:(returning id)
let dataSourceManagerConfiguration self = msg_send ~self ~cmd:(selector "dataSourceManagerConfiguration") ~typ:(returning id)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let deselectSelectedItemAnimated x self = msg_send ~self ~cmd:(selector "deselectSelectedItemAnimated:") ~typ:(bool @-> returning void) x
let didSelectItemAtIndexPath x self = msg_send ~self ~cmd:(selector "didSelectItemAtIndexPath:") ~typ:(id @-> returning void) x
let editableNavigationTitleView x ~validateNewText self = msg_send ~self ~cmd:(selector "editableNavigationTitleView:validateNewText:") ~typ:(id @-> id @-> returning id) x validateNewText
let editableNavigationTitleViewDidEndEditing x self = msg_send ~self ~cmd:(selector "editableNavigationTitleViewDidEndEditing:") ~typ:(id @-> returning void) x
let editableTitleView self = msg_send ~self ~cmd:(selector "editableTitleView") ~typ:(returning id)
let filteringAssetTypes self = msg_send ~self ~cmd:(selector "filteringAssetTypes") ~typ:(returning ullong)
let focusedListCell self = msg_send ~self ~cmd:(selector "focusedListCell") ~typ:(returning id)
let gestureRecognizerShouldBegin x self = msg_send ~self ~cmd:(selector "gestureRecognizerShouldBegin:") ~typ:(id @-> returning bool) x
let gridLayout self = msg_send ~self ~cmd:(selector "gridLayout") ~typ:(returning id)
let handleCreateAlbumOrFolder x ~isSmartAlbum ~helper self = msg_send ~self ~cmd:(selector "handleCreateAlbumOrFolder:isSmartAlbum:helper:") ~typ:(bool @-> bool @-> id @-> returning void) x isSmartAlbum helper
let handleSessionInfoAlbumSelection x self = msg_send ~self ~cmd:(selector "handleSessionInfoAlbumSelection:") ~typ:(id @-> returning void) x
let handleTransitionFade x ~animate self = msg_send ~self ~cmd:(selector "handleTransitionFade:animate:") ~typ:(bool @-> bool @-> returning void) x animate
let hostViewContoller self = msg_send ~self ~cmd:(selector "hostViewContoller") ~typ:(returning id)
let indexPathForAddNewAlbumPlaceholder self = msg_send ~self ~cmd:(selector "indexPathForAddNewAlbumPlaceholder") ~typ:(returning id)
let indexPathForAlbumListCellContentView x self = msg_send ~self ~cmd:(selector "indexPathForAlbumListCellContentView:") ~typ:(id @-> returning id) x
let indexPathForCollection x self = msg_send ~self ~cmd:(selector "indexPathForCollection:") ~typ:(id @-> returning id) x
let indexPathForFirstEditableAlbum self = msg_send ~self ~cmd:(selector "indexPathForFirstEditableAlbum") ~typ:(returning id)
let indexPathForItemAtPoint x self = msg_send ~self ~cmd:(selector "indexPathForItemAtPoint:") ~typ:(CGPoint.t @-> returning id) x
let indexPathForPeopleAlbum self = msg_send ~self ~cmd:(selector "indexPathForPeopleAlbum") ~typ:(returning id)
let indexPathForPlacesAlbum self = msg_send ~self ~cmd:(selector "indexPathForPlacesAlbum") ~typ:(returning id)
let indexPathForPreparedItems self = msg_send ~self ~cmd:(selector "indexPathForPreparedItems") ~typ:(returning id)
let indexPathsForItemsInRect x self = msg_send ~self ~cmd:(selector "indexPathsForItemsInRect:") ~typ:(CGRect.t @-> returning id) x
let indexPathsForVisibleItems self = msg_send ~self ~cmd:(selector "indexPathsForVisibleItems") ~typ:(returning id)
let initWithSpec x self = msg_send ~self ~cmd:(selector "initWithSpec:") ~typ:(id @-> returning id) x
let initWithSpec1 x ~dataSourceManager self = msg_send ~self ~cmd:(selector "initWithSpec:dataSourceManager:") ~typ:(id @-> id @-> returning id) x dataSourceManager
let initWithSpec2 x ~isRootSharedAlbumList self = msg_send ~self ~cmd:(selector "initWithSpec:isRootSharedAlbumList:") ~typ:(id @-> bool @-> returning id) x isRootSharedAlbumList
let isEmpty self = msg_send ~self ~cmd:(selector "isEmpty") ~typ:(returning bool)
let isPlaceholderAtIndexPath x self = msg_send ~self ~cmd:(selector "isPlaceholderAtIndexPath:") ~typ:(id @-> returning bool) x
let isRootFolder self = msg_send ~self ~cmd:(selector "isRootFolder") ~typ:(returning bool)
let isRootSharedAlbumList self = msg_send ~self ~cmd:(selector "isRootSharedAlbumList") ~typ:(returning bool)
let isViewInSyncWithModel self = msg_send ~self ~cmd:(selector "isViewInSyncWithModel") ~typ:(returning bool)
let mainScrollView self = msg_send ~self ~cmd:(selector "mainScrollView") ~typ:(returning id)
let navigateToAllPhotosAnimated x ~completion self = msg_send ~self ~cmd:(selector "navigateToAllPhotosAnimated:completion:") ~typ:(bool @-> (ptr void) @-> returning void) x completion
let navigateToCollection x ~animated ~completion self = msg_send ~self ~cmd:(selector "navigateToCollection:animated:completion:") ~typ:(id @-> bool @-> (ptr void) @-> returning void) x animated completion
let navigateToDestination x ~options ~completionHandler self = msg_send ~self ~cmd:(selector "navigateToDestination:options:completionHandler:") ~typ:(id @-> ullong @-> (ptr void) @-> returning void) x (ULLong.of_int options) completionHandler
let navigateToPeopleAnimated x ~withPersonLocalIdentifier ~withCompletion self = msg_send ~self ~cmd:(selector "navigateToPeopleAnimated:withPersonLocalIdentifier:withCompletion:") ~typ:(bool @-> id @-> (ptr void) @-> returning void) x withPersonLocalIdentifier withCompletion
let navigateToRevealAssetCollection x ~initiallyHidden ~animated self = msg_send ~self ~cmd:(selector "navigateToRevealAssetCollection:initiallyHidden:animated:") ~typ:(id @-> bool @-> bool @-> returning void) x initiallyHidden animated
let newAlbum x self = msg_send ~self ~cmd:(selector "newAlbum:") ~typ:(id @-> returning void) x
let newFolder x self = msg_send ~self ~cmd:(selector "newFolder:") ~typ:(id @-> returning void) x
let newGridViewControllerForAllPhotos self = msg_send ~self ~cmd:(selector "newGridViewControllerForAllPhotos") ~typ:(returning id)
let newGridViewControllerForAssetCollection x self = msg_send ~self ~cmd:(selector "newGridViewControllerForAssetCollection:") ~typ:(id @-> returning id) x
let newGridViewControllerForFolder x self = msg_send ~self ~cmd:(selector "newGridViewControllerForFolder:") ~typ:(id @-> returning id) x
let newGridViewControllerForStandInCollection x self = msg_send ~self ~cmd:(selector "newGridViewControllerForStandInCollection:") ~typ:(id @-> returning id) x
let newSharedAlbum x self = msg_send ~self ~cmd:(selector "newSharedAlbum:") ~typ:(id @-> returning void) x
let newSmartAlbum x self = msg_send ~self ~cmd:(selector "newSmartAlbum:") ~typ:(id @-> returning void) x
let numberOfItemsInSection x self = msg_send ~self ~cmd:(selector "numberOfItemsInSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let numberOfSections self = msg_send ~self ~cmd:(selector "numberOfSections") ~typ:(returning llong)
let numberOfSectionsInCollectionView x self = msg_send ~self ~cmd:(selector "numberOfSectionsInCollectionView:") ~typ:(id @-> returning llong) x
let numberOfSectionsInTableView x self = msg_send ~self ~cmd:(selector "numberOfSectionsInTableView:") ~typ:(id @-> returning llong) x
let numberOfVisualSectionsForSectionedGridLayout x self = msg_send ~self ~cmd:(selector "numberOfVisualSectionsForSectionedGridLayout:") ~typ:(id @-> returning llong) x
let observable x ~didChange ~context self = msg_send ~self ~cmd:(selector "observable:didChange:context:") ~typ:(id @-> ullong @-> (ptr void) @-> returning void) x (ULLong.of_int didChange) context
let photoLibraryDidChangeOnMainQueue x ~withPreparedInfo self = msg_send ~self ~cmd:(selector "photoLibraryDidChangeOnMainQueue:withPreparedInfo:") ~typ:(id @-> id @-> returning void) x withPreparedInfo
let placeholderKindAtIndexPath x self = msg_send ~self ~cmd:(selector "placeholderKindAtIndexPath:") ~typ:(id @-> returning llong) x
let popoverPresentationControllerShouldDismissPopover x self = msg_send ~self ~cmd:(selector "popoverPresentationControllerShouldDismissPopover:") ~typ:(id @-> returning bool) x
let prepareForDismissingForced x self = msg_send ~self ~cmd:(selector "prepareForDismissingForced:") ~typ:(bool @-> returning bool) x
let prepareForPhotoLibraryChange x self = msg_send ~self ~cmd:(selector "prepareForPhotoLibraryChange:") ~typ:(id @-> returning id) x
let prepareForPopoverPresentation x self = msg_send ~self ~cmd:(selector "prepareForPopoverPresentation:") ~typ:(id @-> returning void) x
let progressViewVisible self = msg_send ~self ~cmd:(selector "progressViewVisible") ~typ:(returning bool)
let provideViewControllersForDestination x ~options ~completionHandler self = msg_send ~self ~cmd:(selector "provideViewControllersForDestination:options:completionHandler:") ~typ:(id @-> ullong @-> (ptr void) @-> returning void) x (ULLong.of_int options) completionHandler
let pushedAlbum self = msg_send ~self ~cmd:(selector "pushedAlbum") ~typ:(returning id)
let pushedController self = msg_send ~self ~cmd:(selector "pushedController") ~typ:(returning id)
let reloadContentView self = msg_send ~self ~cmd:(selector "reloadContentView") ~typ:(returning void)
let retitlingCollection self = msg_send ~self ~cmd:(selector "retitlingCollection") ~typ:(returning id)
let routingOptionsForDestination x self = msg_send ~self ~cmd:(selector "routingOptionsForDestination:") ~typ:(id @-> returning ullong) x
let scrollToItemAtIndexPath x ~centered ~animated self = msg_send ~self ~cmd:(selector "scrollToItemAtIndexPath:centered:animated:") ~typ:(id @-> bool @-> bool @-> returning void) x centered animated
let scrollViewDidEndScrollingAnimation x self = msg_send ~self ~cmd:(selector "scrollViewDidEndScrollingAnimation:") ~typ:(id @-> returning void) x
let scrollViewDidScroll x self = msg_send ~self ~cmd:(selector "scrollViewDidScroll:") ~typ:(id @-> returning void) x
let sectionedDataSourceManagerInterestingObjectReferences x self = msg_send ~self ~cmd:(selector "sectionedDataSourceManagerInterestingObjectReferences:") ~typ:(id @-> returning id) x
let sectionedGridLayout x ~sectionHeaderHeightForVisualSection self = msg_send ~self ~cmd:(selector "sectionedGridLayout:sectionHeaderHeightForVisualSection:") ~typ:(id @-> llong @-> returning double) x (LLong.of_int sectionHeaderHeightForVisualSection)
let sectionedGridLayout' x ~sectionsForVisualSection self = msg_send ~self ~cmd:(selector "sectionedGridLayout:sectionsForVisualSection:") ~typ:(id @-> llong @-> returning id) x (LLong.of_int sectionsForVisualSection)
let sectionedGridLayoutAnchorItemForAdjustingContentOffset x self = msg_send ~self ~cmd:(selector "sectionedGridLayoutAnchorItemForAdjustingContentOffset:") ~typ:(id @-> returning id) x
let sectionedGridLayoutWillPrepareLayout x self = msg_send ~self ~cmd:(selector "sectionedGridLayoutWillPrepareLayout:") ~typ:(id @-> returning void) x
let selectItemAtIndexPath x ~animated self = msg_send ~self ~cmd:(selector "selectItemAtIndexPath:animated:") ~typ:(id @-> bool @-> returning void) x animated
let sessionInfo self = msg_send ~self ~cmd:(selector "sessionInfo") ~typ:(returning id)
let sessionInfoPhotoSelectionDidChange x self = msg_send ~self ~cmd:(selector "sessionInfoPhotoSelectionDidChange:") ~typ:(id @-> returning void) x
let setAlbumListTransitionContext x self = msg_send ~self ~cmd:(selector "setAlbumListTransitionContext:") ~typ:(id @-> returning void) x
let setAlbumListTransitionLayout x self = msg_send ~self ~cmd:(selector "setAlbumListTransitionLayout:") ~typ:(id @-> returning void) x
let setAlbumListTransitionLayout' x ~animated self = msg_send ~self ~cmd:(selector "setAlbumListTransitionLayout:animated:") ~typ:(id @-> bool @-> returning void) x animated
let setCanShowAggregateItem x self = msg_send ~self ~cmd:(selector "setCanShowAggregateItem:") ~typ:(bool @-> returning void) x
let setCollection x self = msg_send ~self ~cmd:(selector "setCollection:") ~typ:(id @-> returning void) x
let setDataSource x self = msg_send ~self ~cmd:(selector "setDataSource:") ~typ:(id @-> returning void) x
let setDataSourceManager x self = msg_send ~self ~cmd:(selector "setDataSourceManager:") ~typ:(id @-> returning void) x
let setDataSourceManagerConfiguration x self = msg_send ~self ~cmd:(selector "setDataSourceManagerConfiguration:") ~typ:(id @-> returning void) x
let setEditing x ~animated self = msg_send ~self ~cmd:(selector "setEditing:animated:") ~typ:(bool @-> bool @-> returning void) x animated
let setKeyboardAware x self = msg_send ~self ~cmd:(selector "setKeyboardAware:") ~typ:(bool @-> returning void) x
let setProgressViewVisible x self = msg_send ~self ~cmd:(selector "setProgressViewVisible:") ~typ:(bool @-> returning void) x
let setPushedAlbum x self = msg_send ~self ~cmd:(selector "setPushedAlbum:") ~typ:(id @-> returning void) x
let setPushedController x self = msg_send ~self ~cmd:(selector "setPushedController:") ~typ:(id @-> returning void) x
let setRetitlingCollection x self = msg_send ~self ~cmd:(selector "setRetitlingCollection:") ~typ:(id @-> returning void) x
let setSessionInfo x self = msg_send ~self ~cmd:(selector "setSessionInfo:") ~typ:(id @-> returning void) x
let setSiriActionActivity x self = msg_send ~self ~cmd:(selector "setSiriActionActivity:") ~typ:(id @-> returning void) x
let setSyncProgressView x self = msg_send ~self ~cmd:(selector "setSyncProgressView:") ~typ:(id @-> returning void) x
let setSyncProgressVisible x self = msg_send ~self ~cmd:(selector "setSyncProgressVisible:") ~typ:(bool @-> returning void) x
let setTitleForCell x ~withCollection self = msg_send ~self ~cmd:(selector "setTitleForCell:withCollection:") ~typ:(id @-> id @-> returning void) x withCollection
let setViewInSyncWithModel x self = msg_send ~self ~cmd:(selector "setViewInSyncWithModel:") ~typ:(bool @-> returning void) x
let settings x ~changedValueForKey self = msg_send ~self ~cmd:(selector "settings:changedValueForKey:") ~typ:(id @-> id @-> returning void) x changedValueForKey
let shouldAllowEmailInAlbumSubtitle self = msg_send ~self ~cmd:(selector "shouldAllowEmailInAlbumSubtitle") ~typ:(returning bool)
let shouldAutorotate self = msg_send ~self ~cmd:(selector "shouldAutorotate") ~typ:(returning bool)
let shouldBeginRetitlingAlbumAtIndexPath x self = msg_send ~self ~cmd:(selector "shouldBeginRetitlingAlbumAtIndexPath:") ~typ:(id @-> returning bool) x
let shouldEnableCollection x self = msg_send ~self ~cmd:(selector "shouldEnableCollection:") ~typ:(id @-> returning bool) x
let shouldHideEmptyCollections self = msg_send ~self ~cmd:(selector "shouldHideEmptyCollections") ~typ:(returning bool)
let shouldShowAllPhotosItem self = msg_send ~self ~cmd:(selector "shouldShowAllPhotosItem") ~typ:(returning bool)
let showAddNewAlbumPlaceholder self = msg_send ~self ~cmd:(selector "showAddNewAlbumPlaceholder") ~typ:(returning bool)
let showsEmptyPlaceholderWhenEmpty self = msg_send ~self ~cmd:(selector "showsEmptyPlaceholderWhenEmpty") ~typ:(returning bool)
let showsSeparatorBelowTopPlaceholdersSection self = msg_send ~self ~cmd:(selector "showsSeparatorBelowTopPlaceholdersSection") ~typ:(returning bool)
let showsTopPlaceholdersSection self = msg_send ~self ~cmd:(selector "showsTopPlaceholdersSection") ~typ:(returning bool)
let siriActionActivity self = msg_send ~self ~cmd:(selector "siriActionActivity") ~typ:(returning id)
let spec self = msg_send ~self ~cmd:(selector "spec") ~typ:(returning id)
let stackedAlbumTransition x ~layoutForCollection ~forCollectionView self = msg_send ~self ~cmd:(selector "stackedAlbumTransition:layoutForCollection:forCollectionView:") ~typ:(id @-> id @-> id @-> returning id) x layoutForCollection forCollectionView
let stackedAlbumTransition1 x ~layoutForPHCollection ~forCollectionView self = msg_send ~self ~cmd:(selector "stackedAlbumTransition:layoutForPHCollection:forCollectionView:") ~typ:(id @-> id @-> id @-> returning id) x layoutForPHCollection forCollectionView
let stackedAlbumTransition2 x ~setVisibility ~forCollection self = msg_send ~self ~cmd:(selector "stackedAlbumTransition:setVisibility:forCollection:") ~typ:(id @-> bool @-> id @-> returning void) x setVisibility forCollection
let stackedAlbumTransition3 x ~setVisibility ~forPHCollection self = msg_send ~self ~cmd:(selector "stackedAlbumTransition:setVisibility:forPHCollection:") ~typ:(id @-> bool @-> id @-> returning void) x setVisibility forPHCollection
let subtitleForCollection x self = msg_send ~self ~cmd:(selector "subtitleForCollection:") ~typ:(id @-> returning id) x
let syncProgressView self = msg_send ~self ~cmd:(selector "syncProgressView") ~typ:(returning id)
let tableView x ~canEditRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:canEditRowAtIndexPath:") ~typ:(id @-> id @-> returning bool) x canEditRowAtIndexPath
let tableView1 x ~canMoveRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:canMoveRowAtIndexPath:") ~typ:(id @-> id @-> returning bool) x canMoveRowAtIndexPath
let tableView2 x ~cellForRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:cellForRowAtIndexPath:") ~typ:(id @-> id @-> returning id) x cellForRowAtIndexPath
let tableView3 x ~didSelectRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:didSelectRowAtIndexPath:") ~typ:(id @-> id @-> returning void) x didSelectRowAtIndexPath
let tableView4 x ~editingStyleForRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:editingStyleForRowAtIndexPath:") ~typ:(id @-> id @-> returning llong) x editingStyleForRowAtIndexPath
let tableView5 x ~heightForFooterInSection self = msg_send ~self ~cmd:(selector "tableView:heightForFooterInSection:") ~typ:(id @-> llong @-> returning double) x (LLong.of_int heightForFooterInSection)
let tableView6 x ~heightForHeaderInSection self = msg_send ~self ~cmd:(selector "tableView:heightForHeaderInSection:") ~typ:(id @-> llong @-> returning double) x (LLong.of_int heightForHeaderInSection)
let tableView7 x ~heightForRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:heightForRowAtIndexPath:") ~typ:(id @-> id @-> returning double) x heightForRowAtIndexPath
let tableView8 x ~numberOfRowsInSection self = msg_send ~self ~cmd:(selector "tableView:numberOfRowsInSection:") ~typ:(id @-> llong @-> returning llong) x (LLong.of_int numberOfRowsInSection)
let tableView9 x ~shouldHighlightRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:shouldHighlightRowAtIndexPath:") ~typ:(id @-> id @-> returning bool) x shouldHighlightRowAtIndexPath
let tableView10 x ~titleForDeleteConfirmationButtonForRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:") ~typ:(id @-> id @-> returning id) x titleForDeleteConfirmationButtonForRowAtIndexPath
let tableView11 x ~viewForFooterInSection self = msg_send ~self ~cmd:(selector "tableView:viewForFooterInSection:") ~typ:(id @-> llong @-> returning id) x (LLong.of_int viewForFooterInSection)
let tableView12 x ~viewForHeaderInSection self = msg_send ~self ~cmd:(selector "tableView:viewForHeaderInSection:") ~typ:(id @-> llong @-> returning id) x (LLong.of_int viewForHeaderInSection)
let tableView13 x ~commitEditingStyle ~forRowAtIndexPath self = msg_send ~self ~cmd:(selector "tableView:commitEditingStyle:forRowAtIndexPath:") ~typ:(id @-> llong @-> id @-> returning void) x (LLong.of_int commitEditingStyle) forRowAtIndexPath
let tableView14 x ~moveRowAtIndexPath ~toIndexPath self = msg_send ~self ~cmd:(selector "tableView:moveRowAtIndexPath:toIndexPath:") ~typ:(id @-> id @-> id @-> returning void) x moveRowAtIndexPath toIndexPath
let tableView15 x ~targetIndexPathForMoveFromRowAtIndexPath ~toProposedIndexPath self = msg_send ~self ~cmd:(selector "tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:") ~typ:(id @-> id @-> id @-> returning id) x targetIndexPathForMoveFromRowAtIndexPath toProposedIndexPath
let tableViewStyle self = msg_send ~self ~cmd:(selector "tableViewStyle") ~typ:(returning llong)
let topPlaceholdersSection self = msg_send ~self ~cmd:(selector "topPlaceholdersSection") ~typ:(returning llong)
let updateAlbumListCellContentView x ~forItemAtIndexPath ~animated self = msg_send ~self ~cmd:(selector "updateAlbumListCellContentView:forItemAtIndexPath:animated:") ~typ:(id @-> id @-> bool @-> returning void) x forItemAtIndexPath animated
let updateInterfaceLayoutIfNecessary self = msg_send ~self ~cmd:(selector "updateInterfaceLayoutIfNecessary") ~typ:(returning void)
let updateListCellForItemAtIndexPath x ~animated self = msg_send ~self ~cmd:(selector "updateListCellForItemAtIndexPath:animated:") ~typ:(id @-> bool @-> returning void) x animated
let updateNavigationBarAnimated x self = msg_send ~self ~cmd:(selector "updateNavigationBarAnimated:") ~typ:(bool @-> returning void) x
let updatePlaceholderListCellContentView x ~forItemAtIndexPath ~animated self = msg_send ~self ~cmd:(selector "updatePlaceholderListCellContentView:forItemAtIndexPath:animated:") ~typ:(id @-> id @-> bool @-> returning void) x forItemAtIndexPath animated
let updateSpec self = msg_send ~self ~cmd:(selector "updateSpec") ~typ:(returning bool)
let updateSyncProgress self = msg_send ~self ~cmd:(selector "updateSyncProgress") ~typ:(returning void)
let viewDidAppear x self = msg_send ~self ~cmd:(selector "viewDidAppear:") ~typ:(bool @-> returning void) x
let viewDidDisappear x self = msg_send ~self ~cmd:(selector "viewDidDisappear:") ~typ:(bool @-> returning void) x
let viewDidLayoutSubviews self = msg_send ~self ~cmd:(selector "viewDidLayoutSubviews") ~typ:(returning void)
let viewDidLoad self = msg_send ~self ~cmd:(selector "viewDidLoad") ~typ:(returning void)
let viewWillAppear x self = msg_send ~self ~cmd:(selector "viewWillAppear:") ~typ:(bool @-> returning void) x
let viewWillDisappear x self = msg_send ~self ~cmd:(selector "viewWillDisappear:") ~typ:(bool @-> returning void) x
let viewWillLayoutSubviews self = msg_send ~self ~cmd:(selector "viewWillLayoutSubviews") ~typ:(returning void)
let viewWillTransitionToSize x ~withTransitionCoordinator self = msg_send ~self ~cmd:(selector "viewWillTransitionToSize:withTransitionCoordinator:") ~typ:(CGSize.t @-> id @-> returning void) x withTransitionCoordinator
let willTransitionToTraitCollection x ~withTransitionCoordinator self = msg_send ~self ~cmd:(selector "willTransitionToTraitCollection:withTransitionCoordinator:") ~typ:(id @-> id @-> returning void) x withTransitionCoordinator