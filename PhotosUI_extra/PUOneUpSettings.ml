(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open UIKit

(** Apple docs: {{:https://developer.apple.com/documentation/photosui/puoneupsettings?language=objc}PUOneUpSettings} *)

let self = get_class "PUOneUpSettings"

let accessoryInitialTopPosition self = msg_send ~self ~cmd:(selector "accessoryInitialTopPosition") ~typ:(returning double)
let allowAutoplayVideoForAsset x self = msg_send ~self ~cmd:(selector "allowAutoplayVideoForAsset:") ~typ:(id @-> returning bool) x
let allowBadges self = msg_send ~self ~cmd:(selector "allowBadges") ~typ:(returning bool)
let allowChromeHiding self = msg_send ~self ~cmd:(selector "allowChromeHiding") ~typ:(returning bool)
let allowDoubleTapZoom self = msg_send ~self ~cmd:(selector "allowDoubleTapZoom") ~typ:(returning bool)
let allowFullsizeJPEGDisplay self = msg_send ~self ~cmd:(selector "allowFullsizeJPEGDisplay") ~typ:(returning bool)
let allowGIFPlayback self = msg_send ~self ~cmd:(selector "allowGIFPlayback") ~typ:(returning bool)
let allowParallax self = msg_send ~self ~cmd:(selector "allowParallax") ~typ:(returning bool)
let allowPlayButtonInBars self = msg_send ~self ~cmd:(selector "allowPlayButtonInBars") ~typ:(returning bool)
let allowScrubber self = msg_send ~self ~cmd:(selector "allowScrubber") ~typ:(returning bool)
let allowStatusBar self = msg_send ~self ~cmd:(selector "allowStatusBar") ~typ:(returning bool)
let allowToggleOriginalBarItem self = msg_send ~self ~cmd:(selector "allowToggleOriginalBarItem") ~typ:(returning bool)
let allowUserTransform self = msg_send ~self ~cmd:(selector "allowUserTransform") ~typ:(returning bool)
let allowVisualIntelligence self = msg_send ~self ~cmd:(selector "allowVisualIntelligence") ~typ:(returning bool)
let allowsDetailsToggleButtonInBars self = msg_send ~self ~cmd:(selector "allowsDetailsToggleButtonInBars") ~typ:(returning bool)
let alwaysShowAirPlayButton self = msg_send ~self ~cmd:(selector "alwaysShowAirPlayButton") ~typ:(returning bool)
let alwaysShowRenderIndicator self = msg_send ~self ~cmd:(selector "alwaysShowRenderIndicator") ~typ:(returning bool)
let applyPerspectiveTransformDuringVitality self = msg_send ~self ~cmd:(selector "applyPerspectiveTransformDuringVitality") ~typ:(returning bool)
let autoplayScrubberWidth self = msg_send ~self ~cmd:(selector "autoplayScrubberWidth") ~typ:(returning double)
let autoplayVideo self = msg_send ~self ~cmd:(selector "autoplayVideo") ~typ:(returning bool)
let barsAreaVerticalOutset self = msg_send ~self ~cmd:(selector "barsAreaVerticalOutset") ~typ:(returning double)
let bounceDelay self = msg_send ~self ~cmd:(selector "bounceDelay") ~typ:(returning double)
let bounceDuration self = msg_send ~self ~cmd:(selector "bounceDuration") ~typ:(returning double)
let bounceInitialVelocity self = msg_send ~self ~cmd:(selector "bounceInitialVelocity") ~typ:(returning double)
let bounceSpringDamping self = msg_send ~self ~cmd:(selector "bounceSpringDamping") ~typ:(returning double)
let chromeAnimationType self = msg_send ~self ~cmd:(selector "chromeAnimationType") ~typ:(returning llong)
let chromeAutoHideBehaviorOnLivePhoto self = msg_send ~self ~cmd:(selector "chromeAutoHideBehaviorOnLivePhoto") ~typ:(returning llong)
let chromeAutoHideBehaviorOnPlayButton self = msg_send ~self ~cmd:(selector "chromeAutoHideBehaviorOnPlayButton") ~typ:(returning llong)
let chromeAutoHideBehaviorOnSwipe self = msg_send ~self ~cmd:(selector "chromeAutoHideBehaviorOnSwipe") ~typ:(returning llong)
let chromeAutoHideBehaviorOnZoom self = msg_send ~self ~cmd:(selector "chromeAutoHideBehaviorOnZoom") ~typ:(returning llong)
let chromeAutoHideDelay self = msg_send ~self ~cmd:(selector "chromeAutoHideDelay") ~typ:(returning double)
let chromeBackgroundAnimationType self = msg_send ~self ~cmd:(selector "chromeBackgroundAnimationType") ~typ:(returning llong)
let chromeDefaultAnimationDuration self = msg_send ~self ~cmd:(selector "chromeDefaultAnimationDuration") ~typ:(returning double)
let chromeTimedAutoHideAnimationDuration self = msg_send ~self ~cmd:(selector "chromeTimedAutoHideAnimationDuration") ~typ:(returning double)
let createChildren self = msg_send ~self ~cmd:(selector "createChildren") ~typ:(returning void)
let debuggingBadges self = msg_send ~self ~cmd:(selector "debuggingBadges") ~typ:(returning ullong)
let debuggingBadgesWhenFavorite self = msg_send ~self ~cmd:(selector "debuggingBadgesWhenFavorite") ~typ:(returning ullong)
let debuggingTitleType self = msg_send ~self ~cmd:(selector "debuggingTitleType") ~typ:(returning llong)
let defaultZoomInFactor self = msg_send ~self ~cmd:(selector "defaultZoomInFactor") ~typ:(returning double)
let doubleTapZoomAreaExcludesBackground self = msg_send ~self ~cmd:(selector "doubleTapZoomAreaExcludesBackground") ~typ:(returning bool)
let doubleTapZoomAreaExcludesBars self = msg_send ~self ~cmd:(selector "doubleTapZoomAreaExcludesBars") ~typ:(returning bool)
let doubleTapZoomFactor self = msg_send ~self ~cmd:(selector "doubleTapZoomFactor") ~typ:(returning double)
let enableFigPhotoBackgroundSizeBasedDisplay self = msg_send ~self ~cmd:(selector "enableFigPhotoBackgroundSizeBasedDisplay") ~typ:(returning bool)
let enableFigPhotoTiledLayer self = msg_send ~self ~cmd:(selector "enableFigPhotoTiledLayer") ~typ:(returning bool)
let enableSuggestionsAnalysis self = msg_send ~self ~cmd:(selector "enableSuggestionsAnalysis") ~typ:(returning bool)
let forceURLWithFigPhotoTiledLayer self = msg_send ~self ~cmd:(selector "forceURLWithFigPhotoTiledLayer") ~typ:(returning bool)
let hideFloatingInfoPanel self = msg_send ~self ~cmd:(selector "hideFloatingInfoPanel") ~typ:(returning bool)
let hideFloatingInfoPanelWhenHidingChrome self = msg_send ~self ~cmd:(selector "hideFloatingInfoPanelWhenHidingChrome") ~typ:(returning bool)
let hideToolbarWhenShowingAccessoryView self = msg_send ~self ~cmd:(selector "hideToolbarWhenShowingAccessoryView") ~typ:(returning bool)
let hideVisualIntelligenceOverlayIn1Up self = msg_send ~self ~cmd:(selector "hideVisualIntelligenceOverlayIn1Up") ~typ:(returning bool)
let hideVisualIntelligenceOverlayIn1UpDetails self = msg_send ~self ~cmd:(selector "hideVisualIntelligenceOverlayIn1UpDetails") ~typ:(returning bool)
let initialDetailsIndicatorDelay self = msg_send ~self ~cmd:(selector "initialDetailsIndicatorDelay") ~typ:(returning double)
let initialDetailsIndicatorDuration self = msg_send ~self ~cmd:(selector "initialDetailsIndicatorDuration") ~typ:(returning double)
let initialDetailsIndicatorShouldSlideIn self = msg_send ~self ~cmd:(selector "initialDetailsIndicatorShouldSlideIn") ~typ:(returning bool)
let interpageSpacing self = msg_send ~self ~cmd:(selector "interpageSpacing") ~typ:(returning double)
let livePhotoInteractionThreshold self = msg_send ~self ~cmd:(selector "livePhotoInteractionThreshold") ~typ:(returning double)
let livePhotoMinimumOverlappingDuration self = msg_send ~self ~cmd:(selector "livePhotoMinimumOverlappingDuration") ~typ:(returning double)
let livePhotoSRLCompensationEnabled self = msg_send ~self ~cmd:(selector "livePhotoSRLCompensationEnabled") ~typ:(returning bool)
let livePhotoSRLCompensationFilterName self = msg_send ~self ~cmd:(selector "livePhotoSRLCompensationFilterName") ~typ:(returning id)
let livePhotoSRLCompensationManualMode self = msg_send ~self ~cmd:(selector "livePhotoSRLCompensationManualMode") ~typ:(returning bool)
let livePhotoSRLCompensationManualValue self = msg_send ~self ~cmd:(selector "livePhotoSRLCompensationManualValue") ~typ:(returning double)
let livePhotoScrubberShowForPlayback self = msg_send ~self ~cmd:(selector "livePhotoScrubberShowForPlayback") ~typ:(returning bool)
let lockScrollDuringLivePhotoPlayback self = msg_send ~self ~cmd:(selector "lockScrollDuringLivePhotoPlayback") ~typ:(returning bool)
let minNavigationDistanceForFastRegime self = msg_send ~self ~cmd:(selector "minNavigationDistanceForFastRegime") ~typ:(returning llong)
let minNavigationDistanceForQuickPagingRegime self = msg_send ~self ~cmd:(selector "minNavigationDistanceForQuickPagingRegime") ~typ:(returning llong)
let minimumFullCommentTitleViewWidth self = msg_send ~self ~cmd:(selector "minimumFullCommentTitleViewWidth") ~typ:(returning double)
let minimumVisibleCommentedContentHeight self = msg_send ~self ~cmd:(selector "minimumVisibleCommentedContentHeight") ~typ:(returning double)
let minimumVisibleContentHeight self = msg_send ~self ~cmd:(selector "minimumVisibleContentHeight") ~typ:(returning double)
let overlappingLivePhotosCountLimit self = msg_send ~self ~cmd:(selector "overlappingLivePhotosCountLimit") ~typ:(returning ullong)
let pagingFrictionAdjustment self = msg_send ~self ~cmd:(selector "pagingFrictionAdjustment") ~typ:(returning double)
let pagingSpringPullAdjustment self = msg_send ~self ~cmd:(selector "pagingSpringPullAdjustment") ~typ:(returning double)
let parallaxFactor self = msg_send ~self ~cmd:(selector "parallaxFactor") ~typ:(returning double)
let parallaxModel self = msg_send ~self ~cmd:(selector "parallaxModel") ~typ:(returning llong)
let parentSettings self = msg_send ~self ~cmd:(selector "parentSettings") ~typ:(returning id)
let persistChromeVisibility self = msg_send ~self ~cmd:(selector "persistChromeVisibility") ~typ:(returning bool)
let playGIFEnterThreshold self = msg_send ~self ~cmd:(selector "playGIFEnterThreshold") ~typ:(returning double)
let playGIFMoveOutThreshold self = msg_send ~self ~cmd:(selector "playGIFMoveOutThreshold") ~typ:(returning double)
let playGIFSettledThreshold self = msg_send ~self ~cmd:(selector "playGIFSettledThreshold") ~typ:(returning double)
let preferencesDidChange self = msg_send ~self ~cmd:(selector "preferencesDidChange") ~typ:(returning void)
let scaleToFitBehavior self = msg_send ~self ~cmd:(selector "scaleToFitBehavior") ~typ:(returning ullong)
let scrubberSettings self = msg_send ~self ~cmd:(selector "scrubberSettings") ~typ:(returning id)
let setAccessoryInitialTopPosition x self = msg_send ~self ~cmd:(selector "setAccessoryInitialTopPosition:") ~typ:(double @-> returning void) x
let setAllowBadges x self = msg_send ~self ~cmd:(selector "setAllowBadges:") ~typ:(bool @-> returning void) x
let setAllowChromeHiding x self = msg_send ~self ~cmd:(selector "setAllowChromeHiding:") ~typ:(bool @-> returning void) x
let setAllowDoubleTapZoom x self = msg_send ~self ~cmd:(selector "setAllowDoubleTapZoom:") ~typ:(bool @-> returning void) x
let setAllowFullsizeJPEGDisplay x self = msg_send ~self ~cmd:(selector "setAllowFullsizeJPEGDisplay:") ~typ:(bool @-> returning void) x
let setAllowGIFPlayback x self = msg_send ~self ~cmd:(selector "setAllowGIFPlayback:") ~typ:(bool @-> returning void) x
let setAllowParallax x self = msg_send ~self ~cmd:(selector "setAllowParallax:") ~typ:(bool @-> returning void) x
let setAllowPlayButtonInBars x self = msg_send ~self ~cmd:(selector "setAllowPlayButtonInBars:") ~typ:(bool @-> returning void) x
let setAllowScrubber x self = msg_send ~self ~cmd:(selector "setAllowScrubber:") ~typ:(bool @-> returning void) x
let setAllowStatusBar x self = msg_send ~self ~cmd:(selector "setAllowStatusBar:") ~typ:(bool @-> returning void) x
let setAllowToggleOriginalBarItem x self = msg_send ~self ~cmd:(selector "setAllowToggleOriginalBarItem:") ~typ:(bool @-> returning void) x
let setAllowUserTransform x self = msg_send ~self ~cmd:(selector "setAllowUserTransform:") ~typ:(bool @-> returning void) x
let setAllowVisualIntelligence x self = msg_send ~self ~cmd:(selector "setAllowVisualIntelligence:") ~typ:(bool @-> returning void) x
let setAllowsDetailsToggleButtonInBars x self = msg_send ~self ~cmd:(selector "setAllowsDetailsToggleButtonInBars:") ~typ:(bool @-> returning void) x
let setAlwaysShowAirPlayButton x self = msg_send ~self ~cmd:(selector "setAlwaysShowAirPlayButton:") ~typ:(bool @-> returning void) x
let setAlwaysShowRenderIndicator x self = msg_send ~self ~cmd:(selector "setAlwaysShowRenderIndicator:") ~typ:(bool @-> returning void) x
let setApplyPerspectiveTransformDuringVitality x self = msg_send ~self ~cmd:(selector "setApplyPerspectiveTransformDuringVitality:") ~typ:(bool @-> returning void) x
let setAutoplayScrubberWidth x self = msg_send ~self ~cmd:(selector "setAutoplayScrubberWidth:") ~typ:(double @-> returning void) x
let setAutoplayVideo x self = msg_send ~self ~cmd:(selector "setAutoplayVideo:") ~typ:(bool @-> returning void) x
let setBarsAreaVerticalOutset x self = msg_send ~self ~cmd:(selector "setBarsAreaVerticalOutset:") ~typ:(double @-> returning void) x
let setBounceDelay x self = msg_send ~self ~cmd:(selector "setBounceDelay:") ~typ:(double @-> returning void) x
let setBounceDuration x self = msg_send ~self ~cmd:(selector "setBounceDuration:") ~typ:(double @-> returning void) x
let setBounceInitialVelocity x self = msg_send ~self ~cmd:(selector "setBounceInitialVelocity:") ~typ:(double @-> returning void) x
let setBounceSpringDamping x self = msg_send ~self ~cmd:(selector "setBounceSpringDamping:") ~typ:(double @-> returning void) x
let setChromeAnimationType x self = msg_send ~self ~cmd:(selector "setChromeAnimationType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setChromeAutoHideBehaviorOnLivePhoto x self = msg_send ~self ~cmd:(selector "setChromeAutoHideBehaviorOnLivePhoto:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setChromeAutoHideBehaviorOnPlayButton x self = msg_send ~self ~cmd:(selector "setChromeAutoHideBehaviorOnPlayButton:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setChromeAutoHideBehaviorOnSwipe x self = msg_send ~self ~cmd:(selector "setChromeAutoHideBehaviorOnSwipe:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setChromeAutoHideBehaviorOnZoom x self = msg_send ~self ~cmd:(selector "setChromeAutoHideBehaviorOnZoom:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setChromeAutoHideDelay x self = msg_send ~self ~cmd:(selector "setChromeAutoHideDelay:") ~typ:(double @-> returning void) x
let setChromeBackgroundAnimationType x self = msg_send ~self ~cmd:(selector "setChromeBackgroundAnimationType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setChromeDefaultAnimationDuration x self = msg_send ~self ~cmd:(selector "setChromeDefaultAnimationDuration:") ~typ:(double @-> returning void) x
let setChromeTimedAutoHideAnimationDuration x self = msg_send ~self ~cmd:(selector "setChromeTimedAutoHideAnimationDuration:") ~typ:(double @-> returning void) x
let setDebuggingBadges x self = msg_send ~self ~cmd:(selector "setDebuggingBadges:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setDebuggingBadgesWhenFavorite x self = msg_send ~self ~cmd:(selector "setDebuggingBadgesWhenFavorite:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setDebuggingTitleType x self = msg_send ~self ~cmd:(selector "setDebuggingTitleType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setDefaultValues self = msg_send ~self ~cmd:(selector "setDefaultValues") ~typ:(returning void)
let setDefaultZoomInFactor x self = msg_send ~self ~cmd:(selector "setDefaultZoomInFactor:") ~typ:(double @-> returning void) x
let setDoubleTapZoomAreaExcludesBackground x self = msg_send ~self ~cmd:(selector "setDoubleTapZoomAreaExcludesBackground:") ~typ:(bool @-> returning void) x
let setDoubleTapZoomAreaExcludesBars x self = msg_send ~self ~cmd:(selector "setDoubleTapZoomAreaExcludesBars:") ~typ:(bool @-> returning void) x
let setDoubleTapZoomFactor x self = msg_send ~self ~cmd:(selector "setDoubleTapZoomFactor:") ~typ:(double @-> returning void) x
let setEnableFigPhotoBackgroundSizeBasedDisplay x self = msg_send ~self ~cmd:(selector "setEnableFigPhotoBackgroundSizeBasedDisplay:") ~typ:(bool @-> returning void) x
let setEnableFigPhotoTiledLayer x self = msg_send ~self ~cmd:(selector "setEnableFigPhotoTiledLayer:") ~typ:(bool @-> returning void) x
let setEnableSuggestionsAnalysis x self = msg_send ~self ~cmd:(selector "setEnableSuggestionsAnalysis:") ~typ:(bool @-> returning void) x
let setForceURLWithFigPhotoTiledLayer x self = msg_send ~self ~cmd:(selector "setForceURLWithFigPhotoTiledLayer:") ~typ:(bool @-> returning void) x
let setHideFloatingInfoPanel x self = msg_send ~self ~cmd:(selector "setHideFloatingInfoPanel:") ~typ:(bool @-> returning void) x
let setHideFloatingInfoPanelWhenHidingChrome x self = msg_send ~self ~cmd:(selector "setHideFloatingInfoPanelWhenHidingChrome:") ~typ:(bool @-> returning void) x
let setHideToolbarWhenShowingAccessoryView x self = msg_send ~self ~cmd:(selector "setHideToolbarWhenShowingAccessoryView:") ~typ:(bool @-> returning void) x
let setHideVisualIntelligenceOverlayIn1Up x self = msg_send ~self ~cmd:(selector "setHideVisualIntelligenceOverlayIn1Up:") ~typ:(bool @-> returning void) x
let setHideVisualIntelligenceOverlayIn1UpDetails x self = msg_send ~self ~cmd:(selector "setHideVisualIntelligenceOverlayIn1UpDetails:") ~typ:(bool @-> returning void) x
let setInitialDetailsIndicatorDelay x self = msg_send ~self ~cmd:(selector "setInitialDetailsIndicatorDelay:") ~typ:(double @-> returning void) x
let setInitialDetailsIndicatorDuration x self = msg_send ~self ~cmd:(selector "setInitialDetailsIndicatorDuration:") ~typ:(double @-> returning void) x
let setInitialDetailsIndicatorShouldSlideIn x self = msg_send ~self ~cmd:(selector "setInitialDetailsIndicatorShouldSlideIn:") ~typ:(bool @-> returning void) x
let setInterpageSpacing x self = msg_send ~self ~cmd:(selector "setInterpageSpacing:") ~typ:(double @-> returning void) x
let setLivePhotoInteractionThreshold x self = msg_send ~self ~cmd:(selector "setLivePhotoInteractionThreshold:") ~typ:(double @-> returning void) x
let setLivePhotoMinimumOverlappingDuration x self = msg_send ~self ~cmd:(selector "setLivePhotoMinimumOverlappingDuration:") ~typ:(double @-> returning void) x
let setLivePhotoSRLCompensationEnabled x self = msg_send ~self ~cmd:(selector "setLivePhotoSRLCompensationEnabled:") ~typ:(bool @-> returning void) x
let setLivePhotoSRLCompensationFilterName x self = msg_send ~self ~cmd:(selector "setLivePhotoSRLCompensationFilterName:") ~typ:(id @-> returning void) x
let setLivePhotoSRLCompensationManualMode x self = msg_send ~self ~cmd:(selector "setLivePhotoSRLCompensationManualMode:") ~typ:(bool @-> returning void) x
let setLivePhotoSRLCompensationManualValue x self = msg_send ~self ~cmd:(selector "setLivePhotoSRLCompensationManualValue:") ~typ:(double @-> returning void) x
let setLivePhotoScrubberShowForPlayback x self = msg_send ~self ~cmd:(selector "setLivePhotoScrubberShowForPlayback:") ~typ:(bool @-> returning void) x
let setLockScrollDuringLivePhotoPlayback x self = msg_send ~self ~cmd:(selector "setLockScrollDuringLivePhotoPlayback:") ~typ:(bool @-> returning void) x
let setMinNavigationDistanceForFastRegime x self = msg_send ~self ~cmd:(selector "setMinNavigationDistanceForFastRegime:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setMinNavigationDistanceForQuickPagingRegime x self = msg_send ~self ~cmd:(selector "setMinNavigationDistanceForQuickPagingRegime:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setMinimumFullCommentTitleViewWidth x self = msg_send ~self ~cmd:(selector "setMinimumFullCommentTitleViewWidth:") ~typ:(double @-> returning void) x
let setMinimumVisibleCommentedContentHeight x self = msg_send ~self ~cmd:(selector "setMinimumVisibleCommentedContentHeight:") ~typ:(double @-> returning void) x
let setMinimumVisibleContentHeight x self = msg_send ~self ~cmd:(selector "setMinimumVisibleContentHeight:") ~typ:(double @-> returning void) x
let setOverlappingLivePhotosCountLimit x self = msg_send ~self ~cmd:(selector "setOverlappingLivePhotosCountLimit:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setPagingFrictionAdjustment x self = msg_send ~self ~cmd:(selector "setPagingFrictionAdjustment:") ~typ:(double @-> returning void) x
let setPagingSpringPullAdjustment x self = msg_send ~self ~cmd:(selector "setPagingSpringPullAdjustment:") ~typ:(double @-> returning void) x
let setParallaxFactor x self = msg_send ~self ~cmd:(selector "setParallaxFactor:") ~typ:(double @-> returning void) x
let setParallaxModel x self = msg_send ~self ~cmd:(selector "setParallaxModel:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setPersistChromeVisibility x self = msg_send ~self ~cmd:(selector "setPersistChromeVisibility:") ~typ:(bool @-> returning void) x
let setPlayGIFEnterThreshold x self = msg_send ~self ~cmd:(selector "setPlayGIFEnterThreshold:") ~typ:(double @-> returning void) x
let setPlayGIFMoveOutThreshold x self = msg_send ~self ~cmd:(selector "setPlayGIFMoveOutThreshold:") ~typ:(double @-> returning void) x
let setPlayGIFSettledThreshold x self = msg_send ~self ~cmd:(selector "setPlayGIFSettledThreshold:") ~typ:(double @-> returning void) x
let setScaleToFitBehavior x self = msg_send ~self ~cmd:(selector "setScaleToFitBehavior:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setScrubberSettings x self = msg_send ~self ~cmd:(selector "setScrubberSettings:") ~typ:(id @-> returning void) x
let setShouldFadeAccessoryView x self = msg_send ~self ~cmd:(selector "setShouldFadeAccessoryView:") ~typ:(bool @-> returning void) x
let setShouldMergeOverlappingLivePhotos x self = msg_send ~self ~cmd:(selector "setShouldMergeOverlappingLivePhotos:") ~typ:(bool @-> returning void) x
let setShowBestSquareRect x self = msg_send ~self ~cmd:(selector "setShowBestSquareRect:") ~typ:(bool @-> returning void) x
let setShowBufferingIndicatorDuringPlay x self = msg_send ~self ~cmd:(selector "setShowBufferingIndicatorDuringPlay:") ~typ:(bool @-> returning void) x
let setShowFacesRect x self = msg_send ~self ~cmd:(selector "setShowFacesRect:") ~typ:(bool @-> returning void) x
let setShowFacesTorsosRects x self = msg_send ~self ~cmd:(selector "setShowFacesTorsosRects:") ~typ:(bool @-> returning void) x
let setShowFileRadarButtonForOneUpErrorPresentationsOnInternalInstalls x self = msg_send ~self ~cmd:(selector "setShowFileRadarButtonForOneUpErrorPresentationsOnInternalInstalls:") ~typ:(bool @-> returning void) x
let setShowGIFLoadingDelays x self = msg_send ~self ~cmd:(selector "setShowGIFLoadingDelays:") ~typ:(bool @-> returning void) x
let setShowGainMapButton x self = msg_send ~self ~cmd:(selector "setShowGainMapButton:") ~typ:(bool @-> returning void) x
let setShowInitialDetailsIndicator x self = msg_send ~self ~cmd:(selector "setShowInitialDetailsIndicator:") ~typ:(bool @-> returning void) x
let setShowLoadingIndicatorDuringDownload x self = msg_send ~self ~cmd:(selector "setShowLoadingIndicatorDuringDownload:") ~typ:(bool @-> returning void) x
let setShowOffBadgeForDisabledLivePhotos x self = msg_send ~self ~cmd:(selector "setShowOffBadgeForDisabledLivePhotos:") ~typ:(bool @-> returning void) x
let setShowPaddedFacesRect x self = msg_send ~self ~cmd:(selector "setShowPaddedFacesRect:") ~typ:(bool @-> returning void) x
let setShowReframedBadge x self = msg_send ~self ~cmd:(selector "setShowReframedBadge:") ~typ:(bool @-> returning void) x
let setShowSaliencyRects x self = msg_send ~self ~cmd:(selector "setShowSaliencyRects:") ~typ:(bool @-> returning void) x
let setShowToggleCTMButton x self = msg_send ~self ~cmd:(selector "setShowToggleCTMButton:") ~typ:(bool @-> returning void) x
let setSimulateAssetContentLoading x self = msg_send ~self ~cmd:(selector "setSimulateAssetContentLoading:") ~typ:(bool @-> returning void) x
let setSimulateLoadingError x self = msg_send ~self ~cmd:(selector "setSimulateLoadingError:") ~typ:(bool @-> returning void) x
let setSimulateWorstCaseFigPhotoBackgroundSize x self = msg_send ~self ~cmd:(selector "setSimulateWorstCaseFigPhotoBackgroundSize:") ~typ:(bool @-> returning void) x
let setSimulatedAssetContentLoadingDuration x self = msg_send ~self ~cmd:(selector "setSimulatedAssetContentLoadingDuration:") ~typ:(double @-> returning void) x
let setSimulatedLoadingErrorType x self = msg_send ~self ~cmd:(selector "setSimulatedLoadingErrorType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setSimulatedRenderProgress x self = msg_send ~self ~cmd:(selector "setSimulatedRenderProgress:") ~typ:(double @-> returning void) x
let setSquareImageCapToHalfHeight x self = msg_send ~self ~cmd:(selector "setSquareImageCapToHalfHeight:") ~typ:(bool @-> returning void) x
let setTitleTapAction x self = msg_send ~self ~cmd:(selector "setTitleTapAction:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setUnmuteOnChromeHide x self = msg_send ~self ~cmd:(selector "setUnmuteOnChromeHide:") ~typ:(bool @-> returning void) x
let setUseDebuggingColors x self = msg_send ~self ~cmd:(selector "setUseDebuggingColors:") ~typ:(bool @-> returning void) x
let setUseDebuggingProgressLabel x self = msg_send ~self ~cmd:(selector "setUseDebuggingProgressLabel:") ~typ:(bool @-> returning void) x
let setUseGlobalCommentsVisibility x self = msg_send ~self ~cmd:(selector "setUseGlobalCommentsVisibility:") ~typ:(bool @-> returning void) x
let setUseGlobalDetailsVisibility x self = msg_send ~self ~cmd:(selector "setUseGlobalDetailsVisibility:") ~typ:(bool @-> returning void) x
let setUseURLForLargePhotosWithFigPhotoTiledLayer x self = msg_send ~self ~cmd:(selector "setUseURLForLargePhotosWithFigPhotoTiledLayer:") ~typ:(bool @-> returning void) x
let setUserNavigationMaximumDistance x self = msg_send ~self ~cmd:(selector "setUserNavigationMaximumDistance:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setVideoAutoplayThreshold x self = msg_send ~self ~cmd:(selector "setVideoAutoplayThreshold:") ~typ:(double @-> returning void) x
let setVideoPauseThreshold x self = msg_send ~self ~cmd:(selector "setVideoPauseThreshold:") ~typ:(double @-> returning void) x
let setVideoRemuteOnBackgrounding x self = msg_send ~self ~cmd:(selector "setVideoRemuteOnBackgrounding:") ~typ:(bool @-> returning void) x
let setVideoShowDebugBorders x self = msg_send ~self ~cmd:(selector "setVideoShowDebugBorders:") ~typ:(bool @-> returning void) x
let setViewModelCacheCountLimit x self = msg_send ~self ~cmd:(selector "setViewModelCacheCountLimit:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setVisibilityDurationForEnteringFastRegime x self = msg_send ~self ~cmd:(selector "setVisibilityDurationForEnteringFastRegime:") ~typ:(double @-> returning void) x
let setVisibilityDurationForEnteringQuickPagingRegime x self = msg_send ~self ~cmd:(selector "setVisibilityDurationForEnteringQuickPagingRegime:") ~typ:(double @-> returning void) x
let setVisibilityDurationForExitingFastRegime x self = msg_send ~self ~cmd:(selector "setVisibilityDurationForExitingFastRegime:") ~typ:(double @-> returning void) x
let setVisibilityDurationForExitingQuickPagingRegime x self = msg_send ~self ~cmd:(selector "setVisibilityDurationForExitingQuickPagingRegime:") ~typ:(double @-> returning void) x
let setVitalityFeatherScale x self = msg_send ~self ~cmd:(selector "setVitalityFeatherScale:") ~typ:(double @-> returning void) x
let setVitalityMaskBlur x self = msg_send ~self ~cmd:(selector "setVitalityMaskBlur:") ~typ:(double @-> returning void) x
let setVitalityMaxAllowedInsetPoints x self = msg_send ~self ~cmd:(selector "setVitalityMaxAllowedInsetPoints:") ~typ:(double @-> returning void) x
let setVitalityMaxAllowedLargeInsetPoints x self = msg_send ~self ~cmd:(selector "setVitalityMaxAllowedLargeInsetPoints:") ~typ:(double @-> returning void) x
let setVitalityUseInsetLimiting x self = msg_send ~self ~cmd:(selector "setVitalityUseInsetLimiting:") ~typ:(bool @-> returning void) x
let shouldFadeAccessoryView self = msg_send ~self ~cmd:(selector "shouldFadeAccessoryView") ~typ:(returning bool)
let shouldMergeOverlappingLivePhotos self = msg_send ~self ~cmd:(selector "shouldMergeOverlappingLivePhotos") ~typ:(returning bool)
let showBestSquareRect self = msg_send ~self ~cmd:(selector "showBestSquareRect") ~typ:(returning bool)
let showBufferingIndicatorDuringPlay self = msg_send ~self ~cmd:(selector "showBufferingIndicatorDuringPlay") ~typ:(returning bool)
let showFacesRect self = msg_send ~self ~cmd:(selector "showFacesRect") ~typ:(returning bool)
let showFacesTorsosRects self = msg_send ~self ~cmd:(selector "showFacesTorsosRects") ~typ:(returning bool)
let showFileRadarButtonForOneUpErrorPresentationsOnInternalInstalls self = msg_send ~self ~cmd:(selector "showFileRadarButtonForOneUpErrorPresentationsOnInternalInstalls") ~typ:(returning bool)
let showGIFLoadingDelays self = msg_send ~self ~cmd:(selector "showGIFLoadingDelays") ~typ:(returning bool)
let showGainMapButton self = msg_send ~self ~cmd:(selector "showGainMapButton") ~typ:(returning bool)
let showInitialDetailsIndicator self = msg_send ~self ~cmd:(selector "showInitialDetailsIndicator") ~typ:(returning bool)
let showLoadingIndicatorDuringDownload self = msg_send ~self ~cmd:(selector "showLoadingIndicatorDuringDownload") ~typ:(returning bool)
let showOffBadgeForDisabledLivePhotos self = msg_send ~self ~cmd:(selector "showOffBadgeForDisabledLivePhotos") ~typ:(returning bool)
let showPaddedFacesRect self = msg_send ~self ~cmd:(selector "showPaddedFacesRect") ~typ:(returning bool)
let showReframedBadge self = msg_send ~self ~cmd:(selector "showReframedBadge") ~typ:(returning bool)
let showSaliencyRects self = msg_send ~self ~cmd:(selector "showSaliencyRects") ~typ:(returning bool)
let showToggleCTMButton self = msg_send ~self ~cmd:(selector "showToggleCTMButton") ~typ:(returning bool)
let simulateAssetContentLoading self = msg_send ~self ~cmd:(selector "simulateAssetContentLoading") ~typ:(returning bool)
let simulateLoadingError self = msg_send ~self ~cmd:(selector "simulateLoadingError") ~typ:(returning bool)
let simulateWorstCaseFigPhotoBackgroundSize self = msg_send ~self ~cmd:(selector "simulateWorstCaseFigPhotoBackgroundSize") ~typ:(returning bool)
let simulatedAssetContentLoadingDuration self = msg_send ~self ~cmd:(selector "simulatedAssetContentLoadingDuration") ~typ:(returning double)
let simulatedLoadingErrorType self = msg_send ~self ~cmd:(selector "simulatedLoadingErrorType") ~typ:(returning llong)
let simulatedRenderProgress self = msg_send ~self ~cmd:(selector "simulatedRenderProgress") ~typ:(returning double)
let squareImageCapToHalfHeight self = msg_send ~self ~cmd:(selector "squareImageCapToHalfHeight") ~typ:(returning bool)
let titleTapAction self = msg_send ~self ~cmd:(selector "titleTapAction") ~typ:(returning llong)
let unmuteOnChromeHide self = msg_send ~self ~cmd:(selector "unmuteOnChromeHide") ~typ:(returning bool)
let useDebuggingColors self = msg_send ~self ~cmd:(selector "useDebuggingColors") ~typ:(returning bool)
let useDebuggingProgressLabel self = msg_send ~self ~cmd:(selector "useDebuggingProgressLabel") ~typ:(returning bool)
let useGlobalCommentsVisibility self = msg_send ~self ~cmd:(selector "useGlobalCommentsVisibility") ~typ:(returning bool)
let useGlobalDetailsVisibility self = msg_send ~self ~cmd:(selector "useGlobalDetailsVisibility") ~typ:(returning bool)
let useURLForLargePhotosWithFigPhotoTiledLayer self = msg_send ~self ~cmd:(selector "useURLForLargePhotosWithFigPhotoTiledLayer") ~typ:(returning bool)
let userNavigationMaximumDistance self = msg_send ~self ~cmd:(selector "userNavigationMaximumDistance") ~typ:(returning llong)
let version self = msg_send ~self ~cmd:(selector "version") ~typ:(returning llong)
let videoAutoplayThreshold self = msg_send ~self ~cmd:(selector "videoAutoplayThreshold") ~typ:(returning double)
let videoPauseThreshold self = msg_send ~self ~cmd:(selector "videoPauseThreshold") ~typ:(returning double)
let videoRemuteOnBackgrounding self = msg_send ~self ~cmd:(selector "videoRemuteOnBackgrounding") ~typ:(returning bool)
let videoShowDebugBorders self = msg_send ~self ~cmd:(selector "videoShowDebugBorders") ~typ:(returning bool)
let viewModelCacheCountLimit self = msg_send ~self ~cmd:(selector "viewModelCacheCountLimit") ~typ:(returning ullong)
let visibilityDurationForEnteringFastRegime self = msg_send ~self ~cmd:(selector "visibilityDurationForEnteringFastRegime") ~typ:(returning double)
let visibilityDurationForEnteringQuickPagingRegime self = msg_send ~self ~cmd:(selector "visibilityDurationForEnteringQuickPagingRegime") ~typ:(returning double)
let visibilityDurationForExitingFastRegime self = msg_send ~self ~cmd:(selector "visibilityDurationForExitingFastRegime") ~typ:(returning double)
let visibilityDurationForExitingQuickPagingRegime self = msg_send ~self ~cmd:(selector "visibilityDurationForExitingQuickPagingRegime") ~typ:(returning double)
let vitalityFeatherScale self = msg_send ~self ~cmd:(selector "vitalityFeatherScale") ~typ:(returning double)
let vitalityMaskBlur self = msg_send ~self ~cmd:(selector "vitalityMaskBlur") ~typ:(returning double)
let vitalityMaxAllowedInsetPoints self = msg_send ~self ~cmd:(selector "vitalityMaxAllowedInsetPoints") ~typ:(returning double)
let vitalityMaxAllowedLargeInsetPoints self = msg_send ~self ~cmd:(selector "vitalityMaxAllowedLargeInsetPoints") ~typ:(returning double)
let vitalityUseInsetLimiting self = msg_send ~self ~cmd:(selector "vitalityUseInsetLimiting") ~typ:(returning bool)