(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open UIKit

(** Apple docs: {{:https://developer.apple.com/documentation/photosui/pusectionedgridlayout?language=objc}PUSectionedGridLayout} *)

let self = get_class "PUSectionedGridLayout"

let adjustEffectiveContentOriginForTransitionEndContentOffset x self = msg_send ~self ~cmd:(selector "adjustEffectiveContentOriginForTransitionEndContentOffset:") ~typ:(CGPoint.t @-> returning void) x
let assetIndexPathsForElementsInRect x self = msg_send ~self ~cmd:(selector "assetIndexPathsForElementsInRect:") ~typ:(CGRect.t @-> returning id) x
let beginInsertingItemAtIndexPath x self = msg_send ~self ~cmd:(selector "beginInsertingItemAtIndexPath:") ~typ:(id @-> returning void) x
let beginReorderingItemAtIndexPath x self = msg_send ~self ~cmd:(selector "beginReorderingItemAtIndexPath:") ~typ:(id @-> returning void) x
let cachedDefaultGlobalFooterHeight self = msg_send ~self ~cmd:(selector "cachedDefaultGlobalFooterHeight") ~typ:(returning id)
let collectionViewContentSize self = msg_send ~self ~cmd:(selector "collectionViewContentSize") ~typ:(returning CGSize.t)
let columnsPerRow self = msg_send ~self ~cmd:(selector "columnsPerRow") ~typ:(returning llong)
let cropAmount self = msg_send ~self ~cmd:(selector "cropAmount") ~typ:(returning double)
let cropType self = msg_send ~self ~cmd:(selector "cropType") ~typ:(returning llong)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning id)
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let dynamicLayoutEnabled self = msg_send ~self ~cmd:(selector "dynamicLayoutEnabled") ~typ:(returning bool)
let endInsertingItem self = msg_send ~self ~cmd:(selector "endInsertingItem") ~typ:(returning void)
let endReordering self = msg_send ~self ~cmd:(selector "endReordering") ~typ:(returning void)
let enumerateItemIndexPathsForVisualSection x ~inVisualItemRange ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateItemIndexPathsForVisualSection:inVisualItemRange:usingBlock:") ~typ:(llong @-> NSRange.t @-> (ptr void) @-> returning void) (LLong.of_int x) inVisualItemRange usingBlock
let enumerateRealSectionsForVisualSection x ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateRealSectionsForVisualSection:usingBlock:") ~typ:(llong @-> (ptr void) @-> returning void) (LLong.of_int x) usingBlock
let finalLayoutAttributesForDisappearingItemAtIndexPath x self = msg_send ~self ~cmd:(selector "finalLayoutAttributesForDisappearingItemAtIndexPath:") ~typ:(id @-> returning id) x
let finalLayoutAttributesForDisappearingSupplementaryElementOfKind x ~atIndexPath self = msg_send ~self ~cmd:(selector "finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:") ~typ:(id @-> id @-> returning id) x atIndexPath
let finalizeAnimatedBoundsChange self = msg_send ~self ~cmd:(selector "finalizeAnimatedBoundsChange") ~typ:(returning void)
let finalizeCollectionViewUpdates self = msg_send ~self ~cmd:(selector "finalizeCollectionViewUpdates") ~typ:(returning void)
let finalizeLayoutTransition self = msg_send ~self ~cmd:(selector "finalizeLayoutTransition") ~typ:(returning void)
let finalizeViewTransitionToSize self = msg_send ~self ~cmd:(selector "finalizeViewTransitionToSize") ~typ:(returning void)
let firstPreparedVisualSection self = msg_send ~self ~cmd:(selector "firstPreparedVisualSection") ~typ:(returning llong)
let floatingSectionHeadersEnabled self = msg_send ~self ~cmd:(selector "floatingSectionHeadersEnabled") ~typ:(returning bool)
let frameForSectionHeaderAtVisualSection x self = msg_send ~self ~cmd:(selector "frameForSectionHeaderAtVisualSection:") ~typ:(llong @-> returning CGRect.t) (LLong.of_int x)
let frameForSectionHeaderOfRealItem x self = msg_send ~self ~cmd:(selector "frameForSectionHeaderOfRealItem:") ~typ:(id @-> returning CGRect.t) x
let getVisualSectionIndex x ~visualItemRange ~forRenderStripAtIndexPath self = msg_send ~self ~cmd:(selector "getVisualSectionIndex:visualItemRange:forRenderStripAtIndexPath:") ~typ:((ptr llong) @-> (ptr NSRange.t) @-> id @-> returning void) x visualItemRange forRenderStripAtIndexPath
let globalBottomPadding self = msg_send ~self ~cmd:(selector "globalBottomPadding") ~typ:(returning double)
let globalFooterHeight self = msg_send ~self ~cmd:(selector "globalFooterHeight") ~typ:(returning double)
let globalFooterIndexPath self = msg_send ~self ~cmd:(selector "globalFooterIndexPath") ~typ:(returning id)
let globalHeaderAttributes self = msg_send ~self ~cmd:(selector "globalHeaderAttributes") ~typ:(returning id)
let globalHeaderHeight self = msg_send ~self ~cmd:(selector "globalHeaderHeight") ~typ:(returning double)
let globalHeaderIndexPath self = msg_send ~self ~cmd:(selector "globalHeaderIndexPath") ~typ:(returning id)
let globalTopPadding self = msg_send ~self ~cmd:(selector "globalTopPadding") ~typ:(returning double)
let hiddenItemIndexPaths self = msg_send ~self ~cmd:(selector "hiddenItemIndexPaths") ~typ:(returning id)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initialLayoutAttributesForAppearingItemAtIndexPath x self = msg_send ~self ~cmd:(selector "initialLayoutAttributesForAppearingItemAtIndexPath:") ~typ:(id @-> returning id) x
let initialLayoutAttributesForAppearingSupplementaryElementOfKind x ~atIndexPath self = msg_send ~self ~cmd:(selector "initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:") ~typ:(id @-> id @-> returning id) x atIndexPath
let interItemSpacing self = msg_send ~self ~cmd:(selector "interItemSpacing") ~typ:(returning CGSize.t)
let invalidateLayoutForMetricsChange self = msg_send ~self ~cmd:(selector "invalidateLayoutForMetricsChange") ~typ:(returning void)
let invalidateLayoutForVerticalScroll self = msg_send ~self ~cmd:(selector "invalidateLayoutForVerticalScroll") ~typ:(returning void)
let invalidateLayoutWithContext x self = msg_send ~self ~cmd:(selector "invalidateLayoutWithContext:") ~typ:(id @-> returning void) x
let invalidationContextForBoundsChange x self = msg_send ~self ~cmd:(selector "invalidationContextForBoundsChange:") ~typ:(CGRect.t @-> returning id) x
let itemIndexPathAtCenterOfRect x self = msg_send ~self ~cmd:(selector "itemIndexPathAtCenterOfRect:") ~typ:(CGRect.t @-> returning id) x
let itemIndexPathAtPoint x self = msg_send ~self ~cmd:(selector "itemIndexPathAtPoint:") ~typ:(CGPoint.t @-> returning id) x
let itemIndexPathClosestToPoint x self = msg_send ~self ~cmd:(selector "itemIndexPathClosestToPoint:") ~typ:(CGPoint.t @-> returning id) x
let itemSize self = msg_send ~self ~cmd:(selector "itemSize") ~typ:(returning CGSize.t)
let itemsPerRow self = msg_send ~self ~cmd:(selector "itemsPerRow") ~typ:(returning llong)
let lastPreparedVisualSection self = msg_send ~self ~cmd:(selector "lastPreparedVisualSection") ~typ:(returning llong)
let layoutAttributesForElementsInRect x self = msg_send ~self ~cmd:(selector "layoutAttributesForElementsInRect:") ~typ:(CGRect.t @-> returning id) x
let layoutAttributesForItemAtIndexPath x self = msg_send ~self ~cmd:(selector "layoutAttributesForItemAtIndexPath:") ~typ:(id @-> returning id) x
let layoutAttributesForSupplementaryViewOfKind x ~atIndexPath self = msg_send ~self ~cmd:(selector "layoutAttributesForSupplementaryViewOfKind:atIndexPath:") ~typ:(id @-> id @-> returning id) x atIndexPath
let layoutItemSizeForColumn x self = msg_send ~self ~cmd:(selector "layoutItemSizeForColumn:") ~typ:(llong @-> returning CGSize.t) (LLong.of_int x)
let layoutSectioning self = msg_send ~self ~cmd:(selector "layoutSectioning") ~typ:(returning id)
let mainRealSectionForVisualSection x self = msg_send ~self ~cmd:(selector "mainRealSectionForVisualSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let maxItemIndexPathAbovePoint x self = msg_send ~self ~cmd:(selector "maxItemIndexPathAbovePoint:") ~typ:(CGPoint.t @-> returning id) x
let maxItemIndexPathLeftOfPoint x self = msg_send ~self ~cmd:(selector "maxItemIndexPathLeftOfPoint:") ~typ:(CGPoint.t @-> returning id) x
let maximumNumberOfItemsInVisualSection x ~withNumberOfRealItems ~forSectioning self = msg_send ~self ~cmd:(selector "maximumNumberOfItemsInVisualSection:withNumberOfRealItems:forSectioning:") ~typ:(llong @-> llong @-> id @-> returning llong) (LLong.of_int x) (LLong.of_int withNumberOfRealItems) forSectioning
let numberOfColumnsForWidth x self = msg_send ~self ~cmd:(selector "numberOfColumnsForWidth:") ~typ:(double @-> returning llong) x
let numberOfContiguousRowsInTransitionSection x self = msg_send ~self ~cmd:(selector "numberOfContiguousRowsInTransitionSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let numberOfItemsInRealSection x ~forSectioning self = msg_send ~self ~cmd:(selector "numberOfItemsInRealSection:forSectioning:") ~typ:(llong @-> id @-> returning llong) (LLong.of_int x) forSectioning
let numberOfRealItemsInRealSection x self = msg_send ~self ~cmd:(selector "numberOfRealItemsInRealSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let numberOfRealItemsInVisualSection x self = msg_send ~self ~cmd:(selector "numberOfRealItemsInVisualSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let numberOfRealSections self = msg_send ~self ~cmd:(selector "numberOfRealSections") ~typ:(returning llong)
let numberOfRealSectionsForSectioning x self = msg_send ~self ~cmd:(selector "numberOfRealSectionsForSectioning:") ~typ:(id @-> returning llong) x
let numberOfRowsInVisualSection x self = msg_send ~self ~cmd:(selector "numberOfRowsInVisualSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let numberOfVisualItemsInVisualSection x self = msg_send ~self ~cmd:(selector "numberOfVisualItemsInVisualSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let numberOfVisualSections self = msg_send ~self ~cmd:(selector "numberOfVisualSections") ~typ:(returning llong)
let numberOfVisualSectionsForSectioning x self = msg_send ~self ~cmd:(selector "numberOfVisualSectionsForSectioning:") ~typ:(id @-> returning llong) x
let prepareForAnimatedBoundsChange x self = msg_send ~self ~cmd:(selector "prepareForAnimatedBoundsChange:") ~typ:(CGRect.t @-> returning void) x
let prepareForCollectionViewUpdates x self = msg_send ~self ~cmd:(selector "prepareForCollectionViewUpdates:") ~typ:(id @-> returning void) x
let prepareForTransitionFromLayout x self = msg_send ~self ~cmd:(selector "prepareForTransitionFromLayout:") ~typ:(id @-> returning void) x
let prepareForTransitionToLayout x self = msg_send ~self ~cmd:(selector "prepareForTransitionToLayout:") ~typ:(id @-> returning void) x
let prepareForViewTransitionToSize x self = msg_send ~self ~cmd:(selector "prepareForViewTransitionToSize:") ~typ:(CGSize.t @-> returning id) x
let prepareLayout self = msg_send ~self ~cmd:(selector "prepareLayout") ~typ:(returning void)
let realSectionsForVisualSection x ~forSectioning self = msg_send ~self ~cmd:(selector "realSectionsForVisualSection:forSectioning:") ~typ:(llong @-> id @-> returning id) (LLong.of_int x) forSectioning
let renderedStripsElementKind self = msg_send ~self ~cmd:(selector "renderedStripsElementKind") ~typ:(returning id)
let reorderedIndexPath x self = msg_send ~self ~cmd:(selector "reorderedIndexPath:") ~typ:(id @-> returning id) x
let sectionBottomPadding self = msg_send ~self ~cmd:(selector "sectionBottomPadding") ~typ:(returning double)
let sectionContentInset self = msg_send ~self ~cmd:(selector "sectionContentInset") ~typ:(returning UIEdgeInsets.t)
let sectionHeaderElementKind self = msg_send ~self ~cmd:(selector "sectionHeaderElementKind") ~typ:(returning id)
let sectionHeadersEnabled self = msg_send ~self ~cmd:(selector "sectionHeadersEnabled") ~typ:(returning bool)
let sectionTopPadding self = msg_send ~self ~cmd:(selector "sectionTopPadding") ~typ:(returning double)
let setCachedDefaultGlobalFooterHeight x self = msg_send ~self ~cmd:(selector "setCachedDefaultGlobalFooterHeight:") ~typ:(id @-> returning void) x
let setCropAmount x self = msg_send ~self ~cmd:(selector "setCropAmount:") ~typ:(double @-> returning void) x
let setCropType x self = msg_send ~self ~cmd:(selector "setCropType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning void) x
let setDynamicLayoutEnabled x self = msg_send ~self ~cmd:(selector "setDynamicLayoutEnabled:") ~typ:(bool @-> returning void) x
let setFloatingSectionHeadersEnabled x self = msg_send ~self ~cmd:(selector "setFloatingSectionHeadersEnabled:") ~typ:(bool @-> returning void) x
let setGlobalBottomPadding x self = msg_send ~self ~cmd:(selector "setGlobalBottomPadding:") ~typ:(double @-> returning void) x
let setGlobalFooterHeight x self = msg_send ~self ~cmd:(selector "setGlobalFooterHeight:") ~typ:(double @-> returning void) x
let setGlobalHeaderHeight x self = msg_send ~self ~cmd:(selector "setGlobalHeaderHeight:") ~typ:(double @-> returning void) x
let setGlobalTopPadding x self = msg_send ~self ~cmd:(selector "setGlobalTopPadding:") ~typ:(double @-> returning void) x
let setHiddenItemIndexPaths x self = msg_send ~self ~cmd:(selector "setHiddenItemIndexPaths:") ~typ:(id @-> returning void) x
let setInterItemSpacing x self = msg_send ~self ~cmd:(selector "setInterItemSpacing:") ~typ:(CGSize.t @-> returning void) x
let setIsPreparingLayout x self = msg_send ~self ~cmd:(selector "setIsPreparingLayout:") ~typ:(bool @-> returning void) x
let setItemSize x self = msg_send ~self ~cmd:(selector "setItemSize:") ~typ:(CGSize.t @-> returning void) x
let setRenderedStripsElementKind x self = msg_send ~self ~cmd:(selector "setRenderedStripsElementKind:") ~typ:(id @-> returning void) x
let setSectionBottomPadding x self = msg_send ~self ~cmd:(selector "setSectionBottomPadding:") ~typ:(double @-> returning void) x
let setSectionContentInset x self = msg_send ~self ~cmd:(selector "setSectionContentInset:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setSectionHeaderElementKind x self = msg_send ~self ~cmd:(selector "setSectionHeaderElementKind:") ~typ:(id @-> returning void) x
let setSectionHeadersEnabled x self = msg_send ~self ~cmd:(selector "setSectionHeadersEnabled:") ~typ:(bool @-> returning void) x
let setSectionTopPadding x self = msg_send ~self ~cmd:(selector "setSectionTopPadding:") ~typ:(double @-> returning void) x
let setTransitionAnchorShiftsColumns x self = msg_send ~self ~cmd:(selector "setTransitionAnchorShiftsColumns:") ~typ:(bool @-> returning void) x
let setTransitionEffectiveContentOrigin x self = msg_send ~self ~cmd:(selector "setTransitionEffectiveContentOrigin:") ~typ:(CGPoint.t @-> returning void) x
let setTransitionExplicitAnchorItemIndexPath x self = msg_send ~self ~cmd:(selector "setTransitionExplicitAnchorItemIndexPath:") ~typ:(id @-> returning void) x
let setTransitionIsAnimated x self = msg_send ~self ~cmd:(selector "setTransitionIsAnimated:") ~typ:(bool @-> returning void) x
let setTransitionStartContentOffset x self = msg_send ~self ~cmd:(selector "setTransitionStartContentOffset:") ~typ:(CGPoint.t @-> returning void) x
let setTransitionZoomingOut x self = msg_send ~self ~cmd:(selector "setTransitionZoomingOut:") ~typ:(bool @-> returning void) x
let setTransitioningDelegate x self = msg_send ~self ~cmd:(selector "setTransitioningDelegate:") ~typ:(id @-> returning void) x
let setUsesAspectItems x self = msg_send ~self ~cmd:(selector "setUsesAspectItems:") ~typ:(bool @-> returning void) x
let setUsesRenderedStripTopExtendersForTransitions x self = msg_send ~self ~cmd:(selector "setUsesRenderedStripTopExtendersForTransitions:") ~typ:(bool @-> returning void) x
let shouldHideVisualSection x self = msg_send ~self ~cmd:(selector "shouldHideVisualSection:") ~typ:(llong @-> returning bool) (LLong.of_int x)
let shouldInvalidateLayoutForBoundsChange x self = msg_send ~self ~cmd:(selector "shouldInvalidateLayoutForBoundsChange:") ~typ:(CGRect.t @-> returning bool) x
let supplementaryViewIndexPathForVisualSection x ~supplementaryViewItemIndex self = msg_send ~self ~cmd:(selector "supplementaryViewIndexPathForVisualSection:supplementaryViewItemIndex:") ~typ:(llong @-> llong @-> returning id) (LLong.of_int x) (LLong.of_int supplementaryViewItemIndex)
let targetContentOffsetForProposedContentOffset x self = msg_send ~self ~cmd:(selector "targetContentOffsetForProposedContentOffset:") ~typ:(CGPoint.t @-> returning CGPoint.t) x
let targetContentOffsetForTransitionFromGridLayout x self = msg_send ~self ~cmd:(selector "targetContentOffsetForTransitionFromGridLayout:") ~typ:(id @-> returning CGPoint.t) x
let targetContentOffsetForViewSizeTransitionContext x self = msg_send ~self ~cmd:(selector "targetContentOffsetForViewSizeTransitionContext:") ~typ:(id @-> returning CGPoint.t) x
let targetTransitionRealIndexPathForIndexPath x self = msg_send ~self ~cmd:(selector "targetTransitionRealIndexPathForIndexPath:") ~typ:(id @-> returning id) x
let transitionActualContentSize self = msg_send ~self ~cmd:(selector "transitionActualContentSize") ~typ:(returning CGSize.t)
let transitionAnchorColumnOffset self = msg_send ~self ~cmd:(selector "transitionAnchorColumnOffset") ~typ:(returning llong)
let transitionAnchorIndexPathForTransitionSection x self = msg_send ~self ~cmd:(selector "transitionAnchorIndexPathForTransitionSection:") ~typ:(llong @-> returning id) (LLong.of_int x)
let transitionAnchorShiftsColumns self = msg_send ~self ~cmd:(selector "transitionAnchorShiftsColumns") ~typ:(returning bool)
let transitionEffectiveContentOrigin self = msg_send ~self ~cmd:(selector "transitionEffectiveContentOrigin") ~typ:(returning CGPoint.t)
let transitionEndContentOffset self = msg_send ~self ~cmd:(selector "transitionEndContentOffset") ~typ:(returning CGPoint.t)
let transitionExplicitAnchorItemIndexPath self = msg_send ~self ~cmd:(selector "transitionExplicitAnchorItemIndexPath") ~typ:(returning id)
let transitionFirstVisibleRowVisualPath self = msg_send ~self ~cmd:(selector "transitionFirstVisibleRowVisualPath") ~typ:(returning id)
let transitionIsAnimated self = msg_send ~self ~cmd:(selector "transitionIsAnimated") ~typ:(returning bool)
let transitionIsAppearing self = msg_send ~self ~cmd:(selector "transitionIsAppearing") ~typ:(returning bool)
let transitionLastVisibleRowVisualPath self = msg_send ~self ~cmd:(selector "transitionLastVisibleRowVisualPath") ~typ:(returning id)
let transitionLayout self = msg_send ~self ~cmd:(selector "transitionLayout") ~typ:(returning id)
let transitionSectionsInRect x ~toOrFromGridLayout self = msg_send ~self ~cmd:(selector "transitionSectionsInRect:toOrFromGridLayout:") ~typ:(CGRect.t @-> id @-> returning id) x toOrFromGridLayout
let transitionStartContentOffset self = msg_send ~self ~cmd:(selector "transitionStartContentOffset") ~typ:(returning CGPoint.t)
let transitionZoomingOut self = msg_send ~self ~cmd:(selector "transitionZoomingOut") ~typ:(returning bool)
let transitioningDelegate self = msg_send ~self ~cmd:(selector "transitioningDelegate") ~typ:(returning id)
let updateReorderingTargetIndexPath x self = msg_send ~self ~cmd:(selector "updateReorderingTargetIndexPath:") ~typ:(id @-> returning void) x
let usesAspectItems self = msg_send ~self ~cmd:(selector "usesAspectItems") ~typ:(returning bool)
let usesRenderedStripTopExtendersForTransitions self = msg_send ~self ~cmd:(selector "usesRenderedStripTopExtendersForTransitions") ~typ:(returning bool)
let visualRowsInRect x ~inVisualSection ~totalVisualSectionRows self = msg_send ~self ~cmd:(selector "visualRowsInRect:inVisualSection:totalVisualSectionRows:") ~typ:(CGRect.t @-> llong @-> (ptr llong) @-> returning NSRange.t) x (LLong.of_int inVisualSection) totalVisualSectionRows
let visualSectionForHeaderIndexPath x self = msg_send ~self ~cmd:(selector "visualSectionForHeaderIndexPath:") ~typ:(id @-> returning llong) x
let visualSectionForRealSection x self = msg_send ~self ~cmd:(selector "visualSectionForRealSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let visualSectionForSupplementaryViewIndexPath x self = msg_send ~self ~cmd:(selector "visualSectionForSupplementaryViewIndexPath:") ~typ:(id @-> returning llong) x
let visualSectionsInRect x self = msg_send ~self ~cmd:(selector "visualSectionsInRect:") ~typ:(CGRect.t @-> returning NSRange.t) x