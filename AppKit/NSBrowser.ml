(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation

(** Apple docs: {{:https://developer.apple.com/documentation/appkit/nsbrowser?language=objc}NSBrowser} *)

let self = get_class "NSBrowser"

let abortEditing self = msg_send ~self ~cmd:(selector "abortEditing") ~typ:(returning bool)
let acceptsArrowKeys self = msg_send ~self ~cmd:(selector "acceptsArrowKeys") ~typ:(returning bool)
let acceptsFirstMouse x self = msg_send ~self ~cmd:(selector "acceptsFirstMouse:") ~typ:(id @-> returning bool) x
let acceptsFirstResponder self = msg_send ~self ~cmd:(selector "acceptsFirstResponder") ~typ:(returning bool)
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning id)
let accessibilityColumnTitlesAttribute self = msg_send ~self ~cmd:(selector "accessibilityColumnTitlesAttribute") ~typ:(returning id)
let accessibilityColumnsAttribute self = msg_send ~self ~cmd:(selector "accessibilityColumnsAttribute") ~typ:(returning id)
let accessibilityHitTest x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning id) x
let accessibilityHorizontalScrollBarAttribute self = msg_send ~self ~cmd:(selector "accessibilityHorizontalScrollBarAttribute") ~typ:(returning id)
let accessibilityIsColumnTitlesAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsColumnTitlesAttributeSettable") ~typ:(returning bool)
let accessibilityIsColumnsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsColumnsAttributeSettable") ~typ:(returning bool)
let accessibilityIsHorizontalScrollBarAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsHorizontalScrollBarAttributeSettable") ~typ:(returning bool)
let accessibilityIsVisibleColumnsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsVisibleColumnsAttributeSettable") ~typ:(returning bool)
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning id)
let accessibilityVisibleColumnsAttribute self = msg_send ~self ~cmd:(selector "accessibilityVisibleColumnsAttribute") ~typ:(returning id)
let addColumn self = msg_send ~self ~cmd:(selector "addColumn") ~typ:(returning void)
let addColumnForItem x self = msg_send ~self ~cmd:(selector "addColumnForItem:") ~typ:(id @-> returning void) x
let alignmentRectInsets self = msg_send_stret ~self ~cmd:(selector "alignmentRectInsets") ~typ:(returning NSEdgeInsets.t) ~return_type:NSEdgeInsets.t
let allowsBranchSelection self = msg_send ~self ~cmd:(selector "allowsBranchSelection") ~typ:(returning bool)
let allowsEmptySelection self = msg_send ~self ~cmd:(selector "allowsEmptySelection") ~typ:(returning bool)
let allowsIncrementalSearching self = msg_send ~self ~cmd:(selector "allowsIncrementalSearching") ~typ:(returning bool)
let allowsMultipleSelection self = msg_send ~self ~cmd:(selector "allowsMultipleSelection") ~typ:(returning bool)
let allowsTypeSelect self = msg_send ~self ~cmd:(selector "allowsTypeSelect") ~typ:(returning bool)
let autohidesScroller self = msg_send ~self ~cmd:(selector "autohidesScroller") ~typ:(returning bool)
let automaticallyAdjustsContentInsets self = msg_send ~self ~cmd:(selector "automaticallyAdjustsContentInsets") ~typ:(returning bool)
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning id)
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning bool)
let becomeKeyWindow self = msg_send ~self ~cmd:(selector "becomeKeyWindow") ~typ:(returning void)
let beforeDraw self = msg_send ~self ~cmd:(selector "beforeDraw") ~typ:(returning void)
let canDragRowsWithIndexes x ~inColumn ~withEvent self = msg_send ~self ~cmd:(selector "canDragRowsWithIndexes:inColumn:withEvent:") ~typ:(id @-> llong @-> id @-> returning bool) x (LLong.of_int inColumn) withEvent
let cellPrototype self = msg_send ~self ~cmd:(selector "cellPrototype") ~typ:(returning id)
let clickedColumn self = msg_send ~self ~cmd:(selector "clickedColumn") ~typ:(returning llong)
let clickedRow self = msg_send ~self ~cmd:(selector "clickedRow") ~typ:(returning llong)
let columnContentWidthForColumnWidth x self = msg_send ~self ~cmd:(selector "columnContentWidthForColumnWidth:") ~typ:(double @-> returning double) x
let columnOfMatrix x self = msg_send ~self ~cmd:(selector "columnOfMatrix:") ~typ:(id @-> returning llong) x
let columnResizingType self = msg_send ~self ~cmd:(selector "columnResizingType") ~typ:(returning ullong)
let columnWidthForColumnContentWidth x self = msg_send ~self ~cmd:(selector "columnWidthForColumnContentWidth:") ~typ:(double @-> returning double) x
let columnsAutosaveName self = msg_send ~self ~cmd:(selector "columnsAutosaveName") ~typ:(returning id)
let contentInsets self = msg_send_stret ~self ~cmd:(selector "contentInsets") ~typ:(returning NSEdgeInsets.t) ~return_type:NSEdgeInsets.t
let currentTypeSelectSearchString self = msg_send ~self ~cmd:(selector "currentTypeSelectSearchString") ~typ:(returning id)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let defaultColumnWidth self = msg_send ~self ~cmd:(selector "defaultColumnWidth") ~typ:(returning double)
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning id)
let didFinishColumnScrollWithHelper x self = msg_send ~self ~cmd:(selector "didFinishColumnScrollWithHelper:") ~typ:(id @-> returning void) x
let displayAllColumns self = msg_send ~self ~cmd:(selector "displayAllColumns") ~typ:(returning void)
let displayColumn x self = msg_send ~self ~cmd:(selector "displayColumn:") ~typ:(llong @-> returning void) (LLong.of_int x)
let doClick x self = msg_send ~self ~cmd:(selector "doClick:") ~typ:(id @-> returning void) x
let doDoubleClick x self = msg_send ~self ~cmd:(selector "doDoubleClick:") ~typ:(id @-> returning void) x
let doubleAction self = msg_send ~self ~cmd:(selector "doubleAction") ~typ:(returning _SEL)
let draggedImage x ~beganAt self = msg_send ~self ~cmd:(selector "draggedImage:beganAt:") ~typ:(id @-> CGPoint.t @-> returning void) x beganAt
let draggedImage' x ~endedAt ~operation self = msg_send ~self ~cmd:(selector "draggedImage:endedAt:operation:") ~typ:(id @-> CGPoint.t @-> ullong @-> returning void) x endedAt (ULLong.of_int operation)
let draggingEnded x self = msg_send ~self ~cmd:(selector "draggingEnded:") ~typ:(id @-> returning void) x
let draggingEntered x self = msg_send ~self ~cmd:(selector "draggingEntered:") ~typ:(id @-> returning ullong) x
let draggingExited x self = msg_send ~self ~cmd:(selector "draggingExited:") ~typ:(id @-> returning void) x
let draggingImageForRowsWithIndexes x ~inColumn ~withEvent ~offset self = msg_send ~self ~cmd:(selector "draggingImageForRowsWithIndexes:inColumn:withEvent:offset:") ~typ:(id @-> llong @-> id @-> (ptr CGPoint.t) @-> returning id) x (LLong.of_int inColumn) withEvent offset
let draggingSourceOperationMaskForLocal x self = msg_send ~self ~cmd:(selector "draggingSourceOperationMaskForLocal:") ~typ:(bool @-> returning ullong) x
let draggingUpdated x self = msg_send ~self ~cmd:(selector "draggingUpdated:") ~typ:(id @-> returning ullong) x
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning void) x
let drawTitleOfColumn x ~inRect self = msg_send ~self ~cmd:(selector "drawTitleOfColumn:inRect:") ~typ:(llong @-> CGRect.t @-> returning void) (LLong.of_int x) inRect
let editItemAtIndexPath x ~withEvent ~select self = msg_send ~self ~cmd:(selector "editItemAtIndexPath:withEvent:select:") ~typ:(id @-> id @-> bool @-> returning void) x withEvent select
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let firstVisibleColumn self = msg_send ~self ~cmd:(selector "firstVisibleColumn") ~typ:(returning llong)
let frameOfColumn x self = msg_send_stret ~self ~cmd:(selector "frameOfColumn:") ~typ:(llong @-> returning CGRect.t) ~return_type:CGRect.t (LLong.of_int x)
let frameOfInsideOfColumn x self = msg_send_stret ~self ~cmd:(selector "frameOfInsideOfColumn:") ~typ:(llong @-> returning CGRect.t) ~return_type:CGRect.t (LLong.of_int x)
let frameOfRow x ~inColumn self = msg_send_stret ~self ~cmd:(selector "frameOfRow:inColumn:") ~typ:(llong @-> llong @-> returning CGRect.t) ~return_type:CGRect.t (LLong.of_int x) (LLong.of_int inColumn)
let getRow x ~column ~forPoint self = msg_send ~self ~cmd:(selector "getRow:column:forPoint:") ~typ:((ptr llong) @-> (ptr llong) @-> CGPoint.t @-> returning bool) x column forPoint
let hasHorizontalScroller self = msg_send ~self ~cmd:(selector "hasHorizontalScroller") ~typ:(returning bool)
let ignoreModifierKeysWhileDragging self = msg_send ~self ~cmd:(selector "ignoreModifierKeysWhileDragging") ~typ:(returning bool)
let indexPathForColumn x self = msg_send ~self ~cmd:(selector "indexPathForColumn:") ~typ:(llong @-> returning id) (LLong.of_int x)
let indexPathForItem x self = msg_send ~self ~cmd:(selector "indexPathForItem:") ~typ:(id @-> returning id) x
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning id) x
let isLeafItem x self = msg_send ~self ~cmd:(selector "isLeafItem:") ~typ:(id @-> returning bool) x
let isLoaded self = msg_send ~self ~cmd:(selector "isLoaded") ~typ:(returning bool)
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning bool)
let isTitled self = msg_send ~self ~cmd:(selector "isTitled") ~typ:(returning bool)
let itemAtIndexPath x self = msg_send ~self ~cmd:(selector "itemAtIndexPath:") ~typ:(id @-> returning id) x
let itemAtRow x ~column self = msg_send ~self ~cmd:(selector "itemAtRow:column:") ~typ:(llong @-> llong @-> returning id) (LLong.of_int x) (LLong.of_int column)
let itemAtRow' x ~inColumn self = msg_send ~self ~cmd:(selector "itemAtRow:inColumn:") ~typ:(llong @-> llong @-> returning id) (LLong.of_int x) (LLong.of_int inColumn)
let keyDown x self = msg_send ~self ~cmd:(selector "keyDown:") ~typ:(id @-> returning void) x
let lastColumn self = msg_send ~self ~cmd:(selector "lastColumn") ~typ:(returning llong)
let lastVisibleColumn self = msg_send ~self ~cmd:(selector "lastVisibleColumn") ~typ:(returning llong)
let loadColumnZero self = msg_send ~self ~cmd:(selector "loadColumnZero") ~typ:(returning void)
let loadedCellAtRow x ~column self = msg_send ~self ~cmd:(selector "loadedCellAtRow:column:") ~typ:(llong @-> llong @-> returning id) (LLong.of_int x) (LLong.of_int column)
let matrixClass self = msg_send ~self ~cmd:(selector "matrixClass") ~typ:(returning _Class)
let matrixInColumn x self = msg_send ~self ~cmd:(selector "matrixInColumn:") ~typ:(llong @-> returning id) (LLong.of_int x)
let maxVisibleColumns self = msg_send ~self ~cmd:(selector "maxVisibleColumns") ~typ:(returning llong)
let minColumnWidth self = msg_send ~self ~cmd:(selector "minColumnWidth") ~typ:(returning double)
let moveLeft x self = msg_send ~self ~cmd:(selector "moveLeft:") ~typ:(id @-> returning void) x
let moveRight x self = msg_send ~self ~cmd:(selector "moveRight:") ~typ:(id @-> returning void) x
let namesOfPromisedFilesDroppedAtDestination x self = msg_send ~self ~cmd:(selector "namesOfPromisedFilesDroppedAtDestination:") ~typ:(id @-> returning id) x
let needsPanelToBecomeKey self = msg_send ~self ~cmd:(selector "needsPanelToBecomeKey") ~typ:(returning bool)
let noteHeightOfRowsWithIndexesChanged x ~inColumn self = msg_send ~self ~cmd:(selector "noteHeightOfRowsWithIndexesChanged:inColumn:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int inColumn)
let numberOfVisibleColumns self = msg_send ~self ~cmd:(selector "numberOfVisibleColumns") ~typ:(returning llong)
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x ofObject change context
let parentForItem x self = msg_send ~self ~cmd:(selector "parentForItem:") ~typ:(id @-> returning id) x
let parentForItemsInColumn x self = msg_send ~self ~cmd:(selector "parentForItemsInColumn:") ~typ:(llong @-> returning id) (LLong.of_int x)
let path self = msg_send ~self ~cmd:(selector "path") ~typ:(returning id)
let pathSeparator self = msg_send ~self ~cmd:(selector "pathSeparator") ~typ:(returning id)
let pathToColumn x self = msg_send ~self ~cmd:(selector "pathToColumn:") ~typ:(llong @-> returning id) (LLong.of_int x)
let performClick x self = msg_send ~self ~cmd:(selector "performClick:") ~typ:(id @-> returning void) x
let performDragOperation x self = msg_send ~self ~cmd:(selector "performDragOperation:") ~typ:(id @-> returning bool) x
let performKeyEquivalent x self = msg_send ~self ~cmd:(selector "performKeyEquivalent:") ~typ:(id @-> returning bool) x
let prefersAllColumnUserResizing self = msg_send ~self ~cmd:(selector "prefersAllColumnUserResizing") ~typ:(returning bool)
let preservesContentDuringLiveResize self = msg_send ~self ~cmd:(selector "preservesContentDuringLiveResize") ~typ:(returning bool)
let refusesFirstResponder self = msg_send ~self ~cmd:(selector "refusesFirstResponder") ~typ:(returning bool)
let registerForDraggedTypes x self = msg_send ~self ~cmd:(selector "registerForDraggedTypes:") ~typ:(id @-> returning void) x
let reloadColumn x self = msg_send ~self ~cmd:(selector "reloadColumn:") ~typ:(llong @-> returning void) (LLong.of_int x)
let reloadDataForRowIndexes x ~inColumn self = msg_send ~self ~cmd:(selector "reloadDataForRowIndexes:inColumn:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int inColumn)
let reloadItem x ~reloadChildren self = msg_send ~self ~cmd:(selector "reloadItem:reloadChildren:") ~typ:(id @-> bool @-> returning void) x reloadChildren
let resignFirstResponder self = msg_send ~self ~cmd:(selector "resignFirstResponder") ~typ:(returning bool)
let resignKeyWindow self = msg_send ~self ~cmd:(selector "resignKeyWindow") ~typ:(returning void)
let reusesColumns self = msg_send ~self ~cmd:(selector "reusesColumns") ~typ:(returning bool)
let rowHeight self = msg_send ~self ~cmd:(selector "rowHeight") ~typ:(returning double)
let scrollColumnToVisible x self = msg_send ~self ~cmd:(selector "scrollColumnToVisible:") ~typ:(llong @-> returning void) (LLong.of_int x)
let scrollColumnsLeftBy x self = msg_send ~self ~cmd:(selector "scrollColumnsLeftBy:") ~typ:(llong @-> returning void) (LLong.of_int x)
let scrollColumnsRightBy x self = msg_send ~self ~cmd:(selector "scrollColumnsRightBy:") ~typ:(llong @-> returning void) (LLong.of_int x)
let scrollRowToVisible x ~inColumn self = msg_send ~self ~cmd:(selector "scrollRowToVisible:inColumn:") ~typ:(llong @-> llong @-> returning void) (LLong.of_int x) (LLong.of_int inColumn)
let scrollViaScroller x self = msg_send ~self ~cmd:(selector "scrollViaScroller:") ~typ:(id @-> returning void) x
let selectAll x self = msg_send ~self ~cmd:(selector "selectAll:") ~typ:(id @-> returning void) x
let selectRow x ~inColumn self = msg_send ~self ~cmd:(selector "selectRow:inColumn:") ~typ:(llong @-> llong @-> returning void) (LLong.of_int x) (LLong.of_int inColumn)
let selectRowIndexes x ~inColumn self = msg_send ~self ~cmd:(selector "selectRowIndexes:inColumn:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int inColumn)
let selectedCell self = msg_send ~self ~cmd:(selector "selectedCell") ~typ:(returning id)
let selectedCellInColumn x self = msg_send ~self ~cmd:(selector "selectedCellInColumn:") ~typ:(llong @-> returning id) (LLong.of_int x)
let selectedCells self = msg_send ~self ~cmd:(selector "selectedCells") ~typ:(returning id)
let selectedColumn self = msg_send ~self ~cmd:(selector "selectedColumn") ~typ:(returning llong)
let selectedRowInColumn x self = msg_send ~self ~cmd:(selector "selectedRowInColumn:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let selectedRowIndexesInColumn x self = msg_send ~self ~cmd:(selector "selectedRowIndexesInColumn:") ~typ:(llong @-> returning id) (LLong.of_int x)
let selectionIndexPath self = msg_send ~self ~cmd:(selector "selectionIndexPath") ~typ:(returning id)
let selectionIndexPaths self = msg_send ~self ~cmd:(selector "selectionIndexPaths") ~typ:(returning id)
let sendAction self = msg_send ~self ~cmd:(selector "sendAction") ~typ:(returning bool)
let sendsActionOnArrowKeys self = msg_send ~self ~cmd:(selector "sendsActionOnArrowKeys") ~typ:(returning bool)
let separatesColumns self = msg_send ~self ~cmd:(selector "separatesColumns") ~typ:(returning bool)
let setAcceptsArrowKeys x self = msg_send ~self ~cmd:(selector "setAcceptsArrowKeys:") ~typ:(bool @-> returning void) x
let setAllowsBranchSelection x self = msg_send ~self ~cmd:(selector "setAllowsBranchSelection:") ~typ:(bool @-> returning void) x
let setAllowsEmptySelection x self = msg_send ~self ~cmd:(selector "setAllowsEmptySelection:") ~typ:(bool @-> returning void) x
let setAllowsIncrementalSearching x self = msg_send ~self ~cmd:(selector "setAllowsIncrementalSearching:") ~typ:(bool @-> returning void) x
let setAllowsMultipleSelection x self = msg_send ~self ~cmd:(selector "setAllowsMultipleSelection:") ~typ:(bool @-> returning void) x
let setAllowsTypeSelect x self = msg_send ~self ~cmd:(selector "setAllowsTypeSelect:") ~typ:(bool @-> returning void) x
let setAutohidesScroller x self = msg_send ~self ~cmd:(selector "setAutohidesScroller:") ~typ:(bool @-> returning void) x
let setAutomaticallyAdjustsContentInsets x self = msg_send ~self ~cmd:(selector "setAutomaticallyAdjustsContentInsets:") ~typ:(bool @-> returning void) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning void) x
let setBorderType x self = msg_send ~self ~cmd:(selector "setBorderType:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setCellClass x self = msg_send ~self ~cmd:(selector "setCellClass:") ~typ:(_Class @-> returning void) x
let setCellPrototype x self = msg_send ~self ~cmd:(selector "setCellPrototype:") ~typ:(id @-> returning void) x
let setColumnResizingType x self = msg_send ~self ~cmd:(selector "setColumnResizingType:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setColumnsAutosaveName x self = msg_send ~self ~cmd:(selector "setColumnsAutosaveName:") ~typ:(id @-> returning void) x
let setContentInsets x self = msg_send ~self ~cmd:(selector "setContentInsets:") ~typ:(NSEdgeInsets.t @-> returning void) x
let setControlSize x self = msg_send ~self ~cmd:(selector "setControlSize:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setDefaultColumnWidth x self = msg_send ~self ~cmd:(selector "setDefaultColumnWidth:") ~typ:(double @-> returning void) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning void) x
let setDoubleAction x self = msg_send ~self ~cmd:(selector "setDoubleAction:") ~typ:(_SEL @-> returning void) x
let setDraggingSourceOperationMask x ~forLocal self = msg_send ~self ~cmd:(selector "setDraggingSourceOperationMask:forLocal:") ~typ:(ullong @-> bool @-> returning void) (ULLong.of_int x) forLocal
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning void) x
let setFrameSize x self = msg_send ~self ~cmd:(selector "setFrameSize:") ~typ:(CGSize.t @-> returning void) x
let setHasHorizontalScroller x self = msg_send ~self ~cmd:(selector "setHasHorizontalScroller:") ~typ:(bool @-> returning void) x
let setLastColumn x self = msg_send ~self ~cmd:(selector "setLastColumn:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setMatrixClass x self = msg_send ~self ~cmd:(selector "setMatrixClass:") ~typ:(_Class @-> returning void) x
let setMaxVisibleColumns x self = msg_send ~self ~cmd:(selector "setMaxVisibleColumns:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setMenu x self = msg_send ~self ~cmd:(selector "setMenu:") ~typ:(id @-> returning void) x
let setMinColumnWidth x self = msg_send ~self ~cmd:(selector "setMinColumnWidth:") ~typ:(double @-> returning void) x
let setNeedsDisplay x self = msg_send ~self ~cmd:(selector "setNeedsDisplay:") ~typ:(bool @-> returning void) x
let setNeedsDisplayInRect x self = msg_send ~self ~cmd:(selector "setNeedsDisplayInRect:") ~typ:(CGRect.t @-> returning void) x
let setNextKeyView x self = msg_send ~self ~cmd:(selector "setNextKeyView:") ~typ:(id @-> returning void) x
let setPath x self = msg_send ~self ~cmd:(selector "setPath:") ~typ:(id @-> returning bool) x
let setPathSeparator x self = msg_send ~self ~cmd:(selector "setPathSeparator:") ~typ:(id @-> returning void) x
let setPrefersAllColumnUserResizing x self = msg_send ~self ~cmd:(selector "setPrefersAllColumnUserResizing:") ~typ:(bool @-> returning void) x
let setRefusesFirstResponder x self = msg_send ~self ~cmd:(selector "setRefusesFirstResponder:") ~typ:(bool @-> returning void) x
let setReusesColumns x self = msg_send ~self ~cmd:(selector "setReusesColumns:") ~typ:(bool @-> returning void) x
let setRowHeight x self = msg_send ~self ~cmd:(selector "setRowHeight:") ~typ:(double @-> returning void) x
let setSelectionIndexPath x self = msg_send ~self ~cmd:(selector "setSelectionIndexPath:") ~typ:(id @-> returning void) x
let setSelectionIndexPaths x self = msg_send ~self ~cmd:(selector "setSelectionIndexPaths:") ~typ:(id @-> returning void) x
let setSendsActionOnArrowKeys x self = msg_send ~self ~cmd:(selector "setSendsActionOnArrowKeys:") ~typ:(bool @-> returning void) x
let setSeparatesColumns x self = msg_send ~self ~cmd:(selector "setSeparatesColumns:") ~typ:(bool @-> returning void) x
let setTakesTitleFromPreviousColumn x self = msg_send ~self ~cmd:(selector "setTakesTitleFromPreviousColumn:") ~typ:(bool @-> returning void) x
let setTitle x ~ofColumn self = msg_send ~self ~cmd:(selector "setTitle:ofColumn:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int ofColumn)
let setTitled x self = msg_send ~self ~cmd:(selector "setTitled:") ~typ:(bool @-> returning void) x
let setUserColumnResizingAutoresizesWindow x self = msg_send ~self ~cmd:(selector "setUserColumnResizingAutoresizesWindow:") ~typ:(bool @-> returning void) x
let setValue x ~forKeyPath self = msg_send ~self ~cmd:(selector "setValue:forKeyPath:") ~typ:(id @-> id @-> returning void) x forKeyPath
let setWidth x ~ofColumn self = msg_send ~self ~cmd:(selector "setWidth:ofColumn:") ~typ:(double @-> llong @-> returning void) x (LLong.of_int ofColumn)
let takesTitleFromPreviousColumn self = msg_send ~self ~cmd:(selector "takesTitleFromPreviousColumn") ~typ:(returning bool)
let tile self = msg_send ~self ~cmd:(selector "tile") ~typ:(returning void)
let titleFrameOfColumn x self = msg_send_stret ~self ~cmd:(selector "titleFrameOfColumn:") ~typ:(llong @-> returning CGRect.t) ~return_type:CGRect.t (LLong.of_int x)
let titleHeight self = msg_send ~self ~cmd:(selector "titleHeight") ~typ:(returning double)
let titleOfColumn x self = msg_send ~self ~cmd:(selector "titleOfColumn:") ~typ:(llong @-> returning id) (LLong.of_int x)
let unregisterDraggedTypes self = msg_send ~self ~cmd:(selector "unregisterDraggedTypes") ~typ:(returning void)
let updateCell x self = msg_send ~self ~cmd:(selector "updateCell:") ~typ:(id @-> returning void) x
let updateCellInside x self = msg_send ~self ~cmd:(selector "updateCellInside:") ~typ:(id @-> returning void) x
let updateLayer self = msg_send ~self ~cmd:(selector "updateLayer") ~typ:(returning void)
let updateScroller self = msg_send ~self ~cmd:(selector "updateScroller") ~typ:(returning void)
let userColumnResizingAutoresizesWindow self = msg_send ~self ~cmd:(selector "userColumnResizingAutoresizesWindow") ~typ:(returning bool)
let validateVisibleColumns self = msg_send ~self ~cmd:(selector "validateVisibleColumns") ~typ:(returning void)
let valueForKey x self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning id) x
let viewWillDraw self = msg_send ~self ~cmd:(selector "viewWillDraw") ~typ:(returning void)
let widthOfColumn x self = msg_send ~self ~cmd:(selector "widthOfColumn:") ~typ:(llong @-> returning double) (LLong.of_int x)