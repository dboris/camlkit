(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation

(** Apple docs: {{:https://developer.apple.com/documentation/appkit/nscontrol?language=objc}NSControl} *)

let self = get_class "NSControl"

let abortEditing self = msg_send ~self ~cmd:(selector "abortEditing") ~typ:(returning bool)
let acceptsFirstResponder self = msg_send ~self ~cmd:(selector "acceptsFirstResponder") ~typ:(returning bool)
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning id)
let accessibilityChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenAttribute") ~typ:(returning id)
let accessibilityDrawFocusRing self = msg_send ~self ~cmd:(selector "accessibilityDrawFocusRing") ~typ:(returning void)
let accessibilityEnabledAttribute self = msg_send ~self ~cmd:(selector "accessibilityEnabledAttribute") ~typ:(returning id)
let accessibilityFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityFocusedUIElement") ~typ:(returning id)
let accessibilityHelpStringForChild x self = msg_send ~self ~cmd:(selector "accessibilityHelpStringForChild:") ~typ:(id @-> returning id) x
let accessibilityHitTest x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning id) x
let accessibilityIsChildFocusable x self = msg_send ~self ~cmd:(selector "accessibilityIsChildFocusable:") ~typ:(id @-> returning bool) x
let accessibilityIsEnabledAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsEnabledAttributeSettable") ~typ:(returning bool)
let accessibilityIsIgnored self = msg_send ~self ~cmd:(selector "accessibilityIsIgnored") ~typ:(returning bool)
let accessibilityPopUpMenuParent x self = msg_send ~self ~cmd:(selector "accessibilityPopUpMenuParent:") ~typ:(id @-> returning id) x
let accessibilityPositionOfChild x self = msg_send ~self ~cmd:(selector "accessibilityPositionOfChild:") ~typ:(id @-> returning id) x
let accessibilityPostNotification x ~context self = msg_send ~self ~cmd:(selector "accessibilityPostNotification:context:") ~typ:(id @-> id @-> returning void) x context
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning id)
let accessibilitySetFocus x ~forChild self = msg_send ~self ~cmd:(selector "accessibilitySetFocus:forChild:") ~typ:(id @-> id @-> returning void) x forChild
let accessibilitySizeOfChild x self = msg_send ~self ~cmd:(selector "accessibilitySizeOfChild:") ~typ:(id @-> returning id) x
let action self = msg_send ~self ~cmd:(selector "action") ~typ:(returning _SEL)
let addTarget x ~action ~forControlEvents self = msg_send ~self ~cmd:(selector "addTarget:action:forControlEvents:") ~typ:(id @-> _SEL @-> ullong @-> returning void) x action (ULLong.of_int forControlEvents)
let alignment self = msg_send ~self ~cmd:(selector "alignment") ~typ:(returning llong)
let allowsExpansionToolTips self = msg_send ~self ~cmd:(selector "allowsExpansionToolTips") ~typ:(returning bool)
let allowsLogicalLayoutDirection self = msg_send ~self ~cmd:(selector "allowsLogicalLayoutDirection") ~typ:(returning bool)
let allowsVibrancy self = msg_send ~self ~cmd:(selector "allowsVibrancy") ~typ:(returning bool)
let attributedStringValue self = msg_send ~self ~cmd:(selector "attributedStringValue") ~typ:(returning id)
let backgroundStyle self = msg_send ~self ~cmd:(selector "backgroundStyle") ~typ:(returning llong)
let baseWritingDirection self = msg_send ~self ~cmd:(selector "baseWritingDirection") ~typ:(returning llong)
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning bool)
let becomeKeyWindow self = msg_send ~self ~cmd:(selector "becomeKeyWindow") ~typ:(returning void)
let calcSize self = msg_send ~self ~cmd:(selector "calcSize") ~typ:(returning void)
let cell self = msg_send ~self ~cmd:(selector "cell") ~typ:(returning id)
let cellIfExists self = msg_send ~self ~cmd:(selector "cellIfExists") ~typ:(returning id)
let controlSize self = msg_send ~self ~cmd:(selector "controlSize") ~typ:(returning ullong)
let currentEditor self = msg_send ~self ~cmd:(selector "currentEditor") ~typ:(returning id)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let didChangeValueForKey x self = msg_send ~self ~cmd:(selector "didChangeValueForKey:") ~typ:(id @-> returning void) x
let doubleValue self = msg_send ~self ~cmd:(selector "doubleValue") ~typ:(returning double)
let drawCell x self = msg_send ~self ~cmd:(selector "drawCell:") ~typ:(id @-> returning void) x
let drawCellInside x self = msg_send ~self ~cmd:(selector "drawCellInside:") ~typ:(id @-> returning void) x
let drawFocusRingMask self = msg_send ~self ~cmd:(selector "drawFocusRingMask") ~typ:(returning void)
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning void) x
let drawWithExpansionFrame x ~inView self = msg_send ~self ~cmd:(selector "drawWithExpansionFrame:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let editWithFrame x ~editor ~delegate ~event self = msg_send ~self ~cmd:(selector "editWithFrame:editor:delegate:event:") ~typ:(CGRect.t @-> id @-> id @-> id @-> returning void) x editor delegate event
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let endEditing x self = msg_send ~self ~cmd:(selector "endEditing:") ~typ:(id @-> returning void) x
let expansionFrameWithFrame x self = msg_send_stret ~self ~cmd:(selector "expansionFrameWithFrame:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let firstBaselineOffsetFromTop self = msg_send ~self ~cmd:(selector "firstBaselineOffsetFromTop") ~typ:(returning double)
let floatValue self = msg_send ~self ~cmd:(selector "floatValue") ~typ:(returning float)
let focusRingMaskBounds self = msg_send_stret ~self ~cmd:(selector "focusRingMaskBounds") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let focusRingType self = msg_send ~self ~cmd:(selector "focusRingType") ~typ:(returning ullong)
let font self = msg_send ~self ~cmd:(selector "font") ~typ:(returning id)
let formatter self = msg_send ~self ~cmd:(selector "formatter") ~typ:(returning id)
let getPeriodicDelay x ~interval self = msg_send ~self ~cmd:(selector "getPeriodicDelay:interval:") ~typ:((ptr float) @-> (ptr float) @-> returning void) x interval
let ignoresMultiClick self = msg_send ~self ~cmd:(selector "ignoresMultiClick") ~typ:(returning bool)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning id) x
let intValue self = msg_send ~self ~cmd:(selector "intValue") ~typ:(returning int)
let integerValue self = msg_send ~self ~cmd:(selector "integerValue") ~typ:(returning llong)
let intrinsicContentSize self = msg_send_stret ~self ~cmd:(selector "intrinsicContentSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let invalidateIntrinsicContentSizeForCell x self = msg_send ~self ~cmd:(selector "invalidateIntrinsicContentSizeForCell:") ~typ:(id @-> returning void) x
let isContinuous self = msg_send ~self ~cmd:(selector "isContinuous") ~typ:(returning bool)
let isEnabled self = msg_send ~self ~cmd:(selector "isEnabled") ~typ:(returning bool)
let isHighlighted self = msg_send ~self ~cmd:(selector "isHighlighted") ~typ:(returning bool)
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning bool)
let keyDown x self = msg_send ~self ~cmd:(selector "keyDown:") ~typ:(id @-> returning void) x
let keyUp x self = msg_send ~self ~cmd:(selector "keyUp:") ~typ:(id @-> returning void) x
let layout self = msg_send ~self ~cmd:(selector "layout") ~typ:(returning void)
let lineBreakMode self = msg_send ~self ~cmd:(selector "lineBreakMode") ~typ:(returning ullong)
let menuForEvent x self = msg_send ~self ~cmd:(selector "menuForEvent:") ~typ:(id @-> returning id) x
let mouseDown x self = msg_send ~self ~cmd:(selector "mouseDown:") ~typ:(id @-> returning void) x
let mouseDownCanMoveWindow self = msg_send ~self ~cmd:(selector "mouseDownCanMoveWindow") ~typ:(returning bool)
let mouseDownFlags self = msg_send ~self ~cmd:(selector "mouseDownFlags") ~typ:(returning llong)
let needsPanelToBecomeKey self = msg_send ~self ~cmd:(selector "needsPanelToBecomeKey") ~typ:(returning bool)
let objectValue self = msg_send ~self ~cmd:(selector "objectValue") ~typ:(returning id)
let performClick x self = msg_send ~self ~cmd:(selector "performClick:") ~typ:(id @-> returning void) x
let refusesFirstResponder self = msg_send ~self ~cmd:(selector "refusesFirstResponder") ~typ:(returning bool)
let removeTarget x ~action ~forControlEvents self = msg_send ~self ~cmd:(selector "removeTarget:action:forControlEvents:") ~typ:(id @-> _SEL @-> ullong @-> returning void) x action (ULLong.of_int forControlEvents)
let representedObject self = msg_send ~self ~cmd:(selector "representedObject") ~typ:(returning id)
let resetCursorRects self = msg_send ~self ~cmd:(selector "resetCursorRects") ~typ:(returning void)
let resignFirstResponder self = msg_send ~self ~cmd:(selector "resignFirstResponder") ~typ:(returning bool)
let resignKeyWindow self = msg_send ~self ~cmd:(selector "resignKeyWindow") ~typ:(returning void)
let rightMouseDown x self = msg_send ~self ~cmd:(selector "rightMouseDown:") ~typ:(id @-> returning void) x
let selectCell x self = msg_send ~self ~cmd:(selector "selectCell:") ~typ:(id @-> returning void) x
let selectWithFrame x ~editor ~delegate ~start ~length self = msg_send ~self ~cmd:(selector "selectWithFrame:editor:delegate:start:length:") ~typ:(CGRect.t @-> id @-> id @-> llong @-> llong @-> returning void) x editor delegate (LLong.of_int start) (LLong.of_int length)
let selectedCell self = msg_send ~self ~cmd:(selector "selectedCell") ~typ:(returning id)
let selectedTag self = msg_send ~self ~cmd:(selector "selectedTag") ~typ:(returning llong)
let sendAction x ~to_ self = msg_send ~self ~cmd:(selector "sendAction:to:") ~typ:(_SEL @-> id @-> returning bool) x to_
let sendActionOn x self = msg_send ~self ~cmd:(selector "sendActionOn:") ~typ:(ullong @-> returning llong) (ULLong.of_int x)
let sendActionOnMask self = msg_send ~self ~cmd:(selector "sendActionOnMask") ~typ:(returning ullong)
let setAction x self = msg_send ~self ~cmd:(selector "setAction:") ~typ:(_SEL @-> returning void) x
let setAlignment x self = msg_send ~self ~cmd:(selector "setAlignment:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAllowsExpansionToolTips x self = msg_send ~self ~cmd:(selector "setAllowsExpansionToolTips:") ~typ:(bool @-> returning void) x
let setAllowsLogicalLayoutDirection x self = msg_send ~self ~cmd:(selector "setAllowsLogicalLayoutDirection:") ~typ:(bool @-> returning void) x
let setAttributedStringValue x self = msg_send ~self ~cmd:(selector "setAttributedStringValue:") ~typ:(id @-> returning void) x
let setBaseWritingDirection x self = msg_send ~self ~cmd:(selector "setBaseWritingDirection:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setCell x self = msg_send ~self ~cmd:(selector "setCell:") ~typ:(id @-> returning void) x
let setContinuous x self = msg_send ~self ~cmd:(selector "setContinuous:") ~typ:(bool @-> returning void) x
let setControlSize x self = msg_send ~self ~cmd:(selector "setControlSize:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setDoubleValue x self = msg_send ~self ~cmd:(selector "setDoubleValue:") ~typ:(double @-> returning void) x
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning void) x
let setFloatValue x self = msg_send ~self ~cmd:(selector "setFloatValue:") ~typ:(float @-> returning void) x
let setFloatingPointFormat x ~left ~right self = msg_send ~self ~cmd:(selector "setFloatingPointFormat:left:right:") ~typ:(bool @-> ullong @-> ullong @-> returning void) x (ULLong.of_int left) (ULLong.of_int right)
let setFocusRingType x self = msg_send ~self ~cmd:(selector "setFocusRingType:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setFont x self = msg_send ~self ~cmd:(selector "setFont:") ~typ:(id @-> returning void) x
let setFormatter x self = msg_send ~self ~cmd:(selector "setFormatter:") ~typ:(id @-> returning void) x
let setHighlighted x self = msg_send ~self ~cmd:(selector "setHighlighted:") ~typ:(bool @-> returning void) x
let setIgnoresMultiClick x self = msg_send ~self ~cmd:(selector "setIgnoresMultiClick:") ~typ:(bool @-> returning void) x
let setIntValue x self = msg_send ~self ~cmd:(selector "setIntValue:") ~typ:(int @-> returning void) x
let setIntegerValue x self = msg_send ~self ~cmd:(selector "setIntegerValue:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setLineBreakMode x self = msg_send ~self ~cmd:(selector "setLineBreakMode:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setNeedsDisplay self = msg_send ~self ~cmd:(selector "setNeedsDisplay") ~typ:(returning void)
let setNextState self = msg_send ~self ~cmd:(selector "setNextState") ~typ:(returning void)
let setObjectValue x self = msg_send ~self ~cmd:(selector "setObjectValue:") ~typ:(id @-> returning void) x
let setRefusesFirstResponder x self = msg_send ~self ~cmd:(selector "setRefusesFirstResponder:") ~typ:(bool @-> returning void) x
let setRepresentedObject x self = msg_send ~self ~cmd:(selector "setRepresentedObject:") ~typ:(id @-> returning void) x
let setSkipEditValidation x self = msg_send ~self ~cmd:(selector "setSkipEditValidation:") ~typ:(bool @-> returning void) x
let setStringValue x self = msg_send ~self ~cmd:(selector "setStringValue:") ~typ:(id @-> returning void) x
let setTag x self = msg_send ~self ~cmd:(selector "setTag:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setTarget x self = msg_send ~self ~cmd:(selector "setTarget:") ~typ:(id @-> returning void) x
let setTouchBarInsetMitigation x self = msg_send ~self ~cmd:(selector "setTouchBarInsetMitigation:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setTouchBarRestingMitigation x self = msg_send ~self ~cmd:(selector "setTouchBarRestingMitigation:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setUserInterfaceLayoutDirection x self = msg_send ~self ~cmd:(selector "setUserInterfaceLayoutDirection:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setUsesSingleLineMode x self = msg_send ~self ~cmd:(selector "setUsesSingleLineMode:") ~typ:(bool @-> returning void) x
let shouldBeTreatedAsInkEvent x self = msg_send ~self ~cmd:(selector "shouldBeTreatedAsInkEvent:") ~typ:(id @-> returning bool) x
let sizeThatFits x self = msg_send_stret ~self ~cmd:(selector "sizeThatFits:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let sizeToFit self = msg_send ~self ~cmd:(selector "sizeToFit") ~typ:(returning void)
let skipEditValidation self = msg_send ~self ~cmd:(selector "skipEditValidation") ~typ:(returning bool)
let stringValue self = msg_send ~self ~cmd:(selector "stringValue") ~typ:(returning id)
let tag self = msg_send ~self ~cmd:(selector "tag") ~typ:(returning llong)
let takeDoubleValueFrom x self = msg_send ~self ~cmd:(selector "takeDoubleValueFrom:") ~typ:(id @-> returning void) x
let takeFloatValueFrom x self = msg_send ~self ~cmd:(selector "takeFloatValueFrom:") ~typ:(id @-> returning void) x
let takeIntValueFrom x self = msg_send ~self ~cmd:(selector "takeIntValueFrom:") ~typ:(id @-> returning void) x
let takeIntegerValueFrom x self = msg_send ~self ~cmd:(selector "takeIntegerValueFrom:") ~typ:(id @-> returning void) x
let takeObjectValueFrom x self = msg_send ~self ~cmd:(selector "takeObjectValueFrom:") ~typ:(id @-> returning void) x
let takeStringValueFrom x self = msg_send ~self ~cmd:(selector "takeStringValueFrom:") ~typ:(id @-> returning void) x
let target self = msg_send ~self ~cmd:(selector "target") ~typ:(returning id)
let textView x ~willChangeSelectionFromCharacterRange ~toCharacterRange self = msg_send_stret ~self ~cmd:(selector "textView:willChangeSelectionFromCharacterRange:toCharacterRange:") ~typ:(id @-> NSRange.t @-> NSRange.t @-> returning NSRange.t) ~return_type:NSRange.t x willChangeSelectionFromCharacterRange toCharacterRange
let textViewDidChangeSelection x self = msg_send ~self ~cmd:(selector "textViewDidChangeSelection:") ~typ:(id @-> returning void) x
let touchBarInsetMitigation self = msg_send ~self ~cmd:(selector "touchBarInsetMitigation") ~typ:(returning llong)
let touchBarRestingMitigation self = msg_send ~self ~cmd:(selector "touchBarRestingMitigation") ~typ:(returning llong)
let touchesBeganWithEvent x self = msg_send ~self ~cmd:(selector "touchesBeganWithEvent:") ~typ:(id @-> returning void) x
let touchesCancelledWithEvent x self = msg_send ~self ~cmd:(selector "touchesCancelledWithEvent:") ~typ:(id @-> returning void) x
let touchesEndedWithEvent x self = msg_send ~self ~cmd:(selector "touchesEndedWithEvent:") ~typ:(id @-> returning void) x
let touchesMovedWithEvent x self = msg_send ~self ~cmd:(selector "touchesMovedWithEvent:") ~typ:(id @-> returning void) x
let updateCell x self = msg_send ~self ~cmd:(selector "updateCell:") ~typ:(id @-> returning void) x
let updateCellInside x self = msg_send ~self ~cmd:(selector "updateCellInside:") ~typ:(id @-> returning void) x
let updateLayer self = msg_send ~self ~cmd:(selector "updateLayer") ~typ:(returning void)
let updateTrackingAreas self = msg_send ~self ~cmd:(selector "updateTrackingAreas") ~typ:(returning void)
let userInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "userInterfaceLayoutDirection") ~typ:(returning llong)
let usesSingleLineMode self = msg_send ~self ~cmd:(selector "usesSingleLineMode") ~typ:(returning bool)
let validateEditing self = msg_send ~self ~cmd:(selector "validateEditing") ~typ:(returning void)
let viewDidChangeEffectiveAppearance self = msg_send ~self ~cmd:(selector "viewDidChangeEffectiveAppearance") ~typ:(returning void)
let viewWithTag x self = msg_send ~self ~cmd:(selector "viewWithTag:") ~typ:(llong @-> returning id) (LLong.of_int x)
let wantsUpdateLayer self = msg_send ~self ~cmd:(selector "wantsUpdateLayer") ~typ:(returning bool)