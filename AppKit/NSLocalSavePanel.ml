(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation

(** Apple docs: {{:https://developer.apple.com/documentation/appkit/nslocalsavepanel?language=objc}NSLocalSavePanel} *)

let self = get_class "NSLocalSavePanel"

let _PSGetFileNameTextField self = msg_send ~self ~cmd:(selector "PSGetFileNameTextField") ~typ:(returning id)
let _URL self = msg_send ~self ~cmd:(selector "URL") ~typ:(returning id)
let _URLs self = msg_send ~self ~cmd:(selector "URLs") ~typ:(returning id)
let accessoryView self = msg_send ~self ~cmd:(selector "accessoryView") ~typ:(returning id)
let accessoryViewContainerContentFrameDidChange x self = msg_send ~self ~cmd:(selector "accessoryViewContainerContentFrameDidChange:") ~typ:(id @-> returning void) x
let allowedContentTypes self = msg_send ~self ~cmd:(selector "allowedContentTypes") ~typ:(returning id)
let allowedFileTypes self = msg_send ~self ~cmd:(selector "allowedFileTypes") ~typ:(returning id)
let allowsMultipleSelection self = msg_send ~self ~cmd:(selector "allowsMultipleSelection") ~typ:(returning bool)
let allowsOtherFileTypes self = msg_send ~self ~cmd:(selector "allowsOtherFileTypes") ~typ:(returning bool)
let beginForDirectory x ~file ~types ~modelessDelegate ~didEndSelector ~contextInfo self = msg_send ~self ~cmd:(selector "beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:") ~typ:(id @-> id @-> id @-> id @-> _SEL @-> (ptr void) @-> returning void) x file types modelessDelegate didEndSelector contextInfo
let beginSheetForDirectory x ~file ~modalForWindow ~modalDelegate ~didEndSelector ~contextInfo self = msg_send ~self ~cmd:(selector "beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:") ~typ:(id @-> id @-> id @-> id @-> _SEL @-> (ptr void) @-> returning void) x file modalForWindow modalDelegate didEndSelector contextInfo
let beginSheetForDirectory' x ~file ~types ~modalForWindow ~modalDelegate ~didEndSelector ~contextInfo self = msg_send ~self ~cmd:(selector "beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:") ~typ:(id @-> id @-> id @-> id @-> id @-> _SEL @-> (ptr void) @-> returning void) x file types modalForWindow modalDelegate didEndSelector contextInfo
let beginSheetModalForWindow x ~completionHandler self = msg_send ~self ~cmd:(selector "beginSheetModalForWindow:completionHandler:") ~typ:(id @-> (ptr void) @-> returning void) x completionHandler
let beginWithCompletionHandler x self = msg_send ~self ~cmd:(selector "beginWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let canBecomeMainWindow self = msg_send ~self ~cmd:(selector "canBecomeMainWindow") ~typ:(returning bool)
let canChooseDirectories self = msg_send ~self ~cmd:(selector "canChooseDirectories") ~typ:(returning bool)
let canChooseFiles self = msg_send ~self ~cmd:(selector "canChooseFiles") ~typ:(returning bool)
let canCreateDirectories self = msg_send ~self ~cmd:(selector "canCreateDirectories") ~typ:(returning bool)
let canDownloadUbiquitousContents self = msg_send ~self ~cmd:(selector "canDownloadUbiquitousContents") ~typ:(returning bool)
let canResolveUbiquitousConflicts self = msg_send ~self ~cmd:(selector "canResolveUbiquitousConflicts") ~typ:(returning bool)
let canSelectHiddenExtension self = msg_send ~self ~cmd:(selector "canSelectHiddenExtension") ~typ:(returning bool)
let cancel x self = msg_send ~self ~cmd:(selector "cancel:") ~typ:(id @-> returning void) x
let center self = msg_send ~self ~cmd:(selector "center") ~typ:(returning void)
let control x ~textShouldBeginEditing self = msg_send ~self ~cmd:(selector "control:textShouldBeginEditing:") ~typ:(id @-> id @-> returning bool) x textShouldBeginEditing
let control1 x ~textView ~doCommandBySelector self = msg_send ~self ~cmd:(selector "control:textView:doCommandBySelector:") ~typ:(id @-> id @-> _SEL @-> returning bool) x textView doCommandBySelector
let control2 x ~textView ~completions ~forPartialWordRange ~indexOfSelectedItem self = msg_send ~self ~cmd:(selector "control:textView:completions:forPartialWordRange:indexOfSelectedItem:") ~typ:(id @-> id @-> id @-> NSRange.t @-> (ptr llong) @-> returning id) x textView completions forPartialWordRange indexOfSelectedItem
let controlTextDidChange x self = msg_send ~self ~cmd:(selector "controlTextDidChange:") ~typ:(id @-> returning void) x
let controlTextDidEndEditing x self = msg_send ~self ~cmd:(selector "controlTextDidEndEditing:") ~typ:(id @-> returning void) x
let createFakeConstraintsForStoredExpandedSize self = msg_send ~self ~cmd:(selector "createFakeConstraintsForStoredExpandedSize") ~typ:(returning id)
let customActions self = msg_send ~self ~cmd:(selector "customActions") ~typ:(returning id)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let defaultNSNumberBOOLObjectForKey x self = msg_send ~self ~cmd:(selector "defaultNSNumberBOOLObjectForKey:") ~typ:(id @-> returning id) x
let defaultObjectForKey x self = msg_send ~self ~cmd:(selector "defaultObjectForKey:") ~typ:(id @-> returning id) x
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning id)
let directory self = msg_send ~self ~cmd:(selector "directory") ~typ:(returning id)
let directoryURL self = msg_send ~self ~cmd:(selector "directoryURL") ~typ:(returning id)
let dismissWindow x self = msg_send ~self ~cmd:(selector "dismissWindow:") ~typ:(llong @-> returning void) (LLong.of_int x)
let dontSave x self = msg_send ~self ~cmd:(selector "dontSave:") ~typ:(id @-> returning void) x
let draggingEntered x self = msg_send ~self ~cmd:(selector "draggingEntered:") ~typ:(id @-> returning ullong) x
let fieldEditor x ~forObject self = msg_send ~self ~cmd:(selector "fieldEditor:forObject:") ~typ:(bool @-> id @-> returning id) x forObject
let filename self = msg_send ~self ~cmd:(selector "filename") ~typ:(returning id)
let filenames self = msg_send ~self ~cmd:(selector "filenames") ~typ:(returning id)
let finderView x ~acceptsPreviewPanelControl self = msg_send ~self ~cmd:(selector "finderView:acceptsPreviewPanelControl:") ~typ:(id @-> id @-> returning bool) x acceptsPreviewPanelControl
let finderView1 x ~canSelectURL self = msg_send ~self ~cmd:(selector "finderView:canSelectURL:") ~typ:(id @-> id @-> returning bool) x canSelectURL
let finderView2 x ~clickedOnDisabledURL self = msg_send ~self ~cmd:(selector "finderView:clickedOnDisabledURL:") ~typ:(id @-> id @-> returning void) x clickedOnDisabledURL
let finderView3 x ~configureForGotoWithFilename self = msg_send ~self ~cmd:(selector "finderView:configureForGotoWithFilename:") ~typ:(id @-> id @-> returning void) x configureForGotoWithFilename
let finderView4 x ~didChangeToDirectoryURL self = msg_send ~self ~cmd:(selector "finderView:didChangeToDirectoryURL:") ~typ:(id @-> id @-> returning void) x didChangeToDirectoryURL
let finderView5 x ~hideExtension self = msg_send ~self ~cmd:(selector "finderView:hideExtension:") ~typ:(id @-> bool @-> returning void) x hideExtension
let finderView6 x ~populationInProgress self = msg_send ~self ~cmd:(selector "finderView:populationInProgress:") ~typ:(id @-> bool @-> returning void) x populationInProgress
let finderView7 x ~scopeChanged self = msg_send ~self ~cmd:(selector "finderView:scopeChanged:") ~typ:(id @-> bool @-> returning void) x scopeChanged
let finderView8 x ~shouldEnableURL self = msg_send ~self ~cmd:(selector "finderView:shouldEnableURL:") ~typ:(id @-> id @-> returning bool) x shouldEnableURL
let finderView9 x ~showAsPackageForURL self = msg_send ~self ~cmd:(selector "finderView:showAsPackageForURL:") ~typ:(id @-> id @-> returning bool) x showAsPackageForURL
let finderView10 x ~requestMenuItemsForURLs ~andUTIs self = msg_send ~self ~cmd:(selector "finderView:requestMenuItemsForURLs:andUTIs:") ~typ:(id @-> id @-> id @-> returning id) x requestMenuItemsForURLs andUTIs
let finderView11 x ~shouldEnableItems ~completionHandler self = msg_send ~self ~cmd:(selector "finderView:shouldEnableItems:completionHandler:") ~typ:(id @-> id @-> (ptr void) @-> returning void) x shouldEnableItems completionHandler
let finderView12 x ~canSelectURL ~itemIsContainer ~itemIsPackage self = msg_send ~self ~cmd:(selector "finderView:canSelectURL:itemIsContainer:itemIsPackage:") ~typ:(id @-> id @-> bool @-> bool @-> returning bool) x canSelectURL itemIsContainer itemIsPackage
let finderView13 x ~shouldEnableURL ~itemIsContainer ~itemIsPackage self = msg_send ~self ~cmd:(selector "finderView:shouldEnableURL:itemIsContainer:itemIsPackage:") ~typ:(id @-> id @-> bool @-> bool @-> returning bool) x shouldEnableURL itemIsContainer itemIsPackage
let finderView14 x ~canSelectURL ~itemIsContainer ~itemIsPackage ~pathExtension ~itemHFSType ~typeIdentifier self = msg_send ~self ~cmd:(selector "finderView:canSelectURL:itemIsContainer:itemIsPackage:pathExtension:itemHFSType:typeIdentifier:") ~typ:(id @-> id @-> bool @-> bool @-> id @-> uint @-> id @-> returning bool) x canSelectURL itemIsContainer itemIsPackage pathExtension itemHFSType typeIdentifier
let finderView15 x ~shouldEnableURL ~itemIsContainer ~itemIsPackage ~pathExtension ~itemHFSType ~typeIdentifier self = msg_send ~self ~cmd:(selector "finderView:shouldEnableURL:itemIsContainer:itemIsPackage:pathExtension:itemHFSType:typeIdentifier:") ~typ:(id @-> id @-> bool @-> bool @-> id @-> uint @-> id @-> returning bool) x shouldEnableURL itemIsContainer itemIsPackage pathExtension itemHFSType typeIdentifier
let finderViewCollapseSavePanel x self = msg_send ~self ~cmd:(selector "finderViewCollapseSavePanel:") ~typ:(id @-> returning void) x
let finderViewDidFinishConfiguration x self = msg_send ~self ~cmd:(selector "finderViewDidFinishConfiguration:") ~typ:(id @-> returning void) x
let finderViewOpenSelection x self = msg_send ~self ~cmd:(selector "finderViewOpenSelection:") ~typ:(id @-> returning bool) x
let finderViewQuerySearchUTIs x self = msg_send ~self ~cmd:(selector "finderViewQuerySearchUTIs:") ~typ:(id @-> returning id) x
let finderViewRequestRecentPlaces x self = msg_send ~self ~cmd:(selector "finderViewRequestRecentPlaces:") ~typ:(id @-> returning id) x
let finderViewSelectionDidChange x self = msg_send ~self ~cmd:(selector "finderViewSelectionDidChange:") ~typ:(id @-> returning void) x
let finderViewViewStyleChanged x self = msg_send ~self ~cmd:(selector "finderViewViewStyleChanged:") ~typ:(id @-> returning void) x
let hidesSharedSection self = msg_send ~self ~cmd:(selector "hidesSharedSection") ~typ:(returning bool)
let initWithContentRect x ~styleMask ~backing ~defer self = msg_send ~self ~cmd:(selector "initWithContentRect:styleMask:backing:defer:") ~typ:(CGRect.t @-> ullong @-> ullong @-> bool @-> returning id) x (ULLong.of_int styleMask) (ULLong.of_int backing) defer
let initWithOptions x self = msg_send ~self ~cmd:(selector "initWithOptions:") ~typ:(id @-> returning id) x
let isAccessoryViewDisclosed self = msg_send ~self ~cmd:(selector "isAccessoryViewDisclosed") ~typ:(returning bool)
let isExpanded self = msg_send ~self ~cmd:(selector "isExpanded") ~typ:(returning bool)
let isExtensionHidden self = msg_send ~self ~cmd:(selector "isExtensionHidden") ~typ:(returning bool)
let isKindOfClass x self = msg_send ~self ~cmd:(selector "isKindOfClass:") ~typ:(_Class @-> returning bool) x
let keyDown x self = msg_send ~self ~cmd:(selector "keyDown:") ~typ:(id @-> returning void) x
let makeTouchBar self = msg_send ~self ~cmd:(selector "makeTouchBar") ~typ:(returning id)
let message self = msg_send ~self ~cmd:(selector "message") ~typ:(returning id)
let nameFieldLabel self = msg_send ~self ~cmd:(selector "nameFieldLabel") ~typ:(returning id)
let nameFieldStringValue self = msg_send ~self ~cmd:(selector "nameFieldStringValue") ~typ:(returning id)
let newFolder x self = msg_send ~self ~cmd:(selector "newFolder:") ~typ:(id @-> returning void) x
let newFolderControllerClass self = msg_send ~self ~cmd:(selector "newFolderControllerClass") ~typ:(returning _Class)
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x ofObject change context
let ok x self = msg_send ~self ~cmd:(selector "ok:") ~typ:(id @-> returning void) x
let orderOut x self = msg_send ~self ~cmd:(selector "orderOut:") ~typ:(id @-> returning void) x
let orderWindow x ~relativeTo self = msg_send ~self ~cmd:(selector "orderWindow:relativeTo:") ~typ:(llong @-> llong @-> returning void) (LLong.of_int x) (LLong.of_int relativeTo)
let overwriteAlertDidEnd x ~returnCode ~contextInfo self = msg_send ~self ~cmd:(selector "overwriteAlertDidEnd:returnCode:contextInfo:") ~typ:(id @-> llong @-> id @-> returning void) x (LLong.of_int returnCode) contextInfo
let panel self = msg_send ~self ~cmd:(selector "panel") ~typ:(returning id)
let performDragOperation x self = msg_send ~self ~cmd:(selector "performDragOperation:") ~typ:(id @-> returning bool) x
let performKeyEquivalent x self = msg_send ~self ~cmd:(selector "performKeyEquivalent:") ~typ:(id @-> returning bool) x
let prepareForDragOperation x self = msg_send ~self ~cmd:(selector "prepareForDragOperation:") ~typ:(id @-> returning bool) x
let prompt self = msg_send ~self ~cmd:(selector "prompt") ~typ:(returning id)
let propertyKeysForIntrospector self = msg_send ~self ~cmd:(selector "propertyKeysForIntrospector") ~typ:(returning id)
let requiredFileType self = msg_send ~self ~cmd:(selector "requiredFileType") ~typ:(returning id)
let resolvesAliases self = msg_send ~self ~cmd:(selector "resolvesAliases") ~typ:(returning bool)
let runModal self = msg_send ~self ~cmd:(selector "runModal") ~typ:(returning llong)
let runModalForDirectory x ~file self = msg_send ~self ~cmd:(selector "runModalForDirectory:file:") ~typ:(id @-> id @-> returning llong) x file
let runModalForDirectory1 x ~file ~relativeToWindow self = msg_send ~self ~cmd:(selector "runModalForDirectory:file:relativeToWindow:") ~typ:(id @-> id @-> id @-> returning llong) x file relativeToWindow
let runModalForDirectory2 x ~file ~types self = msg_send ~self ~cmd:(selector "runModalForDirectory:file:types:") ~typ:(id @-> id @-> id @-> returning llong) x file types
let runModalForDirectory3 x ~file ~types ~relativeToWindow self = msg_send ~self ~cmd:(selector "runModalForDirectory:file:types:relativeToWindow:") ~typ:(id @-> id @-> id @-> id @-> returning llong) x file types relativeToWindow
let runModalForTypes x self = msg_send ~self ~cmd:(selector "runModalForTypes:") ~typ:(id @-> returning llong) x
let saveFrameUsingName x self = msg_send ~self ~cmd:(selector "saveFrameUsingName:") ~typ:(id @-> returning void) x
let scheduleURLEnableTestForItems x ~callDelegate ~completionHandler self = msg_send ~self ~cmd:(selector "scheduleURLEnableTestForItems:callDelegate:completionHandler:") ~typ:(id @-> bool @-> (ptr void) @-> returning void) x callDelegate completionHandler
let seamlessOpener x ~sourceFrameOnScreenForPreviewItem self = msg_send ~self ~cmd:(selector "seamlessOpener:sourceFrameOnScreenForPreviewItem:") ~typ:(id @-> id @-> returning CGRect.t) x sourceFrameOnScreenForPreviewItem
let seamlessOpener' x ~transitionImageForPreviewItem ~contentRect self = msg_send ~self ~cmd:(selector "seamlessOpener:transitionImageForPreviewItem:contentRect:") ~typ:(id @-> id @-> (ptr CGRect.t) @-> returning id) x transitionImageForPreviewItem contentRect
let seamlessOpenerTransientWindow x ~level self = msg_send ~self ~cmd:(selector "seamlessOpenerTransientWindow:level:") ~typ:(id @-> (ptr llong) @-> returning id) x level
let selectKeyViewFollowingView x self = msg_send ~self ~cmd:(selector "selectKeyViewFollowingView:") ~typ:(id @-> returning void) x
let selectKeyViewPrecedingView x self = msg_send ~self ~cmd:(selector "selectKeyViewPrecedingView:") ~typ:(id @-> returning void) x
let selectText x self = msg_send ~self ~cmd:(selector "selectText:") ~typ:(id @-> returning void) x
let sendToDelegate x ~userEnteredFileName ~confirmed self = msg_send ~self ~cmd:(selector "sendToDelegate:userEnteredFileName:confirmed:") ~typ:(id @-> id @-> bool @-> returning id) x userEnteredFileName confirmed
let setAccessoryView x self = msg_send ~self ~cmd:(selector "setAccessoryView:") ~typ:(id @-> returning void) x
let setAccessoryViewDisclosed x self = msg_send ~self ~cmd:(selector "setAccessoryViewDisclosed:") ~typ:(bool @-> returning void) x
let setAllowedContentTypes x self = msg_send ~self ~cmd:(selector "setAllowedContentTypes:") ~typ:(id @-> returning void) x
let setAllowedFileTypes x self = msg_send ~self ~cmd:(selector "setAllowedFileTypes:") ~typ:(id @-> returning void) x
let setAllowsMultipleSelection x self = msg_send ~self ~cmd:(selector "setAllowsMultipleSelection:") ~typ:(bool @-> returning void) x
let setAllowsOtherFileTypes x self = msg_send ~self ~cmd:(selector "setAllowsOtherFileTypes:") ~typ:(bool @-> returning void) x
let setCanChooseDirectories x self = msg_send ~self ~cmd:(selector "setCanChooseDirectories:") ~typ:(bool @-> returning void) x
let setCanChooseFiles x self = msg_send ~self ~cmd:(selector "setCanChooseFiles:") ~typ:(bool @-> returning void) x
let setCanCreateDirectories x self = msg_send ~self ~cmd:(selector "setCanCreateDirectories:") ~typ:(bool @-> returning void) x
let setCanDownloadUbiquitousContents x self = msg_send ~self ~cmd:(selector "setCanDownloadUbiquitousContents:") ~typ:(bool @-> returning void) x
let setCanResolveUbiquitousConflicts x self = msg_send ~self ~cmd:(selector "setCanResolveUbiquitousConflicts:") ~typ:(bool @-> returning void) x
let setCanSelectHiddenExtension x self = msg_send ~self ~cmd:(selector "setCanSelectHiddenExtension:") ~typ:(bool @-> returning void) x
let setContentView x self = msg_send ~self ~cmd:(selector "setContentView:") ~typ:(id @-> returning void) x
let setCustomActions x self = msg_send ~self ~cmd:(selector "setCustomActions:") ~typ:(id @-> returning void) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning void) x
let setDirectory x self = msg_send ~self ~cmd:(selector "setDirectory:") ~typ:(id @-> returning void) x
let setDirectoryURL x self = msg_send ~self ~cmd:(selector "setDirectoryURL:") ~typ:(id @-> returning void) x
let setExtensionHidden x self = msg_send ~self ~cmd:(selector "setExtensionHidden:") ~typ:(bool @-> returning void) x
let setFrame x ~display self = msg_send ~self ~cmd:(selector "setFrame:display:") ~typ:(CGRect.t @-> bool @-> returning void) x display
let setHidesSharedSection x self = msg_send ~self ~cmd:(selector "setHidesSharedSection:") ~typ:(bool @-> returning void) x
let setIsExtensionHidden x self = msg_send ~self ~cmd:(selector "setIsExtensionHidden:") ~typ:(bool @-> returning void) x
let setMessage x self = msg_send ~self ~cmd:(selector "setMessage:") ~typ:(id @-> returning void) x
let setMinSize x self = msg_send ~self ~cmd:(selector "setMinSize:") ~typ:(CGSize.t @-> returning void) x
let setNameFieldLabel x self = msg_send ~self ~cmd:(selector "setNameFieldLabel:") ~typ:(id @-> returning void) x
let setNameFieldStringValue x self = msg_send ~self ~cmd:(selector "setNameFieldStringValue:") ~typ:(id @-> returning void) x
let setPrompt x self = msg_send ~self ~cmd:(selector "setPrompt:") ~typ:(id @-> returning void) x
let setRemoteAccessoryViewDesiredSize x self = msg_send ~self ~cmd:(selector "setRemoteAccessoryViewDesiredSize:") ~typ:(CGSize.t @-> returning void) x
let setRequiredFileType x self = msg_send ~self ~cmd:(selector "setRequiredFileType:") ~typ:(id @-> returning void) x
let setResolvesAliases x self = msg_send ~self ~cmd:(selector "setResolvesAliases:") ~typ:(bool @-> returning void) x
let setShowsHiddenFiles x self = msg_send ~self ~cmd:(selector "setShowsHiddenFiles:") ~typ:(bool @-> returning void) x
let setShowsTagField x self = msg_send ~self ~cmd:(selector "setShowsTagField:") ~typ:(bool @-> returning void) x
let setTagNames x self = msg_send ~self ~cmd:(selector "setTagNames:") ~typ:(id @-> returning void) x
let setTitle x self = msg_send ~self ~cmd:(selector "setTitle:") ~typ:(id @-> returning void) x
let setTreatsFilePackagesAsDirectories x self = msg_send ~self ~cmd:(selector "setTreatsFilePackagesAsDirectories:") ~typ:(bool @-> returning void) x
let setValue x ~forUndefinedKey self = msg_send ~self ~cmd:(selector "setValue:forUndefinedKey:") ~typ:(id @-> id @-> returning void) x forUndefinedKey
let showGotoWithInitialFilename x self = msg_send ~self ~cmd:(selector "showGotoWithInitialFilename:") ~typ:(id @-> returning bool) x
let showsHiddenFiles self = msg_send ~self ~cmd:(selector "showsHiddenFiles") ~typ:(returning bool)
let showsTagField self = msg_send ~self ~cmd:(selector "showsTagField") ~typ:(returning bool)
let startRectForSheet x self = msg_send ~self ~cmd:(selector "startRectForSheet:") ~typ:(id @-> returning CGRect.t) x
let stringValueForIntrospectorPropertyKey x self = msg_send ~self ~cmd:(selector "stringValueForIntrospectorPropertyKey:") ~typ:(id @-> returning id) x
let tagNames self = msg_send ~self ~cmd:(selector "tagNames") ~typ:(returning id)
let title self = msg_send ~self ~cmd:(selector "title") ~typ:(returning id)
let toggleIsExpanded x self = msg_send ~self ~cmd:(selector "toggleIsExpanded:") ~typ:(id @-> returning void) x
let toggleOptionsView x self = msg_send ~self ~cmd:(selector "toggleOptionsView:") ~typ:(id @-> returning void) x
let touchBar x ~makeItemForIdentifier self = msg_send ~self ~cmd:(selector "touchBar:makeItemForIdentifier:") ~typ:(id @-> id @-> returning id) x makeItemForIdentifier
let treatsFilePackagesAsDirectories self = msg_send ~self ~cmd:(selector "treatsFilePackagesAsDirectories") ~typ:(returning bool)
let validateVisibleColumns self = msg_send ~self ~cmd:(selector "validateVisibleColumns") ~typ:(returning void)
let valueforUndefinedKey x self = msg_send ~self ~cmd:(selector "valueforUndefinedKey:") ~typ:(id @-> returning id) x
let warmUpPowerbox self = msg_send ~self ~cmd:(selector "warmUpPowerbox") ~typ:(returning void)