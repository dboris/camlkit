(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation

(** Apple docs: {{:https://developer.apple.com/documentation/appkit/nsview?language=objc}NSView} *)

let self = get_class "NSView"

let acceptsFirstMouse x self = msg_send ~self ~cmd:(selector "acceptsFirstMouse:") ~typ:(id @-> returning bool) x
let acceptsTouchEvents self = msg_send ~self ~cmd:(selector "acceptsTouchEvents") ~typ:(returning bool)
let accessibilityActionDescription x self = msg_send ~self ~cmd:(selector "accessibilityActionDescription:") ~typ:(id @-> returning id) x
let accessibilityActionNames self = msg_send ~self ~cmd:(selector "accessibilityActionNames") ~typ:(returning id)
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning id)
let accessibilityAttributeValue x self = msg_send ~self ~cmd:(selector "accessibilityAttributeValue:") ~typ:(id @-> returning id) x
let accessibilityAuditContrast self = msg_send ~self ~cmd:(selector "accessibilityAuditContrast") ~typ:(returning id)
let accessibilityAuditHierarchy self = msg_send ~self ~cmd:(selector "accessibilityAuditHierarchy") ~typ:(returning id)
let accessibilityAuditIssuesAttribute self = msg_send ~self ~cmd:(selector "accessibilityAuditIssuesAttribute") ~typ:(returning id)
let accessibilityAuditLabel self = msg_send ~self ~cmd:(selector "accessibilityAuditLabel") ~typ:(returning id)
let accessibilityAuditParent self = msg_send ~self ~cmd:(selector "accessibilityAuditParent") ~typ:(returning id)
let accessibilityAuditPotentialChildren self = msg_send ~self ~cmd:(selector "accessibilityAuditPotentialChildren") ~typ:(returning id)
let accessibilityChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenAttribute") ~typ:(returning id)
let accessibilityChildrenInNavigationOrderAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenInNavigationOrderAttribute") ~typ:(returning id)
let accessibilityDrawFocusRing self = msg_send ~self ~cmd:(selector "accessibilityDrawFocusRing") ~typ:(returning void)
let accessibilityFocusRingMaskBounds self = msg_send_stret ~self ~cmd:(selector "accessibilityFocusRingMaskBounds") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let accessibilityFocusedAttribute self = msg_send ~self ~cmd:(selector "accessibilityFocusedAttribute") ~typ:(returning id)
let accessibilityFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityFocusedUIElement") ~typ:(returning id)
let accessibilityFrame self = msg_send_stret ~self ~cmd:(selector "accessibilityFrame") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let accessibilityHelpAttribute self = msg_send ~self ~cmd:(selector "accessibilityHelpAttribute") ~typ:(returning id)
let accessibilityHitTest x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning id) x
let accessibilityHorizontalUnitDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityHorizontalUnitDescriptionAttribute") ~typ:(returning id)
let accessibilityIsAttributeSettable x self = msg_send ~self ~cmd:(selector "accessibilityIsAttributeSettable:") ~typ:(id @-> returning bool) x
let accessibilityIsChildrenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsChildrenAttributeSettable") ~typ:(returning bool)
let accessibilityIsFocusedAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFocusedAttributeSettable") ~typ:(returning bool)
let accessibilityIsHelpAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsHelpAttributeSettable") ~typ:(returning bool)
let accessibilityIsIgnored self = msg_send ~self ~cmd:(selector "accessibilityIsIgnored") ~typ:(returning bool)
let accessibilityIsParentAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsParentAttributeSettable") ~typ:(returning bool)
let accessibilityIsPositionAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsPositionAttributeSettable") ~typ:(returning bool)
let accessibilityIsRoleAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRoleAttributeSettable") ~typ:(returning bool)
let accessibilityIsRoleDescriptionAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRoleDescriptionAttributeSettable") ~typ:(returning bool)
let accessibilityIsSizeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSizeAttributeSettable") ~typ:(returning bool)
let accessibilityIsTopLevelUIElementAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsTopLevelUIElementAttributeSettable") ~typ:(returning bool)
let accessibilityIsWindowAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsWindowAttributeSettable") ~typ:(returning bool)
let accessibilityParent self = msg_send ~self ~cmd:(selector "accessibilityParent") ~typ:(returning id)
let accessibilityParentAttribute self = msg_send ~self ~cmd:(selector "accessibilityParentAttribute") ~typ:(returning id)
let accessibilityPerformAction x self = msg_send ~self ~cmd:(selector "accessibilityPerformAction:") ~typ:(id @-> returning void) x
let accessibilityPopUpMenuClosed x ~accessibilityParent self = msg_send ~self ~cmd:(selector "accessibilityPopUpMenuClosed:accessibilityParent:") ~typ:(id @-> id @-> returning void) x accessibilityParent
let accessibilityPopUpMenuCreated x ~returningAccessibilityParent self = msg_send ~self ~cmd:(selector "accessibilityPopUpMenuCreated:returningAccessibilityParent:") ~typ:(id @-> (ptr id) @-> returning void) x returningAccessibilityParent
let accessibilityPopUpMenuCreated' x ~forSubview ~returningAccessibilityParent self = msg_send ~self ~cmd:(selector "accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:") ~typ:(id @-> id @-> (ptr id) @-> returning void) x forSubview returningAccessibilityParent
let accessibilityPopUpMenuParent x self = msg_send ~self ~cmd:(selector "accessibilityPopUpMenuParent:") ~typ:(id @-> returning id) x
let accessibilityPositionAttribute self = msg_send ~self ~cmd:(selector "accessibilityPositionAttribute") ~typ:(returning id)
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning id)
let accessibilityRoleDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleDescriptionAttribute") ~typ:(returning id)
let accessibilitySectionsAttribute self = msg_send ~self ~cmd:(selector "accessibilitySectionsAttribute") ~typ:(returning id)
let accessibilitySetFocusedAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetFocusedAttribute:") ~typ:(id @-> returning void) x
let accessibilitySetValue x ~forAttribute self = msg_send ~self ~cmd:(selector "accessibilitySetValue:forAttribute:") ~typ:(id @-> id @-> returning void) x forAttribute
let accessibilityShouldSendNotification x self = msg_send ~self ~cmd:(selector "accessibilityShouldSendNotification:") ~typ:(id @-> returning bool) x
let accessibilityShouldUseUniqueId self = msg_send ~self ~cmd:(selector "accessibilityShouldUseUniqueId") ~typ:(returning bool)
let accessibilitySizeAttribute self = msg_send ~self ~cmd:(selector "accessibilitySizeAttribute") ~typ:(returning id)
let accessibilitySupportsOverriddenAttributes self = msg_send ~self ~cmd:(selector "accessibilitySupportsOverriddenAttributes") ~typ:(returning bool)
let accessibilityTopLevelUIElementAttribute self = msg_send ~self ~cmd:(selector "accessibilityTopLevelUIElementAttribute") ~typ:(returning id)
let accessibilityVerticalUnitDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityVerticalUnitDescriptionAttribute") ~typ:(returning id)
let accessibilityVisibleArea self = msg_send ~self ~cmd:(selector "accessibilityVisibleArea") ~typ:(returning double)
let accessibilityWindowAttribute self = msg_send ~self ~cmd:(selector "accessibilityWindowAttribute") ~typ:(returning id)
let accessibilityWindowPointForShowMenu self = msg_send_stret ~self ~cmd:(selector "accessibilityWindowPointForShowMenu") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let actionForLayer x ~forKey self = msg_send ~self ~cmd:(selector "actionForLayer:forKey:") ~typ:(id @-> id @-> returning id) x forKey
let activeDrawingRect self = msg_send_stret ~self ~cmd:(selector "activeDrawingRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let addConstraint x self = msg_send ~self ~cmd:(selector "addConstraint:") ~typ:(id @-> returning void) x
let addConstraints x self = msg_send ~self ~cmd:(selector "addConstraints:") ~typ:(id @-> returning void) x
let addCursorRect x ~cursor self = msg_send ~self ~cmd:(selector "addCursorRect:cursor:") ~typ:(CGRect.t @-> id @-> returning void) x cursor
let addGestureRecognizer x self = msg_send ~self ~cmd:(selector "addGestureRecognizer:") ~typ:(id @-> returning void) x
let addLayoutGuide x self = msg_send ~self ~cmd:(selector "addLayoutGuide:") ~typ:(id @-> returning void) x
let addSubview x self = msg_send ~self ~cmd:(selector "addSubview:") ~typ:(id @-> returning void) x
let addSubview' x ~positioned ~relativeTo self = msg_send ~self ~cmd:(selector "addSubview:positioned:relativeTo:") ~typ:(id @-> llong @-> id @-> returning void) x (LLong.of_int positioned) relativeTo
let addToPageSetup self = msg_send ~self ~cmd:(selector "addToPageSetup") ~typ:(returning void)
let addToolTipRect x ~owner ~userData self = msg_send ~self ~cmd:(selector "addToolTipRect:owner:userData:") ~typ:(CGRect.t @-> id @-> (ptr void) @-> returning llong) x owner userData
let addTrackingArea x self = msg_send ~self ~cmd:(selector "addTrackingArea:") ~typ:(id @-> returning void) x
let addTrackingRect x ~owner ~userData ~assumeInside self = msg_send ~self ~cmd:(selector "addTrackingRect:owner:userData:assumeInside:") ~typ:(CGRect.t @-> id @-> (ptr void) @-> bool @-> returning llong) x owner userData assumeInside
let adjustPageHeightNew x ~top ~bottom ~limit self = msg_send ~self ~cmd:(selector "adjustPageHeightNew:top:bottom:limit:") ~typ:((ptr double) @-> double @-> double @-> double @-> returning void) x top bottom limit
let adjustPageWidthNew x ~left ~right ~limit self = msg_send ~self ~cmd:(selector "adjustPageWidthNew:left:right:limit:") ~typ:((ptr double) @-> double @-> double @-> double @-> returning void) x left right limit
let adjustScroll x self = msg_send_stret ~self ~cmd:(selector "adjustScroll:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let alignmentLayoutRect self = msg_send ~self ~cmd:(selector "alignmentLayoutRect") ~typ:(returning id)
let alignmentRectForFrame x self = msg_send_stret ~self ~cmd:(selector "alignmentRectForFrame:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let alignmentRectInsets self = msg_send_stret ~self ~cmd:(selector "alignmentRectInsets") ~typ:(returning NSEdgeInsets.t) ~return_type:NSEdgeInsets.t
let allocateGState self = msg_send ~self ~cmd:(selector "allocateGState") ~typ:(returning void)
let allowedTouchTypes self = msg_send ~self ~cmd:(selector "allowedTouchTypes") ~typ:(returning ullong)
let allowsVibrancy self = msg_send ~self ~cmd:(selector "allowsVibrancy") ~typ:(returning bool)
let alphaValue self = msg_send ~self ~cmd:(selector "alphaValue") ~typ:(returning double)
let ancestorSharedWithView x self = msg_send ~self ~cmd:(selector "ancestorSharedWithView:") ~typ:(id @-> returning id) x
let animationForKey x self = msg_send ~self ~cmd:(selector "animationForKey:") ~typ:(id @-> returning id) x
let animations self = msg_send ~self ~cmd:(selector "animations") ~typ:(returning id)
let animator self = msg_send ~self ~cmd:(selector "animator") ~typ:(returning id)
let appearance self = msg_send ~self ~cmd:(selector "appearance") ~typ:(returning id)
let autoresizesSubviews self = msg_send ~self ~cmd:(selector "autoresizesSubviews") ~typ:(returning bool)
let autoresizingMask self = msg_send ~self ~cmd:(selector "autoresizingMask") ~typ:(returning ullong)
let autoscroll x self = msg_send ~self ~cmd:(selector "autoscroll:") ~typ:(id @-> returning bool) x
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning id)
let backgroundFilters self = msg_send ~self ~cmd:(selector "backgroundFilters") ~typ:(returning id)
let backingAlignedRect x ~options self = msg_send_stret ~self ~cmd:(selector "backingAlignedRect:options:") ~typ:(CGRect.t @-> ullong @-> returning CGRect.t) ~return_type:CGRect.t x (ULLong.of_int options)
let backingScaleFactor self = msg_send ~self ~cmd:(selector "backingScaleFactor") ~typ:(returning double)
let baselineOffsetFromBottom self = msg_send ~self ~cmd:(selector "baselineOffsetFromBottom") ~typ:(returning double)
let beginDocument self = msg_send ~self ~cmd:(selector "beginDocument") ~typ:(returning void)
let beginDraggingSessionWithItems x ~event ~source self = msg_send ~self ~cmd:(selector "beginDraggingSessionWithItems:event:source:") ~typ:(id @-> id @-> id @-> returning id) x event source
let beginPage x ~label ~bBox ~fonts self = msg_send ~self ~cmd:(selector "beginPage:label:bBox:fonts:") ~typ:(llong @-> id @-> CGRect.t @-> id @-> returning void) (LLong.of_int x) label bBox fonts
let beginPageInRect x ~atPlacement self = msg_send ~self ~cmd:(selector "beginPageInRect:atPlacement:") ~typ:(CGRect.t @-> CGPoint.t @-> returning void) x atPlacement
let beginPageSetupRect x ~placement self = msg_send ~self ~cmd:(selector "beginPageSetupRect:placement:") ~typ:(CGRect.t @-> CGPoint.t @-> returning void) x placement
let beginPrologueBBox x ~creationDate ~createdBy ~fonts ~forWhom ~pages ~title self = msg_send ~self ~cmd:(selector "beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:") ~typ:(CGRect.t @-> id @-> id @-> id @-> id @-> llong @-> id @-> returning void) x creationDate createdBy fonts forWhom (LLong.of_int pages) title
let beginSetup self = msg_send ~self ~cmd:(selector "beginSetup") ~typ:(returning void)
let beginTrailer self = msg_send ~self ~cmd:(selector "beginTrailer") ~typ:(returning void)
let bitmapImageRepForCachingDisplayInRect x self = msg_send ~self ~cmd:(selector "bitmapImageRepForCachingDisplayInRect:") ~typ:(CGRect.t @-> returning id) x
let bottomAnchor self = msg_send ~self ~cmd:(selector "bottomAnchor") ~typ:(returning id)
let bounds self = msg_send_stret ~self ~cmd:(selector "bounds") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let boundsOrigin self = msg_send_stret ~self ~cmd:(selector "boundsOrigin") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let boundsRotation self = msg_send ~self ~cmd:(selector "boundsRotation") ~typ:(returning double)
let boundsSize self = msg_send_stret ~self ~cmd:(selector "boundsSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let cacheDisplayInRect x ~toBitmapImageRep self = msg_send ~self ~cmd:(selector "cacheDisplayInRect:toBitmapImageRep:") ~typ:(CGRect.t @-> id @-> returning void) x toBitmapImageRep
let cacheDisplayInRect' x ~toBitmapImageRep ~includeSubviews self = msg_send ~self ~cmd:(selector "cacheDisplayInRect:toBitmapImageRep:includeSubviews:") ~typ:(CGRect.t @-> id @-> bool @-> returning void) x toBitmapImageRep includeSubviews
let canBecomeKeyView self = msg_send ~self ~cmd:(selector "canBecomeKeyView") ~typ:(returning bool)
let canDraw self = msg_send ~self ~cmd:(selector "canDraw") ~typ:(returning bool)
let canDrawConcurrently self = msg_send ~self ~cmd:(selector "canDrawConcurrently") ~typ:(returning bool)
let canDrawSubviewsIntoLayer self = msg_send ~self ~cmd:(selector "canDrawSubviewsIntoLayer") ~typ:(returning bool)
let canSmoothFontsInLayer self = msg_send ~self ~cmd:(selector "canSmoothFontsInLayer") ~typ:(returning bool)
let candidateListTouchBarItem self = msg_send ~self ~cmd:(selector "candidateListTouchBarItem") ~typ:(returning id)
let centerScanRect x self = msg_send_stret ~self ~cmd:(selector "centerScanRect:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let centerXAnchor self = msg_send ~self ~cmd:(selector "centerXAnchor") ~typ:(returning id)
let centerYAnchor self = msg_send ~self ~cmd:(selector "centerYAnchor") ~typ:(returning id)
let clipsToBounds self = msg_send ~self ~cmd:(selector "clipsToBounds") ~typ:(returning bool)
let colorSpace self = msg_send ~self ~cmd:(selector "colorSpace") ~typ:(returning id)
let compareGeometry x self = msg_send ~self ~cmd:(selector "compareGeometry:") ~typ:(id @-> returning llong) x
let compositingFilter self = msg_send ~self ~cmd:(selector "compositingFilter") ~typ:(returning id)
let compositingOperation self = msg_send ~self ~cmd:(selector "compositingOperation") ~typ:(returning ullong)
let computedSafeAreaInsets self = msg_send_stret ~self ~cmd:(selector "computedSafeAreaInsets") ~typ:(returning NSEdgeInsets.t) ~return_type:NSEdgeInsets.t
let computedSafeAreaRect self = msg_send_stret ~self ~cmd:(selector "computedSafeAreaRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let concludeDragOperation x self = msg_send ~self ~cmd:(selector "concludeDragOperation:") ~typ:(id @-> returning void) x
let constraintForIdentifier x self = msg_send ~self ~cmd:(selector "constraintForIdentifier:") ~typ:(id @-> returning id) x
let constraints self = msg_send ~self ~cmd:(selector "constraints") ~typ:(returning id)
let constraintsAffectingLayoutForOrientation x self = msg_send ~self ~cmd:(selector "constraintsAffectingLayoutForOrientation:") ~typ:(llong @-> returning id) (LLong.of_int x)
let constraintsAffectingLayoutForOrientation' x ~ofItem self = msg_send ~self ~cmd:(selector "constraintsAffectingLayoutForOrientation:ofItem:") ~typ:(llong @-> id @-> returning id) (LLong.of_int x) ofItem
let constraintsDidChangeInEngine x self = msg_send ~self ~cmd:(selector "constraintsDidChangeInEngine:") ~typ:(id @-> returning void) x
let contentCompressionResistancePriorityForOrientation x self = msg_send ~self ~cmd:(selector "contentCompressionResistancePriorityForOrientation:") ~typ:(llong @-> returning float) (LLong.of_int x)
let contentFilters self = msg_send ~self ~cmd:(selector "contentFilters") ~typ:(returning id)
let contentHuggingPriorityForOrientation x self = msg_send ~self ~cmd:(selector "contentHuggingPriorityForOrientation:") ~typ:(llong @-> returning float) (LLong.of_int x)
let contentStyle self = msg_send ~self ~cmd:(selector "contentStyle") ~typ:(returning id)
let convertPoint x ~fromView self = msg_send_stret ~self ~cmd:(selector "convertPoint:fromView:") ~typ:(CGPoint.t @-> id @-> returning CGPoint.t) ~return_type:CGPoint.t x fromView
let convertPoint' x ~toView self = msg_send_stret ~self ~cmd:(selector "convertPoint:toView:") ~typ:(CGPoint.t @-> id @-> returning CGPoint.t) ~return_type:CGPoint.t x toView
let convertPointFromBacking x self = msg_send_stret ~self ~cmd:(selector "convertPointFromBacking:") ~typ:(CGPoint.t @-> returning CGPoint.t) ~return_type:CGPoint.t x
let convertPointFromBase x self = msg_send_stret ~self ~cmd:(selector "convertPointFromBase:") ~typ:(CGPoint.t @-> returning CGPoint.t) ~return_type:CGPoint.t x
let convertPointFromLayer x self = msg_send_stret ~self ~cmd:(selector "convertPointFromLayer:") ~typ:(CGPoint.t @-> returning CGPoint.t) ~return_type:CGPoint.t x
let convertPointToBacking x self = msg_send_stret ~self ~cmd:(selector "convertPointToBacking:") ~typ:(CGPoint.t @-> returning CGPoint.t) ~return_type:CGPoint.t x
let convertPointToBase x self = msg_send_stret ~self ~cmd:(selector "convertPointToBase:") ~typ:(CGPoint.t @-> returning CGPoint.t) ~return_type:CGPoint.t x
let convertPointToLayer x self = msg_send_stret ~self ~cmd:(selector "convertPointToLayer:") ~typ:(CGPoint.t @-> returning CGPoint.t) ~return_type:CGPoint.t x
let convertRect x ~fromView self = msg_send_stret ~self ~cmd:(selector "convertRect:fromView:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x fromView
let convertRect' x ~toView self = msg_send_stret ~self ~cmd:(selector "convertRect:toView:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x toView
let convertRectFromBacking x self = msg_send_stret ~self ~cmd:(selector "convertRectFromBacking:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let convertRectFromBase x self = msg_send_stret ~self ~cmd:(selector "convertRectFromBase:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let convertRectFromLayer x self = msg_send_stret ~self ~cmd:(selector "convertRectFromLayer:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let convertRectToBacking x self = msg_send_stret ~self ~cmd:(selector "convertRectToBacking:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let convertRectToBase x self = msg_send_stret ~self ~cmd:(selector "convertRectToBase:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let convertRectToLayer x self = msg_send_stret ~self ~cmd:(selector "convertRectToLayer:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let convertSize x ~fromView self = msg_send_stret ~self ~cmd:(selector "convertSize:fromView:") ~typ:(CGSize.t @-> id @-> returning CGSize.t) ~return_type:CGSize.t x fromView
let convertSize' x ~toView self = msg_send_stret ~self ~cmd:(selector "convertSize:toView:") ~typ:(CGSize.t @-> id @-> returning CGSize.t) ~return_type:CGSize.t x toView
let convertSizeFromBacking x self = msg_send_stret ~self ~cmd:(selector "convertSizeFromBacking:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let convertSizeFromBase x self = msg_send_stret ~self ~cmd:(selector "convertSizeFromBase:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let convertSizeFromLayer x self = msg_send_stret ~self ~cmd:(selector "convertSizeFromLayer:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let convertSizeToBacking x self = msg_send_stret ~self ~cmd:(selector "convertSizeToBacking:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let convertSizeToBase x self = msg_send_stret ~self ~cmd:(selector "convertSizeToBase:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let convertSizeToLayer x self = msg_send_stret ~self ~cmd:(selector "convertSizeToLayer:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let cornerRadius self = msg_send ~self ~cmd:(selector "cornerRadius") ~typ:(returning double)
let cursorUpdate x self = msg_send ~self ~cmd:(selector "cursorUpdate:") ~typ:(id @-> returning void) x
let dataWithEPSInsideRect x self = msg_send ~self ~cmd:(selector "dataWithEPSInsideRect:") ~typ:(CGRect.t @-> returning id) x
let dataWithPDFInsideRect x self = msg_send ~self ~cmd:(selector "dataWithPDFInsideRect:") ~typ:(CGRect.t @-> returning id) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let declaredLayoutConstraints self = msg_send ~self ~cmd:(selector "declaredLayoutConstraints") ~typ:(returning id)
let declaredLayoutRules self = msg_send ~self ~cmd:(selector "declaredLayoutRules") ~typ:(returning id)
let deepestAccessibilityDescendants self = msg_send ~self ~cmd:(selector "deepestAccessibilityDescendants") ~typ:(returning id)
let designatedFocusRingView self = msg_send ~self ~cmd:(selector "designatedFocusRingView") ~typ:(returning id)
let didAddSubview x self = msg_send ~self ~cmd:(selector "didAddSubview:") ~typ:(id @-> returning void) x
let didBecomeActiveFirstResponder self = msg_send ~self ~cmd:(selector "didBecomeActiveFirstResponder") ~typ:(returning void)
let didChangeValueForKey x self = msg_send ~self ~cmd:(selector "didChangeValueForKey:") ~typ:(id @-> returning void) x
let didCloseMenu x ~withEvent self = msg_send ~self ~cmd:(selector "didCloseMenu:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let didResignActiveFirstResponder self = msg_send ~self ~cmd:(selector "didResignActiveFirstResponder") ~typ:(returning void)
let disableGeometryInWindowDidChangeNotification self = msg_send ~self ~cmd:(selector "disableGeometryInWindowDidChangeNotification") ~typ:(returning void)
let disableLayoutFlushing self = msg_send ~self ~cmd:(selector "disableLayoutFlushing") ~typ:(returning void)
let discardCursorRects self = msg_send ~self ~cmd:(selector "discardCursorRects") ~typ:(returning void)
let display self = msg_send ~self ~cmd:(selector "display") ~typ:(returning void)
let displayIfNeeded self = msg_send ~self ~cmd:(selector "displayIfNeeded") ~typ:(returning void)
let displayIfNeededIgnoringOpacity self = msg_send ~self ~cmd:(selector "displayIfNeededIgnoringOpacity") ~typ:(returning void)
let displayIfNeededInRect x self = msg_send ~self ~cmd:(selector "displayIfNeededInRect:") ~typ:(CGRect.t @-> returning void) x
let displayIfNeededInRectIgnoringOpacity x self = msg_send ~self ~cmd:(selector "displayIfNeededInRectIgnoringOpacity:") ~typ:(CGRect.t @-> returning void) x
let displayIgnoringOpacity self = msg_send ~self ~cmd:(selector "displayIgnoringOpacity") ~typ:(returning void)
let displayRect x self = msg_send ~self ~cmd:(selector "displayRect:") ~typ:(CGRect.t @-> returning void) x
let displayRectIgnoringOpacity x self = msg_send ~self ~cmd:(selector "displayRectIgnoringOpacity:") ~typ:(CGRect.t @-> returning void) x
let displayRectIgnoringOpacity' x ~inContext self = msg_send ~self ~cmd:(selector "displayRectIgnoringOpacity:inContext:") ~typ:(CGRect.t @-> id @-> returning void) x inContext
let dragFile x ~fromRect ~slideBack ~event self = msg_send ~self ~cmd:(selector "dragFile:fromRect:slideBack:event:") ~typ:(id @-> CGRect.t @-> bool @-> id @-> returning bool) x fromRect slideBack event
let dragImage x ~at ~offset ~event ~pasteboard ~source ~slideBack self = msg_send ~self ~cmd:(selector "dragImage:at:offset:event:pasteboard:source:slideBack:") ~typ:(id @-> CGPoint.t @-> CGSize.t @-> id @-> id @-> id @-> bool @-> returning void) x at offset event pasteboard source slideBack
let dragPromisedFilesOfTypes x ~fromRect ~source ~slideBack ~event self = msg_send ~self ~cmd:(selector "dragPromisedFilesOfTypes:fromRect:source:slideBack:event:") ~typ:(id @-> CGRect.t @-> id @-> bool @-> id @-> returning bool) x fromRect source slideBack event
let draggingEntered x self = msg_send ~self ~cmd:(selector "draggingEntered:") ~typ:(id @-> returning ullong) x
let draggingExited x self = msg_send ~self ~cmd:(selector "draggingExited:") ~typ:(id @-> returning void) x
let draggingUpdated x self = msg_send ~self ~cmd:(selector "draggingUpdated:") ~typ:(id @-> returning ullong) x
let drawFocusRingMask self = msg_send ~self ~cmd:(selector "drawFocusRingMask") ~typ:(returning void)
let drawLayer x ~inContext self = msg_send ~self ~cmd:(selector "drawLayer:inContext:") ~typ:(id @-> (ptr CGContext.t) @-> returning void) x inContext
let drawOverlayRect x self = msg_send ~self ~cmd:(selector "drawOverlayRect:") ~typ:(CGRect.t @-> returning void) x
let drawPageBorderWithSize x self = msg_send ~self ~cmd:(selector "drawPageBorderWithSize:") ~typ:(CGSize.t @-> returning void) x
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning void) x
let drawSheetBorderWithSize x self = msg_send ~self ~cmd:(selector "drawSheetBorderWithSize:") ~typ:(CGSize.t @-> returning void) x
let effectiveAppearance self = msg_send ~self ~cmd:(selector "effectiveAppearance") ~typ:(returning id)
let effectiveAppearanceDidChange self = msg_send ~self ~cmd:(selector "effectiveAppearanceDidChange") ~typ:(returning void)
let effectiveContentStyle self = msg_send ~self ~cmd:(selector "effectiveContentStyle") ~typ:(returning id)
let enableGeometryInWindowDidChangeNotification self = msg_send ~self ~cmd:(selector "enableGeometryInWindowDidChangeNotification") ~typ:(returning void)
let enableLayoutFlushing self = msg_send ~self ~cmd:(selector "enableLayoutFlushing") ~typ:(returning void)
let enclosingMenuItem self = msg_send ~self ~cmd:(selector "enclosingMenuItem") ~typ:(returning id)
let enclosingScrollView self = msg_send ~self ~cmd:(selector "enclosingScrollView") ~typ:(returning id)
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let endDocument self = msg_send ~self ~cmd:(selector "endDocument") ~typ:(returning void)
let endHeaderComments self = msg_send ~self ~cmd:(selector "endHeaderComments") ~typ:(returning void)
let endPage self = msg_send ~self ~cmd:(selector "endPage") ~typ:(returning void)
let endPageSetup self = msg_send ~self ~cmd:(selector "endPageSetup") ~typ:(returning void)
let endPrologue self = msg_send ~self ~cmd:(selector "endPrologue") ~typ:(returning void)
let endSetup self = msg_send ~self ~cmd:(selector "endSetup") ~typ:(returning void)
let endTrailer self = msg_send ~self ~cmd:(selector "endTrailer") ~typ:(returning void)
let engine x ~markerForConstraintToBreakAmongConstraints self = msg_send ~self ~cmd:(selector "engine:markerForConstraintToBreakAmongConstraints:") ~typ:(id @-> id @-> returning id) x markerForConstraintToBreakAmongConstraints
let engine' x ~willBreakConstraint ~dueToMutuallyExclusiveConstraints self = msg_send ~self ~cmd:(selector "engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:") ~typ:(id @-> id @-> id @-> returning void) x willBreakConstraint dueToMutuallyExclusiveConstraints
let enterFullScreenMode x ~withOptions self = msg_send ~self ~cmd:(selector "enterFullScreenMode:withOptions:") ~typ:(id @-> id @-> returning bool) x withOptions
let exerciseAmbiguityInLayout self = msg_send ~self ~cmd:(selector "exerciseAmbiguityInLayout") ~typ:(returning void)
let exitFullScreenModeWithOptions x self = msg_send ~self ~cmd:(selector "exitFullScreenModeWithOptions:") ~typ:(id @-> returning void) x
let firstBaselineAnchor self = msg_send ~self ~cmd:(selector "firstBaselineAnchor") ~typ:(returning id)
let firstBaselineOffsetFromTop self = msg_send ~self ~cmd:(selector "firstBaselineOffsetFromTop") ~typ:(returning double)
let fittingSize self = msg_send_stret ~self ~cmd:(selector "fittingSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let focusRingMaskBounds self = msg_send_stret ~self ~cmd:(selector "focusRingMaskBounds") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let focusRingType self = msg_send ~self ~cmd:(selector "focusRingType") ~typ:(returning ullong)
let fontSmoothingBackgroundColor self = msg_send ~self ~cmd:(selector "fontSmoothingBackgroundColor") ~typ:(returning id)
let frame self = msg_send_stret ~self ~cmd:(selector "frame") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let frameCenterRotation self = msg_send ~self ~cmd:(selector "frameCenterRotation") ~typ:(returning double)
let frameForAlignmentRect x self = msg_send_stret ~self ~cmd:(selector "frameForAlignmentRect:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let frameOrigin self = msg_send_stret ~self ~cmd:(selector "frameOrigin") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let frameRotation self = msg_send ~self ~cmd:(selector "frameRotation") ~typ:(returning double)
let frameSize self = msg_send_stret ~self ~cmd:(selector "frameSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let frameTransform self = msg_send_stret ~self ~cmd:(selector "frameTransform") ~typ:(returning CGAffineTransform.t) ~return_type:CGAffineTransform.t
let functionRow self = msg_send ~self ~cmd:(selector "functionRow") ~typ:(returning id)
let gState self = msg_send ~self ~cmd:(selector "gState") ~typ:(returning llong)
let geometryInWindowDidChange self = msg_send ~self ~cmd:(selector "geometryInWindowDidChange") ~typ:(returning void)
let gestureRecognizerShouldBegin x self = msg_send ~self ~cmd:(selector "gestureRecognizerShouldBegin:") ~typ:(id @-> returning bool) x
let gestureRecognizers self = msg_send ~self ~cmd:(selector "gestureRecognizers") ~typ:(returning id)
let gesturesEnabled self = msg_send ~self ~cmd:(selector "gesturesEnabled") ~typ:(returning bool)
let getRectsBeingDrawn x ~count self = msg_send ~self ~cmd:(selector "getRectsBeingDrawn:count:") ~typ:((ptr (ptr CGRect.t)) @-> (ptr llong) @-> returning void) x count
let getRectsExposedDuringLiveResize x ~count self = msg_send ~self ~cmd:(selector "getRectsExposedDuringLiveResize:count:") ~typ:((ptr CGRect.t) @-> (ptr llong) @-> returning void) x count
let hasAmbiguousLayout self = msg_send ~self ~cmd:(selector "hasAmbiguousLayout") ~typ:(returning bool)
let headerView self = msg_send ~self ~cmd:(selector "headerView") ~typ:(returning id)
let heartBeat x self = msg_send ~self ~cmd:(selector "heartBeat:") ~typ:((ptr void) @-> returning void) x
let heightAdjustLimit self = msg_send ~self ~cmd:(selector "heightAdjustLimit") ~typ:(returning double)
let heightAnchor self = msg_send ~self ~cmd:(selector "heightAnchor") ~typ:(returning id)
let helpRequested x self = msg_send ~self ~cmd:(selector "helpRequested:") ~typ:(id @-> returning void) x
let hideActiveFirstResponderIndication self = msg_send ~self ~cmd:(selector "hideActiveFirstResponderIndication") ~typ:(returning void)
let hitTest x self = msg_send ~self ~cmd:(selector "hitTest:") ~typ:(CGPoint.t @-> returning id) x
let identifier self = msg_send ~self ~cmd:(selector "identifier") ~typ:(returning id)
let ignoreHitTest self = msg_send ~self ~cmd:(selector "ignoreHitTest") ~typ:(returning bool)
let imageInRect x self = msg_send ~self ~cmd:(selector "imageInRect:") ~typ:(CGRect.t @-> returning id) x
let inLiveResize self = msg_send ~self ~cmd:(selector "inLiveResize") ~typ:(returning bool)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning id) x
let inputContext self = msg_send ~self ~cmd:(selector "inputContext") ~typ:(returning id)
let interpretKeyEvents x self = msg_send ~self ~cmd:(selector "interpretKeyEvents:") ~typ:(id @-> returning void) x
let intrinsicContentSize self = msg_send_stret ~self ~cmd:(selector "intrinsicContentSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let invalidateConstraints self = msg_send ~self ~cmd:(selector "invalidateConstraints") ~typ:(returning void)
let invalidateIntrinsicContentSize self = msg_send ~self ~cmd:(selector "invalidateIntrinsicContentSize") ~typ:(returning void)
let invalidateIntrinsicContentSizeForCell x self = msg_send ~self ~cmd:(selector "invalidateIntrinsicContentSizeForCell:") ~typ:(id @-> returning void) x
let isDescendantOf x self = msg_send ~self ~cmd:(selector "isDescendantOf:") ~typ:(id @-> returning bool) x
let isDrawingFindIndicator self = msg_send ~self ~cmd:(selector "isDrawingFindIndicator") ~typ:(returning bool)
let isFlipped self = msg_send ~self ~cmd:(selector "isFlipped") ~typ:(returning bool)
let isHidden self = msg_send ~self ~cmd:(selector "isHidden") ~typ:(returning bool)
let isHiddenOrHasHiddenAncestor self = msg_send ~self ~cmd:(selector "isHiddenOrHasHiddenAncestor") ~typ:(returning bool)
let isHorizontalContentSizeConstraintActive self = msg_send ~self ~cmd:(selector "isHorizontalContentSizeConstraintActive") ~typ:(returning bool)
let isInFullScreenMode self = msg_send ~self ~cmd:(selector "isInFullScreenMode") ~typ:(returning bool)
let isInTouchBar self = msg_send ~self ~cmd:(selector "isInTouchBar") ~typ:(returning bool)
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning bool)
let isRotatedFromBase self = msg_send ~self ~cmd:(selector "isRotatedFromBase") ~typ:(returning bool)
let isRotatedOrScaledFromBase self = msg_send ~self ~cmd:(selector "isRotatedOrScaledFromBase") ~typ:(returning bool)
let isVerticalContentSizeConstraintActive self = msg_send ~self ~cmd:(selector "isVerticalContentSizeConstraintActive") ~typ:(returning bool)
let knowsPageRange x self = msg_send ~self ~cmd:(selector "knowsPageRange:") ~typ:((ptr NSRange.t) @-> returning bool) x
let knowsPagesFirst x ~last self = msg_send ~self ~cmd:(selector "knowsPagesFirst:last:") ~typ:((ptr llong) @-> (ptr llong) @-> returning bool) x last
let lastBaselineAnchor self = msg_send ~self ~cmd:(selector "lastBaselineAnchor") ~typ:(returning id)
let lastBaselineOffsetFromBottom self = msg_send ~self ~cmd:(selector "lastBaselineOffsetFromBottom") ~typ:(returning double)
let layer self = msg_send ~self ~cmd:(selector "layer") ~typ:(returning id)
let layerContentsPlacement self = msg_send ~self ~cmd:(selector "layerContentsPlacement") ~typ:(returning llong)
let layerContentsRedrawPolicy self = msg_send ~self ~cmd:(selector "layerContentsRedrawPolicy") ~typ:(returning llong)
let layerUsesCoreImageFilters self = msg_send ~self ~cmd:(selector "layerUsesCoreImageFilters") ~typ:(returning bool)
let layout self = msg_send ~self ~cmd:(selector "layout") ~typ:(returning void)
let layoutGuides self = msg_send ~self ~cmd:(selector "layoutGuides") ~typ:(returning id)
let layoutMarginsGuide self = msg_send ~self ~cmd:(selector "layoutMarginsGuide") ~typ:(returning id)
let layoutRect self = msg_send ~self ~cmd:(selector "layoutRect") ~typ:(returning id)
let layoutSubtreeIfNeeded self = msg_send ~self ~cmd:(selector "layoutSubtreeIfNeeded") ~typ:(returning void)
let leadingAnchor self = msg_send ~self ~cmd:(selector "leadingAnchor") ~typ:(returning id)
let leftAnchor self = msg_send ~self ~cmd:(selector "leftAnchor") ~typ:(returning id)
let locationOfPrintRect x self = msg_send_stret ~self ~cmd:(selector "locationOfPrintRect:") ~typ:(CGRect.t @-> returning CGPoint.t) ~return_type:CGPoint.t x
let lockFocus self = msg_send ~self ~cmd:(selector "lockFocus") ~typ:(returning void)
let lockFocusIfCanDraw self = msg_send ~self ~cmd:(selector "lockFocusIfCanDraw") ~typ:(returning bool)
let lockFocusIfCanDrawInContext x self = msg_send ~self ~cmd:(selector "lockFocusIfCanDrawInContext:") ~typ:(id @-> returning bool) x
let loggingDescription self = msg_send ~self ~cmd:(selector "loggingDescription") ~typ:(returning id)
let makeBackingLayer self = msg_send ~self ~cmd:(selector "makeBackingLayer") ~typ:(returning id)
let maskView self = msg_send ~self ~cmd:(selector "maskView") ~typ:(returning id)
let measureMin x ~max ~ideal self = msg_send ~self ~cmd:(selector "measureMin:max:ideal:") ~typ:((ptr CGSize.t) @-> (ptr CGSize.t) @-> (ptr CGSize.t) @-> returning void) x max ideal
let menu self = msg_send ~self ~cmd:(selector "menu") ~typ:(returning id)
let menuForEvent x self = msg_send ~self ~cmd:(selector "menuForEvent:") ~typ:(id @-> returning id) x
let mouse x ~inRect self = msg_send ~self ~cmd:(selector "mouse:inRect:") ~typ:(CGPoint.t @-> CGRect.t @-> returning bool) x inRect
let mouseDownCanMoveWindow self = msg_send ~self ~cmd:(selector "mouseDownCanMoveWindow") ~typ:(returning bool)
let needsDisplay self = msg_send ~self ~cmd:(selector "needsDisplay") ~typ:(returning bool)
let needsLayout self = msg_send ~self ~cmd:(selector "needsLayout") ~typ:(returning bool)
let needsPanelToBecomeKey self = msg_send ~self ~cmd:(selector "needsPanelToBecomeKey") ~typ:(returning bool)
let needsToDrawRect x self = msg_send ~self ~cmd:(selector "needsToDrawRect:") ~typ:(CGRect.t @-> returning bool) x
let needsUpdateConstraints self = msg_send ~self ~cmd:(selector "needsUpdateConstraints") ~typ:(returning bool)
let nextEventMatchingMask x self = msg_send ~self ~cmd:(selector "nextEventMatchingMask:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let nextEventMatchingMask' x ~untilDate ~inMode ~dequeue self = msg_send ~self ~cmd:(selector "nextEventMatchingMask:untilDate:inMode:dequeue:") ~typ:(ullong @-> id @-> id @-> bool @-> returning id) (ULLong.of_int x) untilDate inMode dequeue
let nextKeyView self = msg_send ~self ~cmd:(selector "nextKeyView") ~typ:(returning id)
let nextValidKeyView self = msg_send ~self ~cmd:(selector "nextValidKeyView") ~typ:(returning id)
let noteFocusRingMaskChanged self = msg_send ~self ~cmd:(selector "noteFocusRingMaskChanged") ~typ:(returning void)
let opaqueAncestor self = msg_send ~self ~cmd:(selector "opaqueAncestor") ~typ:(returning id)
let overlayBounds self = msg_send_stret ~self ~cmd:(selector "overlayBounds") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let pageFooter self = msg_send ~self ~cmd:(selector "pageFooter") ~typ:(returning id)
let pageHeader self = msg_send ~self ~cmd:(selector "pageHeader") ~typ:(returning id)
let performDragOperation x self = msg_send ~self ~cmd:(selector "performDragOperation:") ~typ:(id @-> returning bool) x
let performKeyEquivalent x self = msg_send ~self ~cmd:(selector "performKeyEquivalent:") ~typ:(id @-> returning bool) x
let performMnemonic x self = msg_send ~self ~cmd:(selector "performMnemonic:") ~typ:(id @-> returning bool) x
let postsBoundsChangedNotifications self = msg_send ~self ~cmd:(selector "postsBoundsChangedNotifications") ~typ:(returning bool)
let postsFrameChangedNotifications self = msg_send ~self ~cmd:(selector "postsFrameChangedNotifications") ~typ:(returning bool)
let preferredLayoutAttributesFittingAttributes x self = msg_send ~self ~cmd:(selector "preferredLayoutAttributesFittingAttributes:") ~typ:(id @-> returning id) x
let prepareContentInRect x self = msg_send ~self ~cmd:(selector "prepareContentInRect:") ~typ:(CGRect.t @-> returning void) x
let prepareForDragOperation x self = msg_send ~self ~cmd:(selector "prepareForDragOperation:") ~typ:(id @-> returning bool) x
let prepareForMenu x ~withEvent self = msg_send ~self ~cmd:(selector "prepareForMenu:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let prepareForReuse self = msg_send ~self ~cmd:(selector "prepareForReuse") ~typ:(returning void)
let prepareMenu x ~withEvent self = msg_send ~self ~cmd:(selector "prepareMenu:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let preparedContentRect self = msg_send_stret ~self ~cmd:(selector "preparedContentRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let preservesContentDuringLiveResize self = msg_send ~self ~cmd:(selector "preservesContentDuringLiveResize") ~typ:(returning bool)
let pressureConfiguration self = msg_send ~self ~cmd:(selector "pressureConfiguration") ~typ:(returning id)
let previousKeyView self = msg_send ~self ~cmd:(selector "previousKeyView") ~typ:(returning id)
let previousValidKeyView self = msg_send ~self ~cmd:(selector "previousValidKeyView") ~typ:(returning id)
let print x self = msg_send ~self ~cmd:(selector "print:") ~typ:(id @-> returning void) x
let printJobTitle self = msg_send ~self ~cmd:(selector "printJobTitle") ~typ:(returning id)
let rectForPage x self = msg_send_stret ~self ~cmd:(selector "rectForPage:") ~typ:(llong @-> returning CGRect.t) ~return_type:CGRect.t (LLong.of_int x)
let rectForSmartMagnificationAtPoint x ~inRect self = msg_send_stret ~self ~cmd:(selector "rectForSmartMagnificationAtPoint:inRect:") ~typ:(CGPoint.t @-> CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x inRect
let rectPreservedDuringLiveResize self = msg_send_stret ~self ~cmd:(selector "rectPreservedDuringLiveResize") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let recursiveConstraintDescription self = msg_send ~self ~cmd:(selector "recursiveConstraintDescription") ~typ:(returning id)
let recursiveConstraintIdentifierDescription self = msg_send ~self ~cmd:(selector "recursiveConstraintIdentifierDescription") ~typ:(returning id)
let recursiveDescription self = msg_send ~self ~cmd:(selector "recursiveDescription") ~typ:(returning id)
let registerForDraggedTypes x self = msg_send ~self ~cmd:(selector "registerForDraggedTypes:") ~typ:(id @-> returning void) x
let registeredDraggedTypes self = msg_send ~self ~cmd:(selector "registeredDraggedTypes") ~typ:(returning id)
let releaseGState self = msg_send ~self ~cmd:(selector "releaseGState") ~typ:(returning void)
let removeAllGestureRecognizers self = msg_send ~self ~cmd:(selector "removeAllGestureRecognizers") ~typ:(returning void)
let removeAllToolTips self = msg_send ~self ~cmd:(selector "removeAllToolTips") ~typ:(returning void)
let removeConstraint x self = msg_send ~self ~cmd:(selector "removeConstraint:") ~typ:(id @-> returning void) x
let removeConstraintWithIdentifier x self = msg_send ~self ~cmd:(selector "removeConstraintWithIdentifier:") ~typ:(id @-> returning void) x
let removeConstraints x self = msg_send ~self ~cmd:(selector "removeConstraints:") ~typ:(id @-> returning void) x
let removeCursorRect x ~cursor self = msg_send ~self ~cmd:(selector "removeCursorRect:cursor:") ~typ:(CGRect.t @-> id @-> returning void) x cursor
let removeFromSuperview self = msg_send ~self ~cmd:(selector "removeFromSuperview") ~typ:(returning void)
let removeFromSuperviewWithoutNeedingDisplay self = msg_send ~self ~cmd:(selector "removeFromSuperviewWithoutNeedingDisplay") ~typ:(returning void)
let removeGestureRecognizer x self = msg_send ~self ~cmd:(selector "removeGestureRecognizer:") ~typ:(id @-> returning void) x
let removeLayoutGuide x self = msg_send ~self ~cmd:(selector "removeLayoutGuide:") ~typ:(id @-> returning void) x
let removeToolTip x self = msg_send ~self ~cmd:(selector "removeToolTip:") ~typ:(llong @-> returning void) (LLong.of_int x)
let removeTrackingArea x self = msg_send ~self ~cmd:(selector "removeTrackingArea:") ~typ:(id @-> returning void) x
let removeTrackingRect x self = msg_send ~self ~cmd:(selector "removeTrackingRect:") ~typ:(llong @-> returning void) (LLong.of_int x)
let renewGState self = msg_send ~self ~cmd:(selector "renewGState") ~typ:(returning void)
let replaceSubview x ~with_ self = msg_send ~self ~cmd:(selector "replaceSubview:with:") ~typ:(id @-> id @-> returning void) x with_
let replaceSubview' x ~with_ ~options ~completionHandler self = msg_send ~self ~cmd:(selector "replaceSubview:with:options:completionHandler:") ~typ:(id @-> id @-> ullong @-> (ptr void) @-> returning void) x with_ (ULLong.of_int options) completionHandler
let resetCursorRects self = msg_send ~self ~cmd:(selector "resetCursorRects") ~typ:(returning void)
let resizeSubviewsWithOldSize x self = msg_send ~self ~cmd:(selector "resizeSubviewsWithOldSize:") ~typ:(CGSize.t @-> returning void) x
let resizeWithOldSuperviewSize x self = msg_send ~self ~cmd:(selector "resizeWithOldSuperviewSize:") ~typ:(CGSize.t @-> returning void) x
let reuseIdentifier self = msg_send ~self ~cmd:(selector "reuseIdentifier") ~typ:(returning id)
let revealContext x ~rectsForItem self = msg_send ~self ~cmd:(selector "revealContext:rectsForItem:") ~typ:(id @-> id @-> returning id) x rectsForItem
let rightAnchor self = msg_send ~self ~cmd:(selector "rightAnchor") ~typ:(returning id)
let rightMouseDown x self = msg_send ~self ~cmd:(selector "rightMouseDown:") ~typ:(id @-> returning void) x
let rotateByAngle x self = msg_send ~self ~cmd:(selector "rotateByAngle:") ~typ:(double @-> returning void) x
let safeAreaLayoutGuide self = msg_send ~self ~cmd:(selector "safeAreaLayoutGuide") ~typ:(returning id)
let scaleUnitSquareToSize x self = msg_send ~self ~cmd:(selector "scaleUnitSquareToSize:") ~typ:(CGSize.t @-> returning void) x
let scrollPoint x self = msg_send ~self ~cmd:(selector "scrollPoint:") ~typ:(CGPoint.t @-> returning void) x
let scrollPoint' x ~fromView self = msg_send ~self ~cmd:(selector "scrollPoint:fromView:") ~typ:((ptr CGPoint.t) @-> id @-> returning void) x fromView
let scrollRect x ~by self = msg_send ~self ~cmd:(selector "scrollRect:by:") ~typ:(CGRect.t @-> CGSize.t @-> returning void) x by
let scrollRectToVisible x self = msg_send ~self ~cmd:(selector "scrollRectToVisible:") ~typ:(CGRect.t @-> returning bool) x
let scrollWheel x self = msg_send ~self ~cmd:(selector "scrollWheel:") ~typ:(id @-> returning void) x
let sendEvent x self = msg_send ~self ~cmd:(selector "sendEvent:") ~typ:(id @-> returning void) x
let setAcceptsTouchEvents x self = msg_send ~self ~cmd:(selector "setAcceptsTouchEvents:") ~typ:(bool @-> returning void) x
let setAllowedTouchTypes x self = msg_send ~self ~cmd:(selector "setAllowedTouchTypes:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setAllowsVibrancy x self = msg_send ~self ~cmd:(selector "setAllowsVibrancy:") ~typ:(bool @-> returning void) x
let setAlphaValue x self = msg_send ~self ~cmd:(selector "setAlphaValue:") ~typ:(double @-> returning void) x
let setAnimations x self = msg_send ~self ~cmd:(selector "setAnimations:") ~typ:(id @-> returning void) x
let setAppearance x self = msg_send ~self ~cmd:(selector "setAppearance:") ~typ:(id @-> returning void) x
let setAutoresizesSubviews x self = msg_send ~self ~cmd:(selector "setAutoresizesSubviews:") ~typ:(bool @-> returning void) x
let setAutoresizingMask x self = msg_send ~self ~cmd:(selector "setAutoresizingMask:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning void) x
let setBackgroundFilters x self = msg_send ~self ~cmd:(selector "setBackgroundFilters:") ~typ:(id @-> returning void) x
let setBounds x self = msg_send ~self ~cmd:(selector "setBounds:") ~typ:(CGRect.t @-> returning void) x
let setBoundsOrigin x self = msg_send ~self ~cmd:(selector "setBoundsOrigin:") ~typ:(CGPoint.t @-> returning void) x
let setBoundsRotation x self = msg_send ~self ~cmd:(selector "setBoundsRotation:") ~typ:(double @-> returning void) x
let setBoundsSize x self = msg_send ~self ~cmd:(selector "setBoundsSize:") ~typ:(CGSize.t @-> returning void) x
let setCanDrawConcurrently x self = msg_send ~self ~cmd:(selector "setCanDrawConcurrently:") ~typ:(bool @-> returning void) x
let setCanDrawSubviewsIntoLayer x self = msg_send ~self ~cmd:(selector "setCanDrawSubviewsIntoLayer:") ~typ:(bool @-> returning void) x
let setClipsToBounds x self = msg_send ~self ~cmd:(selector "setClipsToBounds:") ~typ:(bool @-> returning void) x
let setCompositingFilter x self = msg_send ~self ~cmd:(selector "setCompositingFilter:") ~typ:(id @-> returning void) x
let setCompositingOperation x self = msg_send ~self ~cmd:(selector "setCompositingOperation:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setContentCompressionResistancePriority x ~forOrientation self = msg_send ~self ~cmd:(selector "setContentCompressionResistancePriority:forOrientation:") ~typ:(float @-> llong @-> returning void) x (LLong.of_int forOrientation)
let setContentFilters x self = msg_send ~self ~cmd:(selector "setContentFilters:") ~typ:(id @-> returning void) x
let setContentHuggingPriority x ~forOrientation self = msg_send ~self ~cmd:(selector "setContentHuggingPriority:forOrientation:") ~typ:(float @-> llong @-> returning void) x (LLong.of_int forOrientation)
let setContentStyle x self = msg_send ~self ~cmd:(selector "setContentStyle:") ~typ:(id @-> returning void) x
let setCornerRadius x self = msg_send ~self ~cmd:(selector "setCornerRadius:") ~typ:(double @-> returning void) x
let setFlipped x self = msg_send ~self ~cmd:(selector "setFlipped:") ~typ:(bool @-> returning void) x
let setFocusRingType x self = msg_send ~self ~cmd:(selector "setFocusRingType:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setFontSmoothingBackgroundColor x self = msg_send ~self ~cmd:(selector "setFontSmoothingBackgroundColor:") ~typ:(id @-> returning void) x
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning void) x
let setFrameCenterRotation x self = msg_send ~self ~cmd:(selector "setFrameCenterRotation:") ~typ:(double @-> returning void) x
let setFrameOrigin x self = msg_send ~self ~cmd:(selector "setFrameOrigin:") ~typ:(CGPoint.t @-> returning void) x
let setFrameRotation x self = msg_send ~self ~cmd:(selector "setFrameRotation:") ~typ:(double @-> returning void) x
let setFrameSize x self = msg_send ~self ~cmd:(selector "setFrameSize:") ~typ:(CGSize.t @-> returning void) x
let setFrameTransform x self = msg_send ~self ~cmd:(selector "setFrameTransform:") ~typ:(CGAffineTransform.t @-> returning void) x
let setGestureRecognizers x self = msg_send ~self ~cmd:(selector "setGestureRecognizers:") ~typ:(id @-> returning void) x
let setGesturesEnabled x self = msg_send ~self ~cmd:(selector "setGesturesEnabled:") ~typ:(bool @-> returning void) x
let setHidden x self = msg_send ~self ~cmd:(selector "setHidden:") ~typ:(bool @-> returning void) x
let setHorizontalContentSizeConstraintActive x self = msg_send ~self ~cmd:(selector "setHorizontalContentSizeConstraintActive:") ~typ:(bool @-> returning void) x
let setIdentifier x self = msg_send ~self ~cmd:(selector "setIdentifier:") ~typ:(id @-> returning void) x
let setIgnoreHitTest x self = msg_send ~self ~cmd:(selector "setIgnoreHitTest:") ~typ:(bool @-> returning void) x
let setKeyboardFocusRingNeedsDisplayInRect x self = msg_send ~self ~cmd:(selector "setKeyboardFocusRingNeedsDisplayInRect:") ~typ:(CGRect.t @-> returning void) x
let setLayer x self = msg_send ~self ~cmd:(selector "setLayer:") ~typ:(id @-> returning void) x
let setLayerContentsPlacement x self = msg_send ~self ~cmd:(selector "setLayerContentsPlacement:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setLayerContentsRedrawPolicy x self = msg_send ~self ~cmd:(selector "setLayerContentsRedrawPolicy:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setLayerUsesCoreImageFilters x self = msg_send ~self ~cmd:(selector "setLayerUsesCoreImageFilters:") ~typ:(bool @-> returning void) x
let setMaskView x self = msg_send ~self ~cmd:(selector "setMaskView:") ~typ:(id @-> returning void) x
let setMenu x self = msg_send ~self ~cmd:(selector "setMenu:") ~typ:(id @-> returning void) x
let setNeedsDisplay x self = msg_send ~self ~cmd:(selector "setNeedsDisplay:") ~typ:(bool @-> returning void) x
let setNeedsDisplayInRect x self = msg_send ~self ~cmd:(selector "setNeedsDisplayInRect:") ~typ:(CGRect.t @-> returning void) x
let setNeedsLayout x self = msg_send ~self ~cmd:(selector "setNeedsLayout:") ~typ:(bool @-> returning void) x
let setNeedsUpdateConstraints x self = msg_send ~self ~cmd:(selector "setNeedsUpdateConstraints:") ~typ:(bool @-> returning void) x
let setNextKeyView x self = msg_send ~self ~cmd:(selector "setNextKeyView:") ~typ:(id @-> returning void) x
let setNextResponder x self = msg_send ~self ~cmd:(selector "setNextResponder:") ~typ:(id @-> returning void) x
let setOpaque x self = msg_send ~self ~cmd:(selector "setOpaque:") ~typ:(bool @-> returning void) x
let setPostsBoundsChangedNotifications x self = msg_send ~self ~cmd:(selector "setPostsBoundsChangedNotifications:") ~typ:(bool @-> returning void) x
let setPostsFrameChangedNotifications x self = msg_send ~self ~cmd:(selector "setPostsFrameChangedNotifications:") ~typ:(bool @-> returning void) x
let setPreparedContentRect x self = msg_send ~self ~cmd:(selector "setPreparedContentRect:") ~typ:(CGRect.t @-> returning void) x
let setPressureConfiguration x self = msg_send ~self ~cmd:(selector "setPressureConfiguration:") ~typ:(id @-> returning void) x
let setShadow x self = msg_send ~self ~cmd:(selector "setShadow:") ~typ:(id @-> returning void) x
let setShouldBeArchived x self = msg_send ~self ~cmd:(selector "setShouldBeArchived:") ~typ:(bool @-> returning void) x
let setSubviews x self = msg_send ~self ~cmd:(selector "setSubviews:") ~typ:(id @-> returning void) x
let setToolTip x self = msg_send ~self ~cmd:(selector "setToolTip:") ~typ:(id @-> returning void) x
let setTranslatesAutoresizingMaskIntoConstraints x self = msg_send ~self ~cmd:(selector "setTranslatesAutoresizingMaskIntoConstraints:") ~typ:(bool @-> returning void) x
let setUpGState self = msg_send ~self ~cmd:(selector "setUpGState") ~typ:(returning void)
let setUpdateLayerHandler x self = msg_send ~self ~cmd:(selector "setUpdateLayerHandler:") ~typ:((ptr void) @-> returning void) x
let setUserInterfaceItemIdentifier x self = msg_send ~self ~cmd:(selector "setUserInterfaceItemIdentifier:") ~typ:(id @-> returning void) x
let setUserInterfaceLayoutDirection x self = msg_send ~self ~cmd:(selector "setUserInterfaceLayoutDirection:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setUsesConstraintsInsteadOfAutoresizing x self = msg_send ~self ~cmd:(selector "setUsesConstraintsInsteadOfAutoresizing:") ~typ:(bool @-> returning void) x
let setValue x ~forKeyPath self = msg_send ~self ~cmd:(selector "setValue:forKeyPath:") ~typ:(id @-> id @-> returning void) x forKeyPath
let setVerticalContentSizeConstraintActive x self = msg_send ~self ~cmd:(selector "setVerticalContentSizeConstraintActive:") ~typ:(bool @-> returning void) x
let setWantsBestResolutionOpenGLSurface x self = msg_send ~self ~cmd:(selector "setWantsBestResolutionOpenGLSurface:") ~typ:(bool @-> returning void) x
let setWantsExtendedDynamicRange x self = msg_send ~self ~cmd:(selector "setWantsExtendedDynamicRange:") ~typ:(bool @-> returning void) x
let setWantsExtendedDynamicRangeOpenGLSurface x self = msg_send ~self ~cmd:(selector "setWantsExtendedDynamicRangeOpenGLSurface:") ~typ:(bool @-> returning void) x
let setWantsLayer x self = msg_send ~self ~cmd:(selector "setWantsLayer:") ~typ:(bool @-> returning void) x
let setWantsRestingTouches x self = msg_send ~self ~cmd:(selector "setWantsRestingTouches:") ~typ:(bool @-> returning void) x
let shadow self = msg_send ~self ~cmd:(selector "shadow") ~typ:(returning id)
let shouldBeArchived self = msg_send ~self ~cmd:(selector "shouldBeArchived") ~typ:(returning bool)
let shouldBeTreatedAsInkEvent x self = msg_send ~self ~cmd:(selector "shouldBeTreatedAsInkEvent:") ~typ:(id @-> returning bool) x
let shouldDelayWindowOrderingForEvent x self = msg_send ~self ~cmd:(selector "shouldDelayWindowOrderingForEvent:") ~typ:(id @-> returning bool) x
let shouldDrawColor self = msg_send ~self ~cmd:(selector "shouldDrawColor") ~typ:(returning bool)
let shouldSetFontSmoothingBackgroundColor self = msg_send ~self ~cmd:(selector "shouldSetFontSmoothingBackgroundColor") ~typ:(returning bool)
let showActiveFirstResponderIndication self = msg_send ~self ~cmd:(selector "showActiveFirstResponderIndication") ~typ:(returning void)
let showDefinitionForAttributedString x ~atPoint self = msg_send ~self ~cmd:(selector "showDefinitionForAttributedString:atPoint:") ~typ:(id @-> CGPoint.t @-> returning void) x atPoint
let showDefinitionForAttributedString' x ~range ~options ~baselineOriginProvider self = msg_send ~self ~cmd:(selector "showDefinitionForAttributedString:range:options:baselineOriginProvider:") ~typ:(id @-> NSRange.t @-> id @-> (ptr void) @-> returning void) x range options baselineOriginProvider
let solutionDidChangeInEngine x self = msg_send ~self ~cmd:(selector "solutionDidChangeInEngine:") ~typ:(id @-> returning void) x
let sortSubviewsUsingBlock x self = msg_send ~self ~cmd:(selector "sortSubviewsUsingBlock:") ~typ:((ptr void) @-> returning void) x
let sortSubviewsUsingFunction x ~context self = msg_send ~self ~cmd:(selector "sortSubviewsUsingFunction:context:") ~typ:((ptr (ptr void)) @-> (ptr void) @-> returning void) x context
let subviews self = msg_send ~self ~cmd:(selector "subviews") ~typ:(returning id)
let superview self = msg_send ~self ~cmd:(selector "superview") ~typ:(returning id)
let tag self = msg_send ~self ~cmd:(selector "tag") ~typ:(returning llong)
let textLayerShouldEnableFontSmoothing x self = msg_send ~self ~cmd:(selector "textLayerShouldEnableFontSmoothing:") ~typ:(id @-> returning bool) x
let toolTip self = msg_send ~self ~cmd:(selector "toolTip") ~typ:(returning id)
let topAnchor self = msg_send ~self ~cmd:(selector "topAnchor") ~typ:(returning id)
let touchBarHitTestInsets self = msg_send_stret ~self ~cmd:(selector "touchBarHitTestInsets") ~typ:(returning NSEdgeInsets.t) ~return_type:NSEdgeInsets.t
let trackEventsMatchingMask x ~timeout ~mode ~handler self = msg_send ~self ~cmd:(selector "trackEventsMatchingMask:timeout:mode:handler:") ~typ:(ullong @-> double @-> id @-> (ptr void) @-> returning void) (ULLong.of_int x) timeout mode handler
let trackingAreas self = msg_send ~self ~cmd:(selector "trackingAreas") ~typ:(returning id)
let trailingAnchor self = msg_send ~self ~cmd:(selector "trailingAnchor") ~typ:(returning id)
let translateOriginToPoint x self = msg_send ~self ~cmd:(selector "translateOriginToPoint:") ~typ:(CGPoint.t @-> returning void) x
let translateRectsNeedingDisplayInRect x ~by self = msg_send ~self ~cmd:(selector "translateRectsNeedingDisplayInRect:by:") ~typ:(CGRect.t @-> CGSize.t @-> returning void) x by
let translatesAutoresizingMaskIntoConstraints self = msg_send ~self ~cmd:(selector "translatesAutoresizingMaskIntoConstraints") ~typ:(returning bool)
let unlockFocus self = msg_send ~self ~cmd:(selector "unlockFocus") ~typ:(returning void)
let unregisterDraggedTypes self = msg_send ~self ~cmd:(selector "unregisterDraggedTypes") ~typ:(returning void)
let updateConstraints self = msg_send ~self ~cmd:(selector "updateConstraints") ~typ:(returning void)
let updateConstraintsForSubtreeIfNeeded self = msg_send ~self ~cmd:(selector "updateConstraintsForSubtreeIfNeeded") ~typ:(returning void)
let updateLayer self = msg_send ~self ~cmd:(selector "updateLayer") ~typ:(returning void)
let updateLayerHandler self = msg_send ~self ~cmd:(selector "updateLayerHandler") ~typ:(returning (ptr void))
let updateTrackingAreas self = msg_send ~self ~cmd:(selector "updateTrackingAreas") ~typ:(returning void)
let userInterfaceItemIdentifier self = msg_send ~self ~cmd:(selector "userInterfaceItemIdentifier") ~typ:(returning id)
let userInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "userInterfaceLayoutDirection") ~typ:(returning llong)
let usesConstraintsInsteadOfAutoresizing self = msg_send ~self ~cmd:(selector "usesConstraintsInsteadOfAutoresizing") ~typ:(returning bool)
let view x ~customToolTip ~fadeOutAllowedForToolTipWithDisplayInfo self = msg_send ~self ~cmd:(selector "view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:") ~typ:(id @-> llong @-> id @-> returning bool) x (LLong.of_int customToolTip) fadeOutAllowedForToolTipWithDisplayInfo
let view1 x ~customToolTip ~frameForToolTipWithDisplayInfo self = msg_send_stret ~self ~cmd:(selector "view:customToolTip:frameForToolTipWithDisplayInfo:") ~typ:(id @-> llong @-> id @-> returning CGRect.t) ~return_type:CGRect.t x (LLong.of_int customToolTip) frameForToolTipWithDisplayInfo
let view2 x ~customToolTip ~drawInView ~displayInfo self = msg_send ~self ~cmd:(selector "view:customToolTip:drawInView:displayInfo:") ~typ:(id @-> llong @-> id @-> id @-> returning void) x (LLong.of_int customToolTip) drawInView displayInfo
let viewDidChangeBackingProperties self = msg_send ~self ~cmd:(selector "viewDidChangeBackingProperties") ~typ:(returning void)
let viewDidChangeBackingProperties' x self = msg_send ~self ~cmd:(selector "viewDidChangeBackingProperties:") ~typ:(id @-> returning void) x
let viewDidChangeEffectiveAppearance self = msg_send ~self ~cmd:(selector "viewDidChangeEffectiveAppearance") ~typ:(returning void)
let viewDidEndLiveResize self = msg_send ~self ~cmd:(selector "viewDidEndLiveResize") ~typ:(returning void)
let viewDidHide self = msg_send ~self ~cmd:(selector "viewDidHide") ~typ:(returning void)
let viewDidMoveToSuperview self = msg_send ~self ~cmd:(selector "viewDidMoveToSuperview") ~typ:(returning void)
let viewDidMoveToWindow self = msg_send ~self ~cmd:(selector "viewDidMoveToWindow") ~typ:(returning void)
let viewDidUnhide self = msg_send ~self ~cmd:(selector "viewDidUnhide") ~typ:(returning void)
let viewWillDraw self = msg_send ~self ~cmd:(selector "viewWillDraw") ~typ:(returning void)
let viewWillMoveToSuperview x self = msg_send ~self ~cmd:(selector "viewWillMoveToSuperview:") ~typ:(id @-> returning void) x
let viewWillMoveToWindow x self = msg_send ~self ~cmd:(selector "viewWillMoveToWindow:") ~typ:(id @-> returning void) x
let viewWillStartLiveResize self = msg_send ~self ~cmd:(selector "viewWillStartLiveResize") ~typ:(returning void)
let viewWithTag x self = msg_send ~self ~cmd:(selector "viewWithTag:") ~typ:(llong @-> returning id) (LLong.of_int x)
let visibleAccessibleOrLeafSubviews self = msg_send ~self ~cmd:(selector "visibleAccessibleOrLeafSubviews") ~typ:(returning id)
let visibleRect self = msg_send_stret ~self ~cmd:(selector "visibleRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let wantsBestResolutionOpenGLSurface self = msg_send ~self ~cmd:(selector "wantsBestResolutionOpenGLSurface") ~typ:(returning bool)
let wantsDefaultClipping self = msg_send ~self ~cmd:(selector "wantsDefaultClipping") ~typ:(returning bool)
let wantsExtendedDynamicRange self = msg_send ~self ~cmd:(selector "wantsExtendedDynamicRange") ~typ:(returning bool)
let wantsExtendedDynamicRangeOpenGLSurface self = msg_send ~self ~cmd:(selector "wantsExtendedDynamicRangeOpenGLSurface") ~typ:(returning bool)
let wantsLayer self = msg_send ~self ~cmd:(selector "wantsLayer") ~typ:(returning bool)
let wantsRestingTouches self = msg_send ~self ~cmd:(selector "wantsRestingTouches") ~typ:(returning bool)
let wantsUpdateLayer self = msg_send ~self ~cmd:(selector "wantsUpdateLayer") ~typ:(returning bool)
let widthAdjustLimit self = msg_send ~self ~cmd:(selector "widthAdjustLimit") ~typ:(returning double)
let widthAnchor self = msg_send ~self ~cmd:(selector "widthAnchor") ~typ:(returning id)
let willOpenMenu x ~withEvent self = msg_send ~self ~cmd:(selector "willOpenMenu:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let willRemoveSubview x self = msg_send ~self ~cmd:(selector "willRemoveSubview:") ~typ:(id @-> returning void) x
let willSendMenuNeedsUpdate x ~withEvent self = msg_send ~self ~cmd:(selector "willSendMenuNeedsUpdate:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let window self = msg_send ~self ~cmd:(selector "window") ~typ:(returning id)
let worksWhenModal self = msg_send ~self ~cmd:(selector "worksWhenModal") ~typ:(returning bool)
let writeEPSInsideRect x ~toPasteboard self = msg_send ~self ~cmd:(selector "writeEPSInsideRect:toPasteboard:") ~typ:(CGRect.t @-> id @-> returning void) x toPasteboard
let writePDFInsideRect x ~toPasteboard self = msg_send ~self ~cmd:(selector "writePDFInsideRect:toPasteboard:") ~typ:(CGRect.t @-> id @-> returning void) x toPasteboard