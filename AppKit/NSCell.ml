(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation

(** Apple docs: {{:https://developer.apple.com/documentation/appkit/nscell?language=objc}NSCell} *)

let self = get_class "NSCell"

let acceptsFirstResponder self = msg_send ~self ~cmd:(selector "acceptsFirstResponder") ~typ:(returning bool)
let accessibilityActionDescription x self = msg_send ~self ~cmd:(selector "accessibilityActionDescription:") ~typ:(id @-> returning id) x
let accessibilityActionNames self = msg_send ~self ~cmd:(selector "accessibilityActionNames") ~typ:(returning id)
let accessibilityActivationPoint self = msg_send ~self ~cmd:(selector "accessibilityActivationPoint") ~typ:(returning CGPoint.t)
let accessibilityAllowedValues self = msg_send ~self ~cmd:(selector "accessibilityAllowedValues") ~typ:(returning id)
let accessibilityApplicationFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityApplicationFocusedUIElement") ~typ:(returning id)
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning id)
let accessibilityAttributeValue x self = msg_send ~self ~cmd:(selector "accessibilityAttributeValue:") ~typ:(id @-> returning id) x
let accessibilityAttributedStringForRange x self = msg_send ~self ~cmd:(selector "accessibilityAttributedStringForRange:") ~typ:(NSRange.t @-> returning id) x
let accessibilityAttributedStringForRangeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityAttributedStringForRangeAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityAttributedUserInputLabels self = msg_send ~self ~cmd:(selector "accessibilityAttributedUserInputLabels") ~typ:(returning id)
let accessibilityAuditContrast self = msg_send ~self ~cmd:(selector "accessibilityAuditContrast") ~typ:(returning id)
let accessibilityAuditHierarchy self = msg_send ~self ~cmd:(selector "accessibilityAuditHierarchy") ~typ:(returning id)
let accessibilityAuditIssues self = msg_send ~self ~cmd:(selector "accessibilityAuditIssues") ~typ:(returning id)
let accessibilityAuditIssuesAttribute self = msg_send ~self ~cmd:(selector "accessibilityAuditIssuesAttribute") ~typ:(returning id)
let accessibilityAuditLabel self = msg_send ~self ~cmd:(selector "accessibilityAuditLabel") ~typ:(returning id)
let accessibilityAuditParent self = msg_send ~self ~cmd:(selector "accessibilityAuditParent") ~typ:(returning id)
let accessibilityBoundsForRangeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityBoundsForRangeAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityCancelButton self = msg_send ~self ~cmd:(selector "accessibilityCancelButton") ~typ:(returning id)
let accessibilityCellForColumn x ~row self = msg_send ~self ~cmd:(selector "accessibilityCellForColumn:row:") ~typ:(llong @-> llong @-> returning id) (LLong.of_int x) (LLong.of_int row)
let accessibilityChartDescriptor self = msg_send ~self ~cmd:(selector "accessibilityChartDescriptor") ~typ:(returning id)
let accessibilityChildren self = msg_send ~self ~cmd:(selector "accessibilityChildren") ~typ:(returning id)
let accessibilityChildrenInNavigationOrder self = msg_send ~self ~cmd:(selector "accessibilityChildrenInNavigationOrder") ~typ:(returning id)
let accessibilityClearButton self = msg_send ~self ~cmd:(selector "accessibilityClearButton") ~typ:(returning id)
let accessibilityCloseButton self = msg_send ~self ~cmd:(selector "accessibilityCloseButton") ~typ:(returning id)
let accessibilityColumnCount self = msg_send ~self ~cmd:(selector "accessibilityColumnCount") ~typ:(returning llong)
let accessibilityColumnHeaderUIElements self = msg_send ~self ~cmd:(selector "accessibilityColumnHeaderUIElements") ~typ:(returning id)
let accessibilityColumnIndexRange self = msg_send ~self ~cmd:(selector "accessibilityColumnIndexRange") ~typ:(returning NSRange.t)
let accessibilityColumnTitles self = msg_send ~self ~cmd:(selector "accessibilityColumnTitles") ~typ:(returning id)
let accessibilityColumns self = msg_send ~self ~cmd:(selector "accessibilityColumns") ~typ:(returning id)
let accessibilityContainerType self = msg_send ~self ~cmd:(selector "accessibilityContainerType") ~typ:(returning llong)
let accessibilityContentSiblingAbove self = msg_send ~self ~cmd:(selector "accessibilityContentSiblingAbove") ~typ:(returning id)
let accessibilityContentSiblingBelow self = msg_send ~self ~cmd:(selector "accessibilityContentSiblingBelow") ~typ:(returning id)
let accessibilityContents self = msg_send ~self ~cmd:(selector "accessibilityContents") ~typ:(returning id)
let accessibilityCriticalValue self = msg_send ~self ~cmd:(selector "accessibilityCriticalValue") ~typ:(returning id)
let accessibilityCurrentEditor self = msg_send ~self ~cmd:(selector "accessibilityCurrentEditor") ~typ:(returning id)
let accessibilityCustomActions self = msg_send ~self ~cmd:(selector "accessibilityCustomActions") ~typ:(returning id)
let accessibilityCustomChoosers self = msg_send ~self ~cmd:(selector "accessibilityCustomChoosers") ~typ:(returning id)
let accessibilityCustomContent self = msg_send ~self ~cmd:(selector "accessibilityCustomContent") ~typ:(returning id)
let accessibilityCustomRotors self = msg_send ~self ~cmd:(selector "accessibilityCustomRotors") ~typ:(returning id)
let accessibilityDecrementButton self = msg_send ~self ~cmd:(selector "accessibilityDecrementButton") ~typ:(returning id)
let accessibilityDefaultButton self = msg_send ~self ~cmd:(selector "accessibilityDefaultButton") ~typ:(returning id)
let accessibilityDisclosedByRow self = msg_send ~self ~cmd:(selector "accessibilityDisclosedByRow") ~typ:(returning id)
let accessibilityDisclosedRows self = msg_send ~self ~cmd:(selector "accessibilityDisclosedRows") ~typ:(returning id)
let accessibilityDisclosureLevel self = msg_send ~self ~cmd:(selector "accessibilityDisclosureLevel") ~typ:(returning llong)
let accessibilityDocument self = msg_send ~self ~cmd:(selector "accessibilityDocument") ~typ:(returning id)
let accessibilityDrawFocusRing self = msg_send ~self ~cmd:(selector "accessibilityDrawFocusRing") ~typ:(returning void)
let accessibilityElementWithParent x self = msg_send ~self ~cmd:(selector "accessibilityElementWithParent:") ~typ:(id @-> returning id) x
let accessibilityEmbeddedImageDescription self = msg_send ~self ~cmd:(selector "accessibilityEmbeddedImageDescription") ~typ:(returning id)
let accessibilityEnabledAttribute self = msg_send ~self ~cmd:(selector "accessibilityEnabledAttribute") ~typ:(returning id)
let accessibilityExtrasMenuBar self = msg_send ~self ~cmd:(selector "accessibilityExtrasMenuBar") ~typ:(returning id)
let accessibilityFilename self = msg_send ~self ~cmd:(selector "accessibilityFilename") ~typ:(returning id)
let accessibilityFocusedAttribute self = msg_send ~self ~cmd:(selector "accessibilityFocusedAttribute") ~typ:(returning id)
let accessibilityFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityFocusedUIElement") ~typ:(returning id)
let accessibilityFocusedWindow self = msg_send ~self ~cmd:(selector "accessibilityFocusedWindow") ~typ:(returning id)
let accessibilityFrame self = msg_send ~self ~cmd:(selector "accessibilityFrame") ~typ:(returning CGRect.t)
let accessibilityFrameForRange x self = msg_send ~self ~cmd:(selector "accessibilityFrameForRange:") ~typ:(NSRange.t @-> returning CGRect.t) x
let accessibilityFrameInParentSpace self = msg_send ~self ~cmd:(selector "accessibilityFrameInParentSpace") ~typ:(returning CGRect.t)
let accessibilityFullScreenButton self = msg_send ~self ~cmd:(selector "accessibilityFullScreenButton") ~typ:(returning id)
let accessibilityFunctionRowTopLevelElements self = msg_send ~self ~cmd:(selector "accessibilityFunctionRowTopLevelElements") ~typ:(returning id)
let accessibilityGrowArea self = msg_send ~self ~cmd:(selector "accessibilityGrowArea") ~typ:(returning id)
let accessibilityHandles self = msg_send ~self ~cmd:(selector "accessibilityHandles") ~typ:(returning id)
let accessibilityHeader self = msg_send ~self ~cmd:(selector "accessibilityHeader") ~typ:(returning id)
let accessibilityHeaderForColumnIndex x self = msg_send ~self ~cmd:(selector "accessibilityHeaderForColumnIndex:") ~typ:(llong @-> returning id) (LLong.of_int x)
let accessibilityHeaderForRowIndex x self = msg_send ~self ~cmd:(selector "accessibilityHeaderForRowIndex:") ~typ:(llong @-> returning id) (LLong.of_int x)
let accessibilityHeaderGroup self = msg_send ~self ~cmd:(selector "accessibilityHeaderGroup") ~typ:(returning id)
let accessibilityHelp self = msg_send ~self ~cmd:(selector "accessibilityHelp") ~typ:(returning id)
let accessibilityHelpAttribute self = msg_send ~self ~cmd:(selector "accessibilityHelpAttribute") ~typ:(returning id)
let accessibilityHitTest x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning id) x
let accessibilityHorizontalScrollBar self = msg_send ~self ~cmd:(selector "accessibilityHorizontalScrollBar") ~typ:(returning id)
let accessibilityHorizontalUnitDescription self = msg_send ~self ~cmd:(selector "accessibilityHorizontalUnitDescription") ~typ:(returning id)
let accessibilityHorizontalUnitDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityHorizontalUnitDescriptionAttribute") ~typ:(returning id)
let accessibilityHorizontalUnits self = msg_send ~self ~cmd:(selector "accessibilityHorizontalUnits") ~typ:(returning llong)
let accessibilityIdentifier self = msg_send ~self ~cmd:(selector "accessibilityIdentifier") ~typ:(returning id)
let accessibilityIncrementButton self = msg_send ~self ~cmd:(selector "accessibilityIncrementButton") ~typ:(returning id)
let accessibilityIndex self = msg_send ~self ~cmd:(selector "accessibilityIndex") ~typ:(returning llong)
let accessibilityInsertionPointLineNumber self = msg_send ~self ~cmd:(selector "accessibilityInsertionPointLineNumber") ~typ:(returning llong)
let accessibilityInsertionPointLineNumberAttribute self = msg_send ~self ~cmd:(selector "accessibilityInsertionPointLineNumberAttribute") ~typ:(returning id)
let accessibilityIsAttributeSettable x self = msg_send ~self ~cmd:(selector "accessibilityIsAttributeSettable:") ~typ:(id @-> returning bool) x
let accessibilityIsEnabledAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsEnabledAttributeSettable") ~typ:(returning bool)
let accessibilityIsFocusedAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFocusedAttributeSettable") ~typ:(returning bool)
let accessibilityIsHelpAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsHelpAttributeSettable") ~typ:(returning bool)
let accessibilityIsIgnored self = msg_send ~self ~cmd:(selector "accessibilityIsIgnored") ~typ:(returning bool)
let accessibilityIsInsertionPointLineNumberAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsInsertionPointLineNumberAttributeSettable") ~typ:(returning bool)
let accessibilityIsNumberOfCharactersAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsNumberOfCharactersAttributeSettable") ~typ:(returning bool)
let accessibilityIsParentAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsParentAttributeSettable") ~typ:(returning bool)
let accessibilityIsPositionAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsPositionAttributeSettable") ~typ:(returning bool)
let accessibilityIsRoleAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRoleAttributeSettable") ~typ:(returning bool)
let accessibilityIsRoleDescriptionAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRoleDescriptionAttributeSettable") ~typ:(returning bool)
let accessibilityIsSelectedTextAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedTextAttributeSettable") ~typ:(returning bool)
let accessibilityIsSelectedTextRangeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedTextRangeAttributeSettable") ~typ:(returning bool)
let accessibilityIsSizeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSizeAttributeSettable") ~typ:(returning bool)
let accessibilityIsTopLevelUIElementAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsTopLevelUIElementAttributeSettable") ~typ:(returning bool)
let accessibilityIsValueAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsValueAttributeSettable") ~typ:(returning bool)
let accessibilityIsVisibleCharacterRangeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsVisibleCharacterRangeAttributeSettable") ~typ:(returning bool)
let accessibilityIsWindowAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsWindowAttributeSettable") ~typ:(returning bool)
let accessibilityLabel self = msg_send ~self ~cmd:(selector "accessibilityLabel") ~typ:(returning id)
let accessibilityLabelUIElements self = msg_send ~self ~cmd:(selector "accessibilityLabelUIElements") ~typ:(returning id)
let accessibilityLabelValue self = msg_send ~self ~cmd:(selector "accessibilityLabelValue") ~typ:(returning float)
let accessibilityLayoutPointForScreenPoint x self = msg_send ~self ~cmd:(selector "accessibilityLayoutPointForScreenPoint:") ~typ:(CGPoint.t @-> returning CGPoint.t) x
let accessibilityLayoutSizeForScreenSize x self = msg_send ~self ~cmd:(selector "accessibilityLayoutSizeForScreenSize:") ~typ:(CGSize.t @-> returning CGSize.t) x
let accessibilityLineForIndex x self = msg_send ~self ~cmd:(selector "accessibilityLineForIndex:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let accessibilityLineForIndexAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityLineForIndexAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityLinkedUIElements self = msg_send ~self ~cmd:(selector "accessibilityLinkedUIElements") ~typ:(returning id)
let accessibilityMainWindow self = msg_send ~self ~cmd:(selector "accessibilityMainWindow") ~typ:(returning id)
let accessibilityMarkerGroupUIElement self = msg_send ~self ~cmd:(selector "accessibilityMarkerGroupUIElement") ~typ:(returning id)
let accessibilityMarkerTypeDescription self = msg_send ~self ~cmd:(selector "accessibilityMarkerTypeDescription") ~typ:(returning id)
let accessibilityMarkerUIElements self = msg_send ~self ~cmd:(selector "accessibilityMarkerUIElements") ~typ:(returning id)
let accessibilityMarkerValues self = msg_send ~self ~cmd:(selector "accessibilityMarkerValues") ~typ:(returning id)
let accessibilityMaxValue self = msg_send ~self ~cmd:(selector "accessibilityMaxValue") ~typ:(returning id)
let accessibilityMenuBar self = msg_send ~self ~cmd:(selector "accessibilityMenuBar") ~typ:(returning id)
let accessibilityMinValue self = msg_send ~self ~cmd:(selector "accessibilityMinValue") ~typ:(returning id)
let accessibilityMinimizeButton self = msg_send ~self ~cmd:(selector "accessibilityMinimizeButton") ~typ:(returning id)
let accessibilityNextContentSibling self = msg_send ~self ~cmd:(selector "accessibilityNextContentSibling") ~typ:(returning id)
let accessibilityNextContents self = msg_send ~self ~cmd:(selector "accessibilityNextContents") ~typ:(returning id)
let accessibilityNumberOfCharacters self = msg_send ~self ~cmd:(selector "accessibilityNumberOfCharacters") ~typ:(returning llong)
let accessibilityNumberOfCharactersAttribute self = msg_send ~self ~cmd:(selector "accessibilityNumberOfCharactersAttribute") ~typ:(returning id)
let accessibilityOrientation self = msg_send ~self ~cmd:(selector "accessibilityOrientation") ~typ:(returning llong)
let accessibilityOverflowButton self = msg_send ~self ~cmd:(selector "accessibilityOverflowButton") ~typ:(returning id)
let accessibilityOverridesAlwaysTakePrecedence self = msg_send ~self ~cmd:(selector "accessibilityOverridesAlwaysTakePrecedence") ~typ:(returning bool)
let accessibilityParent self = msg_send ~self ~cmd:(selector "accessibilityParent") ~typ:(returning id)
let accessibilityParentAttribute self = msg_send ~self ~cmd:(selector "accessibilityParentAttribute") ~typ:(returning id)
let accessibilityPath self = msg_send ~self ~cmd:(selector "accessibilityPath") ~typ:(returning id)
let accessibilityPerformAction x self = msg_send ~self ~cmd:(selector "accessibilityPerformAction:") ~typ:(id @-> returning void) x
let accessibilityPerformCancel self = msg_send ~self ~cmd:(selector "accessibilityPerformCancel") ~typ:(returning bool)
let accessibilityPerformConfirm self = msg_send ~self ~cmd:(selector "accessibilityPerformConfirm") ~typ:(returning bool)
let accessibilityPerformDecrement self = msg_send ~self ~cmd:(selector "accessibilityPerformDecrement") ~typ:(returning bool)
let accessibilityPerformDelete self = msg_send ~self ~cmd:(selector "accessibilityPerformDelete") ~typ:(returning bool)
let accessibilityPerformIncrement self = msg_send ~self ~cmd:(selector "accessibilityPerformIncrement") ~typ:(returning bool)
let accessibilityPerformPick self = msg_send ~self ~cmd:(selector "accessibilityPerformPick") ~typ:(returning bool)
let accessibilityPerformPress self = msg_send ~self ~cmd:(selector "accessibilityPerformPress") ~typ:(returning bool)
let accessibilityPerformRaise self = msg_send ~self ~cmd:(selector "accessibilityPerformRaise") ~typ:(returning bool)
let accessibilityPerformShowAlternateUI self = msg_send ~self ~cmd:(selector "accessibilityPerformShowAlternateUI") ~typ:(returning bool)
let accessibilityPerformShowDefaultUI self = msg_send ~self ~cmd:(selector "accessibilityPerformShowDefaultUI") ~typ:(returning bool)
let accessibilityPerformShowMenu self = msg_send ~self ~cmd:(selector "accessibilityPerformShowMenu") ~typ:(returning bool)
let accessibilityPlaceholderValue self = msg_send ~self ~cmd:(selector "accessibilityPlaceholderValue") ~typ:(returning id)
let accessibilityPositionAttribute self = msg_send ~self ~cmd:(selector "accessibilityPositionAttribute") ~typ:(returning id)
let accessibilityPostNotification x self = msg_send ~self ~cmd:(selector "accessibilityPostNotification:") ~typ:(id @-> returning void) x
let accessibilityPreviousContentSibling self = msg_send ~self ~cmd:(selector "accessibilityPreviousContentSibling") ~typ:(returning id)
let accessibilityPreviousContents self = msg_send ~self ~cmd:(selector "accessibilityPreviousContents") ~typ:(returning id)
let accessibilityProxy self = msg_send ~self ~cmd:(selector "accessibilityProxy") ~typ:(returning id)
let accessibilityRTFForRange x self = msg_send ~self ~cmd:(selector "accessibilityRTFForRange:") ~typ:(NSRange.t @-> returning id) x
let accessibilityRTFForRangeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityRTFForRangeAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityRangeForIndex x self = msg_send ~self ~cmd:(selector "accessibilityRangeForIndex:") ~typ:(llong @-> returning NSRange.t) (LLong.of_int x)
let accessibilityRangeForIndexAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityRangeForIndexAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityRangeForLine x self = msg_send ~self ~cmd:(selector "accessibilityRangeForLine:") ~typ:(llong @-> returning NSRange.t) (LLong.of_int x)
let accessibilityRangeForLineAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityRangeForLineAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityRangeForPosition x self = msg_send ~self ~cmd:(selector "accessibilityRangeForPosition:") ~typ:(CGPoint.t @-> returning NSRange.t) x
let accessibilityRangeForPositionAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityRangeForPositionAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityResultsForSearchPredicate x self = msg_send ~self ~cmd:(selector "accessibilityResultsForSearchPredicate:") ~typ:(id @-> returning id) x
let accessibilityRole self = msg_send ~self ~cmd:(selector "accessibilityRole") ~typ:(returning id)
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning id)
let accessibilityRoleDescription self = msg_send ~self ~cmd:(selector "accessibilityRoleDescription") ~typ:(returning id)
let accessibilityRoleDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleDescriptionAttribute") ~typ:(returning id)
let accessibilityRowCount self = msg_send ~self ~cmd:(selector "accessibilityRowCount") ~typ:(returning llong)
let accessibilityRowHeaderUIElements self = msg_send ~self ~cmd:(selector "accessibilityRowHeaderUIElements") ~typ:(returning id)
let accessibilityRowIndexRange self = msg_send ~self ~cmd:(selector "accessibilityRowIndexRange") ~typ:(returning NSRange.t)
let accessibilityRows self = msg_send ~self ~cmd:(selector "accessibilityRows") ~typ:(returning id)
let accessibilityRulerMarkerType self = msg_send ~self ~cmd:(selector "accessibilityRulerMarkerType") ~typ:(returning llong)
let accessibilityScreenPointForLayoutPoint x self = msg_send ~self ~cmd:(selector "accessibilityScreenPointForLayoutPoint:") ~typ:(CGPoint.t @-> returning CGPoint.t) x
let accessibilityScreenSizeForLayoutSize x self = msg_send ~self ~cmd:(selector "accessibilityScreenSizeForLayoutSize:") ~typ:(CGSize.t @-> returning CGSize.t) x
let accessibilitySearchButton self = msg_send ~self ~cmd:(selector "accessibilitySearchButton") ~typ:(returning id)
let accessibilitySearchMenu self = msg_send ~self ~cmd:(selector "accessibilitySearchMenu") ~typ:(returning id)
let accessibilitySections self = msg_send ~self ~cmd:(selector "accessibilitySections") ~typ:(returning id)
let accessibilitySectionsAttribute self = msg_send ~self ~cmd:(selector "accessibilitySectionsAttribute") ~typ:(returning id)
let accessibilitySelectedCells self = msg_send ~self ~cmd:(selector "accessibilitySelectedCells") ~typ:(returning id)
let accessibilitySelectedChildren self = msg_send ~self ~cmd:(selector "accessibilitySelectedChildren") ~typ:(returning id)
let accessibilitySelectedColumns self = msg_send ~self ~cmd:(selector "accessibilitySelectedColumns") ~typ:(returning id)
let accessibilitySelectedRows self = msg_send ~self ~cmd:(selector "accessibilitySelectedRows") ~typ:(returning id)
let accessibilitySelectedText self = msg_send ~self ~cmd:(selector "accessibilitySelectedText") ~typ:(returning id)
let accessibilitySelectedTextAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextAttribute") ~typ:(returning id)
let accessibilitySelectedTextRange self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextRange") ~typ:(returning NSRange.t)
let accessibilitySelectedTextRangeAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextRangeAttribute") ~typ:(returning id)
let accessibilitySelectedTextRanges self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextRanges") ~typ:(returning id)
let accessibilityServesAsTitleForUIElements self = msg_send ~self ~cmd:(selector "accessibilityServesAsTitleForUIElements") ~typ:(returning id)
let accessibilitySetFocusedAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetFocusedAttribute:") ~typ:(id @-> returning void) x
let accessibilitySetSelectedTextAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedTextAttribute:") ~typ:(id @-> returning void) x
let accessibilitySetSelectedTextRangeAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedTextRangeAttribute:") ~typ:(id @-> returning void) x
let accessibilitySetValue x ~forAttribute self = msg_send ~self ~cmd:(selector "accessibilitySetValue:forAttribute:") ~typ:(id @-> id @-> returning void) x forAttribute
let accessibilitySetValueAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetValueAttribute:") ~typ:(id @-> returning void) x
let accessibilitySetVisibleCharacterRangeAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetVisibleCharacterRangeAttribute:") ~typ:(id @-> returning void) x
let accessibilitySharedCharacterRange self = msg_send ~self ~cmd:(selector "accessibilitySharedCharacterRange") ~typ:(returning NSRange.t)
let accessibilitySharedFocusElements self = msg_send ~self ~cmd:(selector "accessibilitySharedFocusElements") ~typ:(returning id)
let accessibilitySharedTextUIElements self = msg_send ~self ~cmd:(selector "accessibilitySharedTextUIElements") ~typ:(returning id)
let accessibilityShouldSendNotification x self = msg_send ~self ~cmd:(selector "accessibilityShouldSendNotification:") ~typ:(id @-> returning bool) x
let accessibilityShouldUseUniqueId self = msg_send ~self ~cmd:(selector "accessibilityShouldUseUniqueId") ~typ:(returning bool)
let accessibilityShownMenu self = msg_send ~self ~cmd:(selector "accessibilityShownMenu") ~typ:(returning id)
let accessibilitySizeAttribute self = msg_send ~self ~cmd:(selector "accessibilitySizeAttribute") ~typ:(returning id)
let accessibilitySortDirection self = msg_send ~self ~cmd:(selector "accessibilitySortDirection") ~typ:(returning llong)
let accessibilitySplitters self = msg_send ~self ~cmd:(selector "accessibilitySplitters") ~typ:(returning id)
let accessibilityStringForRange x self = msg_send ~self ~cmd:(selector "accessibilityStringForRange:") ~typ:(NSRange.t @-> returning id) x
let accessibilityStringForRangeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityStringForRangeAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilityStyleRangeForIndex x self = msg_send ~self ~cmd:(selector "accessibilityStyleRangeForIndex:") ~typ:(llong @-> returning NSRange.t) (LLong.of_int x)
let accessibilityStyleRangeForIndexAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityStyleRangeForIndexAttributeForParameter:") ~typ:(id @-> returning id) x
let accessibilitySubrole self = msg_send ~self ~cmd:(selector "accessibilitySubrole") ~typ:(returning id)
let accessibilitySupportsOverriddenAttributes self = msg_send ~self ~cmd:(selector "accessibilitySupportsOverriddenAttributes") ~typ:(returning bool)
let accessibilityTabs self = msg_send ~self ~cmd:(selector "accessibilityTabs") ~typ:(returning id)
let accessibilityTitle self = msg_send ~self ~cmd:(selector "accessibilityTitle") ~typ:(returning id)
let accessibilityTitleUIElement self = msg_send ~self ~cmd:(selector "accessibilityTitleUIElement") ~typ:(returning id)
let accessibilityToolbarButton self = msg_send ~self ~cmd:(selector "accessibilityToolbarButton") ~typ:(returning id)
let accessibilityTopLevelUIElement self = msg_send ~self ~cmd:(selector "accessibilityTopLevelUIElement") ~typ:(returning id)
let accessibilityTopLevelUIElementAttribute self = msg_send ~self ~cmd:(selector "accessibilityTopLevelUIElementAttribute") ~typ:(returning id)
let accessibilityURL self = msg_send ~self ~cmd:(selector "accessibilityURL") ~typ:(returning id)
let accessibilityUnitDescription self = msg_send ~self ~cmd:(selector "accessibilityUnitDescription") ~typ:(returning id)
let accessibilityUnits self = msg_send ~self ~cmd:(selector "accessibilityUnits") ~typ:(returning llong)
let accessibilityUserInputLabels self = msg_send ~self ~cmd:(selector "accessibilityUserInputLabels") ~typ:(returning id)
let accessibilityValue self = msg_send ~self ~cmd:(selector "accessibilityValue") ~typ:(returning id)
let accessibilityValueAttribute self = msg_send ~self ~cmd:(selector "accessibilityValueAttribute") ~typ:(returning id)
let accessibilityValueDescription self = msg_send ~self ~cmd:(selector "accessibilityValueDescription") ~typ:(returning id)
let accessibilityVerticalScrollBar self = msg_send ~self ~cmd:(selector "accessibilityVerticalScrollBar") ~typ:(returning id)
let accessibilityVerticalUnitDescription self = msg_send ~self ~cmd:(selector "accessibilityVerticalUnitDescription") ~typ:(returning id)
let accessibilityVerticalUnitDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityVerticalUnitDescriptionAttribute") ~typ:(returning id)
let accessibilityVerticalUnits self = msg_send ~self ~cmd:(selector "accessibilityVerticalUnits") ~typ:(returning llong)
let accessibilityVisibleCells self = msg_send ~self ~cmd:(selector "accessibilityVisibleCells") ~typ:(returning id)
let accessibilityVisibleCharacterRange self = msg_send ~self ~cmd:(selector "accessibilityVisibleCharacterRange") ~typ:(returning NSRange.t)
let accessibilityVisibleCharacterRangeAttribute self = msg_send ~self ~cmd:(selector "accessibilityVisibleCharacterRangeAttribute") ~typ:(returning id)
let accessibilityVisibleChildren self = msg_send ~self ~cmd:(selector "accessibilityVisibleChildren") ~typ:(returning id)
let accessibilityVisibleColumns self = msg_send ~self ~cmd:(selector "accessibilityVisibleColumns") ~typ:(returning id)
let accessibilityVisibleRows self = msg_send ~self ~cmd:(selector "accessibilityVisibleRows") ~typ:(returning id)
let accessibilityWarningValue self = msg_send ~self ~cmd:(selector "accessibilityWarningValue") ~typ:(returning id)
let accessibilityWindow self = msg_send ~self ~cmd:(selector "accessibilityWindow") ~typ:(returning id)
let accessibilityWindowAttribute self = msg_send ~self ~cmd:(selector "accessibilityWindowAttribute") ~typ:(returning id)
let accessibilityWindowPointForShowMenu self = msg_send ~self ~cmd:(selector "accessibilityWindowPointForShowMenu") ~typ:(returning CGPoint.t)
let accessibilityWindows self = msg_send ~self ~cmd:(selector "accessibilityWindows") ~typ:(returning id)
let accessibilityZoomButton self = msg_send ~self ~cmd:(selector "accessibilityZoomButton") ~typ:(returning id)
let action self = msg_send ~self ~cmd:(selector "action") ~typ:(returning _SEL)
let alignment self = msg_send ~self ~cmd:(selector "alignment") ~typ:(returning llong)
let allowsAppearanceTextEffects self = msg_send ~self ~cmd:(selector "allowsAppearanceTextEffects") ~typ:(returning bool)
let allowsDefaultTighteningForTruncation self = msg_send ~self ~cmd:(selector "allowsDefaultTighteningForTruncation") ~typ:(returning bool)
let allowsEditingTextAttributes self = msg_send ~self ~cmd:(selector "allowsEditingTextAttributes") ~typ:(returning bool)
let allowsEditingTokens self = msg_send ~self ~cmd:(selector "allowsEditingTokens") ~typ:(returning bool)
let allowsMixedState self = msg_send ~self ~cmd:(selector "allowsMixedState") ~typ:(returning bool)
let allowsUndo self = msg_send ~self ~cmd:(selector "allowsUndo") ~typ:(returning bool)
let attributedStringValue self = msg_send ~self ~cmd:(selector "attributedStringValue") ~typ:(returning id)
let backgroundStyle self = msg_send ~self ~cmd:(selector "backgroundStyle") ~typ:(returning llong)
let baseWritingDirection self = msg_send ~self ~cmd:(selector "baseWritingDirection") ~typ:(returning llong)
let cachesLineRef self = msg_send ~self ~cmd:(selector "cachesLineRef") ~typ:(returning bool)
let calcDrawInfo x self = msg_send ~self ~cmd:(selector "calcDrawInfo:") ~typ:(CGRect.t @-> returning void) x
let canSmoothFontsInFrame x ~forLayerBackedView self = msg_send ~self ~cmd:(selector "canSmoothFontsInFrame:forLayerBackedView:") ~typ:(CGRect.t @-> id @-> returning bool) x forLayerBackedView
let cancelTrackingAt x ~inView self = msg_send ~self ~cmd:(selector "cancelTrackingAt:inView:") ~typ:(CGPoint.t @-> id @-> returning void) x inView
let cellAttribute x self = msg_send ~self ~cmd:(selector "cellAttribute:") ~typ:(ullong @-> returning llong) (ULLong.of_int x)
let cellSize self = msg_send ~self ~cmd:(selector "cellSize") ~typ:(returning CGSize.t)
let cellSizeForBounds x self = msg_send ~self ~cmd:(selector "cellSizeForBounds:") ~typ:(CGRect.t @-> returning CGSize.t) x
let compare x self = msg_send ~self ~cmd:(selector "compare:") ~typ:(id @-> returning llong) x
let continueTracking x ~at ~inView self = msg_send ~self ~cmd:(selector "continueTracking:at:inView:") ~typ:(CGPoint.t @-> CGPoint.t @-> id @-> returning bool) x at inView
let continueTrackingGesture x ~inView self = msg_send ~self ~cmd:(selector "continueTrackingGesture:inView:") ~typ:(id @-> id @-> returning bool) x inView
let continueTrackingPeriodicEvent x ~inView self = msg_send ~self ~cmd:(selector "continueTrackingPeriodicEvent:inView:") ~typ:(id @-> id @-> returning void) x inView
let controlSize self = msg_send ~self ~cmd:(selector "controlSize") ~typ:(returning ullong)
let controlTint self = msg_send ~self ~cmd:(selector "controlTint") ~typ:(returning ullong)
let controlView self = msg_send ~self ~cmd:(selector "controlView") ~typ:(returning id)
let copy self = msg_send ~self ~cmd:(selector "copy") ~typ:(returning id)
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:((ptr void) @-> returning id) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let deepestAccessibilityDescendants self = msg_send ~self ~cmd:(selector "deepestAccessibilityDescendants") ~typ:(returning id)
let doubleValue self = msg_send ~self ~cmd:(selector "doubleValue") ~typ:(returning double)
let draggingImageComponentsWithFrame x ~inView self = msg_send ~self ~cmd:(selector "draggingImageComponentsWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning id) x inView
let drawFocusRingMaskWithFrame x ~inView self = msg_send ~self ~cmd:(selector "drawFocusRingMaskWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let drawInteriorWithFrame x ~inView self = msg_send ~self ~cmd:(selector "drawInteriorWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let drawWithExpansionFrame x ~inView self = msg_send ~self ~cmd:(selector "drawWithExpansionFrame:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let drawWithFrame x ~inView self = msg_send ~self ~cmd:(selector "drawWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let drawingRectForBounds x self = msg_send ~self ~cmd:(selector "drawingRectForBounds:") ~typ:(CGRect.t @-> returning CGRect.t) x
let drawsBackground self = msg_send ~self ~cmd:(selector "drawsBackground") ~typ:(returning bool)
let editWithFrame x ~inView ~editor ~delegate ~event self = msg_send ~self ~cmd:(selector "editWithFrame:inView:editor:delegate:event:") ~typ:(CGRect.t @-> id @-> id @-> id @-> id @-> returning void) x inView editor delegate event
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let endEditing x self = msg_send ~self ~cmd:(selector "endEditing:") ~typ:(id @-> returning void) x
let entryType self = msg_send ~self ~cmd:(selector "entryType") ~typ:(returning llong)
let expansionFrameWithFrame x ~inView self = msg_send ~self ~cmd:(selector "expansionFrameWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) x inView
let fieldEditorForView x self = msg_send ~self ~cmd:(selector "fieldEditorForView:") ~typ:(id @-> returning id) x
let fieldEditorTextContainer self = msg_send ~self ~cmd:(selector "fieldEditorTextContainer") ~typ:(returning id)
let floatValue self = msg_send ~self ~cmd:(selector "floatValue") ~typ:(returning float)
let focusRingMaskBoundsForFrame x ~inView self = msg_send ~self ~cmd:(selector "focusRingMaskBoundsForFrame:inView:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) x inView
let focusRingType self = msg_send ~self ~cmd:(selector "focusRingType") ~typ:(returning ullong)
let font self = msg_send ~self ~cmd:(selector "font") ~typ:(returning id)
let fontDilationStyle self = msg_send ~self ~cmd:(selector "fontDilationStyle") ~typ:(returning ullong)
let formatter self = msg_send ~self ~cmd:(selector "formatter") ~typ:(returning id)
let getPeriodicDelay x ~interval self = msg_send ~self ~cmd:(selector "getPeriodicDelay:interval:") ~typ:((ptr float) @-> (ptr float) @-> returning void) x interval
let hasValidObjectValue self = msg_send ~self ~cmd:(selector "hasValidObjectValue") ~typ:(returning bool)
let heartBeat x self = msg_send ~self ~cmd:(selector "heartBeat:") ~typ:((ptr void) @-> returning void) x
let highlight x ~withFrame ~inView self = msg_send ~self ~cmd:(selector "highlight:withFrame:inView:") ~typ:(bool @-> CGRect.t @-> id @-> returning void) x withFrame inView
let highlightColorWithFrame x ~inView self = msg_send ~self ~cmd:(selector "highlightColorWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning id) x inView
let hitTestForEvent x ~inRect ~ofView self = msg_send ~self ~cmd:(selector "hitTestForEvent:inRect:ofView:") ~typ:(id @-> CGRect.t @-> id @-> returning ullong) x inRect ofView
let identifier self = msg_send ~self ~cmd:(selector "identifier") ~typ:(returning id)
let image self = msg_send ~self ~cmd:(selector "image") ~typ:(returning id)
let imageInterpolation self = msg_send ~self ~cmd:(selector "imageInterpolation") ~typ:(returning ullong)
let imageRectForBounds x self = msg_send ~self ~cmd:(selector "imageRectForBounds:") ~typ:(CGRect.t @-> returning CGRect.t) x
let importsGraphics self = msg_send ~self ~cmd:(selector "importsGraphics") ~typ:(returning bool)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initImageCell x self = msg_send ~self ~cmd:(selector "initImageCell:") ~typ:(id @-> returning id) x
let initTextCell x self = msg_send ~self ~cmd:(selector "initTextCell:") ~typ:(id @-> returning id) x
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let intValue self = msg_send ~self ~cmd:(selector "intValue") ~typ:(returning int)
let integerValue self = msg_send ~self ~cmd:(selector "integerValue") ~typ:(returning llong)
let interiorBackgroundStyle self = msg_send ~self ~cmd:(selector "interiorBackgroundStyle") ~typ:(returning llong)
let isAccessibilityAlternateUIVisible self = msg_send ~self ~cmd:(selector "isAccessibilityAlternateUIVisible") ~typ:(returning bool)
let isAccessibilityAutoInteractable self = msg_send ~self ~cmd:(selector "isAccessibilityAutoInteractable") ~typ:(returning bool)
let isAccessibilityDisclosed self = msg_send ~self ~cmd:(selector "isAccessibilityDisclosed") ~typ:(returning bool)
let isAccessibilityEdited self = msg_send ~self ~cmd:(selector "isAccessibilityEdited") ~typ:(returning bool)
let isAccessibilityElement self = msg_send ~self ~cmd:(selector "isAccessibilityElement") ~typ:(returning bool)
let isAccessibilityEnabled self = msg_send ~self ~cmd:(selector "isAccessibilityEnabled") ~typ:(returning bool)
let isAccessibilityEnhancedUserInterface self = msg_send ~self ~cmd:(selector "isAccessibilityEnhancedUserInterface") ~typ:(returning bool)
let isAccessibilityExpanded self = msg_send ~self ~cmd:(selector "isAccessibilityExpanded") ~typ:(returning bool)
let isAccessibilityFocused self = msg_send ~self ~cmd:(selector "isAccessibilityFocused") ~typ:(returning bool)
let isAccessibilityFrontmost self = msg_send ~self ~cmd:(selector "isAccessibilityFrontmost") ~typ:(returning bool)
let isAccessibilityHidden self = msg_send ~self ~cmd:(selector "isAccessibilityHidden") ~typ:(returning bool)
let isAccessibilityMain self = msg_send ~self ~cmd:(selector "isAccessibilityMain") ~typ:(returning bool)
let isAccessibilityMimicNativeView self = msg_send ~self ~cmd:(selector "isAccessibilityMimicNativeView") ~typ:(returning bool)
let isAccessibilityMinimized self = msg_send ~self ~cmd:(selector "isAccessibilityMinimized") ~typ:(returning bool)
let isAccessibilityModal self = msg_send ~self ~cmd:(selector "isAccessibilityModal") ~typ:(returning bool)
let isAccessibilityOrderedByRow self = msg_send ~self ~cmd:(selector "isAccessibilityOrderedByRow") ~typ:(returning bool)
let isAccessibilityProtectedContent self = msg_send ~self ~cmd:(selector "isAccessibilityProtectedContent") ~typ:(returning bool)
let isAccessibilityRequired self = msg_send ~self ~cmd:(selector "isAccessibilityRequired") ~typ:(returning bool)
let isAccessibilitySelected self = msg_send ~self ~cmd:(selector "isAccessibilitySelected") ~typ:(returning bool)
let isAccessibilitySelectorAllowed x self = msg_send ~self ~cmd:(selector "isAccessibilitySelectorAllowed:") ~typ:(_SEL @-> returning bool) x
let isBezeled self = msg_send ~self ~cmd:(selector "isBezeled") ~typ:(returning bool)
let isBordered self = msg_send ~self ~cmd:(selector "isBordered") ~typ:(returning bool)
let isContinuous self = msg_send ~self ~cmd:(selector "isContinuous") ~typ:(returning bool)
let isEditable self = msg_send ~self ~cmd:(selector "isEditable") ~typ:(returning bool)
let isEnabled self = msg_send ~self ~cmd:(selector "isEnabled") ~typ:(returning bool)
let isEntryAcceptable x self = msg_send ~self ~cmd:(selector "isEntryAcceptable:") ~typ:(id @-> returning bool) x
let isHighlighted self = msg_send ~self ~cmd:(selector "isHighlighted") ~typ:(returning bool)
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning bool)
let isScrollable self = msg_send ~self ~cmd:(selector "isScrollable") ~typ:(returning bool)
let isSelectable self = msg_send ~self ~cmd:(selector "isSelectable") ~typ:(returning bool)
let keyDown x ~inRect ~ofView self = msg_send ~self ~cmd:(selector "keyDown:inRect:ofView:") ~typ:(id @-> CGRect.t @-> id @-> returning bool) x inRect ofView
let keyEquivalent self = msg_send ~self ~cmd:(selector "keyEquivalent") ~typ:(returning id)
let keyUp x ~inRect ~ofView self = msg_send ~self ~cmd:(selector "keyUp:inRect:ofView:") ~typ:(id @-> CGRect.t @-> id @-> returning bool) x inRect ofView
let layoutLayerWithFrame x ~inView self = msg_send ~self ~cmd:(selector "layoutLayerWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let lineBreakMode self = msg_send ~self ~cmd:(selector "lineBreakMode") ~typ:(returning ullong)
let menu self = msg_send ~self ~cmd:(selector "menu") ~typ:(returning id)
let menuForEvent x ~inRect ~ofView self = msg_send ~self ~cmd:(selector "menuForEvent:inRect:ofView:") ~typ:(id @-> CGRect.t @-> id @-> returning id) x inRect ofView
let mnemonic self = msg_send ~self ~cmd:(selector "mnemonic") ~typ:(returning id)
let mnemonicLocation self = msg_send ~self ~cmd:(selector "mnemonicLocation") ~typ:(returning ullong)
let mouseDownFlags self = msg_send ~self ~cmd:(selector "mouseDownFlags") ~typ:(returning llong)
let mouseEntered x self = msg_send ~self ~cmd:(selector "mouseEntered:") ~typ:(id @-> returning void) x
let mouseExited x self = msg_send ~self ~cmd:(selector "mouseExited:") ~typ:(id @-> returning void) x
let nextState self = msg_send ~self ~cmd:(selector "nextState") ~typ:(returning llong)
let objectValue self = msg_send ~self ~cmd:(selector "objectValue") ~typ:(returning id)
let opaqueRectForTitleBounds x self = msg_send ~self ~cmd:(selector "opaqueRectForTitleBounds:") ~typ:(CGRect.t @-> returning CGRect.t) x
let performClick x self = msg_send ~self ~cmd:(selector "performClick:") ~typ:(id @-> returning void) x
let refusesFirstResponder self = msg_send ~self ~cmd:(selector "refusesFirstResponder") ~typ:(returning bool)
let representedObject self = msg_send ~self ~cmd:(selector "representedObject") ~typ:(returning id)
let resetCursorRect x ~inView self = msg_send ~self ~cmd:(selector "resetCursorRect:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let selectWithFrame x ~inView ~editor ~delegate ~start ~length self = msg_send ~self ~cmd:(selector "selectWithFrame:inView:editor:delegate:start:length:") ~typ:(CGRect.t @-> id @-> id @-> id @-> llong @-> llong @-> returning void) x inView editor delegate (LLong.of_int start) (LLong.of_int length)
let sendActionOn x self = msg_send ~self ~cmd:(selector "sendActionOn:") ~typ:(ullong @-> returning llong) (ULLong.of_int x)
let sendActionOnMask self = msg_send ~self ~cmd:(selector "sendActionOnMask") ~typ:(returning ullong)
let sendsActionOnEndEditing self = msg_send ~self ~cmd:(selector "sendsActionOnEndEditing") ~typ:(returning bool)
let setAccessibilityActivationPoint x self = msg_send ~self ~cmd:(selector "setAccessibilityActivationPoint:") ~typ:(CGPoint.t @-> returning void) x
let setAccessibilityAllowedValues x self = msg_send ~self ~cmd:(selector "setAccessibilityAllowedValues:") ~typ:(id @-> returning void) x
let setAccessibilityAlternateUIVisible x self = msg_send ~self ~cmd:(selector "setAccessibilityAlternateUIVisible:") ~typ:(bool @-> returning void) x
let setAccessibilityApplicationFocusedUIElement x self = msg_send ~self ~cmd:(selector "setAccessibilityApplicationFocusedUIElement:") ~typ:(id @-> returning void) x
let setAccessibilityAttributedUserInputLabels x self = msg_send ~self ~cmd:(selector "setAccessibilityAttributedUserInputLabels:") ~typ:(id @-> returning void) x
let setAccessibilityAuditIssues x self = msg_send ~self ~cmd:(selector "setAccessibilityAuditIssues:") ~typ:(id @-> returning void) x
let setAccessibilityAutoInteractable x self = msg_send ~self ~cmd:(selector "setAccessibilityAutoInteractable:") ~typ:(bool @-> returning void) x
let setAccessibilityCancelButton x self = msg_send ~self ~cmd:(selector "setAccessibilityCancelButton:") ~typ:(id @-> returning void) x
let setAccessibilityChartDescriptor x self = msg_send ~self ~cmd:(selector "setAccessibilityChartDescriptor:") ~typ:(id @-> returning void) x
let setAccessibilityChildren x self = msg_send ~self ~cmd:(selector "setAccessibilityChildren:") ~typ:(id @-> returning void) x
let setAccessibilityChildrenInNavigationOrder x self = msg_send ~self ~cmd:(selector "setAccessibilityChildrenInNavigationOrder:") ~typ:(id @-> returning void) x
let setAccessibilityClearButton x self = msg_send ~self ~cmd:(selector "setAccessibilityClearButton:") ~typ:(id @-> returning void) x
let setAccessibilityCloseButton x self = msg_send ~self ~cmd:(selector "setAccessibilityCloseButton:") ~typ:(id @-> returning void) x
let setAccessibilityColumnCount x self = msg_send ~self ~cmd:(selector "setAccessibilityColumnCount:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityColumnHeaderUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityColumnHeaderUIElements:") ~typ:(id @-> returning void) x
let setAccessibilityColumnIndexRange x self = msg_send ~self ~cmd:(selector "setAccessibilityColumnIndexRange:") ~typ:(NSRange.t @-> returning void) x
let setAccessibilityColumnTitles x self = msg_send ~self ~cmd:(selector "setAccessibilityColumnTitles:") ~typ:(id @-> returning void) x
let setAccessibilityColumns x self = msg_send ~self ~cmd:(selector "setAccessibilityColumns:") ~typ:(id @-> returning void) x
let setAccessibilityContainerType x self = msg_send ~self ~cmd:(selector "setAccessibilityContainerType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityContentSiblingAbove x self = msg_send ~self ~cmd:(selector "setAccessibilityContentSiblingAbove:") ~typ:(id @-> returning void) x
let setAccessibilityContentSiblingBelow x self = msg_send ~self ~cmd:(selector "setAccessibilityContentSiblingBelow:") ~typ:(id @-> returning void) x
let setAccessibilityContents x self = msg_send ~self ~cmd:(selector "setAccessibilityContents:") ~typ:(id @-> returning void) x
let setAccessibilityCriticalValue x self = msg_send ~self ~cmd:(selector "setAccessibilityCriticalValue:") ~typ:(id @-> returning void) x
let setAccessibilityCustomActions x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomActions:") ~typ:(id @-> returning void) x
let setAccessibilityCustomChoosers x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomChoosers:") ~typ:(id @-> returning void) x
let setAccessibilityCustomContent x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomContent:") ~typ:(id @-> returning void) x
let setAccessibilityCustomRotors x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomRotors:") ~typ:(id @-> returning void) x
let setAccessibilityDecrementButton x self = msg_send ~self ~cmd:(selector "setAccessibilityDecrementButton:") ~typ:(id @-> returning void) x
let setAccessibilityDefaultButton x self = msg_send ~self ~cmd:(selector "setAccessibilityDefaultButton:") ~typ:(id @-> returning void) x
let setAccessibilityDisclosed x self = msg_send ~self ~cmd:(selector "setAccessibilityDisclosed:") ~typ:(bool @-> returning void) x
let setAccessibilityDisclosedByRow x self = msg_send ~self ~cmd:(selector "setAccessibilityDisclosedByRow:") ~typ:(id @-> returning void) x
let setAccessibilityDisclosedRows x self = msg_send ~self ~cmd:(selector "setAccessibilityDisclosedRows:") ~typ:(id @-> returning void) x
let setAccessibilityDisclosureLevel x self = msg_send ~self ~cmd:(selector "setAccessibilityDisclosureLevel:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityDocument x self = msg_send ~self ~cmd:(selector "setAccessibilityDocument:") ~typ:(id @-> returning void) x
let setAccessibilityEdited x self = msg_send ~self ~cmd:(selector "setAccessibilityEdited:") ~typ:(bool @-> returning void) x
let setAccessibilityElement x self = msg_send ~self ~cmd:(selector "setAccessibilityElement:") ~typ:(bool @-> returning void) x
let setAccessibilityEmbeddedImageDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityEmbeddedImageDescription:") ~typ:(id @-> returning void) x
let setAccessibilityEnabled x self = msg_send ~self ~cmd:(selector "setAccessibilityEnabled:") ~typ:(bool @-> returning void) x
let setAccessibilityEnhancedUserInterface x self = msg_send ~self ~cmd:(selector "setAccessibilityEnhancedUserInterface:") ~typ:(bool @-> returning void) x
let setAccessibilityExpanded x self = msg_send ~self ~cmd:(selector "setAccessibilityExpanded:") ~typ:(bool @-> returning void) x
let setAccessibilityExtrasMenuBar x self = msg_send ~self ~cmd:(selector "setAccessibilityExtrasMenuBar:") ~typ:(id @-> returning void) x
let setAccessibilityFilename x self = msg_send ~self ~cmd:(selector "setAccessibilityFilename:") ~typ:(id @-> returning void) x
let setAccessibilityFocused x self = msg_send ~self ~cmd:(selector "setAccessibilityFocused:") ~typ:(bool @-> returning void) x
let setAccessibilityFocusedWindow x self = msg_send ~self ~cmd:(selector "setAccessibilityFocusedWindow:") ~typ:(id @-> returning void) x
let setAccessibilityFrame x self = msg_send ~self ~cmd:(selector "setAccessibilityFrame:") ~typ:(CGRect.t @-> returning void) x
let setAccessibilityFrameInParentSpace x self = msg_send ~self ~cmd:(selector "setAccessibilityFrameInParentSpace:") ~typ:(CGRect.t @-> returning void) x
let setAccessibilityFrontmost x self = msg_send ~self ~cmd:(selector "setAccessibilityFrontmost:") ~typ:(bool @-> returning void) x
let setAccessibilityFullScreenButton x self = msg_send ~self ~cmd:(selector "setAccessibilityFullScreenButton:") ~typ:(id @-> returning void) x
let setAccessibilityFunctionRowTopLevelElements x self = msg_send ~self ~cmd:(selector "setAccessibilityFunctionRowTopLevelElements:") ~typ:(id @-> returning void) x
let setAccessibilityGrowArea x self = msg_send ~self ~cmd:(selector "setAccessibilityGrowArea:") ~typ:(id @-> returning void) x
let setAccessibilityHandles x self = msg_send ~self ~cmd:(selector "setAccessibilityHandles:") ~typ:(id @-> returning void) x
let setAccessibilityHeader x self = msg_send ~self ~cmd:(selector "setAccessibilityHeader:") ~typ:(id @-> returning void) x
let setAccessibilityHeaderGroup x self = msg_send ~self ~cmd:(selector "setAccessibilityHeaderGroup:") ~typ:(id @-> returning void) x
let setAccessibilityHelp x self = msg_send ~self ~cmd:(selector "setAccessibilityHelp:") ~typ:(id @-> returning void) x
let setAccessibilityHidden x self = msg_send ~self ~cmd:(selector "setAccessibilityHidden:") ~typ:(bool @-> returning void) x
let setAccessibilityHorizontalScrollBar x self = msg_send ~self ~cmd:(selector "setAccessibilityHorizontalScrollBar:") ~typ:(id @-> returning void) x
let setAccessibilityHorizontalUnitDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityHorizontalUnitDescription:") ~typ:(id @-> returning void) x
let setAccessibilityHorizontalUnits x self = msg_send ~self ~cmd:(selector "setAccessibilityHorizontalUnits:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityIdentifier x self = msg_send ~self ~cmd:(selector "setAccessibilityIdentifier:") ~typ:(id @-> returning void) x
let setAccessibilityIncrementButton x self = msg_send ~self ~cmd:(selector "setAccessibilityIncrementButton:") ~typ:(id @-> returning void) x
let setAccessibilityIndex x self = msg_send ~self ~cmd:(selector "setAccessibilityIndex:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityInsertionPointLineNumber x self = msg_send ~self ~cmd:(selector "setAccessibilityInsertionPointLineNumber:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityLabel x self = msg_send ~self ~cmd:(selector "setAccessibilityLabel:") ~typ:(id @-> returning void) x
let setAccessibilityLabelUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityLabelUIElements:") ~typ:(id @-> returning void) x
let setAccessibilityLabelValue x self = msg_send ~self ~cmd:(selector "setAccessibilityLabelValue:") ~typ:(float @-> returning void) x
let setAccessibilityLinkedUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityLinkedUIElements:") ~typ:(id @-> returning void) x
let setAccessibilityMain x self = msg_send ~self ~cmd:(selector "setAccessibilityMain:") ~typ:(bool @-> returning void) x
let setAccessibilityMainWindow x self = msg_send ~self ~cmd:(selector "setAccessibilityMainWindow:") ~typ:(id @-> returning void) x
let setAccessibilityMarkerGroupUIElement x self = msg_send ~self ~cmd:(selector "setAccessibilityMarkerGroupUIElement:") ~typ:(id @-> returning void) x
let setAccessibilityMarkerTypeDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityMarkerTypeDescription:") ~typ:(id @-> returning void) x
let setAccessibilityMarkerUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityMarkerUIElements:") ~typ:(id @-> returning void) x
let setAccessibilityMarkerValues x self = msg_send ~self ~cmd:(selector "setAccessibilityMarkerValues:") ~typ:(id @-> returning void) x
let setAccessibilityMaxValue x self = msg_send ~self ~cmd:(selector "setAccessibilityMaxValue:") ~typ:(id @-> returning void) x
let setAccessibilityMenuBar x self = msg_send ~self ~cmd:(selector "setAccessibilityMenuBar:") ~typ:(id @-> returning void) x
let setAccessibilityMimicNativeView x self = msg_send ~self ~cmd:(selector "setAccessibilityMimicNativeView:") ~typ:(bool @-> returning void) x
let setAccessibilityMinValue x self = msg_send ~self ~cmd:(selector "setAccessibilityMinValue:") ~typ:(id @-> returning void) x
let setAccessibilityMinimizeButton x self = msg_send ~self ~cmd:(selector "setAccessibilityMinimizeButton:") ~typ:(id @-> returning void) x
let setAccessibilityMinimized x self = msg_send ~self ~cmd:(selector "setAccessibilityMinimized:") ~typ:(bool @-> returning void) x
let setAccessibilityModal x self = msg_send ~self ~cmd:(selector "setAccessibilityModal:") ~typ:(bool @-> returning void) x
let setAccessibilityNextContents x self = msg_send ~self ~cmd:(selector "setAccessibilityNextContents:") ~typ:(id @-> returning void) x
let setAccessibilityNumberOfCharacters x self = msg_send ~self ~cmd:(selector "setAccessibilityNumberOfCharacters:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityOrderedByRow x self = msg_send ~self ~cmd:(selector "setAccessibilityOrderedByRow:") ~typ:(bool @-> returning void) x
let setAccessibilityOrientation x self = msg_send ~self ~cmd:(selector "setAccessibilityOrientation:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityOverflowButton x self = msg_send ~self ~cmd:(selector "setAccessibilityOverflowButton:") ~typ:(id @-> returning void) x
let setAccessibilityOverridesAlwaysTakePrecedence x self = msg_send ~self ~cmd:(selector "setAccessibilityOverridesAlwaysTakePrecedence:") ~typ:(bool @-> returning void) x
let setAccessibilityParent x self = msg_send ~self ~cmd:(selector "setAccessibilityParent:") ~typ:(id @-> returning void) x
let setAccessibilityPath x self = msg_send ~self ~cmd:(selector "setAccessibilityPath:") ~typ:(id @-> returning void) x
let setAccessibilityPlaceholderValue x self = msg_send ~self ~cmd:(selector "setAccessibilityPlaceholderValue:") ~typ:(id @-> returning void) x
let setAccessibilityPreviousContents x self = msg_send ~self ~cmd:(selector "setAccessibilityPreviousContents:") ~typ:(id @-> returning void) x
let setAccessibilityProtectedContent x self = msg_send ~self ~cmd:(selector "setAccessibilityProtectedContent:") ~typ:(bool @-> returning void) x
let setAccessibilityProxy x self = msg_send ~self ~cmd:(selector "setAccessibilityProxy:") ~typ:(id @-> returning void) x
let setAccessibilityRequired x self = msg_send ~self ~cmd:(selector "setAccessibilityRequired:") ~typ:(bool @-> returning void) x
let setAccessibilityRole x self = msg_send ~self ~cmd:(selector "setAccessibilityRole:") ~typ:(id @-> returning void) x
let setAccessibilityRoleDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityRoleDescription:") ~typ:(id @-> returning void) x
let setAccessibilityRowCount x self = msg_send ~self ~cmd:(selector "setAccessibilityRowCount:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityRowHeaderUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityRowHeaderUIElements:") ~typ:(id @-> returning void) x
let setAccessibilityRowIndexRange x self = msg_send ~self ~cmd:(selector "setAccessibilityRowIndexRange:") ~typ:(NSRange.t @-> returning void) x
let setAccessibilityRows x self = msg_send ~self ~cmd:(selector "setAccessibilityRows:") ~typ:(id @-> returning void) x
let setAccessibilityRulerMarkerType x self = msg_send ~self ~cmd:(selector "setAccessibilityRulerMarkerType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilitySearchButton x self = msg_send ~self ~cmd:(selector "setAccessibilitySearchButton:") ~typ:(id @-> returning void) x
let setAccessibilitySearchMenu x self = msg_send ~self ~cmd:(selector "setAccessibilitySearchMenu:") ~typ:(id @-> returning void) x
let setAccessibilitySections x self = msg_send ~self ~cmd:(selector "setAccessibilitySections:") ~typ:(id @-> returning void) x
let setAccessibilitySelected x self = msg_send ~self ~cmd:(selector "setAccessibilitySelected:") ~typ:(bool @-> returning void) x
let setAccessibilitySelectedCells x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedCells:") ~typ:(id @-> returning void) x
let setAccessibilitySelectedChildren x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedChildren:") ~typ:(id @-> returning void) x
let setAccessibilitySelectedColumns x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedColumns:") ~typ:(id @-> returning void) x
let setAccessibilitySelectedRows x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedRows:") ~typ:(id @-> returning void) x
let setAccessibilitySelectedText x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedText:") ~typ:(id @-> returning void) x
let setAccessibilitySelectedTextRange x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedTextRange:") ~typ:(NSRange.t @-> returning void) x
let setAccessibilitySelectedTextRanges x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedTextRanges:") ~typ:(id @-> returning void) x
let setAccessibilityServesAsTitleForUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityServesAsTitleForUIElements:") ~typ:(id @-> returning void) x
let setAccessibilitySharedCharacterRange x self = msg_send ~self ~cmd:(selector "setAccessibilitySharedCharacterRange:") ~typ:(NSRange.t @-> returning void) x
let setAccessibilitySharedFocusElements x self = msg_send ~self ~cmd:(selector "setAccessibilitySharedFocusElements:") ~typ:(id @-> returning void) x
let setAccessibilitySharedTextUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilitySharedTextUIElements:") ~typ:(id @-> returning void) x
let setAccessibilityShownMenu x self = msg_send ~self ~cmd:(selector "setAccessibilityShownMenu:") ~typ:(id @-> returning void) x
let setAccessibilitySortDirection x self = msg_send ~self ~cmd:(selector "setAccessibilitySortDirection:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilitySplitters x self = msg_send ~self ~cmd:(selector "setAccessibilitySplitters:") ~typ:(id @-> returning void) x
let setAccessibilitySubrole x self = msg_send ~self ~cmd:(selector "setAccessibilitySubrole:") ~typ:(id @-> returning void) x
let setAccessibilityTabs x self = msg_send ~self ~cmd:(selector "setAccessibilityTabs:") ~typ:(id @-> returning void) x
let setAccessibilityTitle x self = msg_send ~self ~cmd:(selector "setAccessibilityTitle:") ~typ:(id @-> returning void) x
let setAccessibilityTitleUIElement x self = msg_send ~self ~cmd:(selector "setAccessibilityTitleUIElement:") ~typ:(id @-> returning void) x
let setAccessibilityToolbarButton x self = msg_send ~self ~cmd:(selector "setAccessibilityToolbarButton:") ~typ:(id @-> returning void) x
let setAccessibilityTopLevelUIElement x self = msg_send ~self ~cmd:(selector "setAccessibilityTopLevelUIElement:") ~typ:(id @-> returning void) x
let setAccessibilityURL x self = msg_send ~self ~cmd:(selector "setAccessibilityURL:") ~typ:(id @-> returning void) x
let setAccessibilityUnitDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityUnitDescription:") ~typ:(id @-> returning void) x
let setAccessibilityUnits x self = msg_send ~self ~cmd:(selector "setAccessibilityUnits:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityUserInputLabels x self = msg_send ~self ~cmd:(selector "setAccessibilityUserInputLabels:") ~typ:(id @-> returning void) x
let setAccessibilityValue x self = msg_send ~self ~cmd:(selector "setAccessibilityValue:") ~typ:(id @-> returning void) x
let setAccessibilityValueDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityValueDescription:") ~typ:(id @-> returning void) x
let setAccessibilityVerticalScrollBar x self = msg_send ~self ~cmd:(selector "setAccessibilityVerticalScrollBar:") ~typ:(id @-> returning void) x
let setAccessibilityVerticalUnitDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityVerticalUnitDescription:") ~typ:(id @-> returning void) x
let setAccessibilityVerticalUnits x self = msg_send ~self ~cmd:(selector "setAccessibilityVerticalUnits:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAccessibilityVisibleCells x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleCells:") ~typ:(id @-> returning void) x
let setAccessibilityVisibleCharacterRange x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleCharacterRange:") ~typ:(NSRange.t @-> returning void) x
let setAccessibilityVisibleChildren x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleChildren:") ~typ:(id @-> returning void) x
let setAccessibilityVisibleColumns x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleColumns:") ~typ:(id @-> returning void) x
let setAccessibilityVisibleRows x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleRows:") ~typ:(id @-> returning void) x
let setAccessibilityWarningValue x self = msg_send ~self ~cmd:(selector "setAccessibilityWarningValue:") ~typ:(id @-> returning void) x
let setAccessibilityWindow x self = msg_send ~self ~cmd:(selector "setAccessibilityWindow:") ~typ:(id @-> returning void) x
let setAccessibilityWindows x self = msg_send ~self ~cmd:(selector "setAccessibilityWindows:") ~typ:(id @-> returning void) x
let setAccessibilityZoomButton x self = msg_send ~self ~cmd:(selector "setAccessibilityZoomButton:") ~typ:(id @-> returning void) x
let setAction x self = msg_send ~self ~cmd:(selector "setAction:") ~typ:(_SEL @-> returning void) x
let setAlignment x self = msg_send ~self ~cmd:(selector "setAlignment:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAllowsAppearanceTextEffects x self = msg_send ~self ~cmd:(selector "setAllowsAppearanceTextEffects:") ~typ:(bool @-> returning void) x
let setAllowsDefaultTighteningForTruncation x self = msg_send ~self ~cmd:(selector "setAllowsDefaultTighteningForTruncation:") ~typ:(bool @-> returning void) x
let setAllowsEditingTextAttributes x self = msg_send ~self ~cmd:(selector "setAllowsEditingTextAttributes:") ~typ:(bool @-> returning void) x
let setAllowsMixedState x self = msg_send ~self ~cmd:(selector "setAllowsMixedState:") ~typ:(bool @-> returning void) x
let setAllowsUndo x self = msg_send ~self ~cmd:(selector "setAllowsUndo:") ~typ:(bool @-> returning void) x
let setAttributedStringValue x self = msg_send ~self ~cmd:(selector "setAttributedStringValue:") ~typ:(id @-> returning void) x
let setBackgroundStyle x self = msg_send ~self ~cmd:(selector "setBackgroundStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setBaseWritingDirection x self = msg_send ~self ~cmd:(selector "setBaseWritingDirection:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setBezeled x self = msg_send ~self ~cmd:(selector "setBezeled:") ~typ:(bool @-> returning void) x
let setBordered x self = msg_send ~self ~cmd:(selector "setBordered:") ~typ:(bool @-> returning void) x
let setCellAttribute x ~to_ self = msg_send ~self ~cmd:(selector "setCellAttribute:to:") ~typ:(ullong @-> llong @-> returning void) (ULLong.of_int x) (LLong.of_int to_)
let setContinuous x self = msg_send ~self ~cmd:(selector "setContinuous:") ~typ:(bool @-> returning void) x
let setControlSize x self = msg_send ~self ~cmd:(selector "setControlSize:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setControlTint x self = msg_send ~self ~cmd:(selector "setControlTint:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setControlView x self = msg_send ~self ~cmd:(selector "setControlView:") ~typ:(id @-> returning void) x
let setDoubleValue x self = msg_send ~self ~cmd:(selector "setDoubleValue:") ~typ:(double @-> returning void) x
let setDrawsBackground x self = msg_send ~self ~cmd:(selector "setDrawsBackground:") ~typ:(bool @-> returning void) x
let setEditable x self = msg_send ~self ~cmd:(selector "setEditable:") ~typ:(bool @-> returning void) x
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning void) x
let setEntryType x self = msg_send ~self ~cmd:(selector "setEntryType:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setFieldEditorTextContainer x self = msg_send ~self ~cmd:(selector "setFieldEditorTextContainer:") ~typ:(id @-> returning void) x
let setFloatValue x self = msg_send ~self ~cmd:(selector "setFloatValue:") ~typ:(float @-> returning void) x
let setFloatingPointFormat x ~left ~right self = msg_send ~self ~cmd:(selector "setFloatingPointFormat:left:right:") ~typ:(bool @-> ullong @-> ullong @-> returning void) x (ULLong.of_int left) (ULLong.of_int right)
let setFocusRingType x self = msg_send ~self ~cmd:(selector "setFocusRingType:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setFont x self = msg_send ~self ~cmd:(selector "setFont:") ~typ:(id @-> returning void) x
let setFormatter x self = msg_send ~self ~cmd:(selector "setFormatter:") ~typ:(id @-> returning void) x
let setHighlighted x self = msg_send ~self ~cmd:(selector "setHighlighted:") ~typ:(bool @-> returning void) x
let setIdentifier x self = msg_send ~self ~cmd:(selector "setIdentifier:") ~typ:(id @-> returning void) x
let setImage x self = msg_send ~self ~cmd:(selector "setImage:") ~typ:(id @-> returning void) x
let setImageInterpolation x self = msg_send ~self ~cmd:(selector "setImageInterpolation:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setImportsGraphics x self = msg_send ~self ~cmd:(selector "setImportsGraphics:") ~typ:(bool @-> returning void) x
let setIntValue x self = msg_send ~self ~cmd:(selector "setIntValue:") ~typ:(int @-> returning void) x
let setIntegerValue x self = msg_send ~self ~cmd:(selector "setIntegerValue:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setLineBreakMode x self = msg_send ~self ~cmd:(selector "setLineBreakMode:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setMenu x self = msg_send ~self ~cmd:(selector "setMenu:") ~typ:(id @-> returning void) x
let setMnemonicLocation x self = msg_send ~self ~cmd:(selector "setMnemonicLocation:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setNextContentSibling x self = msg_send ~self ~cmd:(selector "setNextContentSibling:") ~typ:(id @-> returning void) x
let setNextState self = msg_send ~self ~cmd:(selector "setNextState") ~typ:(returning void)
let setObjectValue x self = msg_send ~self ~cmd:(selector "setObjectValue:") ~typ:(id @-> returning void) x
let setPreviousContentSibling x self = msg_send ~self ~cmd:(selector "setPreviousContentSibling:") ~typ:(id @-> returning void) x
let setRefusesFirstResponder x self = msg_send ~self ~cmd:(selector "setRefusesFirstResponder:") ~typ:(bool @-> returning void) x
let setRepresentedObject x self = msg_send ~self ~cmd:(selector "setRepresentedObject:") ~typ:(id @-> returning void) x
let setScrollable x self = msg_send ~self ~cmd:(selector "setScrollable:") ~typ:(bool @-> returning void) x
let setSelectable x self = msg_send ~self ~cmd:(selector "setSelectable:") ~typ:(bool @-> returning void) x
let setSendsActionOnEndEditing x self = msg_send ~self ~cmd:(selector "setSendsActionOnEndEditing:") ~typ:(bool @-> returning void) x
let setShowsFirstResponder x self = msg_send ~self ~cmd:(selector "setShowsFirstResponder:") ~typ:(bool @-> returning void) x
let setState x self = msg_send ~self ~cmd:(selector "setState:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setStringValue x self = msg_send ~self ~cmd:(selector "setStringValue:") ~typ:(id @-> returning void) x
let setStyleEffectConfiguration x self = msg_send ~self ~cmd:(selector "setStyleEffectConfiguration:") ~typ:(id @-> returning void) x
let setTag x self = msg_send ~self ~cmd:(selector "setTag:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setTarget x self = msg_send ~self ~cmd:(selector "setTarget:") ~typ:(id @-> returning void) x
let setTitle x self = msg_send ~self ~cmd:(selector "setTitle:") ~typ:(id @-> returning void) x
let setTitleTextContainer x self = msg_send ~self ~cmd:(selector "setTitleTextContainer:") ~typ:(id @-> returning void) x
let setTitleWithMnemonic x self = msg_send ~self ~cmd:(selector "setTitleWithMnemonic:") ~typ:(id @-> returning void) x
let setTruncatesLastVisibleLine x self = msg_send ~self ~cmd:(selector "setTruncatesLastVisibleLine:") ~typ:(bool @-> returning void) x
let setType x self = msg_send ~self ~cmd:(selector "setType:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setUpFieldEditorAttributes x self = msg_send ~self ~cmd:(selector "setUpFieldEditorAttributes:") ~typ:(id @-> returning id) x
let setUserInterfaceItemIdentifier x self = msg_send ~self ~cmd:(selector "setUserInterfaceItemIdentifier:") ~typ:(id @-> returning void) x
let setUserInterfaceLayoutDirection x self = msg_send ~self ~cmd:(selector "setUserInterfaceLayoutDirection:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setUsesSingleLineMode x self = msg_send ~self ~cmd:(selector "setUsesSingleLineMode:") ~typ:(bool @-> returning void) x
let setWraps x self = msg_send ~self ~cmd:(selector "setWraps:") ~typ:(bool @-> returning void) x
let showsFirstResponder self = msg_send ~self ~cmd:(selector "showsFirstResponder") ~typ:(returning bool)
let startTrackingAt x ~inView self = msg_send ~self ~cmd:(selector "startTrackingAt:inView:") ~typ:(CGPoint.t @-> id @-> returning bool) x inView
let state self = msg_send ~self ~cmd:(selector "state") ~typ:(returning llong)
let stopTracking x ~at ~inView ~mouseIsUp self = msg_send ~self ~cmd:(selector "stopTracking:at:inView:mouseIsUp:") ~typ:(CGPoint.t @-> CGPoint.t @-> id @-> bool @-> returning void) x at inView mouseIsUp
let stringValue self = msg_send ~self ~cmd:(selector "stringValue") ~typ:(returning id)
let styleEffectConfiguration self = msg_send ~self ~cmd:(selector "styleEffectConfiguration") ~typ:(returning id)
let tag self = msg_send ~self ~cmd:(selector "tag") ~typ:(returning llong)
let takeDoubleValueFrom x self = msg_send ~self ~cmd:(selector "takeDoubleValueFrom:") ~typ:(id @-> returning void) x
let takeFloatValueFrom x self = msg_send ~self ~cmd:(selector "takeFloatValueFrom:") ~typ:(id @-> returning void) x
let takeIntValueFrom x self = msg_send ~self ~cmd:(selector "takeIntValueFrom:") ~typ:(id @-> returning void) x
let takeIntegerValueFrom x self = msg_send ~self ~cmd:(selector "takeIntegerValueFrom:") ~typ:(id @-> returning void) x
let takeObjectValueFrom x self = msg_send ~self ~cmd:(selector "takeObjectValueFrom:") ~typ:(id @-> returning void) x
let takeStringValueFrom x self = msg_send ~self ~cmd:(selector "takeStringValueFrom:") ~typ:(id @-> returning void) x
let target self = msg_send ~self ~cmd:(selector "target") ~typ:(returning id)
let textAlignmentPolicy self = msg_send ~self ~cmd:(selector "textAlignmentPolicy") ~typ:(returning ullong)
let textDidChange x self = msg_send ~self ~cmd:(selector "textDidChange:") ~typ:(id @-> returning void) x
let textView x ~shouldChangeTextInRange ~replacementString self = msg_send ~self ~cmd:(selector "textView:shouldChangeTextInRange:replacementString:") ~typ:(id @-> NSRange.t @-> id @-> returning bool) x shouldChangeTextInRange replacementString
let title self = msg_send ~self ~cmd:(selector "title") ~typ:(returning id)
let titleRectForBounds x self = msg_send ~self ~cmd:(selector "titleRectForBounds:") ~typ:(CGRect.t @-> returning CGRect.t) x
let titleTextContainer self = msg_send ~self ~cmd:(selector "titleTextContainer") ~typ:(returning id)
let touchBeganAt x ~inView self = msg_send ~self ~cmd:(selector "touchBeganAt:inView:") ~typ:(CGPoint.t @-> id @-> returning void) x inView
let touchCancelledAt x ~inView self = msg_send ~self ~cmd:(selector "touchCancelledAt:inView:") ~typ:(CGPoint.t @-> id @-> returning void) x inView
let touchEndedAt x ~inView self = msg_send ~self ~cmd:(selector "touchEndedAt:inView:") ~typ:(CGPoint.t @-> id @-> returning void) x inView
let touchMovedFrom x ~to_ ~inView self = msg_send ~self ~cmd:(selector "touchMovedFrom:to:inView:") ~typ:(CGPoint.t @-> CGPoint.t @-> id @-> returning void) x to_ inView
let trackMouse x ~inRect ~ofView ~untilMouseUp self = msg_send ~self ~cmd:(selector "trackMouse:inRect:ofView:untilMouseUp:") ~typ:(id @-> CGRect.t @-> id @-> bool @-> returning bool) x inRect ofView untilMouseUp
let truncatesLastVisibleLine self = msg_send ~self ~cmd:(selector "truncatesLastVisibleLine") ~typ:(returning bool)
let type_ self = msg_send ~self ~cmd:(selector "type") ~typ:(returning ullong)
let updateLayerWithFrame x ~inView self = msg_send ~self ~cmd:(selector "updateLayerWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let updateTrackingAreaWithFrame x ~inView self = msg_send ~self ~cmd:(selector "updateTrackingAreaWithFrame:inView:") ~typ:(CGRect.t @-> id @-> returning void) x inView
let userInterfaceItemIdentifier self = msg_send ~self ~cmd:(selector "userInterfaceItemIdentifier") ~typ:(returning id)
let userInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "userInterfaceLayoutDirection") ~typ:(returning llong)
let usesSingleLineMode self = msg_send ~self ~cmd:(selector "usesSingleLineMode") ~typ:(returning bool)
let wantsNotificationForMarkedText self = msg_send ~self ~cmd:(selector "wantsNotificationForMarkedText") ~typ:(returning bool)
let wantsUpdateLayerInView x self = msg_send ~self ~cmd:(selector "wantsUpdateLayerInView:") ~typ:(id @-> returning bool) x
let wraps self = msg_send ~self ~cmd:(selector "wraps") ~typ:(returning bool)