(library
 (name runtime)
 (public_name camlkit-base.runtime)
 (libraries ctypes ctypes.foreign)
 (flags -linkall)
 (c_library_flags :standard %{read-lines:flags.txt})
 (ctypes
  (external_library_name libobjc)
  (build_flags_resolver
   (vendored
    (c_flags :standard %{read-lines:cflags.txt})
    (c_library_flags :standard %{read-lines:flags.txt})))
  (headers (include "objc/runtime.h"))
  (type_description
   (instance Types)
   (functor Type_description))
  (function_description
   (concurrency unlocked)
   (instance Functions)
   (functor Function_description))
  (generated_types Types_generated)
  (generated_entry_point C)))

(documentation (package camlkit-base))

(rule
 (enabled_if (= %{system} macosx))
 (target cflags.txt)
 (action (with-stdout-to %{target}
  (echo ""))))

(rule
 (enabled_if (= %{system} linux))
 (target cflags.txt)
 (action (with-stdout-to %{target}
  (echo "-I/usr/GNUstep/Local/Library/Headers/"))))

(rule
 (enabled_if (= %{system} macosx))
 (target flags.txt)
 (action (copy flags.macos %{target})))

(rule
 (enabled_if (= %{system} linux))
 (target flags.txt)
 (action (copy flags.gnustep %{target})))

(rule
 (enabled_if (= %{system} macosx))
 (target platform.ml)
 (action (copy platform.macos %{target})))

(rule
 (enabled_if (= %{system} linux))
 (target platform.ml)
 (action (copy platform.gnustep %{target})))

(rule
 (with-stdout-to arch.ml
  (bash "foo=%{architecture}; echo \"type t = Amd64 | Arm64 \nlet current = ${foo^}\"")))