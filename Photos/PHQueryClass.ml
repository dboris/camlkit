(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

(** Apple docs: {{:https://developer.apple.com/documentation/photos/phquery?language=objc}PHQuery} *)

let combinedFetchRequestForQueries x self = msg_send ~self ~cmd:(selector "combinedFetchRequestForQueries:") ~typ:(id @-> returning id) x
let defaultSortDescriptorForFetchType x ~predicate self = msg_send ~self ~cmd:(selector "defaultSortDescriptorForFetchType:predicate:") ~typ:(id @-> id @-> returning id) x predicate
let fetchRootFolderIDForAlbumKind x ~photoLibrary self = msg_send ~self ~cmd:(selector "fetchRootFolderIDForAlbumKind:photoLibrary:") ~typ:(int @-> id @-> returning id) x photoLibrary
let identificationBlockForAlbumSortKey x self = msg_send ~self ~cmd:(selector "identificationBlockForAlbumSortKey:") ~typ:(uint @-> returning (ptr void)) x
let identificationBlockForSmartAlbumKind x self = msg_send ~self ~cmd:(selector "identificationBlockForSmartAlbumKind:") ~typ:(int @-> returning (ptr void)) x
let queryForAllAssetsAssociatedWithMemory x ~options self = msg_send ~self ~cmd:(selector "queryForAllAssetsAssociatedWithMemory:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAllAssetsInYearRepresentedByYearHighlight x ~options self = msg_send ~self ~cmd:(selector "queryForAllAssetsInYearRepresentedByYearHighlight:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAnsweredQuestionsWithOptions x self = msg_send ~self ~cmd:(selector "queryForAnsweredQuestionsWithOptions:") ~typ:(id @-> returning id) x
let queryForAnsweredYesOrNoQuestionsWithOptions x self = msg_send ~self ~cmd:(selector "queryForAnsweredYesOrNoQuestionsWithOptions:") ~typ:(id @-> returning id) x
let queryForAssetCollectionsContainingAsset x ~withType ~options self = msg_send ~self ~cmd:(selector "queryForAssetCollectionsContainingAsset:withType:options:") ~typ:(id @-> llong @-> id @-> returning id) x (LLong.of_int withType) options
let queryForAssetCollectionsContainingAssets x ~withType ~options self = msg_send ~self ~cmd:(selector "queryForAssetCollectionsContainingAssets:withType:options:") ~typ:(id @-> llong @-> id @-> returning id) x (LLong.of_int withType) options
let queryForAssetCollectionsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForAssetCollectionsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetCollectionsWithObjectIDs x ~options self = msg_send ~self ~cmd:(selector "queryForAssetCollectionsWithObjectIDs:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetCollectionsWithType x ~localIdentifiers ~options self = msg_send ~self ~cmd:(selector "queryForAssetCollectionsWithType:localIdentifiers:options:") ~typ:(llong @-> id @-> id @-> returning id) (LLong.of_int x) localIdentifiers options
let queryForAssetCollectionsWithType' x ~subtype ~options self = msg_send ~self ~cmd:(selector "queryForAssetCollectionsWithType:subtype:options:") ~typ:(llong @-> llong @-> id @-> returning id) (LLong.of_int x) (LLong.of_int subtype) options
let queryForAssetsAllowedForSceneProcessingWithOptions x self = msg_send ~self ~cmd:(selector "queryForAssetsAllowedForSceneProcessingWithOptions:") ~typ:(id @-> returning id) x
let queryForAssetsForBehavioralCurationWithOptions x self = msg_send ~self ~cmd:(selector "queryForAssetsForBehavioralCurationWithOptions:") ~typ:(id @-> returning id) x
let queryForAssetsForFaceGroups x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsForFaceGroups:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsForFaces x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsForFaces:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsForKeywords x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsForKeywords:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsForPersons x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsForPersons:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsFromCameraSinceDate x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsFromCameraSinceDate:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsInAssetCollection x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsInAssetCollection:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsInBoundingBoxWithTopLeftLocation x ~bottomRightLocation ~options self = msg_send ~self ~cmd:(selector "queryForAssetsInBoundingBoxWithTopLeftLocation:bottomRightLocation:options:") ~typ:(id @-> id @-> id @-> returning id) x bottomRightLocation options
let queryForAssetsInImportSessions x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsInImportSessions:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsNeedingSceneProcessingWithOptions x self = msg_send ~self ~cmd:(selector "queryForAssetsNeedingSceneProcessingWithOptions:") ~typ:(id @-> returning id) x
let queryForAssetsWithBurstIdentifier x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsWithBurstIdentifier:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsWithCloudIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsWithCloudIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsWithMediaType x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsWithMediaType:options:") ~typ:(llong @-> id @-> returning id) (LLong.of_int x) options
let queryForAssetsWithObjectIDs x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsWithObjectIDs:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssetsWithOptions x self = msg_send ~self ~cmd:(selector "queryForAssetsWithOptions:") ~typ:(id @-> returning id) x
let queryForAssetsWithUUIDs x ~options self = msg_send ~self ~cmd:(selector "queryForAssetsWithUUIDs:options:") ~typ:(id @-> id @-> returning id) x options
let queryForAssociatedPersonForFaceGroup x ~withOptions self = msg_send ~self ~cmd:(selector "queryForAssociatedPersonForFaceGroup:withOptions:") ~typ:(id @-> id @-> returning id) x withOptions
let queryForChildrenDayGroupHighlightsForPhotosHighlight x ~options self = msg_send ~self ~cmd:(selector "queryForChildrenDayGroupHighlightsForPhotosHighlight:options:") ~typ:(id @-> id @-> returning id) x options
let queryForChildrenHighlightsForPhotosHighlight x ~options self = msg_send ~self ~cmd:(selector "queryForChildrenHighlightsForPhotosHighlight:options:") ~typ:(id @-> id @-> returning id) x options
let queryForCollectionListContainingCollection x ~options self = msg_send ~self ~cmd:(selector "queryForCollectionListContainingCollection:options:") ~typ:(id @-> id @-> returning id) x options
let queryForCollectionListsWithType x ~localIdentifiers ~options self = msg_send ~self ~cmd:(selector "queryForCollectionListsWithType:localIdentifiers:options:") ~typ:(llong @-> id @-> id @-> returning id) (LLong.of_int x) localIdentifiers options
let queryForCollectionListsWithType' x ~subtype ~options self = msg_send ~self ~cmd:(selector "queryForCollectionListsWithType:subtype:options:") ~typ:(llong @-> llong @-> id @-> returning id) (LLong.of_int x) (LLong.of_int subtype) options
let queryForCollectionsInCollectionList x ~options self = msg_send ~self ~cmd:(selector "queryForCollectionsInCollectionList:options:") ~typ:(id @-> id @-> returning id) x options
let queryForContributorForAsset x ~options self = msg_send ~self ~cmd:(selector "queryForContributorForAsset:options:") ~typ:(id @-> id @-> returning id) x options
let queryForCuratedAssetsInMemory x ~options self = msg_send ~self ~cmd:(selector "queryForCuratedAssetsInMemory:options:") ~typ:(id @-> id @-> returning id) x options
let queryForCuratedAssetsInMomentShare x ~options self = msg_send ~self ~cmd:(selector "queryForCuratedAssetsInMomentShare:options:") ~typ:(id @-> id @-> returning id) x options
let queryForCuratedAssetsInPhotosHighlight x ~options self = msg_send ~self ~cmd:(selector "queryForCuratedAssetsInPhotosHighlight:options:") ~typ:(id @-> id @-> returning id) x options
let queryForCustomKeyAssetsInAssetCollection x ~options self = msg_send ~self ~cmd:(selector "queryForCustomKeyAssetsInAssetCollection:options:") ~typ:(id @-> id @-> returning id) x options
let queryForEmptyFaceGroupsWithOptions x self = msg_send ~self ~cmd:(selector "queryForEmptyFaceGroupsWithOptions:") ~typ:(id @-> returning id) x
let queryForExtendedCuratedAssetsInMemory x ~options self = msg_send ~self ~cmd:(selector "queryForExtendedCuratedAssetsInMemory:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFaceCropsForPerson x ~options self = msg_send ~self ~cmd:(selector "queryForFaceCropsForPerson:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFaceCropsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForFaceCropsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFaceCropsWithOptions x self = msg_send ~self ~cmd:(selector "queryForFaceCropsWithOptions:") ~typ:(id @-> returning id) x
let queryForFaceGroupsForPerson x ~options self = msg_send ~self ~cmd:(selector "queryForFaceGroupsForPerson:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFaceGroupsWithFace x ~options self = msg_send ~self ~cmd:(selector "queryForFaceGroupsWithFace:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFaceGroupsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForFaceGroupsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFaceGroupsWithOptions x self = msg_send ~self ~cmd:(selector "queryForFaceGroupsWithOptions:") ~typ:(id @-> returning id) x
let queryForFacesForPerson x ~options self = msg_send ~self ~cmd:(selector "queryForFacesForPerson:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFacesInAsset x ~options self = msg_send ~self ~cmd:(selector "queryForFacesInAsset:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFacesInAssets x ~options self = msg_send ~self ~cmd:(selector "queryForFacesInAssets:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFacesInFaceGroup x ~options self = msg_send ~self ~cmd:(selector "queryForFacesInFaceGroup:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFacesOnAssetWithFace x ~options self = msg_send ~self ~cmd:(selector "queryForFacesOnAssetWithFace:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFacesOnFaceCrop x ~options self = msg_send ~self ~cmd:(selector "queryForFacesOnFaceCrop:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFacesWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForFacesWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForFacesWithOptions x self = msg_send ~self ~cmd:(selector "queryForFacesWithOptions:") ~typ:(id @-> returning id) x
let queryForGuestAssetsInCollectionContainingAsset x ~options self = msg_send ~self ~cmd:(selector "queryForGuestAssetsInCollectionContainingAsset:options:") ~typ:(id @-> id @-> returning id) x options
let queryForGuestAssetsWithOptions x self = msg_send ~self ~cmd:(selector "queryForGuestAssetsWithOptions:") ~typ:(id @-> returning id) x
let queryForImportSessionsWithOptions x self = msg_send ~self ~cmd:(selector "queryForImportSessionsWithOptions:") ~typ:(id @-> returning id) x
let queryForInvalidMergeCandidatePersonsForPerson x ~options self = msg_send ~self ~cmd:(selector "queryForInvalidMergeCandidatePersonsForPerson:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeyAssetInMemory x ~options self = msg_send ~self ~cmd:(selector "queryForKeyAssetInMemory:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeyAssetInPhotosHighlight x ~options self = msg_send ~self ~cmd:(selector "queryForKeyAssetInPhotosHighlight:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeyAssetInPhotosHighlightWithLocalIdentifier x ~options self = msg_send ~self ~cmd:(selector "queryForKeyAssetInPhotosHighlightWithLocalIdentifier:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeyAssetsInAssetCollection x ~options self = msg_send ~self ~cmd:(selector "queryForKeyAssetsInAssetCollection:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeyAssetsInMomentShare x ~options self = msg_send ~self ~cmd:(selector "queryForKeyAssetsInMomentShare:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeyAssetsInSuggestion x ~options self = msg_send ~self ~cmd:(selector "queryForKeyAssetsInSuggestion:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeyFaceForFaceGroup x ~options self = msg_send ~self ~cmd:(selector "queryForKeyFaceForFaceGroup:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeyFaceOnPerson x ~options self = msg_send ~self ~cmd:(selector "queryForKeyFaceOnPerson:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeywordsForAsset x ~options self = msg_send ~self ~cmd:(selector "queryForKeywordsForAsset:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeywordsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForKeywordsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForKeywordsWithOptions x self = msg_send ~self ~cmd:(selector "queryForKeywordsWithOptions:") ~typ:(id @-> returning id) x
let queryForKeywordsWithTitles x ~options self = msg_send ~self ~cmd:(selector "queryForKeywordsWithTitles:options:") ~typ:(id @-> id @-> returning id) x options
let queryForMergeCandidatePersonsForPerson x ~options self = msg_send ~self ~cmd:(selector "queryForMergeCandidatePersonsForPerson:options:") ~typ:(id @-> id @-> returning id) x options
let queryForMomentListsWithSubType x ~containingMoment self = msg_send ~self ~cmd:(selector "queryForMomentListsWithSubType:containingMoment:") ~typ:(llong @-> id @-> returning id) (LLong.of_int x) containingMoment
let queryForMomentListsWithSubType' x ~options self = msg_send ~self ~cmd:(selector "queryForMomentListsWithSubType:options:") ~typ:(llong @-> id @-> returning id) (LLong.of_int x) options
let queryForMomentsBackingMemory x self = msg_send ~self ~cmd:(selector "queryForMomentsBackingMemory:") ~typ:(id @-> returning id) x
let queryForMomentsBackingSuggestion x self = msg_send ~self ~cmd:(selector "queryForMomentsBackingSuggestion:") ~typ:(id @-> returning id) x
let queryForMomentsContainingAssetsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForMomentsContainingAssetsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForMomentsContainingAssetsWithOIDs x ~options self = msg_send ~self ~cmd:(selector "queryForMomentsContainingAssetsWithOIDs:options:") ~typ:(id @-> id @-> returning id) x options
let queryForMomentsForFacesWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForMomentsForFacesWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForMomentsForPersonsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForMomentsForPersonsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForMomentsInMomentList x ~options self = msg_send ~self ~cmd:(selector "queryForMomentsInMomentList:options:") ~typ:(id @-> id @-> returning id) x options
let queryForMomentsInPhotosHighlight x self = msg_send ~self ~cmd:(selector "queryForMomentsInPhotosHighlight:") ~typ:(id @-> returning id) x
let queryForMomentsWithOptions x self = msg_send ~self ~cmd:(selector "queryForMomentsWithOptions:") ~typ:(id @-> returning id) x
let queryForMovieCuratedAssetsInMemory x ~options self = msg_send ~self ~cmd:(selector "queryForMovieCuratedAssetsInMemory:options:") ~typ:(id @-> id @-> returning id) x options
let queryForParentDayGroupHighlightForPhotosHighlight x ~options self = msg_send ~self ~cmd:(selector "queryForParentDayGroupHighlightForPhotosHighlight:options:") ~typ:(id @-> id @-> returning id) x options
let queryForParentHighlightForPhotosHighlight x ~options self = msg_send ~self ~cmd:(selector "queryForParentHighlightForPhotosHighlight:options:") ~typ:(id @-> id @-> returning id) x options
let queryForParentHighlightsForPhotosHighlights x ~options self = msg_send ~self ~cmd:(selector "queryForParentHighlightsForPhotosHighlights:options:") ~typ:(id @-> id @-> returning id) x options
let queryForPersonsInAsset x ~options self = msg_send ~self ~cmd:(selector "queryForPersonsInAsset:options:") ~typ:(id @-> id @-> returning id) x options
let queryForPersonsInAssets x ~withOptions self = msg_send ~self ~cmd:(selector "queryForPersonsInAssets:withOptions:") ~typ:(id @-> id @-> returning id) x withOptions
let queryForPersonsWithContactIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForPersonsWithContactIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForPersonsWithFace x ~options self = msg_send ~self ~cmd:(selector "queryForPersonsWithFace:options:") ~typ:(id @-> id @-> returning id) x options
let queryForPersonsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForPersonsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForPersonsWithNonNilUserFeedbackWithOptions x self = msg_send ~self ~cmd:(selector "queryForPersonsWithNonNilUserFeedbackWithOptions:") ~typ:(id @-> returning id) x
let queryForPersonsWithOptions x self = msg_send ~self ~cmd:(selector "queryForPersonsWithOptions:") ~typ:(id @-> returning id) x
let queryForPersonsWithQuestionType x ~options self = msg_send ~self ~cmd:(selector "queryForPersonsWithQuestionType:options:") ~typ:(ushort @-> id @-> returning id) x options
let queryForPersonsWithType x ~options self = msg_send ~self ~cmd:(selector "queryForPersonsWithType:options:") ~typ:(llong @-> id @-> returning id) (LLong.of_int x) options
let queryForPhotosHighlightsContainingMoments x self = msg_send ~self ~cmd:(selector "queryForPhotosHighlightsContainingMoments:") ~typ:(id @-> returning id) x
let queryForProjectsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForProjectsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForQuestionsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForQuestionsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForQuestionsWithOptions x self = msg_send ~self ~cmd:(selector "queryForQuestionsWithOptions:") ~typ:(id @-> returning id) x
let queryForQuestionsWithState x ~options self = msg_send ~self ~cmd:(selector "queryForQuestionsWithState:options:") ~typ:(ushort @-> id @-> returning id) x options
let queryForReferencedAssetsWithOptions x self = msg_send ~self ~cmd:(selector "queryForReferencedAssetsWithOptions:") ~typ:(id @-> returning id) x
let queryForRejectedFacesOnPerson x ~options self = msg_send ~self ~cmd:(selector "queryForRejectedFacesOnPerson:options:") ~typ:(id @-> id @-> returning id) x options
let queryForRejectedPersonsForFace x ~options self = msg_send ~self ~cmd:(selector "queryForRejectedPersonsForFace:options:") ~typ:(id @-> id @-> returning id) x options
let queryForRepresentativeAssetsInMemory x ~options self = msg_send ~self ~cmd:(selector "queryForRepresentativeAssetsInMemory:options:") ~typ:(id @-> id @-> returning id) x options
let queryForRepresentativeAssetsInSuggestion x ~options self = msg_send ~self ~cmd:(selector "queryForRepresentativeAssetsInSuggestion:options:") ~typ:(id @-> id @-> returning id) x options
let queryForRootAlbumCollectionListWithOptions x self = msg_send ~self ~cmd:(selector "queryForRootAlbumCollectionListWithOptions:") ~typ:(id @-> returning id) x
let queryForRootProjectCollectionListWithOptions x self = msg_send ~self ~cmd:(selector "queryForRootProjectCollectionListWithOptions:") ~typ:(id @-> returning id) x
let queryForShareParticipantsInShare x ~options self = msg_send ~self ~cmd:(selector "queryForShareParticipantsInShare:options:") ~typ:(id @-> id @-> returning id) x options
let queryForShareParticipantsWithLocalIdentifiers x ~options self = msg_send ~self ~cmd:(selector "queryForShareParticipantsWithLocalIdentifiers:options:") ~typ:(id @-> id @-> returning id) x options
let queryForSingletonFacesWithOptions x self = msg_send ~self ~cmd:(selector "queryForSingletonFacesWithOptions:") ~typ:(id @-> returning id) x
let queryForSuggestionsWithOptions x self = msg_send ~self ~cmd:(selector "queryForSuggestionsWithOptions:") ~typ:(id @-> returning id) x
let queryForSuggestionsWithState x ~options self = msg_send ~self ~cmd:(selector "queryForSuggestionsWithState:options:") ~typ:(ushort @-> id @-> returning id) x options
let queryForSuggestionsWithState' x ~type_ ~options self = msg_send ~self ~cmd:(selector "queryForSuggestionsWithState:type:options:") ~typ:(ushort @-> ushort @-> id @-> returning id) x type_ options
let queryForTopLevelCollectionsMatchingPredicate x ~options self = msg_send ~self ~cmd:(selector "queryForTopLevelCollectionsMatchingPredicate:options:") ~typ:(id @-> id @-> returning id) x options
let queryForTopLevelUserCollectionsWithOptions x self = msg_send ~self ~cmd:(selector "queryForTopLevelUserCollectionsWithOptions:") ~typ:(id @-> returning id) x
let queryForType x ~withBasePredicate ~inLibrary self = msg_send ~self ~cmd:(selector "queryForType:withBasePredicate:inLibrary:") ~typ:(id @-> id @-> id @-> returning id) x withBasePredicate inLibrary
let queryForType1 x ~withBasePredicate ~seedOIDs ~inLibrary self = msg_send ~self ~cmd:(selector "queryForType:withBasePredicate:seedOIDs:inLibrary:") ~typ:(id @-> id @-> id @-> id @-> returning id) x withBasePredicate seedOIDs inLibrary
let queryForType2 x ~withIdentifiers ~identiferKeyPath ~options self = msg_send ~self ~cmd:(selector "queryForType:withIdentifiers:identiferKeyPath:options:") ~typ:(id @-> id @-> id @-> id @-> returning id) x withIdentifiers identiferKeyPath options
let queryForType3 x ~withIdentifiers ~local ~options self = msg_send ~self ~cmd:(selector "queryForType:withIdentifiers:local:options:") ~typ:(id @-> id @-> bool @-> id @-> returning id) x withIdentifiers local options
let queryForUserCuratedAssetsInMemory x ~options self = msg_send ~self ~cmd:(selector "queryForUserCuratedAssetsInMemory:options:") ~typ:(id @-> id @-> returning id) x options