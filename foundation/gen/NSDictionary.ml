(* auto-generated, do not modify *)

[@@@ocaml.warning "-32-33"]
open Runtime
open Objc

include NSObject

let _CAMLType  self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning (id)) 
let _CA_copyRenderKeyValueArray  self = msg_send ~self ~cmd:(selector "CA_copyRenderKeyValueArray") ~typ:(returning (ptr (void))) 
let allKeys  self = msg_send ~self ~cmd:(selector "allKeys") ~typ:(returning (id)) 
let allKeysForObject x0 self = msg_send ~self ~cmd:(selector "allKeysForObject:") ~typ:(id @-> returning (id)) x0
let allObjects  self = msg_send ~self ~cmd:(selector "allObjects") ~typ:(returning (id)) 
let allValues  self = msg_send ~self ~cmd:(selector "allValues") ~typ:(returning (id)) 
let bs_boolForKey x0 self = msg_send ~self ~cmd:(selector "bs_boolForKey:") ~typ:(id @-> returning (char)) x0
let bs_dictionaryByAddingEntriesFromDictionary x0 self = msg_send ~self ~cmd:(selector "bs_dictionaryByAddingEntriesFromDictionary:") ~typ:(id @-> returning (id)) x0
let bs_each x0 self = msg_send ~self ~cmd:(selector "bs_each:") ~typ:(ptr void @-> returning (void)) x0
let bs_filter x0 self = msg_send ~self ~cmd:(selector "bs_filter:") ~typ:(ptr void @-> returning (id)) x0
let bs_safeArrayForKey x0 self = msg_send ~self ~cmd:(selector "bs_safeArrayForKey:") ~typ:(id @-> returning (id)) x0
let bs_safeDictionaryForKey x0 self = msg_send ~self ~cmd:(selector "bs_safeDictionaryForKey:") ~typ:(id @-> returning (id)) x0
let bs_safeNumberForKey x0 self = msg_send ~self ~cmd:(selector "bs_safeNumberForKey:") ~typ:(id @-> returning (id)) x0
let bs_safeObjectForKey_ofType x0 x1 self = msg_send ~self ~cmd:(selector "bs_safeObjectForKey:ofType:") ~typ:(id @-> _Class @-> returning (id)) x0 x1
let bs_safeStringForKey x0 self = msg_send ~self ~cmd:(selector "bs_safeStringForKey:") ~typ:(id @-> returning (id)) x0
let bs_safeURLForKey x0 self = msg_send ~self ~cmd:(selector "bs_safeURLForKey:") ~typ:(id @-> returning (id)) x0
let classForCoder  self = msg_send ~self ~cmd:(selector "classForCoder") ~typ:(returning (_Class)) 
let containsKey x0 self = msg_send ~self ~cmd:(selector "containsKey:") ~typ:(id @-> returning (char)) x0
let containsObject x0 self = msg_send ~self ~cmd:(selector "containsObject:") ~typ:(id @-> returning (char)) x0
let copyWithZone x0 self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x0
let count  self = msg_send ~self ~cmd:(selector "count") ~typ:(returning (ullong)) 
let countForKey x0 self = msg_send ~self ~cmd:(selector "countForKey:") ~typ:(id @-> returning (ullong)) x0
let countForObject x0 self = msg_send ~self ~cmd:(selector "countForObject:") ~typ:(id @-> returning (ullong)) x0
let description  self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id)) 
let descriptionInStringsFileFormat  self = msg_send ~self ~cmd:(selector "descriptionInStringsFileFormat") ~typ:(returning (id)) 
let descriptionWithLocale x0 self = msg_send ~self ~cmd:(selector "descriptionWithLocale:") ~typ:(id @-> returning (id)) x0
let descriptionWithLocale_indent x0 x1 self = msg_send ~self ~cmd:(selector "descriptionWithLocale:indent:") ~typ:(id @-> ullong @-> returning (id)) x0 x1
let encodeWithCAMLWriter x0 self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning (void)) x0
let encodeWithCoder x0 self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x0
let encodeWithCoder x0 self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x0
let entriesToStringWithIndent_debug x0 x1 self = msg_send ~self ~cmd:(selector "entriesToStringWithIndent:debug:") ~typ:(int @-> char @-> returning (id)) x0 x1
let enumerateKeysAndObjectsUsingBlock x0 self = msg_send ~self ~cmd:(selector "enumerateKeysAndObjectsUsingBlock:") ~typ:(ptr void @-> returning (void)) x0
let enumerateKeysAndObjectsWithOptions_usingBlock x0 x1 self = msg_send ~self ~cmd:(selector "enumerateKeysAndObjectsWithOptions:usingBlock:") ~typ:(ullong @-> ptr void @-> returning (void)) x0 x1
let fileCreationDate  self = msg_send ~self ~cmd:(selector "fileCreationDate") ~typ:(returning (id)) 
let fileExtensionHidden  self = msg_send ~self ~cmd:(selector "fileExtensionHidden") ~typ:(returning (char)) 
let fileGroupOwnerAccountID  self = msg_send ~self ~cmd:(selector "fileGroupOwnerAccountID") ~typ:(returning (id)) 
let fileGroupOwnerAccountName  self = msg_send ~self ~cmd:(selector "fileGroupOwnerAccountName") ~typ:(returning (id)) 
let fileGroupOwnerAccountNumber  self = msg_send ~self ~cmd:(selector "fileGroupOwnerAccountNumber") ~typ:(returning (ullong)) 
let fileHFSCreatorCode  self = msg_send ~self ~cmd:(selector "fileHFSCreatorCode") ~typ:(returning (uint)) 
let fileHFSTypeCode  self = msg_send ~self ~cmd:(selector "fileHFSTypeCode") ~typ:(returning (uint)) 
let fileIsAppendOnly  self = msg_send ~self ~cmd:(selector "fileIsAppendOnly") ~typ:(returning (char)) 
let fileIsImmutable  self = msg_send ~self ~cmd:(selector "fileIsImmutable") ~typ:(returning (char)) 
let fileModificationDate  self = msg_send ~self ~cmd:(selector "fileModificationDate") ~typ:(returning (id)) 
let fileOwnerAccountID  self = msg_send ~self ~cmd:(selector "fileOwnerAccountID") ~typ:(returning (id)) 
let fileOwnerAccountName  self = msg_send ~self ~cmd:(selector "fileOwnerAccountName") ~typ:(returning (id)) 
let fileOwnerAccountNumber  self = msg_send ~self ~cmd:(selector "fileOwnerAccountNumber") ~typ:(returning (ullong)) 
let filePosixPermissions  self = msg_send ~self ~cmd:(selector "filePosixPermissions") ~typ:(returning (ullong)) 
let fileSize  self = msg_send ~self ~cmd:(selector "fileSize") ~typ:(returning (ullong)) 
let fileSystemFileNumber  self = msg_send ~self ~cmd:(selector "fileSystemFileNumber") ~typ:(returning (ullong)) 
let fileSystemNumber  self = msg_send ~self ~cmd:(selector "fileSystemNumber") ~typ:(returning (llong)) 
let fileType  self = msg_send ~self ~cmd:(selector "fileType") ~typ:(returning (id)) 
let getKeys x0 self = msg_send ~self ~cmd:(selector "getKeys:") ~typ:(ptr (id) @-> returning (void)) x0
let getObjects x0 self = msg_send ~self ~cmd:(selector "getObjects:") ~typ:(ptr (id) @-> returning (void)) x0
let getObjects_andKeys x0 x1 self = msg_send ~self ~cmd:(selector "getObjects:andKeys:") ~typ:(ptr (id) @-> ptr (id) @-> returning (void)) x0 x1
let getObjects_andKeys_count x0 x1 x2 self = msg_send ~self ~cmd:(selector "getObjects:andKeys:count:") ~typ:(ptr (id) @-> ptr (id) @-> ullong @-> returning (void)) x0 x1 x2
let hash  self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong)) 
let initWithCoder x0 self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x0
let initWithCoder x0 self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfFile x0 self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfURL x0 self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfURL_error x0 x1 self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x0 x1
let initWithDictionary x0 self = msg_send ~self ~cmd:(selector "initWithDictionary:") ~typ:(id @-> returning (id)) x0
let initWithDictionary_copyItems x0 x1 self = msg_send ~self ~cmd:(selector "initWithDictionary:copyItems:") ~typ:(id @-> char @-> returning (id)) x0 x1
let initWithObject_forKey x0 x1 self = msg_send ~self ~cmd:(selector "initWithObject:forKey:") ~typ:(id @-> id @-> returning (id)) x0 x1
let initWithObjectsAndKeys x0 self = msg_send ~self ~cmd:(selector "initWithObjectsAndKeys:") ~typ:(id @-> returning (id)) x0
let initWithObjects_forKeys x0 x1 self = msg_send ~self ~cmd:(selector "initWithObjects:forKeys:") ~typ:(id @-> id @-> returning (id)) x0 x1
let initWithObjects_forKeys_count x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithObjects:forKeys:count:") ~typ:(ptr (id) @-> ptr (id) @-> ullong @-> returning (id)) x0 x1 x2
let invertedDictionary  self = msg_send ~self ~cmd:(selector "invertedDictionary") ~typ:(returning (id)) 
let isEqual x0 self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning (char)) x0
let isEqualToDictionary x0 self = msg_send ~self ~cmd:(selector "isEqualToDictionary:") ~typ:(id @-> returning (char)) x0
let isEqualToDictionary_forKeys x0 x1 self = msg_send ~self ~cmd:(selector "isEqualToDictionary:forKeys:") ~typ:(id @-> id @-> returning (char)) x0 x1
let isNSDictionary__  self = msg_send ~self ~cmd:(selector "isNSDictionary__") ~typ:(returning (char)) 
let keyEnumerator  self = msg_send ~self ~cmd:(selector "keyEnumerator") ~typ:(returning (id)) 
let keyOfEntryPassingTest x0 self = msg_send ~self ~cmd:(selector "keyOfEntryPassingTest:") ~typ:(ptr void @-> returning (id)) x0
let keyOfEntryWithOptions_passingTest x0 x1 self = msg_send ~self ~cmd:(selector "keyOfEntryWithOptions:passingTest:") ~typ:(ullong @-> ptr void @-> returning (id)) x0 x1
let keysOfEntriesPassingTest x0 self = msg_send ~self ~cmd:(selector "keysOfEntriesPassingTest:") ~typ:(ptr void @-> returning (id)) x0
let keysOfEntriesWithOptions_passingTest x0 x1 self = msg_send ~self ~cmd:(selector "keysOfEntriesWithOptions:passingTest:") ~typ:(ullong @-> ptr void @-> returning (id)) x0 x1
let keysSortedByValueUsingComparator x0 self = msg_send ~self ~cmd:(selector "keysSortedByValueUsingComparator:") ~typ:(ptr void @-> returning (id)) x0
let keysSortedByValueUsingSelector x0 self = msg_send ~self ~cmd:(selector "keysSortedByValueUsingSelector:") ~typ:(_SEL @-> returning (id)) x0
let keysSortedByValueWithOptions_usingComparator x0 x1 self = msg_send ~self ~cmd:(selector "keysSortedByValueWithOptions:usingComparator:") ~typ:(ullong @-> ptr void @-> returning (id)) x0 x1
let ls_fixupExtensionPointIdentifierKey  self = msg_send ~self ~cmd:(selector "ls_fixupExtensionPointIdentifierKey") ~typ:(returning (id)) 
let ls_hashQuery  self = msg_send ~self ~cmd:(selector "ls_hashQuery") ~typ:(returning (ullong)) 
let ls_insertExtensionPointVersion x0 self = msg_send ~self ~cmd:(selector "ls_insertExtensionPointVersion:") ~typ:(id @-> returning (id)) x0
let ls_parseQueryForIdentifiers x0 self = msg_send ~self ~cmd:(selector "ls_parseQueryForIdentifiers:") ~typ:(id @-> returning (id)) x0
let ls_resolvePlugInKitInfoPlistWithDictionary x0 self = msg_send ~self ~cmd:(selector "ls_resolvePlugInKitInfoPlistWithDictionary:") ~typ:(id @-> returning (id)) x0
let ls_updatePlistKeys  self = msg_send ~self ~cmd:(selector "ls_updatePlistKeys") ~typ:(returning (id)) 
let mutableCopyWithZone x0 self = msg_send ~self ~cmd:(selector "mutableCopyWithZone:") ~typ:(id @-> returning (id)) x0
let objectEnumerator  self = msg_send ~self ~cmd:(selector "objectEnumerator") ~typ:(returning (id)) 
let objectForKey x0 self = msg_send ~self ~cmd:(selector "objectForKey:") ~typ:(id @-> returning (id)) x0
let objectForKeyedSubscript x0 self = msg_send ~self ~cmd:(selector "objectForKeyedSubscript:") ~typ:(id @-> returning (id)) x0
let objectsForKeys_notFoundMarker x0 x1 self = msg_send ~self ~cmd:(selector "objectsForKeys:notFoundMarker:") ~typ:(id @-> id @-> returning (id)) x0 x1
let replacementObjectForPortCoder x0 self = msg_send ~self ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning (id)) x0
let storedValueForKey x0 self = msg_send ~self ~cmd:(selector "storedValueForKey:") ~typ:(id @-> returning (id)) x0
let takeStoredValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "takeStoredValue:forKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let takeValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "takeValue:forKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let valueForKey x0 self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning (id)) x0
let valueForKeyPath x0 self = msg_send ~self ~cmd:(selector "valueForKeyPath:") ~typ:(id @-> returning (id)) x0
let writeToFile_atomically x0 x1 self = msg_send ~self ~cmd:(selector "writeToFile:atomically:") ~typ:(id @-> char @-> returning (char)) x0 x1
let writeToURL_atomically x0 x1 self = msg_send ~self ~cmd:(selector "writeToURL:atomically:") ~typ:(id @-> char @-> returning (char)) x0 x1
let writeToURL_error x0 x1 self = msg_send ~self ~cmd:(selector "writeToURL:error:") ~typ:(id @-> ptr (id) @-> returning (char)) x0 x1