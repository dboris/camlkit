(* auto-generated, do not modify *)

[@@@ocaml.warning "-32-33"]
open Runtime
open Objc

let _CAMLType  self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning (id)) 
let _CAMLTypeForKey x0 self = msg_send ~self ~cmd:(selector "CAMLTypeForKey:") ~typ:(id @-> returning (id)) x0
let _CAMLTypeSupportedForKey x0 self = msg_send ~self ~cmd:(selector "CAMLTypeSupportedForKey:") ~typ:(id @-> returning (char)) x0
let _CA_addValue_multipliedBy x0 x1 self = msg_send ~self ~cmd:(selector "CA_addValue:multipliedBy:") ~typ:(id @-> int @-> returning (id)) x0 x1
let _CA_archivingValueForKey x0 self = msg_send ~self ~cmd:(selector "CA_archivingValueForKey:") ~typ:(id @-> returning (id)) x0
let _CA_distanceToValue x0 self = msg_send ~self ~cmd:(selector "CA_distanceToValue:") ~typ:(id @-> returning (double)) x0
let _CA_interpolateValue_byFraction x0 x1 self = msg_send ~self ~cmd:(selector "CA_interpolateValue:byFraction:") ~typ:(id @-> float @-> returning (id)) x0 x1
let _CA_prepareRenderValue  self = msg_send ~self ~cmd:(selector "CA_prepareRenderValue") ~typ:(returning (void)) 
let _CA_roundToIntegerFromValue x0 self = msg_send ~self ~cmd:(selector "CA_roundToIntegerFromValue:") ~typ:(id @-> returning (id)) x0
let _CA_validateValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "CA_validateValue:forKey:") ~typ:(id @-> id @-> returning (char)) x0 x1
let _NSLifeguard_autorelease  self = msg_send ~self ~cmd:(selector "NSLifeguard_autorelease") ~typ:(returning (id)) 
let _NSRepresentation  self = msg_send ~self ~cmd:(selector "NSRepresentation") ~typ:(returning (id)) 
let _NS_addTiledLayerDescendent x0 self = msg_send ~self ~cmd:(selector "NS_addTiledLayerDescendent:") ~typ:(id @-> returning (void)) x0
let _NS_observationForKeyPath_options_block x0 x1 x2 self = msg_send ~self ~cmd:(selector "NS_observationForKeyPath:options:block:") ~typ:(id @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2
let _NS_observationForKeyPaths_options_block x0 x1 x2 self = msg_send ~self ~cmd:(selector "NS_observationForKeyPaths:options:block:") ~typ:(id @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2
let _NS_removeTiledLayerDescendent x0 self = msg_send ~self ~cmd:(selector "NS_removeTiledLayerDescendent:") ~typ:(id @-> returning (void)) x0
let _NS_tiledLayerVisibleRect  self = msg_send ~self ~cmd:(selector "NS_tiledLayerVisibleRect") ~typ:(returning (id)) 
let _RBSIsXPCObject  self = msg_send ~self ~cmd:(selector "RBSIsXPCObject") ~typ:(returning (char)) 
let _class_  self = msg_send ~self ~cmd:(selector "class") ~typ:(returning (_Class)) 
let accessibilityAddTemporaryChild x0 self = msg_send ~self ~cmd:(selector "accessibilityAddTemporaryChild:") ~typ:(id @-> returning (void)) x0
let accessibilityAllowsOverriddenAttributesWhenIgnored  self = msg_send ~self ~cmd:(selector "accessibilityAllowsOverriddenAttributesWhenIgnored") ~typ:(returning (char)) 
let accessibilityArrayAttributeCount x0 self = msg_send ~self ~cmd:(selector "accessibilityArrayAttributeCount:") ~typ:(id @-> returning (ullong)) x0
let accessibilityArrayAttributeValues_index_maxCount x0 x1 x2 self = msg_send ~self ~cmd:(selector "accessibilityArrayAttributeValues:index:maxCount:") ~typ:(id @-> ullong @-> ullong @-> returning (id)) x0 x1 x2
let accessibilityAttributeValue_forParameter x0 x1 self = msg_send ~self ~cmd:(selector "accessibilityAttributeValue:forParameter:") ~typ:(id @-> id @-> returning (id)) x0 x1
let accessibilityAttributedValueForStringAttributeAttributeForParameter x0 self = msg_send ~self ~cmd:(selector "accessibilityAttributedValueForStringAttributeAttributeForParameter:") ~typ:(id @-> returning (id)) x0
let accessibilityDecodeOverriddenAttributes x0 self = msg_send ~self ~cmd:(selector "accessibilityDecodeOverriddenAttributes:") ~typ:(id @-> returning (void)) x0
let accessibilityEncodeOverriddenAttributes x0 self = msg_send ~self ~cmd:(selector "accessibilityEncodeOverriddenAttributes:") ~typ:(id @-> returning (void)) x0
let accessibilityIndexForChildUIElementAttributeForParameter x0 self = msg_send ~self ~cmd:(selector "accessibilityIndexForChildUIElementAttributeForParameter:") ~typ:(id @-> returning (id)) x0
let accessibilityIndexOfChild x0 self = msg_send ~self ~cmd:(selector "accessibilityIndexOfChild:") ~typ:(id @-> returning (ullong)) x0
let accessibilityOverriddenAttributes  self = msg_send ~self ~cmd:(selector "accessibilityOverriddenAttributes") ~typ:(returning (id)) 
let accessibilityParameterizedAttributeNames  self = msg_send ~self ~cmd:(selector "accessibilityParameterizedAttributeNames") ~typ:(returning (id)) 
let accessibilityPerformShowMenuOfChild x0 self = msg_send ~self ~cmd:(selector "accessibilityPerformShowMenuOfChild:") ~typ:(id @-> returning (char)) x0
let accessibilityPresenterProcessIdentifier  self = msg_send ~self ~cmd:(selector "accessibilityPresenterProcessIdentifier") ~typ:(returning (int)) 
let accessibilityRemoveTemporaryChild x0 self = msg_send ~self ~cmd:(selector "accessibilityRemoveTemporaryChild:") ~typ:(id @-> returning (void)) x0
let accessibilityReplaceRange_withText x0 x1 self = msg_send ~self ~cmd:(selector "accessibilityReplaceRange:withText:") ~typ:(NSRange.t @-> id @-> returning (char)) x0 x1
let accessibilitySetOverrideValue_forAttribute x0 x1 self = msg_send ~self ~cmd:(selector "accessibilitySetOverrideValue:forAttribute:") ~typ:(id @-> id @-> returning (char)) x0 x1
let accessibilitySetPresenterProcessIdentifier x0 self = msg_send ~self ~cmd:(selector "accessibilitySetPresenterProcessIdentifier:") ~typ:(int @-> returning (void)) x0
let accessibilityShouldSendNotification x0 self = msg_send ~self ~cmd:(selector "accessibilityShouldSendNotification:") ~typ:(id @-> returning (char)) x0
let accessibilityShouldUseUniqueId  self = msg_send ~self ~cmd:(selector "accessibilityShouldUseUniqueId") ~typ:(returning (char)) 
let accessibilitySupportsCustomElementData  self = msg_send ~self ~cmd:(selector "accessibilitySupportsCustomElementData") ~typ:(returning (char)) 
let accessibilitySupportsNotifications  self = msg_send ~self ~cmd:(selector "accessibilitySupportsNotifications") ~typ:(returning (char)) 
let accessibilitySupportsOverriddenAttributes  self = msg_send ~self ~cmd:(selector "accessibilitySupportsOverriddenAttributes") ~typ:(returning (char)) 
let accessibilityTemporaryChildren  self = msg_send ~self ~cmd:(selector "accessibilityTemporaryChildren") ~typ:(returning (id)) 
let accessibilityVisibleArea  self = msg_send ~self ~cmd:(selector "accessibilityVisibleArea") ~typ:(returning (double)) 
let addChainedObservers x0 self = msg_send ~self ~cmd:(selector "addChainedObservers:") ~typ:(id @-> returning (id)) x0
let addObject_toBothSidesOfRelationshipWithKey x0 x1 self = msg_send ~self ~cmd:(selector "addObject:toBothSidesOfRelationshipWithKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let addObject_toPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "addObject:toPropertyWithKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let addObservationTransformer x0 self = msg_send ~self ~cmd:(selector "addObservationTransformer:") ~typ:(ptr void @-> returning (id)) x0
let addObserver x0 self = msg_send ~self ~cmd:(selector "addObserver:") ~typ:(id @-> returning (id)) x0
let addObserverBlock x0 self = msg_send ~self ~cmd:(selector "addObserverBlock:") ~typ:(ptr void @-> returning (id)) x0
let addObserver_forKeyPath_options_context x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "addObserver:forKeyPath:options:context:") ~typ:(id @-> id @-> ullong @-> ptr (void) @-> returning (void)) x0 x1 x2 x3
let addObserver_forObservableKeyPath x0 x1 self = msg_send ~self ~cmd:(selector "addObserver:forObservableKeyPath:") ~typ:(id @-> id @-> returning (id)) x0 x1
let allPropertyKeys  self = msg_send ~self ~cmd:(selector "allPropertyKeys") ~typ:(returning (id)) 
let allowsWeakReference  self = msg_send ~self ~cmd:(selector "allowsWeakReference") ~typ:(returning (char)) 
let attributeKeys  self = msg_send ~self ~cmd:(selector "attributeKeys") ~typ:(returning (id)) 
let autoContentAccessingProxy  self = msg_send ~self ~cmd:(selector "autoContentAccessingProxy") ~typ:(returning (id)) 
let autorelease  self = msg_send ~self ~cmd:(selector "autorelease") ~typ:(returning (id)) 
let awakeAfterUsingCoder x0 self = msg_send ~self ~cmd:(selector "awakeAfterUsingCoder:") ~typ:(id @-> returning (id)) x0
let awakeFromNib  self = msg_send ~self ~cmd:(selector "awakeFromNib") ~typ:(returning (void)) 
let bind_toObject_withKeyPath_options x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "bind:toObject:withKeyPath:options:") ~typ:(id @-> id @-> id @-> id @-> returning (void)) x0 x1 x2 x3
let bs_encoded  self = msg_send ~self ~cmd:(selector "bs_encoded") ~typ:(returning (id)) 
let bs_isPlistableType  self = msg_send ~self ~cmd:(selector "bs_isPlistableType") ~typ:(returning (char)) 
let bs_secureEncoded  self = msg_send ~self ~cmd:(selector "bs_secureEncoded") ~typ:(returning (id)) 
let classCode  self = msg_send ~self ~cmd:(selector "classCode") ~typ:(returning (uint)) 
let classDescription  self = msg_send ~self ~cmd:(selector "classDescription") ~typ:(returning (id)) 
let classDescriptionForDestinationKey x0 self = msg_send ~self ~cmd:(selector "classDescriptionForDestinationKey:") ~typ:(id @-> returning (id)) x0
let classForArchiver  self = msg_send ~self ~cmd:(selector "classForArchiver") ~typ:(returning (_Class)) 
let classForCoder  self = msg_send ~self ~cmd:(selector "classForCoder") ~typ:(returning (_Class)) 
let classForKeyedArchiver  self = msg_send ~self ~cmd:(selector "classForKeyedArchiver") ~typ:(returning (_Class)) 
let classForPortCoder  self = msg_send ~self ~cmd:(selector "classForPortCoder") ~typ:(returning (_Class)) 
let className  self = msg_send ~self ~cmd:(selector "className") ~typ:(returning (id)) 
let clearProperties  self = msg_send ~self ~cmd:(selector "clearProperties") ~typ:(returning (void)) 
let coerceValueForScriptingProperties x0 self = msg_send ~self ~cmd:(selector "coerceValueForScriptingProperties:") ~typ:(id @-> returning (id)) x0
let coerceValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "coerceValue:forKey:") ~typ:(id @-> id @-> returning (id)) x0 x1
let conformsToProtocol x0 self = msg_send ~self ~cmd:(selector "conformsToProtocol:") ~typ:(id @-> returning (char)) x0
let copy  self = msg_send ~self ~cmd:(selector "copy") ~typ:(returning (id)) 
let copyScriptingValue_forKey_withProperties x0 x1 x2 self = msg_send ~self ~cmd:(selector "copyScriptingValue:forKey:withProperties:") ~typ:(id @-> id @-> id @-> returning (id)) x0 x1 x2
let createKeyValueBindingForKey_typeMask x0 x1 self = msg_send ~self ~cmd:(selector "createKeyValueBindingForKey:typeMask:") ~typ:(id @-> ullong @-> returning (id)) x0 x1
let dealloc  self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void)) 
let debugDescription  self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning (id)) 
let description  self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id)) 
let description  self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id)) 
let dictionaryWithValuesForKeys x0 self = msg_send ~self ~cmd:(selector "dictionaryWithValuesForKeys:") ~typ:(id @-> returning (id)) x0
let didChangeValueForKey x0 self = msg_send ~self ~cmd:(selector "didChangeValueForKey:") ~typ:(id @-> returning (void)) x0
let didChangeValueForKey_withSetMutation_usingObjects x0 x1 x2 self = msg_send ~self ~cmd:(selector "didChangeValueForKey:withSetMutation:usingObjects:") ~typ:(id @-> ullong @-> id @-> returning (void)) x0 x1 x2
let didChange_valuesAtIndexes_forKey x0 x1 x2 self = msg_send ~self ~cmd:(selector "didChange:valuesAtIndexes:forKey:") ~typ:(ullong @-> id @-> id @-> returning (void)) x0 x1 x2
let doesContain x0 self = msg_send ~self ~cmd:(selector "doesContain:") ~typ:(id @-> returning (char)) x0
let doesNotRecognizeSelector x0 self = msg_send ~self ~cmd:(selector "doesNotRecognizeSelector:") ~typ:(_SEL @-> returning (void)) x0
let doesNotRecognizeSelector x0 self = msg_send ~self ~cmd:(selector "doesNotRecognizeSelector:") ~typ:(_SEL @-> returning (void)) x0
let encodeWithCAMLWriter x0 self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning (void)) x0
let entityName  self = msg_send ~self ~cmd:(selector "entityName") ~typ:(returning (id)) 
let exposedBindings  self = msg_send ~self ~cmd:(selector "exposedBindings") ~typ:(returning (id)) 
let finalize  self = msg_send ~self ~cmd:(selector "finalize") ~typ:(returning (void)) 
let finishObserving  self = msg_send ~self ~cmd:(selector "finishObserving") ~typ:(returning (void)) 
let flushKeyBindings  self = msg_send ~self ~cmd:(selector "flushKeyBindings") ~typ:(returning (void)) 
let forwardInvocation x0 self = msg_send ~self ~cmd:(selector "forwardInvocation:") ~typ:(id @-> returning (void)) x0
let forwardingTargetForSelector x0 self = msg_send ~self ~cmd:(selector "forwardingTargetForSelector:") ~typ:(_SEL @-> returning (id)) x0
let handleQueryWithUnboundKey x0 self = msg_send ~self ~cmd:(selector "handleQueryWithUnboundKey:") ~typ:(id @-> returning (id)) x0
let handleTakeValue_forUnboundKey x0 x1 self = msg_send ~self ~cmd:(selector "handleTakeValue:forUnboundKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let hash  self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong)) 
let implementsSelector x0 self = msg_send ~self ~cmd:(selector "implementsSelector:") ~typ:(_SEL @-> returning (char)) x0
let infoForBinding x0 self = msg_send ~self ~cmd:(selector "infoForBinding:") ~typ:(id @-> returning (id)) x0
let init  self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id)) 
let insertValue_atIndex_inPropertyWithKey x0 x1 x2 self = msg_send ~self ~cmd:(selector "insertValue:atIndex:inPropertyWithKey:") ~typ:(id @-> ullong @-> id @-> returning (void)) x0 x1 x2
let insertValue_inPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "insertValue:inPropertyWithKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let inverseForRelationshipKey x0 self = msg_send ~self ~cmd:(selector "inverseForRelationshipKey:") ~typ:(id @-> returning (id)) x0
let isCaseInsensitiveLike x0 self = msg_send ~self ~cmd:(selector "isCaseInsensitiveLike:") ~typ:(id @-> returning (char)) x0
let isEqual x0 self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning (char)) x0
let isEqualTo x0 self = msg_send ~self ~cmd:(selector "isEqualTo:") ~typ:(id @-> returning (char)) x0
let isFault  self = msg_send ~self ~cmd:(selector "isFault") ~typ:(returning (char)) 
let isGreaterThan x0 self = msg_send ~self ~cmd:(selector "isGreaterThan:") ~typ:(id @-> returning (char)) x0
let isGreaterThanOrEqualTo x0 self = msg_send ~self ~cmd:(selector "isGreaterThanOrEqualTo:") ~typ:(id @-> returning (char)) x0
let isKindOfClass x0 self = msg_send ~self ~cmd:(selector "isKindOfClass:") ~typ:(_Class @-> returning (char)) x0
let isLessThan x0 self = msg_send ~self ~cmd:(selector "isLessThan:") ~typ:(id @-> returning (char)) x0
let isLessThanOrEqualTo x0 self = msg_send ~self ~cmd:(selector "isLessThanOrEqualTo:") ~typ:(id @-> returning (char)) x0
let isLike x0 self = msg_send ~self ~cmd:(selector "isLike:") ~typ:(id @-> returning (char)) x0
let isMemberOfClass x0 self = msg_send ~self ~cmd:(selector "isMemberOfClass:") ~typ:(_Class @-> returning (char)) x0
let isNSArray__  self = msg_send ~self ~cmd:(selector "isNSArray__") ~typ:(returning (char)) 
let isNSCFConstantString__  self = msg_send ~self ~cmd:(selector "isNSCFConstantString__") ~typ:(returning (char)) 
let isNSData__  self = msg_send ~self ~cmd:(selector "isNSData__") ~typ:(returning (char)) 
let isNSDate__  self = msg_send ~self ~cmd:(selector "isNSDate__") ~typ:(returning (char)) 
let isNSDictionary__  self = msg_send ~self ~cmd:(selector "isNSDictionary__") ~typ:(returning (char)) 
let isNSNumber__  self = msg_send ~self ~cmd:(selector "isNSNumber__") ~typ:(returning (char)) 
let isNSObject__  self = msg_send ~self ~cmd:(selector "isNSObject__") ~typ:(returning (char)) 
let isNSOrderedSet__  self = msg_send ~self ~cmd:(selector "isNSOrderedSet__") ~typ:(returning (char)) 
let isNSSet__  self = msg_send ~self ~cmd:(selector "isNSSet__") ~typ:(returning (char)) 
let isNSString__  self = msg_send ~self ~cmd:(selector "isNSString__") ~typ:(returning (char)) 
let isNSTimeZone__  self = msg_send ~self ~cmd:(selector "isNSTimeZone__") ~typ:(returning (char)) 
let isNSValue__  self = msg_send ~self ~cmd:(selector "isNSValue__") ~typ:(returning (char)) 
let isNotEqualTo x0 self = msg_send ~self ~cmd:(selector "isNotEqualTo:") ~typ:(id @-> returning (char)) x0
let isProxy  self = msg_send ~self ~cmd:(selector "isProxy") ~typ:(returning (char)) 
let isToManyKey x0 self = msg_send ~self ~cmd:(selector "isToManyKey:") ~typ:(id @-> returning (char)) x0
let keyValueBindingForKey_typeMask x0 x1 self = msg_send ~self ~cmd:(selector "keyValueBindingForKey:typeMask:") ~typ:(id @-> ullong @-> returning (id)) x0 x1
let methodForSelector x0 self = msg_send ~self ~cmd:(selector "methodForSelector:") ~typ:(_SEL @-> returning (ptr (ptr void))) x0
let methodSignatureForSelector x0 self = msg_send ~self ~cmd:(selector "methodSignatureForSelector:") ~typ:(_SEL @-> returning (id)) x0
let methodSignatureForSelector x0 self = msg_send ~self ~cmd:(selector "methodSignatureForSelector:") ~typ:(_SEL @-> returning (id)) x0
let mutableArrayValueForKey x0 self = msg_send ~self ~cmd:(selector "mutableArrayValueForKey:") ~typ:(id @-> returning (id)) x0
let mutableArrayValueForKeyPath x0 self = msg_send ~self ~cmd:(selector "mutableArrayValueForKeyPath:") ~typ:(id @-> returning (id)) x0
let mutableCopy  self = msg_send ~self ~cmd:(selector "mutableCopy") ~typ:(returning (id)) 
let mutableOrderedSetValueForKey x0 self = msg_send ~self ~cmd:(selector "mutableOrderedSetValueForKey:") ~typ:(id @-> returning (id)) x0
let mutableOrderedSetValueForKeyPath x0 self = msg_send ~self ~cmd:(selector "mutableOrderedSetValueForKeyPath:") ~typ:(id @-> returning (id)) x0
let mutableSetValueForKey x0 self = msg_send ~self ~cmd:(selector "mutableSetValueForKey:") ~typ:(id @-> returning (id)) x0
let mutableSetValueForKeyPath x0 self = msg_send ~self ~cmd:(selector "mutableSetValueForKeyPath:") ~typ:(id @-> returning (id)) x0
let newScriptingObjectOfClass_forValueForKey_withContentsValue_properties x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") ~typ:(_Class @-> id @-> id @-> id @-> returning (id)) x0 x1 x2 x3
let objectSpecifier  self = msg_send ~self ~cmd:(selector "objectSpecifier") ~typ:(returning (id)) 
let observationInfo  self = msg_send ~self ~cmd:(selector "observationInfo") ~typ:(returning (ptr (void))) 
let observeValueForKeyPath_ofObject_change_context x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x0 x1 x2 x3
let optionDescriptionsForBinding x0 self = msg_send ~self ~cmd:(selector "optionDescriptionsForBinding:") ~typ:(id @-> returning (id)) x0
let ownsDestinationObjectsForRelationshipKey x0 self = msg_send ~self ~cmd:(selector "ownsDestinationObjectsForRelationshipKey:") ~typ:(id @-> returning (char)) x0
let performSelector x0 self = msg_send ~self ~cmd:(selector "performSelector:") ~typ:(_SEL @-> returning (id)) x0
let performSelectorInBackground_withObject x0 x1 self = msg_send ~self ~cmd:(selector "performSelectorInBackground:withObject:") ~typ:(_SEL @-> id @-> returning (void)) x0 x1
let performSelectorOnMainThread_withObject_waitUntilDone x0 x1 x2 self = msg_send ~self ~cmd:(selector "performSelectorOnMainThread:withObject:waitUntilDone:") ~typ:(_SEL @-> id @-> char @-> returning (void)) x0 x1 x2
let performSelectorOnMainThread_withObject_waitUntilDone_modes x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "performSelectorOnMainThread:withObject:waitUntilDone:modes:") ~typ:(_SEL @-> id @-> char @-> id @-> returning (void)) x0 x1 x2 x3
let performSelector_object_afterDelay x0 x1 x2 self = msg_send ~self ~cmd:(selector "performSelector:object:afterDelay:") ~typ:(_SEL @-> id @-> double @-> returning (void)) x0 x1 x2
let performSelector_onThread_withObject_waitUntilDone x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "performSelector:onThread:withObject:waitUntilDone:") ~typ:(_SEL @-> id @-> id @-> char @-> returning (void)) x0 x1 x2 x3
let performSelector_onThread_withObject_waitUntilDone_modes x0 x1 x2 x3 x4 self = msg_send ~self ~cmd:(selector "performSelector:onThread:withObject:waitUntilDone:modes:") ~typ:(_SEL @-> id @-> id @-> char @-> id @-> returning (void)) x0 x1 x2 x3 x4
let performSelector_withObject x0 x1 self = msg_send ~self ~cmd:(selector "performSelector:withObject:") ~typ:(_SEL @-> id @-> returning (id)) x0 x1
let performSelector_withObject_afterDelay x0 x1 x2 self = msg_send ~self ~cmd:(selector "performSelector:withObject:afterDelay:") ~typ:(_SEL @-> id @-> double @-> returning (void)) x0 x1 x2
let performSelector_withObject_afterDelay_inModes x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "performSelector:withObject:afterDelay:inModes:") ~typ:(_SEL @-> id @-> double @-> id @-> returning (void)) x0 x1 x2 x3
let performSelector_withObject_withObject x0 x1 x2 self = msg_send ~self ~cmd:(selector "performSelector:withObject:withObject:") ~typ:(_SEL @-> id @-> id @-> returning (id)) x0 x1 x2
let prepareForInterfaceBuilder  self = msg_send ~self ~cmd:(selector "prepareForInterfaceBuilder") ~typ:(returning (void)) 
let receiveObservedError x0 self = msg_send ~self ~cmd:(selector "receiveObservedError:") ~typ:(id @-> returning (void)) x0
let receiveObservedValue x0 self = msg_send ~self ~cmd:(selector "receiveObservedValue:") ~typ:(id @-> returning (void)) x0
let release  self = msg_send ~self ~cmd:(selector "release") ~typ:(returning (void)) 
let removeObject_fromBothSidesOfRelationshipWithKey x0 x1 self = msg_send ~self ~cmd:(selector "removeObject:fromBothSidesOfRelationshipWithKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let removeObject_fromPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "removeObject:fromPropertyWithKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let removeObservation x0 self = msg_send ~self ~cmd:(selector "removeObservation:") ~typ:(id @-> returning (void)) x0
let removeObservation_forObservableKeyPath x0 x1 self = msg_send ~self ~cmd:(selector "removeObservation:forObservableKeyPath:") ~typ:(id @-> id @-> returning (void)) x0 x1
let removeObserver_forKeyPath x0 x1 self = msg_send ~self ~cmd:(selector "removeObserver:forKeyPath:") ~typ:(id @-> id @-> returning (void)) x0 x1
let removeObserver_forKeyPath_context x0 x1 x2 self = msg_send ~self ~cmd:(selector "removeObserver:forKeyPath:context:") ~typ:(id @-> id @-> ptr (void) @-> returning (void)) x0 x1 x2
let removeValueAtIndex_fromPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "removeValueAtIndex:fromPropertyWithKey:") ~typ:(ullong @-> id @-> returning (void)) x0 x1
let replaceValueAtIndex_inPropertyWithKey_withValue x0 x1 x2 self = msg_send ~self ~cmd:(selector "replaceValueAtIndex:inPropertyWithKey:withValue:") ~typ:(ullong @-> id @-> id @-> returning (void)) x0 x1 x2
let replacementObjectForArchiver x0 self = msg_send ~self ~cmd:(selector "replacementObjectForArchiver:") ~typ:(id @-> returning (id)) x0
let replacementObjectForCoder x0 self = msg_send ~self ~cmd:(selector "replacementObjectForCoder:") ~typ:(id @-> returning (id)) x0
let replacementObjectForKeyedArchiver x0 self = msg_send ~self ~cmd:(selector "replacementObjectForKeyedArchiver:") ~typ:(id @-> returning (id)) x0
let replacementObjectForPortCoder x0 self = msg_send ~self ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning (id)) x0
let respondsToSelector x0 self = msg_send ~self ~cmd:(selector "respondsToSelector:") ~typ:(_SEL @-> returning (char)) x0
let retain  self = msg_send ~self ~cmd:(selector "retain") ~typ:(returning (id)) 
let retainCount  self = msg_send ~self ~cmd:(selector "retainCount") ~typ:(returning (ullong)) 
let retainWeakReference  self = msg_send ~self ~cmd:(selector "retainWeakReference") ~typ:(returning (char)) 
let scriptingProperties  self = msg_send ~self ~cmd:(selector "scriptingProperties") ~typ:(returning (id)) 
let scriptingValueForSpecifier x0 self = msg_send ~self ~cmd:(selector "scriptingValueForSpecifier:") ~typ:(id @-> returning (id)) x0
let self  self = msg_send ~self ~cmd:(selector "self") ~typ:(returning (id)) 
let setNilValueForKey x0 self = msg_send ~self ~cmd:(selector "setNilValueForKey:") ~typ:(id @-> returning (void)) x0
let setObservationInfo x0 self = msg_send ~self ~cmd:(selector "setObservationInfo:") ~typ:(ptr (void) @-> returning (void)) x0
let setObservation_forObservingKeyPath x0 x1 self = msg_send ~self ~cmd:(selector "setObservation:forObservingKeyPath:") ~typ:(id @-> id @-> returning (void)) x0 x1
let setScriptingProperties x0 self = msg_send ~self ~cmd:(selector "setScriptingProperties:") ~typ:(id @-> returning (void)) x0
let setUserInterfaceItemIdentifier x0 self = msg_send ~self ~cmd:(selector "setUserInterfaceItemIdentifier:") ~typ:(id @-> returning (void)) x0
let setValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let setValue_forKeyPath x0 x1 self = msg_send ~self ~cmd:(selector "setValue:forKeyPath:") ~typ:(id @-> id @-> returning (void)) x0 x1
let setValue_forUndefinedKey x0 x1 self = msg_send ~self ~cmd:(selector "setValue:forUndefinedKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let setValuesForKeysWithDictionary x0 self = msg_send ~self ~cmd:(selector "setValuesForKeysWithDictionary:") ~typ:(id @-> returning (void)) x0
let storedValueForKey x0 self = msg_send ~self ~cmd:(selector "storedValueForKey:") ~typ:(id @-> returning (id)) x0
let superclass  self = msg_send ~self ~cmd:(selector "superclass") ~typ:(returning (_Class)) 
let supportsBSXPCSecureCoding  self = msg_send ~self ~cmd:(selector "supportsBSXPCSecureCoding") ~typ:(returning (char)) 
let supportsRBSXPCSecureCoding  self = msg_send ~self ~cmd:(selector "supportsRBSXPCSecureCoding") ~typ:(returning (char)) 
let takeStoredValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "takeStoredValue:forKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let takeStoredValuesFromDictionary x0 self = msg_send ~self ~cmd:(selector "takeStoredValuesFromDictionary:") ~typ:(id @-> returning (void)) x0
let takeValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "takeValue:forKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let takeValue_forKeyPath x0 x1 self = msg_send ~self ~cmd:(selector "takeValue:forKeyPath:") ~typ:(id @-> id @-> returning (void)) x0 x1
let takeValuesFromDictionary x0 self = msg_send ~self ~cmd:(selector "takeValuesFromDictionary:") ~typ:(id @-> returning (void)) x0
let toManyRelationshipKeys  self = msg_send ~self ~cmd:(selector "toManyRelationshipKeys") ~typ:(returning (id)) 
let toOneRelationshipKeys  self = msg_send ~self ~cmd:(selector "toOneRelationshipKeys") ~typ:(returning (id)) 
let unableToSetNilForKey x0 self = msg_send ~self ~cmd:(selector "unableToSetNilForKey:") ~typ:(id @-> returning (void)) x0
let unbind x0 self = msg_send ~self ~cmd:(selector "unbind:") ~typ:(id @-> returning (void)) x0
let userInterfaceItemIdentifier  self = msg_send ~self ~cmd:(selector "userInterfaceItemIdentifier") ~typ:(returning (id)) 
let validateTakeValue_forKeyPath x0 x1 self = msg_send ~self ~cmd:(selector "validateTakeValue:forKeyPath:") ~typ:(id @-> id @-> returning (id)) x0 x1
let validateValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "validateValue:forKey:") ~typ:(ptr (id) @-> id @-> returning (id)) x0 x1
let validateValue_forKeyPath_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "validateValue:forKeyPath:error:") ~typ:(ptr (id) @-> id @-> ptr (id) @-> returning (char)) x0 x1 x2
let validateValue_forKey_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "validateValue:forKey:error:") ~typ:(ptr (id) @-> id @-> ptr (id) @-> returning (char)) x0 x1 x2
let valueAtIndex_inPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "valueAtIndex:inPropertyWithKey:") ~typ:(ullong @-> id @-> returning (id)) x0 x1
let valueClassForBinding x0 self = msg_send ~self ~cmd:(selector "valueClassForBinding:") ~typ:(id @-> returning (_Class)) x0
let valueForKey x0 self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning (id)) x0
let valueForKeyPath x0 self = msg_send ~self ~cmd:(selector "valueForKeyPath:") ~typ:(id @-> returning (id)) x0
let valueForUndefinedKey x0 self = msg_send ~self ~cmd:(selector "valueForUndefinedKey:") ~typ:(id @-> returning (id)) x0
let valueWithName_inPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "valueWithName:inPropertyWithKey:") ~typ:(id @-> id @-> returning (id)) x0 x1
let valueWithUniqueID_inPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "valueWithUniqueID:inPropertyWithKey:") ~typ:(id @-> id @-> returning (id)) x0 x1
let valuesForKeys x0 self = msg_send ~self ~cmd:(selector "valuesForKeys:") ~typ:(id @-> returning (id)) x0
let willChangeValueForKey x0 self = msg_send ~self ~cmd:(selector "willChangeValueForKey:") ~typ:(id @-> returning (void)) x0
let willChangeValueForKey_withSetMutation_usingObjects x0 x1 x2 self = msg_send ~self ~cmd:(selector "willChangeValueForKey:withSetMutation:usingObjects:") ~typ:(id @-> ullong @-> id @-> returning (void)) x0 x1 x2
let willChange_valuesAtIndexes_forKey x0 x1 x2 self = msg_send ~self ~cmd:(selector "willChange:valuesAtIndexes:forKey:") ~typ:(ullong @-> id @-> id @-> returning (void)) x0 x1 x2
let zone  self = msg_send ~self ~cmd:(selector "zone") ~typ:(returning (id)) 