(* auto-generated, do not modify *)

[@@@ocaml.warning "-32-33"]
open Runtime
open Objc

include NSObject

let _CAMLType  self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning (id)) 
let _URLByAppendingPathComponent x0 self = msg_send ~self ~cmd:(selector "URLByAppendingPathComponent:") ~typ:(id @-> returning (id)) x0
let _URLByAppendingPathComponent_conformingToType x0 x1 self = msg_send ~self ~cmd:(selector "URLByAppendingPathComponent:conformingToType:") ~typ:(id @-> id @-> returning (id)) x0 x1
let _URLByAppendingPathComponent_isDirectory x0 x1 self = msg_send ~self ~cmd:(selector "URLByAppendingPathComponent:isDirectory:") ~typ:(id @-> char @-> returning (id)) x0 x1
let _URLByAppendingPathExtension x0 self = msg_send ~self ~cmd:(selector "URLByAppendingPathExtension:") ~typ:(id @-> returning (id)) x0
let _URLByAppendingPathExtensionForType x0 self = msg_send ~self ~cmd:(selector "URLByAppendingPathExtensionForType:") ~typ:(id @-> returning (id)) x0
let _URLByDeletingLastPathComponent  self = msg_send ~self ~cmd:(selector "URLByDeletingLastPathComponent") ~typ:(returning (id)) 
let _URLByDeletingPathExtension  self = msg_send ~self ~cmd:(selector "URLByDeletingPathExtension") ~typ:(returning (id)) 
let _URLByResolvingSymlinksInPath  self = msg_send ~self ~cmd:(selector "URLByResolvingSymlinksInPath") ~typ:(returning (id)) 
let _URLByStandardizingPath  self = msg_send ~self ~cmd:(selector "URLByStandardizingPath") ~typ:(returning (id)) 
let _URLHandleResourceDidBeginLoading x0 self = msg_send ~self ~cmd:(selector "URLHandleResourceDidBeginLoading:") ~typ:(id @-> returning (void)) x0
let _URLHandleResourceDidCancelLoading x0 self = msg_send ~self ~cmd:(selector "URLHandleResourceDidCancelLoading:") ~typ:(id @-> returning (void)) x0
let _URLHandleResourceDidFinishLoading x0 self = msg_send ~self ~cmd:(selector "URLHandleResourceDidFinishLoading:") ~typ:(id @-> returning (void)) x0
let _URLHandleUsingCache x0 self = msg_send ~self ~cmd:(selector "URLHandleUsingCache:") ~typ:(char @-> returning (id)) x0
let _URLHandle_resourceDataDidBecomeAvailable x0 x1 self = msg_send ~self ~cmd:(selector "URLHandle:resourceDataDidBecomeAvailable:") ~typ:(id @-> id @-> returning (void)) x0 x1
let _URLHandle_resourceDidFailLoadingWithReason x0 x1 self = msg_send ~self ~cmd:(selector "URLHandle:resourceDidFailLoadingWithReason:") ~typ:(id @-> id @-> returning (void)) x0 x1
let absoluteString  self = msg_send ~self ~cmd:(selector "absoluteString") ~typ:(returning (id)) 
let absoluteURL  self = msg_send ~self ~cmd:(selector "absoluteURL") ~typ:(returning (id)) 
let baseURL  self = msg_send ~self ~cmd:(selector "baseURL") ~typ:(returning (id)) 
let bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:") ~typ:(ullong @-> id @-> id @-> ptr (id) @-> returning (id)) x0 x1 x2 x3
let checkPromisedItemIsReachableAndReturnError x0 self = msg_send ~self ~cmd:(selector "checkPromisedItemIsReachableAndReturnError:") ~typ:(ptr (id) @-> returning (char)) x0
let checkResourceIsReachableAndReturnError x0 self = msg_send ~self ~cmd:(selector "checkResourceIsReachableAndReturnError:") ~typ:(ptr (id) @-> returning (char)) x0
let conformsToOverridePatternWithKey x0 self = msg_send ~self ~cmd:(selector "conformsToOverridePatternWithKey:") ~typ:(id @-> returning (char)) x0
let connectionDidFinishLoading x0 self = msg_send ~self ~cmd:(selector "connectionDidFinishLoading:") ~typ:(id @-> returning (void)) x0
let connection_didFailWithError x0 x1 self = msg_send ~self ~cmd:(selector "connection:didFailWithError:") ~typ:(id @-> id @-> returning (void)) x0 x1
let connection_didReceiveData x0 x1 self = msg_send ~self ~cmd:(selector "connection:didReceiveData:") ~typ:(id @-> id @-> returning (void)) x0 x1
let copyWithZone x0 self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x0
let dataRepresentation  self = msg_send ~self ~cmd:(selector "dataRepresentation") ~typ:(returning (id)) 
let dealloc  self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void)) 
let description  self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id)) 
let encodeWithCAMLWriter x0 self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning (void)) x0
let encodeWithCoder x0 self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x0
let filePathURL  self = msg_send ~self ~cmd:(selector "filePathURL") ~typ:(returning (id)) 
let fileReferenceURL  self = msg_send ~self ~cmd:(selector "fileReferenceURL") ~typ:(returning (id)) 
let fileSystemRepresentation  self = msg_send ~self ~cmd:(selector "fileSystemRepresentation") ~typ:(returning (string)) 
let fmfURL  self = msg_send ~self ~cmd:(selector "fmfURL") ~typ:(returning (id)) 
let fmipURL  self = msg_send ~self ~cmd:(selector "fmipURL") ~typ:(returning (id)) 
let fragment  self = msg_send ~self ~cmd:(selector "fragment") ~typ:(returning (id)) 
let getFileSystemRepresentation_maxLength x0 x1 self = msg_send ~self ~cmd:(selector "getFileSystemRepresentation:maxLength:") ~typ:(string @-> ullong @-> returning (char)) x0 x1
let getPromisedItemResourceValue_forKey_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "getPromisedItemResourceValue:forKey:error:") ~typ:(ptr (id) @-> id @-> ptr (id) @-> returning (char)) x0 x1 x2
let getResourceValue_forKey_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "getResourceValue:forKey:error:") ~typ:(ptr (id) @-> id @-> ptr (id) @-> returning (char)) x0 x1 x2
let hasDirectoryPath  self = msg_send ~self ~cmd:(selector "hasDirectoryPath") ~typ:(returning (char)) 
let hash  self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong)) 
let host  self = msg_send ~self ~cmd:(selector "host") ~typ:(returning (id)) 
let iCloudEmailPrefsURL  self = msg_send ~self ~cmd:(selector "iCloudEmailPrefsURL") ~typ:(returning (id)) 
let iCloudSharingURL  self = msg_send ~self ~cmd:(selector "iCloudSharingURL") ~typ:(returning (id)) 
let iCloudSharingURL_noFragment  self = msg_send ~self ~cmd:(selector "iCloudSharingURL_noFragment") ~typ:(returning (id)) 
let iTunesStoreURL  self = msg_send ~self ~cmd:(selector "iTunesStoreURL") ~typ:(returning (id)) 
let iWorkApplicationName  self = msg_send ~self ~cmd:(selector "iWorkApplicationName") ~typ:(returning (id)) 
let iWorkDocumentName  self = msg_send ~self ~cmd:(selector "iWorkDocumentName") ~typ:(returning (id)) 
let init  self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id)) 
let initAbsoluteURLWithDataRepresentation_relativeToURL x0 x1 self = msg_send ~self ~cmd:(selector "initAbsoluteURLWithDataRepresentation:relativeToURL:") ~typ:(id @-> id @-> returning (id)) x0 x1
let initByResolvingAliasFileAtURL_options_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "initByResolvingAliasFileAtURL:options:error:") ~typ:(id @-> ullong @-> ptr (id) @-> returning (id)) x0 x1 x2
let initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error x0 x1 x2 x3 x4 self = msg_send ~self ~cmd:(selector "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:") ~typ:(id @-> ullong @-> id @-> ptr (char) @-> ptr (id) @-> returning (id)) x0 x1 x2 x3 x4
let initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL x0 x1 x2 self = msg_send ~self ~cmd:(selector "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:") ~typ:(string @-> char @-> id @-> returning (id)) x0 x1 x2
let initFileURLWithPath x0 self = msg_send ~self ~cmd:(selector "initFileURLWithPath:") ~typ:(id @-> returning (id)) x0
let initFileURLWithPath_isDirectory x0 x1 self = msg_send ~self ~cmd:(selector "initFileURLWithPath:isDirectory:") ~typ:(id @-> char @-> returning (id)) x0 x1
let initFileURLWithPath_isDirectory_relativeToURL x0 x1 x2 self = msg_send ~self ~cmd:(selector "initFileURLWithPath:isDirectory:relativeToURL:") ~typ:(id @-> char @-> id @-> returning (id)) x0 x1 x2
let initFileURLWithPath_relativeToURL x0 x1 self = msg_send ~self ~cmd:(selector "initFileURLWithPath:relativeToURL:") ~typ:(id @-> id @-> returning (id)) x0 x1
let initWithCoder x0 self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x0
let initWithDataRepresentation_relativeToURL x0 x1 self = msg_send ~self ~cmd:(selector "initWithDataRepresentation:relativeToURL:") ~typ:(id @-> id @-> returning (id)) x0 x1
let initWithPasteboardPropertyList_ofType x0 x1 self = msg_send ~self ~cmd:(selector "initWithPasteboardPropertyList:ofType:") ~typ:(id @-> id @-> returning (id)) x0 x1
let initWithScheme_host_path x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithScheme:host:path:") ~typ:(id @-> id @-> id @-> returning (id)) x0 x1 x2
let initWithString x0 self = msg_send ~self ~cmd:(selector "initWithString:") ~typ:(id @-> returning (id)) x0
let initWithString_relativeToURL x0 x1 self = msg_send ~self ~cmd:(selector "initWithString:relativeToURL:") ~typ:(id @-> id @-> returning (id)) x0 x1
let isEqual x0 self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning (char)) x0
let isFileReferenceURL  self = msg_send ~self ~cmd:(selector "isFileReferenceURL") ~typ:(returning (char)) 
let isFileURL  self = msg_send ~self ~cmd:(selector "isFileURL") ~typ:(returning (char)) 
let isKindOfClass x0 self = msg_send ~self ~cmd:(selector "isKindOfClass:") ~typ:(_Class @-> returning (char)) x0
let isMemberOfClass x0 self = msg_send ~self ~cmd:(selector "isMemberOfClass:") ~typ:(_Class @-> returning (char)) x0
let isiWorkURL  self = msg_send ~self ~cmd:(selector "isiWorkURL") ~typ:(returning (char)) 
let keynoteLiveURL  self = msg_send ~self ~cmd:(selector "keynoteLiveURL") ~typ:(returning (id)) 
let keynoteLiveURL_noFragment  self = msg_send ~self ~cmd:(selector "keynoteLiveURL_noFragment") ~typ:(returning (id)) 
let lastPathComponent  self = msg_send ~self ~cmd:(selector "lastPathComponent") ~typ:(returning (id)) 
let loadDataWithTypeIdentifier_forItemProviderCompletionHandler x0 x1 self = msg_send ~self ~cmd:(selector "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:") ~typ:(id @-> ptr void @-> returning (id)) x0 x1
let loadResourceDataNotifyingClient_usingCache x0 x1 self = msg_send ~self ~cmd:(selector "loadResourceDataNotifyingClient:usingCache:") ~typ:(id @-> char @-> returning (void)) x0 x1
let ls_preferredLocalizations  self = msg_send ~self ~cmd:(selector "ls_preferredLocalizations") ~typ:(returning (id)) 
let ls_setPreferredLocalizations x0 self = msg_send ~self ~cmd:(selector "ls_setPreferredLocalizations:") ~typ:(id @-> returning (void)) x0
let mapsURL  self = msg_send ~self ~cmd:(selector "mapsURL") ~typ:(returning (id)) 
let parameterString  self = msg_send ~self ~cmd:(selector "parameterString") ~typ:(returning (id)) 
let password  self = msg_send ~self ~cmd:(selector "password") ~typ:(returning (id)) 
let pasteboardPropertyListForType x0 self = msg_send ~self ~cmd:(selector "pasteboardPropertyListForType:") ~typ:(id @-> returning (id)) x0
let path  self = msg_send ~self ~cmd:(selector "path") ~typ:(returning (id)) 
let pathComponents  self = msg_send ~self ~cmd:(selector "pathComponents") ~typ:(returning (id)) 
let pathExtension  self = msg_send ~self ~cmd:(selector "pathExtension") ~typ:(returning (id)) 
let photosURL  self = msg_send ~self ~cmd:(selector "photosURL") ~typ:(returning (id)) 
let port  self = msg_send ~self ~cmd:(selector "port") ~typ:(returning (id)) 
let promisedItemResourceValuesForKeys_error x0 x1 self = msg_send ~self ~cmd:(selector "promisedItemResourceValuesForKeys:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x0 x1
let propertyForKey x0 self = msg_send ~self ~cmd:(selector "propertyForKey:") ~typ:(id @-> returning (id)) x0
let query  self = msg_send ~self ~cmd:(selector "query") ~typ:(returning (id)) 
let relativePath  self = msg_send ~self ~cmd:(selector "relativePath") ~typ:(returning (id)) 
let relativeString  self = msg_send ~self ~cmd:(selector "relativeString") ~typ:(returning (id)) 
let release  self = msg_send ~self ~cmd:(selector "release") ~typ:(returning (void)) 
let removeAllCachedResourceValues  self = msg_send ~self ~cmd:(selector "removeAllCachedResourceValues") ~typ:(returning (void)) 
let removeCachedResourceValueForKey x0 self = msg_send ~self ~cmd:(selector "removeCachedResourceValueForKey:") ~typ:(id @-> returning (void)) x0
let resourceDataUsingCache x0 self = msg_send ~self ~cmd:(selector "resourceDataUsingCache:") ~typ:(char @-> returning (id)) x0
let resourceSpecifier  self = msg_send ~self ~cmd:(selector "resourceSpecifier") ~typ:(returning (id)) 
let resourceValuesForKeys_error x0 x1 self = msg_send ~self ~cmd:(selector "resourceValuesForKeys:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x0 x1
let retain  self = msg_send ~self ~cmd:(selector "retain") ~typ:(returning (id)) 
let retainCount  self = msg_send ~self ~cmd:(selector "retainCount") ~typ:(returning (ullong)) 
let scheme  self = msg_send ~self ~cmd:(selector "scheme") ~typ:(returning (id)) 
let setProperty_forKey x0 x1 self = msg_send ~self ~cmd:(selector "setProperty:forKey:") ~typ:(id @-> id @-> returning (char)) x0 x1
let setResourceData x0 self = msg_send ~self ~cmd:(selector "setResourceData:") ~typ:(id @-> returning (char)) x0
let setResourceValue_forKey_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "setResourceValue:forKey:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (char)) x0 x1 x2
let setResourceValues_error x0 x1 self = msg_send ~self ~cmd:(selector "setResourceValues:error:") ~typ:(id @-> ptr (id) @-> returning (char)) x0 x1
let setTemporaryResourceValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "setTemporaryResourceValue:forKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let standardizedURL  self = msg_send ~self ~cmd:(selector "standardizedURL") ~typ:(returning (id)) 
let startAccessingSecurityScopedResource  self = msg_send ~self ~cmd:(selector "startAccessingSecurityScopedResource") ~typ:(returning (char)) 
let stopAccessingSecurityScopedResource  self = msg_send ~self ~cmd:(selector "stopAccessingSecurityScopedResource") ~typ:(returning (void)) 
let user  self = msg_send ~self ~cmd:(selector "user") ~typ:(returning (id)) 
let writableTypeIdentifiersForItemProvider  self = msg_send ~self ~cmd:(selector "writableTypeIdentifiersForItemProvider") ~typ:(returning (id)) 
let writableTypesForPasteboard x0 self = msg_send ~self ~cmd:(selector "writableTypesForPasteboard:") ~typ:(id @-> returning (id)) x0
let writeToPasteboard x0 self = msg_send ~self ~cmd:(selector "writeToPasteboard:") ~typ:(id @-> returning (void)) x0
let writingOptionsForType_pasteboard x0 x1 self = msg_send ~self ~cmd:(selector "writingOptionsForType:pasteboard:") ~typ:(id @-> id @-> returning (ullong)) x0 x1