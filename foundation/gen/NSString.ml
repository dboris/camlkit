(* auto-generated, do not modify *)

[@@@ocaml.warning "-32-33"]
open Runtime
open Objc

include NSObject

let _CAMLType  self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning (id)) 
let _NS_isSourceOver  self = msg_send ~self ~cmd:(selector "NS_isSourceOver") ~typ:(returning (char)) 
let _UTF8String  self = msg_send ~self ~cmd:(selector "UTF8String") ~typ:(returning (string)) 
let boolValue  self = msg_send ~self ~cmd:(selector "boolValue") ~typ:(returning (char)) 
let boundingRectWithSize_options_attributes x0 x1 x2 self = msg_send ~self ~cmd:(selector "boundingRectWithSize:options:attributes:") ~typ:(CGSize.t @-> llong @-> id @-> returning (CGRect.t)) x0 x1 x2
let boundingRectWithSize_options_attributes_context x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "boundingRectWithSize:options:attributes:context:") ~typ:(CGSize.t @-> llong @-> id @-> id @-> returning (CGRect.t)) x0 x1 x2 x3
let cString  self = msg_send ~self ~cmd:(selector "cString") ~typ:(returning (string)) 
let cStringLength  self = msg_send ~self ~cmd:(selector "cStringLength") ~typ:(returning (ullong)) 
let cStringUsingEncoding x0 self = msg_send ~self ~cmd:(selector "cStringUsingEncoding:") ~typ:(ullong @-> returning (string)) x0
let canBeConvertedToEncoding x0 self = msg_send ~self ~cmd:(selector "canBeConvertedToEncoding:") ~typ:(ullong @-> returning (char)) x0
let capitalizedString  self = msg_send ~self ~cmd:(selector "capitalizedString") ~typ:(returning (id)) 
let capitalizedStringWithLocale x0 self = msg_send ~self ~cmd:(selector "capitalizedStringWithLocale:") ~typ:(id @-> returning (id)) x0
let caseInsensitiveCompare x0 self = msg_send ~self ~cmd:(selector "caseInsensitiveCompare:") ~typ:(id @-> returning (llong)) x0
let characterAtIndex x0 self = msg_send ~self ~cmd:(selector "characterAtIndex:") ~typ:(ullong @-> returning (ushort)) x0
let classForCoder  self = msg_send ~self ~cmd:(selector "classForCoder") ~typ:(returning (_Class)) 
let commonPrefixWithString_options x0 x1 self = msg_send ~self ~cmd:(selector "commonPrefixWithString:options:") ~typ:(id @-> ullong @-> returning (id)) x0 x1
let compare x0 self = msg_send ~self ~cmd:(selector "compare:") ~typ:(id @-> returning (llong)) x0
let compare_options x0 x1 self = msg_send ~self ~cmd:(selector "compare:options:") ~typ:(id @-> ullong @-> returning (llong)) x0 x1
let compare_options_range x0 x1 x2 self = msg_send ~self ~cmd:(selector "compare:options:range:") ~typ:(id @-> ullong @-> NSRange.t @-> returning (llong)) x0 x1 x2
let compare_options_range_locale x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "compare:options:range:locale:") ~typ:(id @-> ullong @-> NSRange.t @-> id @-> returning (llong)) x0 x1 x2 x3
let completePathIntoString_caseSensitive_matchesIntoArray_filterTypes x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:") ~typ:(ptr (id) @-> char @-> ptr (id) @-> id @-> returning (ullong)) x0 x1 x2 x3
let componentsByLanguage x0 self = msg_send ~self ~cmd:(selector "componentsByLanguage:") ~typ:(int @-> returning (id)) x0
let componentsSeparatedByCharactersInSet x0 self = msg_send ~self ~cmd:(selector "componentsSeparatedByCharactersInSet:") ~typ:(id @-> returning (id)) x0
let componentsSeparatedByString x0 self = msg_send ~self ~cmd:(selector "componentsSeparatedByString:") ~typ:(id @-> returning (id)) x0
let containsString x0 self = msg_send ~self ~cmd:(selector "containsString:") ~typ:(id @-> returning (char)) x0
let containsSubstring x0 self = msg_send ~self ~cmd:(selector "containsSubstring:") ~typ:(id @-> returning (char)) x0
let copyWithZone x0 self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x0
let dataUsingEncoding x0 self = msg_send ~self ~cmd:(selector "dataUsingEncoding:") ~typ:(ullong @-> returning (id)) x0
let dataUsingEncoding_allowLossyConversion x0 x1 self = msg_send ~self ~cmd:(selector "dataUsingEncoding:allowLossyConversion:") ~typ:(ullong @-> char @-> returning (id)) x0 x1
let decomposedStringWithCanonicalMapping  self = msg_send ~self ~cmd:(selector "decomposedStringWithCanonicalMapping") ~typ:(returning (id)) 
let decomposedStringWithCompatibilityMapping  self = msg_send ~self ~cmd:(selector "decomposedStringWithCompatibilityMapping") ~typ:(returning (id)) 
let description  self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id)) 
let displayableString  self = msg_send ~self ~cmd:(selector "displayableString") ~typ:(returning (id)) 
let doubleValue  self = msg_send ~self ~cmd:(selector "doubleValue") ~typ:(returning (double)) 
let drawAtPoint_withAttributes x0 x1 self = msg_send ~self ~cmd:(selector "drawAtPoint:withAttributes:") ~typ:(CGPoint.t @-> id @-> returning (void)) x0 x1
let drawInRect_withAttributes x0 x1 self = msg_send ~self ~cmd:(selector "drawInRect:withAttributes:") ~typ:(CGRect.t @-> id @-> returning (void)) x0 x1
let drawWithRect_options_attributes x0 x1 x2 self = msg_send ~self ~cmd:(selector "drawWithRect:options:attributes:") ~typ:(CGRect.t @-> llong @-> id @-> returning (void)) x0 x1 x2
let drawWithRect_options_attributes_context x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "drawWithRect:options:attributes:context:") ~typ:(CGRect.t @-> llong @-> id @-> id @-> returning (void)) x0 x1 x2 x3
let editDistanceFrom x0 self = msg_send ~self ~cmd:(selector "editDistanceFrom:") ~typ:(id @-> returning (ullong)) x0
let encodeWithCAMLWriter x0 self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning (void)) x0
let encodeWithCoder x0 self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x0
let endsSentence  self = msg_send ~self ~cmd:(selector "endsSentence") ~typ:(returning (char)) 
let enumerateLinesUsingBlock x0 self = msg_send ~self ~cmd:(selector "enumerateLinesUsingBlock:") ~typ:(ptr void @-> returning (void)) x0
let enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock x0 x1 x2 x3 x4 self = msg_send ~self ~cmd:(selector "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:") ~typ:(NSRange.t @-> id @-> ullong @-> id @-> ptr void @-> returning (void)) x0 x1 x2 x3 x4
let enumerateSubstringsInRange_options_usingBlock x0 x1 x2 self = msg_send ~self ~cmd:(selector "enumerateSubstringsInRange:options:usingBlock:") ~typ:(NSRange.t @-> ullong @-> ptr void @-> returning (void)) x0 x1 x2
let fastestEncoding  self = msg_send ~self ~cmd:(selector "fastestEncoding") ~typ:(returning (ullong)) 
let fileSystemRepresentation  self = msg_send ~self ~cmd:(selector "fileSystemRepresentation") ~typ:(returning (string)) 
let firstCharacter  self = msg_send ~self ~cmd:(selector "firstCharacter") ~typ:(returning (id)) 
let floatValue  self = msg_send ~self ~cmd:(selector "floatValue") ~typ:(returning (float)) 
let formatConfiguration  self = msg_send ~self ~cmd:(selector "formatConfiguration") ~typ:(returning (id)) 
let getBytes_maxLength_filledLength_encoding_allowLossyConversion_range_remainingRange x0 x1 x2 x3 x4 x5 x6 self = msg_send ~self ~cmd:(selector "getBytes:maxLength:filledLength:encoding:allowLossyConversion:range:remainingRange:") ~typ:(string @-> ullong @-> ptr (ullong) @-> ullong @-> char @-> NSRange.t @-> ptr (NSRange.t) @-> returning (char)) x0 x1 x2 x3 x4 x5 x6
let getBytes_maxLength_usedLength_encoding_options_range_remainingRange x0 x1 x2 x3 x4 x5 x6 self = msg_send ~self ~cmd:(selector "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:") ~typ:(ptr (void) @-> ullong @-> ptr (ullong) @-> ullong @-> ullong @-> NSRange.t @-> ptr (NSRange.t) @-> returning (char)) x0 x1 x2 x3 x4 x5 x6
let getCString x0 self = msg_send ~self ~cmd:(selector "getCString:") ~typ:(string @-> returning (void)) x0
let getCString_maxLength x0 x1 self = msg_send ~self ~cmd:(selector "getCString:maxLength:") ~typ:(string @-> ullong @-> returning (void)) x0 x1
let getCString_maxLength_encoding x0 x1 x2 self = msg_send ~self ~cmd:(selector "getCString:maxLength:encoding:") ~typ:(string @-> ullong @-> ullong @-> returning (char)) x0 x1 x2
let getCString_maxLength_range_remainingRange x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "getCString:maxLength:range:remainingRange:") ~typ:(string @-> ullong @-> NSRange.t @-> ptr (NSRange.t) @-> returning (void)) x0 x1 x2 x3
let getCharacters x0 self = msg_send ~self ~cmd:(selector "getCharacters:") ~typ:(ptr (ushort) @-> returning (void)) x0
let getCharacters_range x0 x1 self = msg_send ~self ~cmd:(selector "getCharacters:range:") ~typ:(ptr (ushort) @-> NSRange.t @-> returning (void)) x0 x1
let getExternalRepresentation_extendedAttributes_forWritingToURLOrPath_usingEncoding_error x0 x1 x2 x3 x4 self = msg_send ~self ~cmd:(selector "getExternalRepresentation:extendedAttributes:forWritingToURLOrPath:usingEncoding:error:") ~typ:(ptr (id) @-> ptr (id) @-> id @-> ullong @-> ptr (id) @-> returning (char)) x0 x1 x2 x3 x4
let getFileSystemRepresentation_maxLength x0 x1 self = msg_send ~self ~cmd:(selector "getFileSystemRepresentation:maxLength:") ~typ:(string @-> ullong @-> returning (char)) x0 x1
let getLineStart_end_contentsEnd_forRange x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "getLineStart:end:contentsEnd:forRange:") ~typ:(ptr (ullong) @-> ptr (ullong) @-> ptr (ullong) @-> NSRange.t @-> returning (void)) x0 x1 x2 x3
let getParagraphStart_end_contentsEnd_forRange x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "getParagraphStart:end:contentsEnd:forRange:") ~typ:(ptr (ullong) @-> ptr (ullong) @-> ptr (ullong) @-> NSRange.t @-> returning (void)) x0 x1 x2 x3
let hasColorGlyphsInRange_attributes x0 x1 self = msg_send ~self ~cmd:(selector "hasColorGlyphsInRange:attributes:") ~typ:(NSRange.t @-> id @-> returning (char)) x0 x1
let hasPrefix x0 self = msg_send ~self ~cmd:(selector "hasPrefix:") ~typ:(id @-> returning (char)) x0
let hasSuffix x0 self = msg_send ~self ~cmd:(selector "hasSuffix:") ~typ:(id @-> returning (char)) x0
let hash  self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong)) 
let imageMetadataFromFileName  self = msg_send ~self ~cmd:(selector "imageMetadataFromFileName") ~typ:(returning (id)) 
let init  self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id)) 
let initWithBytesNoCopy_length_encoding_deallocator x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "initWithBytesNoCopy:length:encoding:deallocator:") ~typ:(ptr (void) @-> ullong @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2 x3
let initWithBytesNoCopy_length_encoding_freeWhenDone x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "initWithBytesNoCopy:length:encoding:freeWhenDone:") ~typ:(ptr (void) @-> ullong @-> ullong @-> char @-> returning (id)) x0 x1 x2 x3
let initWithCString x0 self = msg_send ~self ~cmd:(selector "initWithCString:") ~typ:(string @-> returning (id)) x0
let initWithCStringNoCopy_length_freeWhenDone x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithCStringNoCopy:length:freeWhenDone:") ~typ:(string @-> ullong @-> char @-> returning (id)) x0 x1 x2
let initWithCString_encoding x0 x1 self = msg_send ~self ~cmd:(selector "initWithCString:encoding:") ~typ:(string @-> ullong @-> returning (id)) x0 x1
let initWithCString_length x0 x1 self = msg_send ~self ~cmd:(selector "initWithCString:length:") ~typ:(string @-> ullong @-> returning (id)) x0 x1
let initWithCharactersNoCopy_length_deallocator x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithCharactersNoCopy:length:deallocator:") ~typ:(ptr (ushort) @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2
let initWithCharactersNoCopy_length_freeWhenDone x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithCharactersNoCopy:length:freeWhenDone:") ~typ:(ptr (ushort) @-> ullong @-> char @-> returning (id)) x0 x1 x2
let initWithCharacters_length x0 x1 self = msg_send ~self ~cmd:(selector "initWithCharacters:length:") ~typ:(ptr (ushort) @-> ullong @-> returning (id)) x0 x1
let initWithCoder x0 self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfFile x0 self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfFile_encoding_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:encoding:error:") ~typ:(id @-> ullong @-> ptr (id) @-> returning (id)) x0 x1 x2
let initWithContentsOfFile_usedEncoding_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:usedEncoding:error:") ~typ:(id @-> ptr (ullong) @-> ptr (id) @-> returning (id)) x0 x1 x2
let initWithContentsOfURL x0 self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfURL_encoding_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:encoding:error:") ~typ:(id @-> ullong @-> ptr (id) @-> returning (id)) x0 x1 x2
let initWithContentsOfURL_usedEncoding_error x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:usedEncoding:error:") ~typ:(id @-> ptr (ullong) @-> ptr (id) @-> returning (id)) x0 x1 x2
let initWithData_encoding x0 x1 self = msg_send ~self ~cmd:(selector "initWithData:encoding:") ~typ:(id @-> ullong @-> returning (id)) x0 x1
let initWithData_usedEncoding x0 x1 self = msg_send ~self ~cmd:(selector "initWithData:usedEncoding:") ~typ:(id @-> ptr (ullong) @-> returning (id)) x0 x1
let initWithFormat x0 self = msg_send ~self ~cmd:(selector "initWithFormat:") ~typ:(id @-> returning (id)) x0
let initWithFormat_arguments x0 x1 self = msg_send ~self ~cmd:(selector "initWithFormat:arguments:") ~typ:(id @-> ptr void @-> returning (id)) x0 x1
let initWithFormat_locale x0 x1 self = msg_send ~self ~cmd:(selector "initWithFormat:locale:") ~typ:(id @-> id @-> returning (id)) x0 x1
let initWithFormat_locale_arguments x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithFormat:locale:arguments:") ~typ:(id @-> id @-> ptr void @-> returning (id)) x0 x1 x2
let initWithPasteboardPropertyList_ofType x0 x1 self = msg_send ~self ~cmd:(selector "initWithPasteboardPropertyList:ofType:") ~typ:(id @-> id @-> returning (id)) x0 x1
let initWithString x0 self = msg_send ~self ~cmd:(selector "initWithString:") ~typ:(id @-> returning (id)) x0
let initWithUTF8String x0 self = msg_send ~self ~cmd:(selector "initWithUTF8String:") ~typ:(string @-> returning (id)) x0
let initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error x0 x1 x2 x3 x4 self = msg_send ~self ~cmd:(selector "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:") ~typ:(id @-> id @-> id @-> ptr void @-> ptr (id) @-> returning (id)) x0 x1 x2 x3 x4
let intValue  self = msg_send ~self ~cmd:(selector "intValue") ~typ:(returning (int)) 
let integerValue  self = msg_send ~self ~cmd:(selector "integerValue") ~typ:(returning (llong)) 
let isAbsolutePath  self = msg_send ~self ~cmd:(selector "isAbsolutePath") ~typ:(returning (char)) 
let isCaseInsensitiveLike x0 self = msg_send ~self ~cmd:(selector "isCaseInsensitiveLike:") ~typ:(id @-> returning (char)) x0
let isDelete  self = msg_send ~self ~cmd:(selector "isDelete") ~typ:(returning (char)) 
let isEqual x0 self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning (char)) x0
let isEqualToString x0 self = msg_send ~self ~cmd:(selector "isEqualToString:") ~typ:(id @-> returning (char)) x0
let isLeftAssociative  self = msg_send ~self ~cmd:(selector "isLeftAssociative") ~typ:(returning (char)) 
let isLike x0 self = msg_send ~self ~cmd:(selector "isLike:") ~typ:(id @-> returning (char)) x0
let isNSString__  self = msg_send ~self ~cmd:(selector "isNSString__") ~typ:(returning (char)) 
let isNaturallyRTL  self = msg_send ~self ~cmd:(selector "isNaturallyRTL") ~typ:(returning (char)) 
let isNewlineOrReturn  self = msg_send ~self ~cmd:(selector "isNewlineOrReturn") ~typ:(returning (char)) 
let isPlainSpace  self = msg_send ~self ~cmd:(selector "isPlainSpace") ~typ:(returning (char)) 
let isSpace  self = msg_send ~self ~cmd:(selector "isSpace") ~typ:(returning (char)) 
let isSpaceOrReturn  self = msg_send ~self ~cmd:(selector "isSpaceOrReturn") ~typ:(returning (char)) 
let isTripledPunctuation  self = msg_send ~self ~cmd:(selector "isTripledPunctuation") ~typ:(returning (char)) 
let lastPathComponent  self = msg_send ~self ~cmd:(selector "lastPathComponent") ~typ:(returning (id)) 
let length  self = msg_send ~self ~cmd:(selector "length") ~typ:(returning (ullong)) 
let lengthOfBytesUsingEncoding x0 self = msg_send ~self ~cmd:(selector "lengthOfBytesUsingEncoding:") ~typ:(ullong @-> returning (ullong)) x0
let lineRangeForRange x0 self = msg_send ~self ~cmd:(selector "lineRangeForRange:") ~typ:(NSRange.t @-> returning (NSRange.t)) x0
let linguisticTagsInRange_scheme_options_orthography_tokenRanges x0 x1 x2 x3 x4 self = msg_send ~self ~cmd:(selector "linguisticTagsInRange:scheme:options:orthography:tokenRanges:") ~typ:(NSRange.t @-> id @-> ullong @-> id @-> ptr (id) @-> returning (id)) x0 x1 x2 x3 x4
let loadDataWithTypeIdentifier_forItemProviderCompletionHandler x0 x1 self = msg_send ~self ~cmd:(selector "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:") ~typ:(id @-> ptr void @-> returning (id)) x0 x1
let localizedCapitalizedString  self = msg_send ~self ~cmd:(selector "localizedCapitalizedString") ~typ:(returning (id)) 
let localizedCaseInsensitiveCompare x0 self = msg_send ~self ~cmd:(selector "localizedCaseInsensitiveCompare:") ~typ:(id @-> returning (llong)) x0
let localizedCaseInsensitiveContainsString x0 self = msg_send ~self ~cmd:(selector "localizedCaseInsensitiveContainsString:") ~typ:(id @-> returning (char)) x0
let localizedCompare x0 self = msg_send ~self ~cmd:(selector "localizedCompare:") ~typ:(id @-> returning (llong)) x0
let localizedHasPrefix x0 self = msg_send ~self ~cmd:(selector "localizedHasPrefix:") ~typ:(id @-> returning (char)) x0
let localizedHasSuffix x0 self = msg_send ~self ~cmd:(selector "localizedHasSuffix:") ~typ:(id @-> returning (char)) x0
let localizedLowercaseString  self = msg_send ~self ~cmd:(selector "localizedLowercaseString") ~typ:(returning (id)) 
let localizedStandardCompare x0 self = msg_send ~self ~cmd:(selector "localizedStandardCompare:") ~typ:(id @-> returning (llong)) x0
let localizedStandardContainsString x0 self = msg_send ~self ~cmd:(selector "localizedStandardContainsString:") ~typ:(id @-> returning (char)) x0
let localizedStandardRangeOfString x0 self = msg_send ~self ~cmd:(selector "localizedStandardRangeOfString:") ~typ:(id @-> returning (NSRange.t)) x0
let localizedUppercaseString  self = msg_send ~self ~cmd:(selector "localizedUppercaseString") ~typ:(returning (id)) 
let longLongValue  self = msg_send ~self ~cmd:(selector "longLongValue") ~typ:(returning (llong)) 
let looksLikeEmailAddress  self = msg_send ~self ~cmd:(selector "looksLikeEmailAddress") ~typ:(returning (char)) 
let looksLikeNumberInput  self = msg_send ~self ~cmd:(selector "looksLikeNumberInput") ~typ:(returning (char)) 
let looksLikeURL  self = msg_send ~self ~cmd:(selector "looksLikeURL") ~typ:(returning (char)) 
let lossyCString  self = msg_send ~self ~cmd:(selector "lossyCString") ~typ:(returning (string)) 
let lowercaseString  self = msg_send ~self ~cmd:(selector "lowercaseString") ~typ:(returning (id)) 
let lowercaseStringWithLocale x0 self = msg_send ~self ~cmd:(selector "lowercaseStringWithLocale:") ~typ:(id @-> returning (id)) x0
let ls_cleanForPluginQuery  self = msg_send ~self ~cmd:(selector "ls_cleanForPluginQuery") ~typ:(returning (id)) 
let ls_isRecursiveKey  self = msg_send ~self ~cmd:(selector "ls_isRecursiveKey") ~typ:(returning (char)) 
let ls_matchesForPluginQuery x0 self = msg_send ~self ~cmd:(selector "ls_matchesForPluginQuery:") ~typ:(id @-> returning (char)) x0
let ls_matchesStringForPluginQuery x0 self = msg_send ~self ~cmd:(selector "ls_matchesStringForPluginQuery:") ~typ:(id @-> returning (char)) x0
let ls_updatedKey  self = msg_send ~self ~cmd:(selector "ls_updatedKey") ~typ:(returning (id)) 
let ls_visuallyOrderCharactersReturningError x0 self = msg_send ~self ~cmd:(selector "ls_visuallyOrderCharactersReturningError:") ~typ:(ptr (id) @-> returning (id)) x0
let matchesPattern x0 self = msg_send ~self ~cmd:(selector "matchesPattern:") ~typ:(id @-> returning (char)) x0
let matchesPattern_caseInsensitive x0 x1 self = msg_send ~self ~cmd:(selector "matchesPattern:caseInsensitive:") ~typ:(id @-> char @-> returning (char)) x0 x1
let maximumLengthOfBytesUsingEncoding x0 self = msg_send ~self ~cmd:(selector "maximumLengthOfBytesUsingEncoding:") ~typ:(ullong @-> returning (ullong)) x0
let mutableCopyWithZone x0 self = msg_send ~self ~cmd:(selector "mutableCopyWithZone:") ~typ:(id @-> returning (id)) x0
let paragraphRangeForRange x0 self = msg_send ~self ~cmd:(selector "paragraphRangeForRange:") ~typ:(NSRange.t @-> returning (NSRange.t)) x0
let pasteboardPropertyListForType x0 self = msg_send ~self ~cmd:(selector "pasteboardPropertyListForType:") ~typ:(id @-> returning (id)) x0
let pathComponents  self = msg_send ~self ~cmd:(selector "pathComponents") ~typ:(returning (id)) 
let pathExtension  self = msg_send ~self ~cmd:(selector "pathExtension") ~typ:(returning (id)) 
let pinyinStringFromPinyinWithToneNumber  self = msg_send ~self ~cmd:(selector "pinyinStringFromPinyinWithToneNumber") ~typ:(returning (id)) 
let precomposedStringWithCanonicalMapping  self = msg_send ~self ~cmd:(selector "precomposedStringWithCanonicalMapping") ~typ:(returning (id)) 
let precomposedStringWithCompatibilityMapping  self = msg_send ~self ~cmd:(selector "precomposedStringWithCompatibilityMapping") ~typ:(returning (id)) 
let propertyList  self = msg_send ~self ~cmd:(selector "propertyList") ~typ:(returning (id)) 
let propertyListFromStringsFileFormat  self = msg_send ~self ~cmd:(selector "propertyListFromStringsFileFormat") ~typ:(returning (id)) 
let quotedStringRepresentation  self = msg_send ~self ~cmd:(selector "quotedStringRepresentation") ~typ:(returning (id)) 
let rangeOfCharacterFromSet x0 self = msg_send ~self ~cmd:(selector "rangeOfCharacterFromSet:") ~typ:(id @-> returning (NSRange.t)) x0
let rangeOfCharacterFromSet_options x0 x1 self = msg_send ~self ~cmd:(selector "rangeOfCharacterFromSet:options:") ~typ:(id @-> ullong @-> returning (NSRange.t)) x0 x1
let rangeOfCharacterFromSet_options_range x0 x1 x2 self = msg_send ~self ~cmd:(selector "rangeOfCharacterFromSet:options:range:") ~typ:(id @-> ullong @-> NSRange.t @-> returning (NSRange.t)) x0 x1 x2
let rangeOfComposedCharacterSequenceAtIndex x0 self = msg_send ~self ~cmd:(selector "rangeOfComposedCharacterSequenceAtIndex:") ~typ:(ullong @-> returning (NSRange.t)) x0
let rangeOfComposedCharacterSequencesForRange x0 self = msg_send ~self ~cmd:(selector "rangeOfComposedCharacterSequencesForRange:") ~typ:(NSRange.t @-> returning (NSRange.t)) x0
let rangeOfGraphicalSegmentAtIndex x0 self = msg_send ~self ~cmd:(selector "rangeOfGraphicalSegmentAtIndex:") ~typ:(ullong @-> returning (NSRange.t)) x0
let rangeOfString x0 self = msg_send ~self ~cmd:(selector "rangeOfString:") ~typ:(id @-> returning (NSRange.t)) x0
let rangeOfString_options x0 x1 self = msg_send ~self ~cmd:(selector "rangeOfString:options:") ~typ:(id @-> ullong @-> returning (NSRange.t)) x0 x1
let rangeOfString_options_range x0 x1 x2 self = msg_send ~self ~cmd:(selector "rangeOfString:options:range:") ~typ:(id @-> ullong @-> NSRange.t @-> returning (NSRange.t)) x0 x1 x2
let rangeOfString_options_range_locale x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "rangeOfString:options:range:locale:") ~typ:(id @-> ullong @-> NSRange.t @-> id @-> returning (NSRange.t)) x0 x1 x2 x3
let replacementObjectForPortCoder x0 self = msg_send ~self ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning (id)) x0
let scaleableResourceMetadataFromFileName  self = msg_send ~self ~cmd:(selector "scaleableResourceMetadataFromFileName") ~typ:(returning (id)) 
let scriptingBeginsWith x0 self = msg_send ~self ~cmd:(selector "scriptingBeginsWith:") ~typ:(id @-> returning (char)) x0
let scriptingContains x0 self = msg_send ~self ~cmd:(selector "scriptingContains:") ~typ:(id @-> returning (char)) x0
let scriptingEndsWith x0 self = msg_send ~self ~cmd:(selector "scriptingEndsWith:") ~typ:(id @-> returning (char)) x0
let scriptingIsEqualTo x0 self = msg_send ~self ~cmd:(selector "scriptingIsEqualTo:") ~typ:(id @-> returning (char)) x0
let scriptingIsGreaterThan x0 self = msg_send ~self ~cmd:(selector "scriptingIsGreaterThan:") ~typ:(id @-> returning (char)) x0
let scriptingIsGreaterThanOrEqualTo x0 self = msg_send ~self ~cmd:(selector "scriptingIsGreaterThanOrEqualTo:") ~typ:(id @-> returning (char)) x0
let scriptingIsLessThan x0 self = msg_send ~self ~cmd:(selector "scriptingIsLessThan:") ~typ:(id @-> returning (char)) x0
let scriptingIsLessThanOrEqualTo x0 self = msg_send ~self ~cmd:(selector "scriptingIsLessThanOrEqualTo:") ~typ:(id @-> returning (char)) x0
let significantText  self = msg_send ~self ~cmd:(selector "significantText") ~typ:(returning (NSRange.t)) 
let simplifiedChineseCompare x0 self = msg_send ~self ~cmd:(selector "simplifiedChineseCompare:") ~typ:(id @-> returning (llong)) x0
let sizeWithAttributes x0 self = msg_send ~self ~cmd:(selector "sizeWithAttributes:") ~typ:(id @-> returning (CGSize.t)) x0
let smallestEncoding  self = msg_send ~self ~cmd:(selector "smallestEncoding") ~typ:(returning (ullong)) 
let standardizedURLPath  self = msg_send ~self ~cmd:(selector "standardizedURLPath") ~typ:(returning (id)) 
let stringByAbbreviatingWithTildeInPath  self = msg_send ~self ~cmd:(selector "stringByAbbreviatingWithTildeInPath") ~typ:(returning (id)) 
let stringByAddingPercentEncodingWithAllowedCharacters x0 self = msg_send ~self ~cmd:(selector "stringByAddingPercentEncodingWithAllowedCharacters:") ~typ:(id @-> returning (id)) x0
let stringByAddingPercentEscapes  self = msg_send ~self ~cmd:(selector "stringByAddingPercentEscapes") ~typ:(returning (id)) 
let stringByAddingPercentEscapesUsingEncoding x0 self = msg_send ~self ~cmd:(selector "stringByAddingPercentEscapesUsingEncoding:") ~typ:(ullong @-> returning (id)) x0
let stringByAppendingFormat x0 self = msg_send ~self ~cmd:(selector "stringByAppendingFormat:") ~typ:(id @-> returning (id)) x0
let stringByAppendingPathComponent x0 self = msg_send ~self ~cmd:(selector "stringByAppendingPathComponent:") ~typ:(id @-> returning (id)) x0
let stringByAppendingPathComponent_conformingToType x0 x1 self = msg_send ~self ~cmd:(selector "stringByAppendingPathComponent:conformingToType:") ~typ:(id @-> id @-> returning (id)) x0 x1
let stringByAppendingPathExtension x0 self = msg_send ~self ~cmd:(selector "stringByAppendingPathExtension:") ~typ:(id @-> returning (id)) x0
let stringByAppendingPathExtensionForType x0 self = msg_send ~self ~cmd:(selector "stringByAppendingPathExtensionForType:") ~typ:(id @-> returning (id)) x0
let stringByAppendingString x0 self = msg_send ~self ~cmd:(selector "stringByAppendingString:") ~typ:(id @-> returning (id)) x0
let stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber x0 self = msg_send ~self ~cmd:(selector "stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber:") ~typ:(ullong @-> returning (id)) x0
let stringByApplyingTransform_reverse x0 x1 self = msg_send ~self ~cmd:(selector "stringByApplyingTransform:reverse:") ~typ:(id @-> char @-> returning (id)) x0 x1
let stringByConvertingPathToURL  self = msg_send ~self ~cmd:(selector "stringByConvertingPathToURL") ~typ:(returning (id)) 
let stringByConvertingURLToPath  self = msg_send ~self ~cmd:(selector "stringByConvertingURLToPath") ~typ:(returning (id)) 
let stringByDeletingLastPathComponent  self = msg_send ~self ~cmd:(selector "stringByDeletingLastPathComponent") ~typ:(returning (id)) 
let stringByDeletingPathExtension  self = msg_send ~self ~cmd:(selector "stringByDeletingPathExtension") ~typ:(returning (id)) 
let stringByExpandingTildeInPath  self = msg_send ~self ~cmd:(selector "stringByExpandingTildeInPath") ~typ:(returning (id)) 
let stringByFoldingWithOptions_locale x0 x1 self = msg_send ~self ~cmd:(selector "stringByFoldingWithOptions:locale:") ~typ:(ullong @-> id @-> returning (id)) x0 x1
let stringByPaddingToLength_withString_startingAtIndex x0 x1 x2 self = msg_send ~self ~cmd:(selector "stringByPaddingToLength:withString:startingAtIndex:") ~typ:(ullong @-> id @-> ullong @-> returning (id)) x0 x1 x2
let stringByRemovingPercentEncoding  self = msg_send ~self ~cmd:(selector "stringByRemovingPercentEncoding") ~typ:(returning (id)) 
let stringByRemovingPercentEscapes  self = msg_send ~self ~cmd:(selector "stringByRemovingPercentEscapes") ~typ:(returning (id)) 
let stringByReplacingCharacter_withCharacter x0 x1 self = msg_send ~self ~cmd:(selector "stringByReplacingCharacter:withCharacter:") ~typ:(uint @-> uint @-> returning (id)) x0 x1
let stringByReplacingCharactersInRange_withString x0 x1 self = msg_send ~self ~cmd:(selector "stringByReplacingCharactersInRange:withString:") ~typ:(NSRange.t @-> id @-> returning (id)) x0 x1
let stringByReplacingCharactersInSet_withCharacter x0 x1 self = msg_send ~self ~cmd:(selector "stringByReplacingCharactersInSet:withCharacter:") ~typ:(id @-> uint @-> returning (id)) x0 x1
let stringByReplacingOccurrencesOfString_withString x0 x1 self = msg_send ~self ~cmd:(selector "stringByReplacingOccurrencesOfString:withString:") ~typ:(id @-> id @-> returning (id)) x0 x1
let stringByReplacingOccurrencesOfString_withString_options_range x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "stringByReplacingOccurrencesOfString:withString:options:range:") ~typ:(id @-> id @-> ullong @-> NSRange.t @-> returning (id)) x0 x1 x2 x3
let stringByReplacingPercentEscapesUsingEncoding x0 self = msg_send ~self ~cmd:(selector "stringByReplacingPercentEscapesUsingEncoding:") ~typ:(ullong @-> returning (id)) x0
let stringByResolvingSymlinksInPath  self = msg_send ~self ~cmd:(selector "stringByResolvingSymlinksInPath") ~typ:(returning (id)) 
let stringByStandardizingPath  self = msg_send ~self ~cmd:(selector "stringByStandardizingPath") ~typ:(returning (id)) 
let stringByStrippingDiacritics  self = msg_send ~self ~cmd:(selector "stringByStrippingDiacritics") ~typ:(returning (id)) 
let stringByStrippingLeadingAndTrailingWhitespaceAndQuotes  self = msg_send ~self ~cmd:(selector "stringByStrippingLeadingAndTrailingWhitespaceAndQuotes") ~typ:(returning (id)) 
let stringByTrimmingCharactersInCFCharacterSet x0 self = msg_send ~self ~cmd:(selector "stringByTrimmingCharactersInCFCharacterSet:") ~typ:(id @-> returning (id)) x0
let stringByTrimmingCharactersInSet x0 self = msg_send ~self ~cmd:(selector "stringByTrimmingCharactersInSet:") ~typ:(id @-> returning (id)) x0
let stringByTrimmingLastCharacter  self = msg_send ~self ~cmd:(selector "stringByTrimmingLastCharacter") ~typ:(returning (id)) 
let stringMarkingUpcaseTransitionsWithDelimiter2 x0 self = msg_send ~self ~cmd:(selector "stringMarkingUpcaseTransitionsWithDelimiter2:") ~typ:(id @-> returning (id)) x0
let stringWithoutAmpersand  self = msg_send ~self ~cmd:(selector "stringWithoutAmpersand") ~typ:(returning (id)) 
let stringsByAppendingPaths x0 self = msg_send ~self ~cmd:(selector "stringsByAppendingPaths:") ~typ:(id @-> returning (id)) x0
let strokeStringFromNumberString  self = msg_send ~self ~cmd:(selector "strokeStringFromNumberString") ~typ:(returning (id)) 
let substringFromIndex x0 self = msg_send ~self ~cmd:(selector "substringFromIndex:") ~typ:(ullong @-> returning (id)) x0
let substringToIndex x0 self = msg_send ~self ~cmd:(selector "substringToIndex:") ~typ:(ullong @-> returning (id)) x0
let substringWithRange x0 self = msg_send ~self ~cmd:(selector "substringWithRange:") ~typ:(NSRange.t @-> returning (id)) x0
let toneFromPinyinSyllableWithNumber  self = msg_send ~self ~cmd:(selector "toneFromPinyinSyllableWithNumber") ~typ:(returning (id)) 
let traditionalChinesePinyinCompare x0 self = msg_send ~self ~cmd:(selector "traditionalChinesePinyinCompare:") ~typ:(id @-> returning (llong)) x0
let traditionalChineseZhuyinCompare x0 self = msg_send ~self ~cmd:(selector "traditionalChineseZhuyinCompare:") ~typ:(id @-> returning (llong)) x0
let uppercaseString  self = msg_send ~self ~cmd:(selector "uppercaseString") ~typ:(returning (id)) 
let uppercaseStringWithLocale x0 self = msg_send ~self ~cmd:(selector "uppercaseStringWithLocale:") ~typ:(id @-> returning (id)) x0
let variantFittingPresentationWidth x0 self = msg_send ~self ~cmd:(selector "variantFittingPresentationWidth:") ~typ:(llong @-> returning (id)) x0
let writableTypeIdentifiersForItemProvider  self = msg_send ~self ~cmd:(selector "writableTypeIdentifiersForItemProvider") ~typ:(returning (id)) 
let writableTypesForPasteboard x0 self = msg_send ~self ~cmd:(selector "writableTypesForPasteboard:") ~typ:(id @-> returning (id)) x0
let writeToFile_atomically x0 x1 self = msg_send ~self ~cmd:(selector "writeToFile:atomically:") ~typ:(id @-> char @-> returning (char)) x0 x1
let writeToFile_atomically_encoding_error x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "writeToFile:atomically:encoding:error:") ~typ:(id @-> char @-> ullong @-> ptr (id) @-> returning (char)) x0 x1 x2 x3
let writeToURL_atomically x0 x1 self = msg_send ~self ~cmd:(selector "writeToURL:atomically:") ~typ:(id @-> char @-> returning (char)) x0 x1
let writeToURL_atomically_encoding_error x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "writeToURL:atomically:encoding:error:") ~typ:(id @-> char @-> ullong @-> ptr (id) @-> returning (char)) x0 x1 x2 x3
let zhuyinSyllableFromPinyinSyllable  self = msg_send ~self ~cmd:(selector "zhuyinSyllableFromPinyinSyllable") ~typ:(returning (id)) 