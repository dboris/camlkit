(* auto-generated, do not modify *)

[@@@ocaml.warning "-32-33"]
open Runtime
open Objc

include NSObject

let _CAMLType  self = msg_send ~self ~cmd:(selector "CAMLType") ~typ:(returning (id)) 
let _CA_addValue_multipliedBy x0 x1 self = msg_send ~self ~cmd:(selector "CA_addValue:multipliedBy:") ~typ:(id @-> int @-> returning (id)) x0 x1
let _CA_interpolateValue_byFraction x0 x1 self = msg_send ~self ~cmd:(selector "CA_interpolateValue:byFraction:") ~typ:(id @-> float @-> returning (id)) x0 x1
let _CI_initWithRect x0 self = msg_send ~self ~cmd:(selector "CI_initWithRect:") ~typ:(CGRect.t @-> returning (id)) x0
let _CI_rect  self = msg_send ~self ~cmd:(selector "CI_rect") ~typ:(returning (CGRect.t)) 
let _NS_containsObjectIdenticalTo x0 self = msg_send ~self ~cmd:(selector "NS_containsObjectIdenticalTo:") ~typ:(id @-> returning (char)) x0
let _NS_isIdenticalToArray x0 self = msg_send ~self ~cmd:(selector "NS_isIdenticalToArray:") ~typ:(id @-> returning (char)) x0
let addObserver_forKeyPath_options_context x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "addObserver:forKeyPath:options:context:") ~typ:(id @-> id @-> ullong @-> ptr (void) @-> returning (void)) x0 x1 x2 x3
let addObserver_toObjectsAtIndexes_forKeyPath_options_context x0 x1 x2 x3 x4 self = msg_send ~self ~cmd:(selector "addObserver:toObjectsAtIndexes:forKeyPath:options:context:") ~typ:(id @-> id @-> id @-> ullong @-> ptr (void) @-> returning (void)) x0 x1 x2 x3 x4
let allObjects  self = msg_send ~self ~cmd:(selector "allObjects") ~typ:(returning (id)) 
let arrayByAddingObject x0 self = msg_send ~self ~cmd:(selector "arrayByAddingObject:") ~typ:(id @-> returning (id)) x0
let arrayByAddingObjectsFromArray x0 self = msg_send ~self ~cmd:(selector "arrayByAddingObjectsFromArray:") ~typ:(id @-> returning (id)) x0
let arrayByApplyingDifference x0 self = msg_send ~self ~cmd:(selector "arrayByApplyingDifference:") ~typ:(id @-> returning (id)) x0
let arrayByApplyingSelector x0 self = msg_send ~self ~cmd:(selector "arrayByApplyingSelector:") ~typ:(_SEL @-> returning (id)) x0
let arrayByExcludingObjectsInArray x0 self = msg_send ~self ~cmd:(selector "arrayByExcludingObjectsInArray:") ~typ:(id @-> returning (id)) x0
let arrayByExcludingToObjectsInArray x0 self = msg_send ~self ~cmd:(selector "arrayByExcludingToObjectsInArray:") ~typ:(id @-> returning (id)) x0
let bs_compactMap x0 self = msg_send ~self ~cmd:(selector "bs_compactMap:") ~typ:(ptr void @-> returning (id)) x0
let bs_containsObjectPassingTest x0 self = msg_send ~self ~cmd:(selector "bs_containsObjectPassingTest:") ~typ:(ptr void @-> returning (char)) x0
let bs_dictionaryByPartitioning x0 self = msg_send ~self ~cmd:(selector "bs_dictionaryByPartitioning:") ~typ:(ptr void @-> returning (id)) x0
let bs_differenceWithArray x0 self = msg_send ~self ~cmd:(selector "bs_differenceWithArray:") ~typ:(id @-> returning (id)) x0
let bs_each x0 self = msg_send ~self ~cmd:(selector "bs_each:") ~typ:(ptr void @-> returning (void)) x0
let bs_enumerateObjectsOfClass_usingBlock x0 x1 self = msg_send ~self ~cmd:(selector "bs_enumerateObjectsOfClass:usingBlock:") ~typ:(_Class @-> ptr void @-> returning (void)) x0 x1
let bs_filter x0 self = msg_send ~self ~cmd:(selector "bs_filter:") ~typ:(ptr void @-> returning (id)) x0
let bs_first x0 self = msg_send ~self ~cmd:(selector "bs_first:") ~typ:(ullong @-> returning (id)) x0
let bs_firstObjectOfClass x0 self = msg_send ~self ~cmd:(selector "bs_firstObjectOfClass:") ~typ:(_Class @-> returning (id)) x0
let bs_firstObjectOfClassNamed x0 self = msg_send ~self ~cmd:(selector "bs_firstObjectOfClassNamed:") ~typ:(id @-> returning (id)) x0
let bs_firstObjectPassingTest x0 self = msg_send ~self ~cmd:(selector "bs_firstObjectPassingTest:") ~typ:(ptr void @-> returning (id)) x0
let bs_flatten  self = msg_send ~self ~cmd:(selector "bs_flatten") ~typ:(returning (id)) 
let bs_flattenedDifferenceWithArray x0 self = msg_send ~self ~cmd:(selector "bs_flattenedDifferenceWithArray:") ~typ:(id @-> returning (id)) x0
let bs_map x0 self = msg_send ~self ~cmd:(selector "bs_map:") ~typ:(ptr void @-> returning (id)) x0
let bs_mapNoNulls x0 self = msg_send ~self ~cmd:(selector "bs_mapNoNulls:") ~typ:(ptr void @-> returning (id)) x0
let bs_objectsOfClass x0 self = msg_send ~self ~cmd:(selector "bs_objectsOfClass:") ~typ:(_Class @-> returning (id)) x0
let bs_reduce_block x0 x1 self = msg_send ~self ~cmd:(selector "bs_reduce:block:") ~typ:(id @-> ptr void @-> returning (id)) x0 x1
let bs_reverse  self = msg_send ~self ~cmd:(selector "bs_reverse") ~typ:(returning (id)) 
let classForCoder  self = msg_send ~self ~cmd:(selector "classForCoder") ~typ:(returning (_Class)) 
let coerceValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "coerceValue:forKey:") ~typ:(id @-> id @-> returning (id)) x0 x1
let componentsJoinedByString x0 self = msg_send ~self ~cmd:(selector "componentsJoinedByString:") ~typ:(id @-> returning (id)) x0
let containsObject x0 self = msg_send ~self ~cmd:(selector "containsObject:") ~typ:(id @-> returning (char)) x0
let containsObjectIdenticalTo x0 self = msg_send ~self ~cmd:(selector "containsObjectIdenticalTo:") ~typ:(id @-> returning (char)) x0
let containsObjectIdenticalTo_inRange x0 x1 self = msg_send ~self ~cmd:(selector "containsObjectIdenticalTo:inRange:") ~typ:(id @-> NSRange.t @-> returning (char)) x0 x1
let containsObject_inRange x0 x1 self = msg_send ~self ~cmd:(selector "containsObject:inRange:") ~typ:(id @-> NSRange.t @-> returning (char)) x0 x1
let copyWithZone x0 self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x0
let count  self = msg_send ~self ~cmd:(selector "count") ~typ:(returning (ullong)) 
let countForObject x0 self = msg_send ~self ~cmd:(selector "countForObject:") ~typ:(id @-> returning (ullong)) x0
let countForObject_inRange x0 x1 self = msg_send ~self ~cmd:(selector "countForObject:inRange:") ~typ:(id @-> NSRange.t @-> returning (ullong)) x0 x1
let debugDescription  self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning (id)) 
let description  self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id)) 
let descriptionWithLocale x0 self = msg_send ~self ~cmd:(selector "descriptionWithLocale:") ~typ:(id @-> returning (id)) x0
let descriptionWithLocale_indent x0 x1 self = msg_send ~self ~cmd:(selector "descriptionWithLocale:indent:") ~typ:(id @-> ullong @-> returning (id)) x0 x1
let differenceFromArray x0 self = msg_send ~self ~cmd:(selector "differenceFromArray:") ~typ:(id @-> returning (id)) x0
let differenceFromArray_withOptions x0 x1 self = msg_send ~self ~cmd:(selector "differenceFromArray:withOptions:") ~typ:(id @-> ullong @-> returning (id)) x0 x1
let differenceFromArray_withOptions_usingEquivalenceTest x0 x1 x2 self = msg_send ~self ~cmd:(selector "differenceFromArray:withOptions:usingEquivalenceTest:") ~typ:(id @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2
let encodeWithCAMLWriter x0 self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning (void)) x0
let encodeWithCoder x0 self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x0
let encodeWithCoder x0 self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x0
let enumerateObjectsAtIndexes_options_usingBlock x0 x1 x2 self = msg_send ~self ~cmd:(selector "enumerateObjectsAtIndexes:options:usingBlock:") ~typ:(id @-> ullong @-> ptr void @-> returning (void)) x0 x1 x2
let enumerateObjectsUsingBlock x0 self = msg_send ~self ~cmd:(selector "enumerateObjectsUsingBlock:") ~typ:(ptr void @-> returning (void)) x0
let enumerateObjectsWithOptions_usingBlock x0 x1 self = msg_send ~self ~cmd:(selector "enumerateObjectsWithOptions:usingBlock:") ~typ:(ullong @-> ptr void @-> returning (void)) x0 x1
let filteredArrayUsingPredicate x0 self = msg_send ~self ~cmd:(selector "filteredArrayUsingPredicate:") ~typ:(id @-> returning (id)) x0
let firstObject  self = msg_send ~self ~cmd:(selector "firstObject") ~typ:(returning (id)) 
let firstObjectCommonWithArray x0 self = msg_send ~self ~cmd:(selector "firstObjectCommonWithArray:") ~typ:(id @-> returning (id)) x0
let firstRange  self = msg_send ~self ~cmd:(selector "firstRange") ~typ:(returning (NSRange.t)) 
let getObjects x0 self = msg_send ~self ~cmd:(selector "getObjects:") ~typ:(ptr (id) @-> returning (void)) x0
let getObjects_range x0 x1 self = msg_send ~self ~cmd:(selector "getObjects:range:") ~typ:(ptr (id) @-> NSRange.t @-> returning (void)) x0 x1
let hash  self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong)) 
let indexOfFirstRangeContainingOrFollowing x0 self = msg_send ~self ~cmd:(selector "indexOfFirstRangeContainingOrFollowing:") ~typ:(ullong @-> returning (ullong)) x0
let indexOfObject x0 self = msg_send ~self ~cmd:(selector "indexOfObject:") ~typ:(id @-> returning (ullong)) x0
let indexOfObjectAtIndexes_options_passingTest x0 x1 x2 self = msg_send ~self ~cmd:(selector "indexOfObjectAtIndexes:options:passingTest:") ~typ:(id @-> ullong @-> ptr void @-> returning (ullong)) x0 x1 x2
let indexOfObjectIdenticalTo x0 self = msg_send ~self ~cmd:(selector "indexOfObjectIdenticalTo:") ~typ:(id @-> returning (ullong)) x0
let indexOfObjectIdenticalTo_inRange x0 x1 self = msg_send ~self ~cmd:(selector "indexOfObjectIdenticalTo:inRange:") ~typ:(id @-> NSRange.t @-> returning (ullong)) x0 x1
let indexOfObjectPassingTest x0 self = msg_send ~self ~cmd:(selector "indexOfObjectPassingTest:") ~typ:(ptr void @-> returning (ullong)) x0
let indexOfObjectWithOptions_passingTest x0 x1 self = msg_send ~self ~cmd:(selector "indexOfObjectWithOptions:passingTest:") ~typ:(ullong @-> ptr void @-> returning (ullong)) x0 x1
let indexOfObject_inRange x0 x1 self = msg_send ~self ~cmd:(selector "indexOfObject:inRange:") ~typ:(id @-> NSRange.t @-> returning (ullong)) x0 x1
let indexOfObject_inSortedRange_options_usingComparator x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "indexOfObject:inSortedRange:options:usingComparator:") ~typ:(id @-> NSRange.t @-> ullong @-> ptr void @-> returning (ullong)) x0 x1 x2 x3
let indexesOfObject x0 self = msg_send ~self ~cmd:(selector "indexesOfObject:") ~typ:(id @-> returning (id)) x0
let indexesOfObjectIdenticalTo x0 self = msg_send ~self ~cmd:(selector "indexesOfObjectIdenticalTo:") ~typ:(id @-> returning (id)) x0
let indexesOfObjectIdenticalTo_inRange x0 x1 self = msg_send ~self ~cmd:(selector "indexesOfObjectIdenticalTo:inRange:") ~typ:(id @-> NSRange.t @-> returning (id)) x0 x1
let indexesOfObject_inRange x0 x1 self = msg_send ~self ~cmd:(selector "indexesOfObject:inRange:") ~typ:(id @-> NSRange.t @-> returning (id)) x0 x1
let indexesOfObjectsAtIndexes_options_passingTest x0 x1 x2 self = msg_send ~self ~cmd:(selector "indexesOfObjectsAtIndexes:options:passingTest:") ~typ:(id @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2
let indexesOfObjectsPassingTest x0 self = msg_send ~self ~cmd:(selector "indexesOfObjectsPassingTest:") ~typ:(ptr void @-> returning (id)) x0
let indexesOfObjectsWithOptions_passingTest x0 x1 self = msg_send ~self ~cmd:(selector "indexesOfObjectsWithOptions:passingTest:") ~typ:(ullong @-> ptr void @-> returning (id)) x0 x1
let initWithArray x0 self = msg_send ~self ~cmd:(selector "initWithArray:") ~typ:(id @-> returning (id)) x0
let initWithArray_copyItems x0 x1 self = msg_send ~self ~cmd:(selector "initWithArray:copyItems:") ~typ:(id @-> char @-> returning (id)) x0 x1
let initWithArray_range x0 x1 self = msg_send ~self ~cmd:(selector "initWithArray:range:") ~typ:(id @-> NSRange.t @-> returning (id)) x0 x1
let initWithArray_range_copyItems x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithArray:range:copyItems:") ~typ:(id @-> NSRange.t @-> char @-> returning (id)) x0 x1 x2
let initWithCoder x0 self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x0
let initWithCoder x0 self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfFile x0 self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfURL x0 self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:") ~typ:(id @-> returning (id)) x0
let initWithContentsOfURL_error x0 x1 self = msg_send ~self ~cmd:(selector "initWithContentsOfURL:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x0 x1
let initWithObject x0 self = msg_send ~self ~cmd:(selector "initWithObject:") ~typ:(id @-> returning (id)) x0
let initWithObjects x0 self = msg_send ~self ~cmd:(selector "initWithObjects:") ~typ:(id @-> returning (id)) x0
let initWithObjects_count x0 x1 self = msg_send ~self ~cmd:(selector "initWithObjects:count:") ~typ:(ptr (id) @-> ullong @-> returning (id)) x0 x1
let initWithOrderedSet x0 self = msg_send ~self ~cmd:(selector "initWithOrderedSet:") ~typ:(id @-> returning (id)) x0
let initWithOrderedSet_copyItems x0 x1 self = msg_send ~self ~cmd:(selector "initWithOrderedSet:copyItems:") ~typ:(id @-> char @-> returning (id)) x0 x1
let initWithOrderedSet_range x0 x1 self = msg_send ~self ~cmd:(selector "initWithOrderedSet:range:") ~typ:(id @-> NSRange.t @-> returning (id)) x0 x1
let initWithOrderedSet_range_copyItems x0 x1 x2 self = msg_send ~self ~cmd:(selector "initWithOrderedSet:range:copyItems:") ~typ:(id @-> NSRange.t @-> char @-> returning (id)) x0 x1 x2
let initWithSet x0 self = msg_send ~self ~cmd:(selector "initWithSet:") ~typ:(id @-> returning (id)) x0
let initWithSet_copyItems x0 x1 self = msg_send ~self ~cmd:(selector "initWithSet:copyItems:") ~typ:(id @-> char @-> returning (id)) x0 x1
let insertValue_atIndex_inPropertyWithKey x0 x1 x2 self = msg_send ~self ~cmd:(selector "insertValue:atIndex:inPropertyWithKey:") ~typ:(id @-> ullong @-> id @-> returning (void)) x0 x1 x2
let isEqual x0 self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning (char)) x0
let isEqualToArray x0 self = msg_send ~self ~cmd:(selector "isEqualToArray:") ~typ:(id @-> returning (char)) x0
let isNSArray__  self = msg_send ~self ~cmd:(selector "isNSArray__") ~typ:(returning (char)) 
let lastObject  self = msg_send ~self ~cmd:(selector "lastObject") ~typ:(returning (id)) 
let lastRange  self = msg_send ~self ~cmd:(selector "lastRange") ~typ:(returning (NSRange.t)) 
let makeObjectsPerformSelector x0 self = msg_send ~self ~cmd:(selector "makeObjectsPerformSelector:") ~typ:(_SEL @-> returning (void)) x0
let makeObjectsPerformSelector_withObject x0 x1 self = msg_send ~self ~cmd:(selector "makeObjectsPerformSelector:withObject:") ~typ:(_SEL @-> id @-> returning (void)) x0 x1
let maximumRange  self = msg_send ~self ~cmd:(selector "maximumRange") ~typ:(returning (NSRange.t)) 
let mutableCopyWithZone x0 self = msg_send ~self ~cmd:(selector "mutableCopyWithZone:") ~typ:(id @-> returning (id)) x0
let objectAtIndex x0 self = msg_send ~self ~cmd:(selector "objectAtIndex:") ~typ:(ullong @-> returning (id)) x0
let objectAtIndexedSubscript x0 self = msg_send ~self ~cmd:(selector "objectAtIndexedSubscript:") ~typ:(ullong @-> returning (id)) x0
let objectAtIndexes_options_passingTest x0 x1 x2 self = msg_send ~self ~cmd:(selector "objectAtIndexes:options:passingTest:") ~typ:(id @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2
let objectEnumerator  self = msg_send ~self ~cmd:(selector "objectEnumerator") ~typ:(returning (id)) 
let objectPassingTest x0 self = msg_send ~self ~cmd:(selector "objectPassingTest:") ~typ:(ptr void @-> returning (id)) x0
let objectWithOptions_passingTest x0 x1 self = msg_send ~self ~cmd:(selector "objectWithOptions:passingTest:") ~typ:(ullong @-> ptr void @-> returning (id)) x0 x1
let objectsAtIndexes x0 self = msg_send ~self ~cmd:(selector "objectsAtIndexes:") ~typ:(id @-> returning (id)) x0
let objectsAtIndexes_options_passingTest x0 x1 x2 self = msg_send ~self ~cmd:(selector "objectsAtIndexes:options:passingTest:") ~typ:(id @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2
let objectsPassingTest x0 self = msg_send ~self ~cmd:(selector "objectsPassingTest:") ~typ:(ptr void @-> returning (id)) x0
let objectsWithOptions_passingTest x0 x1 self = msg_send ~self ~cmd:(selector "objectsWithOptions:passingTest:") ~typ:(ullong @-> ptr void @-> returning (id)) x0 x1
let pathsMatchingExtensions x0 self = msg_send ~self ~cmd:(selector "pathsMatchingExtensions:") ~typ:(id @-> returning (id)) x0
let rangeAtIndex x0 self = msg_send ~self ~cmd:(selector "rangeAtIndex:") ~typ:(ullong @-> returning (NSRange.t)) x0
let rangesContainLocation x0 self = msg_send ~self ~cmd:(selector "rangesContainLocation:") ~typ:(ullong @-> returning (char)) x0
let removeObserver_forKeyPath x0 x1 self = msg_send ~self ~cmd:(selector "removeObserver:forKeyPath:") ~typ:(id @-> id @-> returning (void)) x0 x1
let removeObserver_forKeyPath_context x0 x1 x2 self = msg_send ~self ~cmd:(selector "removeObserver:forKeyPath:context:") ~typ:(id @-> id @-> ptr (void) @-> returning (void)) x0 x1 x2
let removeObserver_fromObjectsAtIndexes_forKeyPath x0 x1 x2 self = msg_send ~self ~cmd:(selector "removeObserver:fromObjectsAtIndexes:forKeyPath:") ~typ:(id @-> id @-> id @-> returning (void)) x0 x1 x2
let removeObserver_fromObjectsAtIndexes_forKeyPath_context x0 x1 x2 x3 self = msg_send ~self ~cmd:(selector "removeObserver:fromObjectsAtIndexes:forKeyPath:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x0 x1 x2 x3
let removeValueAtIndex_fromPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "removeValueAtIndex:fromPropertyWithKey:") ~typ:(ullong @-> id @-> returning (void)) x0 x1
let replaceValueAtIndex_inPropertyWithKey_withValue x0 x1 x2 self = msg_send ~self ~cmd:(selector "replaceValueAtIndex:inPropertyWithKey:withValue:") ~typ:(ullong @-> id @-> id @-> returning (void)) x0 x1 x2
let replacementObjectForPortCoder x0 self = msg_send ~self ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning (id)) x0
let resourceStack  self = msg_send ~self ~cmd:(selector "resourceStack") ~typ:(returning (id)) 
let reverseObjectEnumerator  self = msg_send ~self ~cmd:(selector "reverseObjectEnumerator") ~typ:(returning (id)) 
let reversedArray  self = msg_send ~self ~cmd:(selector "reversedArray") ~typ:(returning (id)) 
let setValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let sortedArrayFromRange_options_usingComparator x0 x1 x2 self = msg_send ~self ~cmd:(selector "sortedArrayFromRange:options:usingComparator:") ~typ:(NSRange.t @-> ullong @-> ptr void @-> returning (id)) x0 x1 x2
let sortedArrayHint  self = msg_send ~self ~cmd:(selector "sortedArrayHint") ~typ:(returning (id)) 
let sortedArrayUsingComparator x0 self = msg_send ~self ~cmd:(selector "sortedArrayUsingComparator:") ~typ:(ptr void @-> returning (id)) x0
let sortedArrayUsingDescriptors x0 self = msg_send ~self ~cmd:(selector "sortedArrayUsingDescriptors:") ~typ:(id @-> returning (id)) x0
let sortedArrayUsingFunction_context x0 x1 self = msg_send ~self ~cmd:(selector "sortedArrayUsingFunction:context:") ~typ:(ptr (ptr void) @-> ptr (void) @-> returning (id)) x0 x1
let sortedArrayUsingFunction_context_hint x0 x1 x2 self = msg_send ~self ~cmd:(selector "sortedArrayUsingFunction:context:hint:") ~typ:(ptr (ptr void) @-> ptr (void) @-> id @-> returning (id)) x0 x1 x2
let sortedArrayUsingSelector x0 self = msg_send ~self ~cmd:(selector "sortedArrayUsingSelector:") ~typ:(_SEL @-> returning (id)) x0
let sortedArrayUsingSelector_hint x0 x1 self = msg_send ~self ~cmd:(selector "sortedArrayUsingSelector:hint:") ~typ:(_SEL @-> id @-> returning (id)) x0 x1
let sortedArrayWithOptions_usingComparator x0 x1 self = msg_send ~self ~cmd:(selector "sortedArrayWithOptions:usingComparator:") ~typ:(ullong @-> ptr void @-> returning (id)) x0 x1
let stringsByAppendingPathComponent x0 self = msg_send ~self ~cmd:(selector "stringsByAppendingPathComponent:") ~typ:(id @-> returning (id)) x0
let subarrayWithObjectsOfKind x0 self = msg_send ~self ~cmd:(selector "subarrayWithObjectsOfKind:") ~typ:(_Class @-> returning (id)) x0
let subarrayWithRange x0 self = msg_send ~self ~cmd:(selector "subarrayWithRange:") ~typ:(NSRange.t @-> returning (id)) x0
let takeValue_forKey x0 x1 self = msg_send ~self ~cmd:(selector "takeValue:forKey:") ~typ:(id @-> id @-> returning (void)) x0 x1
let ui_arrayByRemovingLastObjectEqualTo x0 self = msg_send ~self ~cmd:(selector "ui_arrayByRemovingLastObjectEqualTo:") ~typ:(id @-> returning (id)) x0
let valueAtIndex_inPropertyWithKey x0 x1 self = msg_send ~self ~cmd:(selector "valueAtIndex:inPropertyWithKey:") ~typ:(ullong @-> id @-> returning (id)) x0 x1
let valueForKey x0 self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning (id)) x0
let valueForKeyPath x0 self = msg_send ~self ~cmd:(selector "valueForKeyPath:") ~typ:(id @-> returning (id)) x0
let writeToFile_atomically x0 x1 self = msg_send ~self ~cmd:(selector "writeToFile:atomically:") ~typ:(id @-> char @-> returning (char)) x0 x1
let writeToURL_atomically x0 x1 self = msg_send ~self ~cmd:(selector "writeToURL:atomically:") ~typ:(id @-> char @-> returning (char)) x0 x1
let writeToURL_error x0 x1 self = msg_send ~self ~cmd:(selector "writeToURL:error:") ~typ:(id @-> ptr (id) @-> returning (char)) x0 x1