(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "NSApplication"

module Class = struct
  let automaticallyNotifiesObserversForKey x self = msg_send ~self ~cmd:(selector "automaticallyNotifiesObserversForKey:") ~typ:(id @-> returning (bool)) x
  let detachDrawingThread x ~toTarget ~withObject self = msg_send ~self ~cmd:(selector "detachDrawingThread:toTarget:withObject:") ~typ:(_SEL @-> id @-> id @-> returning (void)) x toTarget withObject
  let initialize self = msg_send ~self ~cmd:(selector "initialize") ~typ:(returning (void))
  let load self = msg_send ~self ~cmd:(selector "load") ~typ:(returning (void))
  let sharedApplication self = msg_send ~self ~cmd:(selector "sharedApplication") ~typ:(returning (id))
  let willRestoreState self = msg_send ~self ~cmd:(selector "willRestoreState") ~typ:(returning (bool))
end

let abortAllToolTips self = msg_send ~self ~cmd:(selector "abortAllToolTips") ~typ:(returning (void))
let abortModal self = msg_send ~self ~cmd:(selector "abortModal") ~typ:(returning (void))
let accessibilityActionDescription x self = msg_send ~self ~cmd:(selector "accessibilityActionDescription:") ~typ:(id @-> returning (id)) x
let accessibilityActionNames self = msg_send ~self ~cmd:(selector "accessibilityActionNames") ~typ:(returning (id))
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning (id))
let accessibilityAttributeValue x self = msg_send ~self ~cmd:(selector "accessibilityAttributeValue:") ~typ:(id @-> returning (id)) x
let accessibilityAttributeValue' x ~forParameter self = msg_send ~self ~cmd:(selector "accessibilityAttributeValue:forParameter:") ~typ:(id @-> id @-> returning (id)) x forParameter
let accessibilityAuditIssuesAttribute self = msg_send ~self ~cmd:(selector "accessibilityAuditIssuesAttribute") ~typ:(returning (id))
let accessibilityChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenAttribute") ~typ:(returning (id))
let accessibilityChildrenInNavigationOrderAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenInNavigationOrderAttribute") ~typ:(returning (id))
let accessibilityEnhancedUserInterfaceAttribute self = msg_send ~self ~cmd:(selector "accessibilityEnhancedUserInterfaceAttribute") ~typ:(returning (id))
let accessibilityExtrasMenuBarAttribute self = msg_send ~self ~cmd:(selector "accessibilityExtrasMenuBarAttribute") ~typ:(returning (id))
let accessibilityFocusChangedToElement x self = msg_send ~self ~cmd:(selector "accessibilityFocusChangedToElement:") ~typ:(id @-> returning (void)) x
let accessibilityFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityFocusedUIElement") ~typ:(returning (id))
let accessibilityFocusedUIElementAttribute self = msg_send ~self ~cmd:(selector "accessibilityFocusedUIElementAttribute") ~typ:(returning (id))
let accessibilityFocusedWindowAttribute self = msg_send ~self ~cmd:(selector "accessibilityFocusedWindowAttribute") ~typ:(returning (id))
let accessibilityFrame self = msg_send ~self ~cmd:(selector "accessibilityFrame") ~typ:(returning (CGRect.t))
let accessibilityFrontmostAttribute self = msg_send ~self ~cmd:(selector "accessibilityFrontmostAttribute") ~typ:(returning (id))
let accessibilityFunctionRowTopLevelElementsAttribute self = msg_send ~self ~cmd:(selector "accessibilityFunctionRowTopLevelElementsAttribute") ~typ:(returning (id))
let accessibilityHiddenAttribute self = msg_send ~self ~cmd:(selector "accessibilityHiddenAttribute") ~typ:(returning (id))
let accessibilityHitTest self = msg_send ~self ~cmd:(selector "accessibilityHitTest") ~typ:(returning (id))
let accessibilityHitTest' x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let accessibilityIsAttributeSettable x self = msg_send ~self ~cmd:(selector "accessibilityIsAttributeSettable:") ~typ:(id @-> returning (bool)) x
let accessibilityIsChildrenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsChildrenAttributeSettable") ~typ:(returning (bool))
let accessibilityIsEnhancedUserInterfaceAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsEnhancedUserInterfaceAttributeSettable") ~typ:(returning (bool))
let accessibilityIsFocusedUIElementAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFocusedUIElementAttributeSettable") ~typ:(returning (bool))
let accessibilityIsFocusedWindowAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFocusedWindowAttributeSettable") ~typ:(returning (bool))
let accessibilityIsFrontmostAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFrontmostAttributeSettable") ~typ:(returning (bool))
let accessibilityIsHiddenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsHiddenAttributeSettable") ~typ:(returning (bool))
let accessibilityIsIgnored self = msg_send ~self ~cmd:(selector "accessibilityIsIgnored") ~typ:(returning (bool))
let accessibilityIsMainWindowAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsMainWindowAttributeSettable") ~typ:(returning (bool))
let accessibilityIsMenuBarAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsMenuBarAttributeSettable") ~typ:(returning (bool))
let accessibilityIsRoleAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRoleAttributeSettable") ~typ:(returning (bool))
let accessibilityIsRoleDescriptionAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRoleDescriptionAttributeSettable") ~typ:(returning (bool))
let accessibilityIsTitleAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsTitleAttributeSettable") ~typ:(returning (bool))
let accessibilityIsWindowsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsWindowsAttributeSettable") ~typ:(returning (bool))
let accessibilityMainWindowAttribute self = msg_send ~self ~cmd:(selector "accessibilityMainWindowAttribute") ~typ:(returning (id))
let accessibilityMayContainProtectedContent self = msg_send ~self ~cmd:(selector "accessibilityMayContainProtectedContent") ~typ:(returning (bool))
let accessibilityMenuBarAttribute self = msg_send ~self ~cmd:(selector "accessibilityMenuBarAttribute") ~typ:(returning (id))
let accessibilityParent self = msg_send ~self ~cmd:(selector "accessibilityParent") ~typ:(returning (id))
let accessibilityPerformAction x self = msg_send ~self ~cmd:(selector "accessibilityPerformAction:") ~typ:(id @-> returning (void)) x
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning (id))
let accessibilityRoleDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleDescriptionAttribute") ~typ:(returning (id))
let accessibilitySetEnhancedUserInterfaceAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetEnhancedUserInterfaceAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetFrontmostAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetFrontmostAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetHiddenAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetHiddenAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetMayContainProtectedContent x self = msg_send ~self ~cmd:(selector "accessibilitySetMayContainProtectedContent:") ~typ:(bool @-> returning (void)) x
let accessibilitySetValue x ~forAttribute self = msg_send ~self ~cmd:(selector "accessibilitySetValue:forAttribute:") ~typ:(id @-> id @-> returning (void)) x forAttribute
let accessibilityShouldUseUniqueId self = msg_send ~self ~cmd:(selector "accessibilityShouldUseUniqueId") ~typ:(returning (bool))
let accessibilityTitleAttribute self = msg_send ~self ~cmd:(selector "accessibilityTitleAttribute") ~typ:(returning (id))
let accessibilityWindowsAttribute self = msg_send ~self ~cmd:(selector "accessibilityWindowsAttribute") ~typ:(returning (id))
let accessibilityWorkaroundAddExtraWindow x self = msg_send ~self ~cmd:(selector "accessibilityWorkaroundAddExtraWindow:") ~typ:(id @-> returning (void)) x
let accessibilityWorkaroundRemoveExtraWindow x self = msg_send ~self ~cmd:(selector "accessibilityWorkaroundRemoveExtraWindow:") ~typ:(id @-> returning (void)) x
let activateContextHelpMode x self = msg_send ~self ~cmd:(selector "activateContextHelpMode:") ~typ:(id @-> returning (void)) x
let activateIgnoringOtherApps x self = msg_send ~self ~cmd:(selector "activateIgnoringOtherApps:") ~typ:(bool @-> returning (void)) x
let activationPolicy self = msg_send ~self ~cmd:(selector "activationPolicy") ~typ:(returning (llong))
let activeSpaceChanged x self = msg_send ~self ~cmd:(selector "activeSpaceChanged:") ~typ:(id @-> returning (void)) x
let addIdleMonitorUsingHandler x self = msg_send ~self ~cmd:(selector "addIdleMonitorUsingHandler:") ~typ:(ptr void @-> returning (id)) x
let addMemoryPressureMonitorUsingHandler x self = msg_send ~self ~cmd:(selector "addMemoryPressureMonitorUsingHandler:") ~typ:(ptr void @-> returning (id)) x
let addWindowsItem x ~title ~filename self = msg_send ~self ~cmd:(selector "addWindowsItem:title:filename:") ~typ:(id @-> id @-> bool @-> returning (void)) x title filename
let alternateArrangeInFront x self = msg_send ~self ~cmd:(selector "alternateArrangeInFront:") ~typ:(id @-> returning (void)) x
let appearance self = msg_send ~self ~cmd:(selector "appearance") ~typ:(returning (id))
let applicationIconImage self = msg_send ~self ~cmd:(selector "applicationIconImage") ~typ:(returning (id))
let areCursorRectsEnabled self = msg_send ~self ~cmd:(selector "areCursorRectsEnabled") ~typ:(returning (bool))
let arrangeInFront x self = msg_send ~self ~cmd:(selector "arrangeInFront:") ~typ:(id @-> returning (void)) x
let beginSheet x ~modalForWindow ~modalDelegate ~didEndSelector ~contextInfo self = msg_send ~self ~cmd:(selector "beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:") ~typ:(id @-> id @-> id @-> _SEL @-> ptr (void) @-> returning (void)) x modalForWindow modalDelegate didEndSelector contextInfo
let canEnterFullScreenMode self = msg_send ~self ~cmd:(selector "canEnterFullScreenMode") ~typ:(returning (bool))
let cancelUserAttentionRequest x self = msg_send ~self ~cmd:(selector "cancelUserAttentionRequest:") ~typ:(llong @-> returning (void)) x
let changeWindowsItem x ~title ~filename self = msg_send ~self ~cmd:(selector "changeWindowsItem:title:filename:") ~typ:(id @-> id @-> bool @-> returning (void)) x title filename
let closeAll x self = msg_send ~self ~cmd:(selector "closeAll:") ~typ:(id @-> returning (void)) x
let completeStateRestoration self = msg_send ~self ~cmd:(selector "completeStateRestoration") ~typ:(returning (void))
let conformsToProtocol x self = msg_send ~self ~cmd:(selector "conformsToProtocol:") ~typ:(id @-> returning (bool)) x
let context self = msg_send ~self ~cmd:(selector "context") ~typ:(returning (id))
let contextID self = msg_send ~self ~cmd:(selector "contextID") ~typ:(returning (uint))
let copyScriptingValue x ~forKey ~withProperties self = msg_send ~self ~cmd:(selector "copyScriptingValue:forKey:withProperties:") ~typ:(id @-> id @-> id @-> returning (id)) x forKey withProperties
let currentEvent self = msg_send ~self ~cmd:(selector "currentEvent") ~typ:(returning (id))
let currentSystemPresentationOptions self = msg_send ~self ~cmd:(selector "currentSystemPresentationOptions") ~typ:(returning (ullong))
let deactivate self = msg_send ~self ~cmd:(selector "deactivate") ~typ:(returning (void))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let delayWindowOrdering self = msg_send ~self ~cmd:(selector "delayWindowOrdering") ~typ:(returning (id))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let disableAutomaticTermination self = msg_send ~self ~cmd:(selector "disableAutomaticTermination") ~typ:(returning (void))
let disableCursorRects self = msg_send ~self ~cmd:(selector "disableCursorRects") ~typ:(returning (void))
let disableRelaunchOnLogin self = msg_send ~self ~cmd:(selector "disableRelaunchOnLogin") ~typ:(returning (void))
let discardEventsMatchingMask x ~beforeEvent self = msg_send ~self ~cmd:(selector "discardEventsMatchingMask:beforeEvent:") ~typ:(ullong @-> id @-> returning (void)) x beforeEvent
let doCommandBySelector x self = msg_send ~self ~cmd:(selector "doCommandBySelector:") ~typ:(_SEL @-> returning (void)) x
let dockTile self = msg_send ~self ~cmd:(selector "dockTile") ~typ:(returning (id))
let effectiveAppearance self = msg_send ~self ~cmd:(selector "effectiveAppearance") ~typ:(returning (id))
let enableAutomaticTermination self = msg_send ~self ~cmd:(selector "enableAutomaticTermination") ~typ:(returning (void))
let enableCursorRects self = msg_send ~self ~cmd:(selector "enableCursorRects") ~typ:(returning (void))
let enableRelaunchOnLogin self = msg_send ~self ~cmd:(selector "enableRelaunchOnLogin") ~typ:(returning (void))
let enabledRemoteNotificationTypes self = msg_send ~self ~cmd:(selector "enabledRemoteNotificationTypes") ~typ:(returning (ullong))
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning (void)) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let endSheet x self = msg_send ~self ~cmd:(selector "endSheet:") ~typ:(id @-> returning (void)) x
let endSheet' x ~returnCode self = msg_send ~self ~cmd:(selector "endSheet:returnCode:") ~typ:(id @-> llong @-> returning (void)) x returnCode
let enterFullScreenMode x self = msg_send ~self ~cmd:(selector "enterFullScreenMode:") ~typ:(id @-> returning (void)) x
let enumerateWindowsWithOptions x ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateWindowsWithOptions:usingBlock:") ~typ:(llong @-> ptr void @-> returning (void)) x usingBlock
let event x ~wouldActivateWindow self = msg_send ~self ~cmd:(selector "event:wouldActivateWindow:") ~typ:(id @-> id @-> returning (void)) x wouldActivateWindow
let exitFullScreenMode x self = msg_send ~self ~cmd:(selector "exitFullScreenMode:") ~typ:(id @-> returning (void)) x
let extendStateRestoration self = msg_send ~self ~cmd:(selector "extendStateRestoration") ~typ:(returning (void))
let failedTest x self = msg_send ~self ~cmd:(selector "failedTest:") ~typ:(id @-> returning (void)) x
let failedTest1 x ~withFailure self = msg_send ~self ~cmd:(selector "failedTest:withFailure:") ~typ:(id @-> id @-> returning (void)) x withFailure
let failedTest2 x ~withResults self = msg_send ~self ~cmd:(selector "failedTest:withResults:") ~typ:(id @-> id @-> returning (void)) x withResults
let failedTest3 x ~withFailure ~withResults self = msg_send ~self ~cmd:(selector "failedTest:withFailure:withResults:") ~typ:(id @-> id @-> id @-> returning (void)) x withFailure withResults
let finishLaunching self = msg_send ~self ~cmd:(selector "finishLaunching") ~typ:(returning (void))
let finishedSubTest x ~forTest self = msg_send ~self ~cmd:(selector "finishedSubTest:forTest:") ~typ:(id @-> id @-> returning (void)) x forTest
let finishedSubTest' x ~forTest ~waitForCommit ~withCompletionHandler self = msg_send ~self ~cmd:(selector "finishedSubTest:forTest:waitForCommit:withCompletionHandler:") ~typ:(id @-> id @-> bool @-> ptr void @-> returning (void)) x forTest waitForCommit withCompletionHandler
let finishedTest x self = msg_send ~self ~cmd:(selector "finishedTest:") ~typ:(id @-> returning (void)) x
let finishedTest1 x ~extraResults self = msg_send ~self ~cmd:(selector "finishedTest:extraResults:") ~typ:(id @-> id @-> returning (void)) x extraResults
let finishedTest2 x ~extraResults ~waitForNotification self = msg_send ~self ~cmd:(selector "finishedTest:extraResults:waitForNotification:") ~typ:(id @-> id @-> id @-> returning (void)) x extraResults waitForNotification
let finishedTest3 x ~extraResults ~withTeardownBlock self = msg_send ~self ~cmd:(selector "finishedTest:extraResults:withTeardownBlock:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x extraResults withTeardownBlock
let finishedTest4 x ~waitForCommit ~extraResults self = msg_send ~self ~cmd:(selector "finishedTest:waitForCommit:extraResults:") ~typ:(id @-> bool @-> id @-> returning (void)) x waitForCommit extraResults
let finishedTest5 x ~extraResults ~waitForNotification ~withTeardownBlock self = msg_send ~self ~cmd:(selector "finishedTest:extraResults:waitForNotification:withTeardownBlock:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x extraResults waitForNotification withTeardownBlock
let finishedTest6 x ~waitForCommit ~extraResults ~withTeardownBlock self = msg_send ~self ~cmd:(selector "finishedTest:waitForCommit:extraResults:withTeardownBlock:") ~typ:(id @-> bool @-> id @-> ptr void @-> returning (void)) x waitForCommit extraResults withTeardownBlock
let frontWindow self = msg_send ~self ~cmd:(selector "frontWindow") ~typ:(returning (id))
let gestureEventMask self = msg_send ~self ~cmd:(selector "gestureEventMask") ~typ:(returning (ullong))
let getValue x ~forSafeApertureCompatibilityDefaultsKey self = msg_send ~self ~cmd:(selector "getValue:forSafeApertureCompatibilityDefaultsKey:") ~typ:(ptr (bool) @-> id @-> returning (bool)) x forSafeApertureCompatibilityDefaultsKey
let getValue' x ~forSafeApertureCompatibilityURLResourceKey self = msg_send ~self ~cmd:(selector "getValue:forSafeApertureCompatibilityURLResourceKey:") ~typ:(ptr (bool) @-> id @-> returning (bool)) x forSafeApertureCompatibilityURLResourceKey
let handleOpenScriptCommand x self = msg_send ~self ~cmd:(selector "handleOpenScriptCommand:") ~typ:(id @-> returning (id)) x
let handlePrintScriptCommand x self = msg_send ~self ~cmd:(selector "handlePrintScriptCommand:") ~typ:(id @-> returning (void)) x
let handleQuitScriptCommand x self = msg_send ~self ~cmd:(selector "handleQuitScriptCommand:") ~typ:(id @-> returning (void)) x
let helpMenu self = msg_send ~self ~cmd:(selector "helpMenu") ~typ:(returning (id))
let hide x self = msg_send ~self ~cmd:(selector "hide:") ~typ:(id @-> returning (void)) x
let hideOtherApplications x self = msg_send ~self ~cmd:(selector "hideOtherApplications:") ~typ:(id @-> returning (void)) x
let importFromDevice x self = msg_send ~self ~cmd:(selector "importFromDevice:") ~typ:(id @-> returning (void)) x
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let insertValue x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "insertValue:inPropertyWithKey:") ~typ:(id @-> id @-> returning (void)) x inPropertyWithKey
let insertValue' x ~atIndex ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "insertValue:atIndex:inPropertyWithKey:") ~typ:(id @-> ullong @-> id @-> returning (void)) x atIndex inPropertyWithKey
let installCACommitCompletionBlock x self = msg_send ~self ~cmd:(selector "installCACommitCompletionBlock:") ~typ:(ptr void @-> returning (void)) x
let isAccessibilityEventProcessedNotificationEnabled self = msg_send ~self ~cmd:(selector "isAccessibilityEventProcessedNotificationEnabled") ~typ:(returning (bool))
let isAccessibilityEventProcessedNotificationSupported self = msg_send ~self ~cmd:(selector "isAccessibilityEventProcessedNotificationSupported") ~typ:(returning (bool))
let isAccessibilityMainThreadIdleNotificationEnabled self = msg_send ~self ~cmd:(selector "isAccessibilityMainThreadIdleNotificationEnabled") ~typ:(returning (bool))
let isAccessibilityMainThreadIdleNotificationSupported self = msg_send ~self ~cmd:(selector "isAccessibilityMainThreadIdleNotificationSupported") ~typ:(returning (bool))
let isAccessibilityMovingFromTable self = msg_send ~self ~cmd:(selector "isAccessibilityMovingFromTable") ~typ:(returning (bool))
let isActive self = msg_send ~self ~cmd:(selector "isActive") ~typ:(returning (bool))
let isAutomaticCustomizeTouchBarMenuItemEnabled self = msg_send ~self ~cmd:(selector "isAutomaticCustomizeTouchBarMenuItemEnabled") ~typ:(returning (bool))
let isDefaultHelpBookSearchEnabled self = msg_send ~self ~cmd:(selector "isDefaultHelpBookSearchEnabled") ~typ:(returning (bool))
let isFullKeyboardAccessEnabled self = msg_send ~self ~cmd:(selector "isFullKeyboardAccessEnabled") ~typ:(returning (bool))
let isHidden self = msg_send ~self ~cmd:(selector "isHidden") ~typ:(returning (bool))
let isLaunchedForTesting self = msg_send ~self ~cmd:(selector "isLaunchedForTesting") ~typ:(returning (bool))
let isProtectedDataAvailable self = msg_send ~self ~cmd:(selector "isProtectedDataAvailable") ~typ:(returning (bool))
let isRegisteredForRemoteNotifications self = msg_send ~self ~cmd:(selector "isRegisteredForRemoteNotifications") ~typ:(returning (bool))
let isRunning self = msg_send ~self ~cmd:(selector "isRunning") ~typ:(returning (bool))
let isRunningQuitTest self = msg_send ~self ~cmd:(selector "isRunningQuitTest") ~typ:(returning (bool))
let isRunningTest self = msg_send ~self ~cmd:(selector "isRunningTest") ~typ:(returning (bool))
let isRunningTest' x self = msg_send ~self ~cmd:(selector "isRunningTest:") ~typ:(id @-> returning (bool)) x
let isSpeaking self = msg_send ~self ~cmd:(selector "isSpeaking") ~typ:(returning (bool))
let keyWindow self = msg_send ~self ~cmd:(selector "keyWindow") ~typ:(returning (id))
let mainMenu self = msg_send ~self ~cmd:(selector "mainMenu") ~typ:(returning (id))
let mainWindow self = msg_send ~self ~cmd:(selector "mainWindow") ~typ:(returning (id))
let makeWindowsPerform x ~inOrder self = msg_send ~self ~cmd:(selector "makeWindowsPerform:inOrder:") ~typ:(_SEL @-> bool @-> returning (id)) x inOrder
let markAppLaunchComplete self = msg_send ~self ~cmd:(selector "markAppLaunchComplete") ~typ:(returning (void))
let memoryStatus self = msg_send ~self ~cmd:(selector "memoryStatus") ~typ:(returning (llong))
let menu self = msg_send ~self ~cmd:(selector "menu") ~typ:(returning (id))
let miniaturizeAll x self = msg_send ~self ~cmd:(selector "miniaturizeAll:") ~typ:(id @-> returning (void)) x
let modalWindow self = msg_send ~self ~cmd:(selector "modalWindow") ~typ:(returning (id))
let modeAndOptions x ~forPresentationOptions ~usingForFullScreen self = msg_send ~self ~cmd:(selector "modeAndOptions:forPresentationOptions:usingForFullScreen:") ~typ:(ptr (uint) @-> ullong @-> bool @-> returning (uint)) x forPresentationOptions usingForFullScreen
let newScriptingObjectOfClass x ~forValueForKey ~withContentsValue ~properties self = msg_send ~self ~cmd:(selector "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:") ~typ:(_Class @-> id @-> id @-> id @-> returning (id)) x forValueForKey withContentsValue properties
let nextEventMatchingMask x ~untilDate ~inMode ~dequeue self = msg_send ~self ~cmd:(selector "nextEventMatchingMask:untilDate:inMode:dequeue:") ~typ:(ullong @-> id @-> id @-> bool @-> returning (id)) x untilDate inMode dequeue
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let occlusionState self = msg_send ~self ~cmd:(selector "occlusionState") ~typ:(returning (ullong))
let onFirstEvent self = msg_send ~self ~cmd:(selector "onFirstEvent") ~typ:(returning (void))
let openFile x ~ok self = msg_send ~self ~cmd:(selector "openFile:ok:") ~typ:(id @-> ptr (llong) @-> returning (llong)) x ok
let openTempFile x ~ok self = msg_send ~self ~cmd:(selector "openTempFile:ok:") ~typ:(id @-> ptr (llong) @-> returning (llong)) x ok
let orderFrontCharacterPalette x self = msg_send ~self ~cmd:(selector "orderFrontCharacterPalette:") ~typ:(id @-> returning (void)) x
let orderFrontColorPanel x self = msg_send ~self ~cmd:(selector "orderFrontColorPanel:") ~typ:(id @-> returning (void)) x
let orderFrontFontPanel x self = msg_send ~self ~cmd:(selector "orderFrontFontPanel:") ~typ:(id @-> returning (void)) x
let orderFrontPreferencesPanel x self = msg_send ~self ~cmd:(selector "orderFrontPreferencesPanel:") ~typ:(id @-> returning (void)) x
let orderFrontStandardAboutPanel x self = msg_send ~self ~cmd:(selector "orderFrontStandardAboutPanel:") ~typ:(id @-> returning (void)) x
let orderFrontStandardAboutPanelWithOptions x self = msg_send ~self ~cmd:(selector "orderFrontStandardAboutPanelWithOptions:") ~typ:(id @-> returning (void)) x
let orderedDocuments self = msg_send ~self ~cmd:(selector "orderedDocuments") ~typ:(returning (id))
let orderedWindows self = msg_send ~self ~cmd:(selector "orderedWindows") ~typ:(returning (id))
let performActivateDeactivateTestUsingTestName x ~completionHandler self = msg_send ~self ~cmd:(selector "performActivateDeactivateTestUsingTestName:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let performResizeTestOnWindow x ~preTestHandler ~postTestHandler self = msg_send ~self ~cmd:(selector "performResizeTestOnWindow:preTestHandler:postTestHandler:") ~typ:(id @-> ptr void @-> ptr void @-> returning (void)) x preTestHandler postTestHandler
let performResizeTestOnWindow' x ~usingTestName ~completionHandler self = msg_send ~self ~cmd:(selector "performResizeTestOnWindow:usingTestName:completionHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x usingTestName completionHandler
let performScrollTestOnScrollView x ~usingTestName ~completionHandler self = msg_send ~self ~cmd:(selector "performScrollTestOnScrollView:usingTestName:completionHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x usingTestName completionHandler
let postEvent x ~atStart self = msg_send ~self ~cmd:(selector "postEvent:atStart:") ~typ:(id @-> bool @-> returning (void)) x atStart
let presentError x self = msg_send ~self ~cmd:(selector "presentError:") ~typ:(id @-> returning (bool)) x
let presentError' x ~modalForWindow ~delegate ~didPresentSelector ~contextInfo self = msg_send ~self ~cmd:(selector "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:") ~typ:(id @-> id @-> id @-> _SEL @-> ptr (void) @-> returning (void)) x modalForWindow delegate didPresentSelector contextInfo
let presentationOptions self = msg_send ~self ~cmd:(selector "presentationOptions") ~typ:(returning (ullong))
let preventWindowOrdering self = msg_send ~self ~cmd:(selector "preventWindowOrdering") ~typ:(returning (void))
let pushRegistrationDidFailToRegister x self = msg_send ~self ~cmd:(selector "pushRegistrationDidFailToRegister:") ~typ:(id @-> returning (void)) x
let pushRegistrationDidReceiveRemotePush x self = msg_send ~self ~cmd:(selector "pushRegistrationDidReceiveRemotePush:") ~typ:(id @-> returning (void)) x
let pushRegistrationDidRegisterWithDeviceToken x self = msg_send ~self ~cmd:(selector "pushRegistrationDidRegisterWithDeviceToken:") ~typ:(id @-> returning (void)) x
let quickLookPreviewItems x self = msg_send ~self ~cmd:(selector "quickLookPreviewItems:") ~typ:(id @-> returning (void)) x
let quickLookPreviewItemsAtWindowLocation x self = msg_send ~self ~cmd:(selector "quickLookPreviewItemsAtWindowLocation:") ~typ:(CGPoint.t @-> returning (void)) x
let registerForRemoteNotificationTypes x self = msg_send ~self ~cmd:(selector "registerForRemoteNotificationTypes:") ~typ:(ullong @-> returning (void)) x
let registerForRemoteNotifications self = msg_send ~self ~cmd:(selector "registerForRemoteNotifications") ~typ:(returning (void))
let registerServiceProvider x ~withName self = msg_send ~self ~cmd:(selector "registerServiceProvider:withName:") ~typ:(id @-> id @-> returning (void)) x withName
let registerServicesMenuSendTypes x ~returnTypes self = msg_send ~self ~cmd:(selector "registerServicesMenuSendTypes:returnTypes:") ~typ:(id @-> id @-> returning (void)) x returnTypes
let registerUserInterfaceItemSearchHandler x self = msg_send ~self ~cmd:(selector "registerUserInterfaceItemSearchHandler:") ~typ:(id @-> returning (void)) x
let removeIdleMonitor x self = msg_send ~self ~cmd:(selector "removeIdleMonitor:") ~typ:(id @-> returning (void)) x
let removeMemoryPressureMonitor x self = msg_send ~self ~cmd:(selector "removeMemoryPressureMonitor:") ~typ:(id @-> returning (void)) x
let removeValueAtIndex x ~fromPropertyWithKey self = msg_send ~self ~cmd:(selector "removeValueAtIndex:fromPropertyWithKey:") ~typ:(ullong @-> id @-> returning (void)) x fromPropertyWithKey
let removeWindowsItem x self = msg_send ~self ~cmd:(selector "removeWindowsItem:") ~typ:(id @-> returning (void)) x
let replaceValueAtIndex x ~inPropertyWithKey ~withValue self = msg_send ~self ~cmd:(selector "replaceValueAtIndex:inPropertyWithKey:withValue:") ~typ:(ullong @-> id @-> id @-> returning (void)) x inPropertyWithKey withValue
let replyToApplicationShouldTerminate x self = msg_send ~self ~cmd:(selector "replyToApplicationShouldTerminate:") ~typ:(bool @-> returning (void)) x
let replyToOpenOrPrint x self = msg_send ~self ~cmd:(selector "replyToOpenOrPrint:") ~typ:(ullong @-> returning (void)) x
let reportException x self = msg_send ~self ~cmd:(selector "reportException:") ~typ:(id @-> returning (void)) x
let requestUserAttention x self = msg_send ~self ~cmd:(selector "requestUserAttention:") ~typ:(ullong @-> returning (llong)) x
let resetAutomaticCustomizeTouchBarMenuItemEnabled self = msg_send ~self ~cmd:(selector "resetAutomaticCustomizeTouchBarMenuItemEnabled") ~typ:(returning (void))
let restoreStateWithCoder x self = msg_send ~self ~cmd:(selector "restoreStateWithCoder:") ~typ:(id @-> returning (void)) x
let restoreWindowWithIdentifier x ~state ~completionHandler self = msg_send ~self ~cmd:(selector "restoreWindowWithIdentifier:state:completionHandler:") ~typ:(id @-> id @-> ptr void @-> returning (bool)) x state completionHandler
let rightMouseDown x self = msg_send ~self ~cmd:(selector "rightMouseDown:") ~typ:(id @-> returning (void)) x
let run self = msg_send ~self ~cmd:(selector "run") ~typ:(returning (void))
let runModalForCarbonWindow x self = msg_send ~self ~cmd:(selector "runModalForCarbonWindow:") ~typ:(id @-> returning (llong)) x
let runModalForWindow x self = msg_send ~self ~cmd:(selector "runModalForWindow:") ~typ:(id @-> returning (llong)) x
let runModalForWindow' x ~relativeToWindow self = msg_send ~self ~cmd:(selector "runModalForWindow:relativeToWindow:") ~typ:(id @-> id @-> returning (llong)) x relativeToWindow
let runPageLayout x self = msg_send ~self ~cmd:(selector "runPageLayout:") ~typ:(id @-> returning (void)) x
let runTest x ~options self = msg_send ~self ~cmd:(selector "runTest:options:") ~typ:(id @-> id @-> returning (bool)) x options
let searchString x ~inUserInterfaceItemString ~searchRange ~foundRange self = msg_send ~self ~cmd:(selector "searchString:inUserInterfaceItemString:searchRange:foundRange:") ~typ:(id @-> id @-> NSRange.t @-> ptr (NSRange.t) @-> returning (bool)) x inUserInterfaceItemString searchRange foundRange
let sendAction x ~to_ ~from self = msg_send ~self ~cmd:(selector "sendAction:to:from:") ~typ:(_SEL @-> id @-> id @-> returning (bool)) x to_ from
let sendEvent x self = msg_send ~self ~cmd:(selector "sendEvent:") ~typ:(id @-> returning (void)) x
let servicesMenu self = msg_send ~self ~cmd:(selector "servicesMenu") ~typ:(returning (id))
let servicesProvider self = msg_send ~self ~cmd:(selector "servicesProvider") ~typ:(returning (id))
let setAccessibilityEventProcessedNotificationEnabled x self = msg_send ~self ~cmd:(selector "setAccessibilityEventProcessedNotificationEnabled:") ~typ:(bool @-> returning (void)) x
let setAccessibilityMainThreadIdleNotificationEnabled x self = msg_send ~self ~cmd:(selector "setAccessibilityMainThreadIdleNotificationEnabled:") ~typ:(bool @-> returning (void)) x
let setAccessibilityMovingFromTable x self = msg_send ~self ~cmd:(selector "setAccessibilityMovingFromTable:") ~typ:(bool @-> returning (void)) x
let setActivationPolicy x self = msg_send ~self ~cmd:(selector "setActivationPolicy:") ~typ:(llong @-> returning (bool)) x
let setAppearance x self = msg_send ~self ~cmd:(selector "setAppearance:") ~typ:(id @-> returning (void)) x
let setAppleMenu x self = msg_send ~self ~cmd:(selector "setAppleMenu:") ~typ:(id @-> returning (void)) x
let setApplicationIconImage x self = msg_send ~self ~cmd:(selector "setApplicationIconImage:") ~typ:(id @-> returning (void)) x
let setAutomaticCustomizeTouchBarMenuItemEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticCustomizeTouchBarMenuItemEnabled:") ~typ:(bool @-> returning (void)) x
let setCanEnterFullScreenMode x self = msg_send ~self ~cmd:(selector "setCanEnterFullScreenMode:") ~typ:(bool @-> returning (void)) x
let setDefaultHelpBookSearchEnabled x self = msg_send ~self ~cmd:(selector "setDefaultHelpBookSearchEnabled:") ~typ:(bool @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDockMenu x self = msg_send ~self ~cmd:(selector "setDockMenu:") ~typ:(id @-> returning (void)) x
let setGestureEventMask x self = msg_send ~self ~cmd:(selector "setGestureEventMask:") ~typ:(ullong @-> returning (void)) x
let setHelpMenu x self = msg_send ~self ~cmd:(selector "setHelpMenu:") ~typ:(id @-> returning (void)) x
let setIsActive x self = msg_send ~self ~cmd:(selector "setIsActive:") ~typ:(bool @-> returning (void)) x
let setMainMenu x self = msg_send ~self ~cmd:(selector "setMainMenu:") ~typ:(id @-> returning (void)) x
let setMenu x self = msg_send ~self ~cmd:(selector "setMenu:") ~typ:(id @-> returning (void)) x
let setPresentationOptions x self = msg_send ~self ~cmd:(selector "setPresentationOptions:") ~typ:(ullong @-> returning (void)) x
let setServicesMenu x self = msg_send ~self ~cmd:(selector "setServicesMenu:") ~typ:(id @-> returning (void)) x
let setServicesProvider x self = msg_send ~self ~cmd:(selector "setServicesProvider:") ~typ:(id @-> returning (void)) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let setValue' x ~forSafeApertureCompatibilityEnvironmentVariable self = msg_send ~self ~cmd:(selector "setValue:forSafeApertureCompatibilityEnvironmentVariable:") ~typ:(id @-> id @-> returning (void)) x forSafeApertureCompatibilityEnvironmentVariable
let setWindowsMenu x self = msg_send ~self ~cmd:(selector "setWindowsMenu:") ~typ:(id @-> returning (void)) x
let setWindowsNeedUpdate x self = msg_send ~self ~cmd:(selector "setWindowsNeedUpdate:") ~typ:(bool @-> returning (void)) x
let shouldBeTreatedAsInkEvent x self = msg_send ~self ~cmd:(selector "shouldBeTreatedAsInkEvent:") ~typ:(id @-> returning (bool)) x
let shouldRestoreStateOnNextLaunch self = msg_send ~self ~cmd:(selector "shouldRestoreStateOnNextLaunch") ~typ:(returning (bool))
let showGuessPanel x self = msg_send ~self ~cmd:(selector "showGuessPanel:") ~typ:(id @-> returning (void)) x
let showHelp x self = msg_send ~self ~cmd:(selector "showHelp:") ~typ:(id @-> returning (void)) x
let speakString x self = msg_send ~self ~cmd:(selector "speakString:") ~typ:(id @-> returning (void)) x
let speechSynthesizer x ~didFinishSpeaking self = msg_send ~self ~cmd:(selector "speechSynthesizer:didFinishSpeaking:") ~typ:(id @-> bool @-> returning (void)) x didFinishSpeaking
let startDictation x self = msg_send ~self ~cmd:(selector "startDictation:") ~typ:(id @-> returning (void)) x
let startedSubTest x ~forTest self = msg_send ~self ~cmd:(selector "startedSubTest:forTest:") ~typ:(id @-> id @-> returning (void)) x forTest
let startedSubTest' x ~forTest ~withMetrics self = msg_send ~self ~cmd:(selector "startedSubTest:forTest:withMetrics:") ~typ:(id @-> id @-> id @-> returning (void)) x forTest withMetrics
let startedTest x self = msg_send ~self ~cmd:(selector "startedTest:") ~typ:(id @-> returning (void)) x
let stop x self = msg_send ~self ~cmd:(selector "stop:") ~typ:(id @-> returning (void)) x
let stopDictation x self = msg_send ~self ~cmd:(selector "stopDictation:") ~typ:(id @-> returning (void)) x
let stopModal self = msg_send ~self ~cmd:(selector "stopModal") ~typ:(returning (void))
let stopModalWithCode x self = msg_send ~self ~cmd:(selector "stopModalWithCode:") ~typ:(llong @-> returning (void)) x
let stopSpeaking x self = msg_send ~self ~cmd:(selector "stopSpeaking:") ~typ:(id @-> returning (void)) x
let supplementalTargetForAction x ~sender self = msg_send ~self ~cmd:(selector "supplementalTargetForAction:sender:") ~typ:(_SEL @-> id @-> returning (id)) x sender
let targetForAction x self = msg_send ~self ~cmd:(selector "targetForAction:") ~typ:(_SEL @-> returning (id)) x
let targetForAction' x ~to_ ~from self = msg_send ~self ~cmd:(selector "targetForAction:to:from:") ~typ:(_SEL @-> id @-> id @-> returning (id)) x to_ from
let terminate x self = msg_send ~self ~cmd:(selector "terminate:") ~typ:(id @-> returning (void)) x
let toggleTouchBarControlStripCustomizationPalette x self = msg_send ~self ~cmd:(selector "toggleTouchBarControlStripCustomizationPalette:") ~typ:(id @-> returning (void)) x
let toggleTouchBarCustomizationPalette x self = msg_send ~self ~cmd:(selector "toggleTouchBarCustomizationPalette:") ~typ:(id @-> returning (void)) x
let touchBar self = msg_send ~self ~cmd:(selector "touchBar") ~typ:(returning (id))
let tryToPerform x ~with_ self = msg_send ~self ~cmd:(selector "tryToPerform:with:") ~typ:(_SEL @-> id @-> returning (bool)) x with_
let unhide x self = msg_send ~self ~cmd:(selector "unhide:") ~typ:(id @-> returning (void)) x
let unhideAllApplications x self = msg_send ~self ~cmd:(selector "unhideAllApplications:") ~typ:(id @-> returning (void)) x
let unhideWithoutActivation self = msg_send ~self ~cmd:(selector "unhideWithoutActivation") ~typ:(returning (void))
let unregisterForRemoteNotifications self = msg_send ~self ~cmd:(selector "unregisterForRemoteNotifications") ~typ:(returning (void))
let unregisterServiceProviderNamed x self = msg_send ~self ~cmd:(selector "unregisterServiceProviderNamed:") ~typ:(id @-> returning (void)) x
let unregisterUserInterfaceItemSearchHandler x self = msg_send ~self ~cmd:(selector "unregisterUserInterfaceItemSearchHandler:") ~typ:(id @-> returning (void)) x
let updateWindows self = msg_send ~self ~cmd:(selector "updateWindows") ~typ:(returning (void))
let updateWindowsItem x self = msg_send ~self ~cmd:(selector "updateWindowsItem:") ~typ:(id @-> returning (void)) x
let userInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "userInterfaceLayoutDirection") ~typ:(returning (llong))
let validRequestorForSendType x ~returnType self = msg_send ~self ~cmd:(selector "validRequestorForSendType:returnType:") ~typ:(id @-> id @-> returning (id)) x returnType
let validateMenuItem x self = msg_send ~self ~cmd:(selector "validateMenuItem:") ~typ:(id @-> returning (bool)) x
let validateUserInterfaceItem x self = msg_send ~self ~cmd:(selector "validateUserInterfaceItem:") ~typ:(id @-> returning (bool)) x
let valueAtIndex x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueAtIndex:inPropertyWithKey:") ~typ:(ullong @-> id @-> returning (id)) x inPropertyWithKey
let valueForKey x self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning (id)) x
let valueForSafeApertureCompatibilityEnvironmentVariable x self = msg_send ~self ~cmd:(selector "valueForSafeApertureCompatibilityEnvironmentVariable:") ~typ:(id @-> returning (id)) x
let valueInOrderedWindowsWithUniqueID x self = msg_send ~self ~cmd:(selector "valueInOrderedWindowsWithUniqueID:") ~typ:(llong @-> returning (id)) x
let valueWithName x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueWithName:inPropertyWithKey:") ~typ:(id @-> id @-> returning (id)) x inPropertyWithKey
let valueWithUniqueID x ~inPropertyWithKey self = msg_send ~self ~cmd:(selector "valueWithUniqueID:inPropertyWithKey:") ~typ:(id @-> id @-> returning (id)) x inPropertyWithKey
let willPresentError x self = msg_send ~self ~cmd:(selector "willPresentError:") ~typ:(id @-> returning (id)) x
let windowWithWindowNumber x self = msg_send ~self ~cmd:(selector "windowWithWindowNumber:") ~typ:(llong @-> returning (id)) x
let windows self = msg_send ~self ~cmd:(selector "windows") ~typ:(returning (id))
let windowsMenu self = msg_send ~self ~cmd:(selector "windowsMenu") ~typ:(returning (id))
let zoomAll x self = msg_send ~self ~cmd:(selector "zoomAll:") ~typ:(id @-> returning (void)) x