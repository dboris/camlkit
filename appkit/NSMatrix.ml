(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "NSMatrix"

module C = struct
  let accessibilityIsSingleCelled self = msg_send ~self ~cmd:(selector "accessibilityIsSingleCelled") ~typ:(returning (bool))
  let initialize self = msg_send ~self ~cmd:(selector "initialize") ~typ:(returning (void))
  let isCompatibleWithResponsiveScrolling self = msg_send ~self ~cmd:(selector "isCompatibleWithResponsiveScrolling") ~typ:(returning (bool))
end

let acceptsFirstMouse x self = msg_send ~self ~cmd:(selector "acceptsFirstMouse:") ~typ:(id @-> returning (bool)) x
let acceptsFirstResponder self = msg_send ~self ~cmd:(selector "acceptsFirstResponder") ~typ:(returning (bool))
let accessibilityArrayAttributeCount x self = msg_send ~self ~cmd:(selector "accessibilityArrayAttributeCount:") ~typ:(id @-> returning (ullong)) x
let accessibilityArrayAttributeValues x ~index ~maxCount self = msg_send ~self ~cmd:(selector "accessibilityArrayAttributeValues:index:maxCount:") ~typ:(id @-> ullong @-> ullong @-> returning (id)) x (ULLong.of_int index) (ULLong.of_int maxCount)
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning (id))
let accessibilityChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenAttribute") ~typ:(returning (id))
let accessibilityCurrentEditorForCell x self = msg_send ~self ~cmd:(selector "accessibilityCurrentEditorForCell:") ~typ:(id @-> returning (id)) x
let accessibilityFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityFocusedUIElement") ~typ:(returning (id))
let accessibilityHelpStringForChild x self = msg_send ~self ~cmd:(selector "accessibilityHelpStringForChild:") ~typ:(id @-> returning (id)) x
let accessibilityHitTest x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let accessibilityIndexOfChild x self = msg_send ~self ~cmd:(selector "accessibilityIndexOfChild:") ~typ:(id @-> returning (ullong)) x
let accessibilityIsChildFocusable x self = msg_send ~self ~cmd:(selector "accessibilityIsChildFocusable:") ~typ:(id @-> returning (bool)) x
let accessibilityIsFocusedAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFocusedAttributeSettable") ~typ:(returning (bool))
let accessibilityIsOrientationAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsOrientationAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSelectedChildrenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedChildrenAttributeSettable") ~typ:(returning (bool))
let accessibilityIsValueAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsValueAttributeSettable") ~typ:(returning (bool))
let accessibilityIsVisibleChildrenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsVisibleChildrenAttributeSettable") ~typ:(returning (bool))
let accessibilityOrientationAttribute self = msg_send ~self ~cmd:(selector "accessibilityOrientationAttribute") ~typ:(returning (id))
let accessibilityPositionOfChild x self = msg_send ~self ~cmd:(selector "accessibilityPositionOfChild:") ~typ:(id @-> returning (id)) x
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning (id))
let accessibilitySelectedChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedChildrenAttribute") ~typ:(returning (id))
let accessibilitySetFocus x ~forChild self = msg_send ~self ~cmd:(selector "accessibilitySetFocus:forChild:") ~typ:(id @-> id @-> returning (void)) x forChild
let accessibilitySetSelectedChildrenAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedChildrenAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySizeOfChild x self = msg_send ~self ~cmd:(selector "accessibilitySizeOfChild:") ~typ:(id @-> returning (id)) x
let accessibilityValueAttribute self = msg_send ~self ~cmd:(selector "accessibilityValueAttribute") ~typ:(returning (id))
let accessibilityVisibleChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityVisibleChildrenAttribute") ~typ:(returning (id))
let accessiblityChildCells self = msg_send ~self ~cmd:(selector "accessiblityChildCells") ~typ:(returning (id))
let addColumn self = msg_send ~self ~cmd:(selector "addColumn") ~typ:(returning (void))
let addColumnWithCells x self = msg_send ~self ~cmd:(selector "addColumnWithCells:") ~typ:(id @-> returning (void)) x
let addRow self = msg_send ~self ~cmd:(selector "addRow") ~typ:(returning (void))
let addRowWithCells x self = msg_send ~self ~cmd:(selector "addRowWithCells:") ~typ:(id @-> returning (void)) x
let allowEmptySel x self = msg_send ~self ~cmd:(selector "allowEmptySel:") ~typ:(bool @-> returning (id)) x
let allowsEmptySelection self = msg_send ~self ~cmd:(selector "allowsEmptySelection") ~typ:(returning (bool))
let altModifySelection x self = msg_send ~self ~cmd:(selector "altModifySelection:") ~typ:(id @-> returning (void)) x
let autorecalculatesCellSize self = msg_send ~self ~cmd:(selector "autorecalculatesCellSize") ~typ:(returning (bool))
let autosizesCells self = msg_send ~self ~cmd:(selector "autosizesCells") ~typ:(returning (bool))
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning (id))
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning (bool))
let becomeKeyWindow self = msg_send ~self ~cmd:(selector "becomeKeyWindow") ~typ:(returning (void))
let calcSize self = msg_send ~self ~cmd:(selector "calcSize") ~typ:(returning (void))
let cellAtRow x ~column self = msg_send ~self ~cmd:(selector "cellAtRow:column:") ~typ:(llong @-> llong @-> returning (id)) (LLong.of_int x) (LLong.of_int column)
let cellBackgroundColor self = msg_send ~self ~cmd:(selector "cellBackgroundColor") ~typ:(returning (id))
let cellClass self = msg_send ~self ~cmd:(selector "cellClass") ~typ:(returning (_Class))
let cellFrameAtRow x ~column self = msg_send_stret ~self ~cmd:(selector "cellFrameAtRow:column:") ~typ:(llong @-> llong @-> returning (CGRect.t)) ~return_type:CGRect.t (LLong.of_int x) (LLong.of_int column)
let cellSize self = msg_send_stret ~self ~cmd:(selector "cellSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let cellWithTag x self = msg_send ~self ~cmd:(selector "cellWithTag:") ~typ:(llong @-> returning (id)) (LLong.of_int x)
let cells self = msg_send ~self ~cmd:(selector "cells") ~typ:(returning (id))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let deselectAllCells self = msg_send ~self ~cmd:(selector "deselectAllCells") ~typ:(returning (void))
let deselectSelectedCell self = msg_send ~self ~cmd:(selector "deselectSelectedCell") ~typ:(returning (void))
let doubleAction self = msg_send ~self ~cmd:(selector "doubleAction") ~typ:(returning (_SEL))
let drawCell x self = msg_send ~self ~cmd:(selector "drawCell:") ~typ:(id @-> returning (void)) x
let drawCellAtRow x ~column self = msg_send ~self ~cmd:(selector "drawCellAtRow:column:") ~typ:(llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int column)
let drawCellInside x self = msg_send ~self ~cmd:(selector "drawCellInside:") ~typ:(id @-> returning (void)) x
let drawContextMenuHighlightForCellIndexes x self = msg_send ~self ~cmd:(selector "drawContextMenuHighlightForCellIndexes:") ~typ:(id @-> returning (void)) x
let drawFocusRingMask self = msg_send ~self ~cmd:(selector "drawFocusRingMask") ~typ:(returning (void))
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawsBackground self = msg_send ~self ~cmd:(selector "drawsBackground") ~typ:(returning (bool))
let drawsCellBackground self = msg_send ~self ~cmd:(selector "drawsCellBackground") ~typ:(returning (bool))
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let errorAction self = msg_send ~self ~cmd:(selector "errorAction") ~typ:(returning (_SEL))
let focusRingMaskBounds self = msg_send_stret ~self ~cmd:(selector "focusRingMaskBounds") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let font self = msg_send ~self ~cmd:(selector "font") ~typ:(returning (id))
let getNumberOfRows x ~columns self = msg_send ~self ~cmd:(selector "getNumberOfRows:columns:") ~typ:(ptr (llong) @-> ptr (llong) @-> returning (void)) x columns
let getRow x ~column ~forPoint self = msg_send ~self ~cmd:(selector "getRow:column:forPoint:") ~typ:(ptr (llong) @-> ptr (llong) @-> CGPoint.t @-> returning (bool)) x column forPoint
let getRow' x ~column ~ofCell self = msg_send ~self ~cmd:(selector "getRow:column:ofCell:") ~typ:(ptr (llong) @-> ptr (llong) @-> id @-> returning (bool)) x column ofCell
let helpRequested x self = msg_send ~self ~cmd:(selector "helpRequested:") ~typ:(id @-> returning (void)) x
let highlightCell x ~atRow ~column self = msg_send ~self ~cmd:(selector "highlightCell:atRow:column:") ~typ:(bool @-> llong @-> llong @-> returning (void)) x (LLong.of_int atRow) (LLong.of_int column)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning (id)) x
let initWithFrame1 x ~mode ~cellClass ~numberOfRows ~numberOfColumns self = msg_send ~self ~cmd:(selector "initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:") ~typ:(CGRect.t @-> ullong @-> _Class @-> llong @-> llong @-> returning (id)) x (ULLong.of_int mode) cellClass (LLong.of_int numberOfRows) (LLong.of_int numberOfColumns)
let initWithFrame2 x ~mode ~prototype ~numberOfRows ~numberOfColumns self = msg_send ~self ~cmd:(selector "initWithFrame:mode:prototype:numberOfRows:numberOfColumns:") ~typ:(CGRect.t @-> ullong @-> id @-> llong @-> llong @-> returning (id)) x (ULLong.of_int mode) prototype (LLong.of_int numberOfRows) (LLong.of_int numberOfColumns)
let insertColumn x self = msg_send ~self ~cmd:(selector "insertColumn:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let insertColumn' x ~withCells self = msg_send ~self ~cmd:(selector "insertColumn:withCells:") ~typ:(llong @-> id @-> returning (void)) (LLong.of_int x) withCells
let insertRow x self = msg_send ~self ~cmd:(selector "insertRow:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let insertRow' x ~withCells self = msg_send ~self ~cmd:(selector "insertRow:withCells:") ~typ:(llong @-> id @-> returning (void)) (LLong.of_int x) withCells
let intercellSpacing self = msg_send_stret ~self ~cmd:(selector "intercellSpacing") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let intrinsicContentSize self = msg_send_stret ~self ~cmd:(selector "intrinsicContentSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let invalidateIntrinsicContentSizeForCell x self = msg_send ~self ~cmd:(selector "invalidateIntrinsicContentSizeForCell:") ~typ:(id @-> returning (void)) x
let isAutoscroll self = msg_send ~self ~cmd:(selector "isAutoscroll") ~typ:(returning (bool))
let isFlipped self = msg_send ~self ~cmd:(selector "isFlipped") ~typ:(returning (bool))
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning (bool))
let isSelectionByRect self = msg_send ~self ~cmd:(selector "isSelectionByRect") ~typ:(returning (bool))
let keyCell self = msg_send ~self ~cmd:(selector "keyCell") ~typ:(returning (id))
let keyDown x self = msg_send ~self ~cmd:(selector "keyDown:") ~typ:(id @-> returning (void)) x
let keyUp x self = msg_send ~self ~cmd:(selector "keyUp:") ~typ:(id @-> returning (void)) x
let makeCellAtRow x ~column self = msg_send ~self ~cmd:(selector "makeCellAtRow:column:") ~typ:(llong @-> llong @-> returning (id)) (LLong.of_int x) (LLong.of_int column)
let menuForEvent x self = msg_send ~self ~cmd:(selector "menuForEvent:") ~typ:(id @-> returning (id)) x
let mode self = msg_send ~self ~cmd:(selector "mode") ~typ:(returning (ullong))
let mouseDown x self = msg_send ~self ~cmd:(selector "mouseDown:") ~typ:(id @-> returning (void)) x
let mouseDownFlags self = msg_send ~self ~cmd:(selector "mouseDownFlags") ~typ:(returning (llong))
let moveDown x self = msg_send ~self ~cmd:(selector "moveDown:") ~typ:(id @-> returning (void)) x
let moveLeft x self = msg_send ~self ~cmd:(selector "moveLeft:") ~typ:(id @-> returning (void)) x
let moveRight x self = msg_send ~self ~cmd:(selector "moveRight:") ~typ:(id @-> returning (void)) x
let moveUp x self = msg_send ~self ~cmd:(selector "moveUp:") ~typ:(id @-> returning (void)) x
let needsPanelToBecomeKey self = msg_send ~self ~cmd:(selector "needsPanelToBecomeKey") ~typ:(returning (bool))
let numberOfColumns self = msg_send ~self ~cmd:(selector "numberOfColumns") ~typ:(returning (llong))
let numberOfRows self = msg_send ~self ~cmd:(selector "numberOfRows") ~typ:(returning (llong))
let performClick x self = msg_send ~self ~cmd:(selector "performClick:") ~typ:(id @-> returning (void)) x
let performKeyEquivalent x self = msg_send ~self ~cmd:(selector "performKeyEquivalent:") ~typ:(id @-> returning (bool)) x
let prototype self = msg_send ~self ~cmd:(selector "prototype") ~typ:(returning (id))
let putCell x ~atRow ~column self = msg_send ~self ~cmd:(selector "putCell:atRow:column:") ~typ:(id @-> llong @-> llong @-> returning (void)) x (LLong.of_int atRow) (LLong.of_int column)
let refusesFirstResponder self = msg_send ~self ~cmd:(selector "refusesFirstResponder") ~typ:(returning (bool))
let removeColumn x self = msg_send ~self ~cmd:(selector "removeColumn:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let removeRow x self = msg_send ~self ~cmd:(selector "removeRow:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let renewRows x ~columns self = msg_send ~self ~cmd:(selector "renewRows:columns:") ~typ:(llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int columns)
let resetCursorRects self = msg_send ~self ~cmd:(selector "resetCursorRects") ~typ:(returning (void))
let resignFirstResponder self = msg_send ~self ~cmd:(selector "resignFirstResponder") ~typ:(returning (bool))
let resignKeyWindow self = msg_send ~self ~cmd:(selector "resignKeyWindow") ~typ:(returning (void))
let resizeWithOldSuperviewSize x self = msg_send ~self ~cmd:(selector "resizeWithOldSuperviewSize:") ~typ:(CGSize.t @-> returning (void)) x
let scrollCellToVisibleAtRow x ~column self = msg_send ~self ~cmd:(selector "scrollCellToVisibleAtRow:column:") ~typ:(llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int column)
let selectAll x self = msg_send ~self ~cmd:(selector "selectAll:") ~typ:(id @-> returning (void)) x
let selectCell x self = msg_send ~self ~cmd:(selector "selectCell:") ~typ:(id @-> returning (void)) x
let selectCellAtRow x ~column self = msg_send ~self ~cmd:(selector "selectCellAtRow:column:") ~typ:(llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int column)
let selectCellWithTag x self = msg_send ~self ~cmd:(selector "selectCellWithTag:") ~typ:(llong @-> returning (bool)) (LLong.of_int x)
let selectNextKeyView x self = msg_send ~self ~cmd:(selector "selectNextKeyView:") ~typ:(id @-> returning (void)) x
let selectPreviousKeyView x self = msg_send ~self ~cmd:(selector "selectPreviousKeyView:") ~typ:(id @-> returning (void)) x
let selectText x self = msg_send ~self ~cmd:(selector "selectText:") ~typ:(id @-> returning (void)) x
let selectTextAtRow x ~column self = msg_send ~self ~cmd:(selector "selectTextAtRow:column:") ~typ:(llong @-> llong @-> returning (id)) (LLong.of_int x) (LLong.of_int column)
let selectedCell self = msg_send ~self ~cmd:(selector "selectedCell") ~typ:(returning (id))
let selectedCells self = msg_send ~self ~cmd:(selector "selectedCells") ~typ:(returning (id))
let selectedColumn self = msg_send ~self ~cmd:(selector "selectedColumn") ~typ:(returning (llong))
let selectedRow self = msg_send ~self ~cmd:(selector "selectedRow") ~typ:(returning (llong))
let sendAction self = msg_send ~self ~cmd:(selector "sendAction") ~typ:(returning (bool))
let sendAction1 x ~to_ self = msg_send ~self ~cmd:(selector "sendAction:to:") ~typ:(_SEL @-> id @-> returning (bool)) x to_
let sendAction2 x ~to_ ~forAllCells self = msg_send ~self ~cmd:(selector "sendAction:to:forAllCells:") ~typ:(_SEL @-> id @-> bool @-> returning (void)) x to_ forAllCells
let sendDoubleAction self = msg_send ~self ~cmd:(selector "sendDoubleAction") ~typ:(returning (void))
let setAction x ~atRow ~column self = msg_send ~self ~cmd:(selector "setAction:atRow:column:") ~typ:(_SEL @-> llong @-> llong @-> returning (void)) x (LLong.of_int atRow) (LLong.of_int column)
let setAllowsEmptySelection x self = msg_send ~self ~cmd:(selector "setAllowsEmptySelection:") ~typ:(bool @-> returning (void)) x
let setAutorecalculatesCellSize x self = msg_send ~self ~cmd:(selector "setAutorecalculatesCellSize:") ~typ:(bool @-> returning (void)) x
let setAutoscroll x self = msg_send ~self ~cmd:(selector "setAutoscroll:") ~typ:(bool @-> returning (void)) x
let setAutosizesCells x self = msg_send ~self ~cmd:(selector "setAutosizesCells:") ~typ:(bool @-> returning (void)) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning (void)) x
let setCellBackgroundColor x self = msg_send ~self ~cmd:(selector "setCellBackgroundColor:") ~typ:(id @-> returning (void)) x
let setCellClass x self = msg_send ~self ~cmd:(selector "setCellClass:") ~typ:(_Class @-> returning (void)) x
let setCellSize x self = msg_send ~self ~cmd:(selector "setCellSize:") ~typ:(CGSize.t @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDoubleAction x self = msg_send ~self ~cmd:(selector "setDoubleAction:") ~typ:(_SEL @-> returning (void)) x
let setDrawsBackground x self = msg_send ~self ~cmd:(selector "setDrawsBackground:") ~typ:(bool @-> returning (void)) x
let setDrawsCellBackground x self = msg_send ~self ~cmd:(selector "setDrawsCellBackground:") ~typ:(bool @-> returning (void)) x
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning (void)) x
let setErrorAction x self = msg_send ~self ~cmd:(selector "setErrorAction:") ~typ:(_SEL @-> returning (void)) x
let setFont x self = msg_send ~self ~cmd:(selector "setFont:") ~typ:(id @-> returning (void)) x
let setFrameSize x self = msg_send ~self ~cmd:(selector "setFrameSize:") ~typ:(CGSize.t @-> returning (void)) x
let setIntercellSpacing x self = msg_send ~self ~cmd:(selector "setIntercellSpacing:") ~typ:(CGSize.t @-> returning (void)) x
let setKeyCell x self = msg_send ~self ~cmd:(selector "setKeyCell:") ~typ:(id @-> returning (void)) x
let setMode x self = msg_send ~self ~cmd:(selector "setMode:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setNeedsDisplayInRect x self = msg_send ~self ~cmd:(selector "setNeedsDisplayInRect:") ~typ:(CGRect.t @-> returning (void)) x
let setPrototype x self = msg_send ~self ~cmd:(selector "setPrototype:") ~typ:(id @-> returning (void)) x
let setRefusesFirstResponder x self = msg_send ~self ~cmd:(selector "setRefusesFirstResponder:") ~typ:(bool @-> returning (void)) x
let setScrollable x self = msg_send ~self ~cmd:(selector "setScrollable:") ~typ:(bool @-> returning (void)) x
let setSelectionByRect x self = msg_send ~self ~cmd:(selector "setSelectionByRect:") ~typ:(bool @-> returning (void)) x
let setSelectionFrom x ~to_ ~anchor ~highlight self = msg_send ~self ~cmd:(selector "setSelectionFrom:to:anchor:highlight:") ~typ:(llong @-> llong @-> llong @-> bool @-> returning (void)) (LLong.of_int x) (LLong.of_int to_) (LLong.of_int anchor) highlight
let setState x ~atRow ~column self = msg_send ~self ~cmd:(selector "setState:atRow:column:") ~typ:(llong @-> llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int atRow) (LLong.of_int column)
let setTabKeyTraversesCells x self = msg_send ~self ~cmd:(selector "setTabKeyTraversesCells:") ~typ:(bool @-> returning (void)) x
let setTag x ~atRow ~column self = msg_send ~self ~cmd:(selector "setTag:atRow:column:") ~typ:(llong @-> llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int atRow) (LLong.of_int column)
let setTag' x ~target ~action ~atRow ~column self = msg_send ~self ~cmd:(selector "setTag:target:action:atRow:column:") ~typ:(llong @-> id @-> _SEL @-> llong @-> llong @-> returning (void)) (LLong.of_int x) target action (LLong.of_int atRow) (LLong.of_int column)
let setTarget x ~atRow ~column self = msg_send ~self ~cmd:(selector "setTarget:atRow:column:") ~typ:(id @-> llong @-> llong @-> returning (void)) x (LLong.of_int atRow) (LLong.of_int column)
let setToolTip x ~forCell self = msg_send ~self ~cmd:(selector "setToolTip:forCell:") ~typ:(id @-> id @-> returning (void)) x forCell
let setValidateSize x self = msg_send ~self ~cmd:(selector "setValidateSize:") ~typ:(bool @-> returning (void)) x
let shiftModifySelection x self = msg_send ~self ~cmd:(selector "shiftModifySelection:") ~typ:(id @-> returning (void)) x
let sizeToCells self = msg_send ~self ~cmd:(selector "sizeToCells") ~typ:(returning (void))
let sizeToFit self = msg_send ~self ~cmd:(selector "sizeToFit") ~typ:(returning (void))
let sortUsingFunction x ~context self = msg_send ~self ~cmd:(selector "sortUsingFunction:context:") ~typ:(ptr (ptr void) @-> ptr (void) @-> returning (void)) x context
let sortUsingSelector x self = msg_send ~self ~cmd:(selector "sortUsingSelector:") ~typ:(_SEL @-> returning (void)) x
let startSpeaking x self = msg_send ~self ~cmd:(selector "startSpeaking:") ~typ:(id @-> returning (void)) x
let stopSpeaking x self = msg_send ~self ~cmd:(selector "stopSpeaking:") ~typ:(id @-> returning (void)) x
let tabKeyTraversesCells self = msg_send ~self ~cmd:(selector "tabKeyTraversesCells") ~typ:(returning (bool))
let textDidBeginEditing x self = msg_send ~self ~cmd:(selector "textDidBeginEditing:") ~typ:(id @-> returning (void)) x
let textDidChange x self = msg_send ~self ~cmd:(selector "textDidChange:") ~typ:(id @-> returning (void)) x
let textDidEndEditing x self = msg_send ~self ~cmd:(selector "textDidEndEditing:") ~typ:(id @-> returning (void)) x
let textShouldBeginEditing x self = msg_send ~self ~cmd:(selector "textShouldBeginEditing:") ~typ:(id @-> returning (bool)) x
let textShouldEndEditing x self = msg_send ~self ~cmd:(selector "textShouldEndEditing:") ~typ:(id @-> returning (bool)) x
let textView x ~doCommandBySelector self = msg_send ~self ~cmd:(selector "textView:doCommandBySelector:") ~typ:(id @-> _SEL @-> returning (bool)) x doCommandBySelector
let textView1 x ~shouldChangeTextInRange ~replacementString self = msg_send ~self ~cmd:(selector "textView:shouldChangeTextInRange:replacementString:") ~typ:(id @-> NSRange.t @-> id @-> returning (bool)) x shouldChangeTextInRange replacementString
let textView2 x ~completions ~forPartialWordRange ~indexOfSelectedItem self = msg_send ~self ~cmd:(selector "textView:completions:forPartialWordRange:indexOfSelectedItem:") ~typ:(id @-> id @-> NSRange.t @-> ptr (llong) @-> returning (id)) x completions forPartialWordRange indexOfSelectedItem
let toolTipForCell x self = msg_send ~self ~cmd:(selector "toolTipForCell:") ~typ:(id @-> returning (id)) x
let updateCell x self = msg_send ~self ~cmd:(selector "updateCell:") ~typ:(id @-> returning (void)) x
let updateCellInside x self = msg_send ~self ~cmd:(selector "updateCellInside:") ~typ:(id @-> returning (void)) x
let updateConstraints self = msg_send ~self ~cmd:(selector "updateConstraints") ~typ:(returning (void))
let updateTrackingAreas self = msg_send ~self ~cmd:(selector "updateTrackingAreas") ~typ:(returning (void))
let validateUserInterfaceItem x self = msg_send ~self ~cmd:(selector "validateUserInterfaceItem:") ~typ:(id @-> returning (bool)) x
let view x ~stringForToolTip ~point ~userData self = msg_send ~self ~cmd:(selector "view:stringForToolTip:point:userData:") ~typ:(id @-> llong @-> CGPoint.t @-> ptr (void) @-> returning (id)) x (LLong.of_int stringForToolTip) point userData
let viewDidEndLiveResize self = msg_send ~self ~cmd:(selector "viewDidEndLiveResize") ~typ:(returning (void))