(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "NSColor"

module Class = struct
  let alternateSelectedControlColor self = msg_send ~self ~cmd:(selector "alternateSelectedControlColor") ~typ:(returning (id))
  let alternateSelectedControlTextColor self = msg_send ~self ~cmd:(selector "alternateSelectedControlTextColor") ~typ:(returning (id))
  let alternateSelectionBlueColor self = msg_send ~self ~cmd:(selector "alternateSelectionBlueColor") ~typ:(returning (id))
  let alternateSelectionGraphiteColor self = msg_send ~self ~cmd:(selector "alternateSelectionGraphiteColor") ~typ:(returning (id))
  let alternatingContentBackgroundColor self = msg_send ~self ~cmd:(selector "alternatingContentBackgroundColor") ~typ:(returning (id))
  let alternatingContentBackgroundColors self = msg_send ~self ~cmd:(selector "alternatingContentBackgroundColors") ~typ:(returning (id))
  let blackColor self = msg_send ~self ~cmd:(selector "blackColor") ~typ:(returning (id))
  let blackDeviceColor self = msg_send ~self ~cmd:(selector "blackDeviceColor") ~typ:(returning (id))
  let blueColor self = msg_send ~self ~cmd:(selector "blueColor") ~typ:(returning (id))
  let blueControlTintColor self = msg_send ~self ~cmd:(selector "blueControlTintColor") ~typ:(returning (id))
  let brownColor self = msg_send ~self ~cmd:(selector "brownColor") ~typ:(returning (id))
  let classForKeyedUnarchiver self = msg_send ~self ~cmd:(selector "classForKeyedUnarchiver") ~typ:(returning (_Class))
  let clearColor self = msg_send ~self ~cmd:(selector "clearColor") ~typ:(returning (id))
  let clearControlTintColor self = msg_send ~self ~cmd:(selector "clearControlTintColor") ~typ:(returning (id))
  let colorForControlTint x self = msg_send ~self ~cmd:(selector "colorForControlTint:") ~typ:(ullong @-> returning (id)) x
  let colorFromPasteboard x self = msg_send ~self ~cmd:(selector "colorFromPasteboard:") ~typ:(id @-> returning (id)) x
  let colorNamed x self = msg_send ~self ~cmd:(selector "colorNamed:") ~typ:(id @-> returning (id)) x
  let colorNamed' x ~bundle self = msg_send ~self ~cmd:(selector "colorNamed:bundle:") ~typ:(id @-> id @-> returning (id)) x bundle
  let colorWithCIColor x self = msg_send ~self ~cmd:(selector "colorWithCIColor:") ~typ:(id @-> returning (id)) x
  let colorWithCalibratedHue x ~saturation ~brightness ~alpha self = msg_send ~self ~cmd:(selector "colorWithCalibratedHue:saturation:brightness:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x saturation brightness alpha
  let colorWithCalibratedRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "colorWithCalibratedRed:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
  let colorWithCalibratedWhite x ~alpha self = msg_send ~self ~cmd:(selector "colorWithCalibratedWhite:alpha:") ~typ:(double @-> double @-> returning (id)) x alpha
  let colorWithCatalogName x ~colorName self = msg_send ~self ~cmd:(selector "colorWithCatalogName:colorName:") ~typ:(id @-> id @-> returning (id)) x colorName
  let colorWithColorSpace x ~components ~count self = msg_send ~self ~cmd:(selector "colorWithColorSpace:components:count:") ~typ:(id @-> ptr (double) @-> llong @-> returning (id)) x components count
  let colorWithColorSpace' x ~hue ~saturation ~brightness ~alpha self = msg_send ~self ~cmd:(selector "colorWithColorSpace:hue:saturation:brightness:alpha:") ~typ:(id @-> double @-> double @-> double @-> double @-> returning (id)) x hue saturation brightness alpha
  let colorWithDeviceCyan x ~magenta ~yellow ~black ~alpha self = msg_send ~self ~cmd:(selector "colorWithDeviceCyan:magenta:yellow:black:alpha:") ~typ:(double @-> double @-> double @-> double @-> double @-> returning (id)) x magenta yellow black alpha
  let colorWithDeviceHue x ~saturation ~brightness ~alpha self = msg_send ~self ~cmd:(selector "colorWithDeviceHue:saturation:brightness:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x saturation brightness alpha
  let colorWithDeviceRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "colorWithDeviceRed:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
  let colorWithDeviceWhite x ~alpha self = msg_send ~self ~cmd:(selector "colorWithDeviceWhite:alpha:") ~typ:(double @-> double @-> returning (id)) x alpha
  let colorWithDisplayP3Red x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "colorWithDisplayP3Red:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
  let colorWithGenericGamma22White x ~alpha self = msg_send ~self ~cmd:(selector "colorWithGenericGamma22White:alpha:") ~typ:(double @-> double @-> returning (id)) x alpha
  let colorWithHex x self = msg_send ~self ~cmd:(selector "colorWithHex:") ~typ:(id @-> returning (id)) x
  let colorWithHex' x ~alpha ~colorSpace self = msg_send ~self ~cmd:(selector "colorWithHex:alpha:colorSpace:") ~typ:(id @-> double @-> id @-> returning (id)) x alpha colorSpace
  let colorWithHue x ~saturation ~brightness ~alpha self = msg_send ~self ~cmd:(selector "colorWithHue:saturation:brightness:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x saturation brightness alpha
  let colorWithName x ~dynamicProvider self = msg_send ~self ~cmd:(selector "colorWithName:dynamicProvider:") ~typ:(id @-> ptr void @-> returning (id)) x dynamicProvider
  let colorWithPatternImage x self = msg_send ~self ~cmd:(selector "colorWithPatternImage:") ~typ:(id @-> returning (id)) x
  let colorWithRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "colorWithRed:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
  let colorWithSRGBRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "colorWithSRGBRed:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
  let colorWithWhite x ~alpha self = msg_send ~self ~cmd:(selector "colorWithWhite:alpha:") ~typ:(double @-> double @-> returning (id)) x alpha
  let containerBorderColor self = msg_send ~self ~cmd:(selector "containerBorderColor") ~typ:(returning (id))
  let contentBackgroundColor self = msg_send ~self ~cmd:(selector "contentBackgroundColor") ~typ:(returning (id))
  let controlAccentBlueColor self = msg_send ~self ~cmd:(selector "controlAccentBlueColor") ~typ:(returning (id))
  let controlAccentColor self = msg_send ~self ~cmd:(selector "controlAccentColor") ~typ:(returning (id))
  let controlAccentGoldColor self = msg_send ~self ~cmd:(selector "controlAccentGoldColor") ~typ:(returning (id))
  let controlAccentGreenColor self = msg_send ~self ~cmd:(selector "controlAccentGreenColor") ~typ:(returning (id))
  let controlAccentHardwareColor self = msg_send ~self ~cmd:(selector "controlAccentHardwareColor") ~typ:(returning (id))
  let controlAccentNoColor self = msg_send ~self ~cmd:(selector "controlAccentNoColor") ~typ:(returning (id))
  let controlAccentOrangeColor self = msg_send ~self ~cmd:(selector "controlAccentOrangeColor") ~typ:(returning (id))
  let controlAccentPinkColor self = msg_send ~self ~cmd:(selector "controlAccentPinkColor") ~typ:(returning (id))
  let controlAccentPurpleColor self = msg_send ~self ~cmd:(selector "controlAccentPurpleColor") ~typ:(returning (id))
  let controlAccentRedColor self = msg_send ~self ~cmd:(selector "controlAccentRedColor") ~typ:(returning (id))
  let controlAccentRoseGoldColor self = msg_send ~self ~cmd:(selector "controlAccentRoseGoldColor") ~typ:(returning (id))
  let controlAccentSilverColor self = msg_send ~self ~cmd:(selector "controlAccentSilverColor") ~typ:(returning (id))
  let controlAccentSpaceGrayColor self = msg_send ~self ~cmd:(selector "controlAccentSpaceGrayColor") ~typ:(returning (id))
  let controlAccentYellowColor self = msg_send ~self ~cmd:(selector "controlAccentYellowColor") ~typ:(returning (id))
  let controlAlternatingRowBackgroundColors self = msg_send ~self ~cmd:(selector "controlAlternatingRowBackgroundColors") ~typ:(returning (id))
  let controlAlternatingRowColor self = msg_send ~self ~cmd:(selector "controlAlternatingRowColor") ~typ:(returning (id))
  let controlBackgroundColor self = msg_send ~self ~cmd:(selector "controlBackgroundColor") ~typ:(returning (id))
  let controlColor self = msg_send ~self ~cmd:(selector "controlColor") ~typ:(returning (id))
  let controlDarkShadowColor self = msg_send ~self ~cmd:(selector "controlDarkShadowColor") ~typ:(returning (id))
  let controlFillColor self = msg_send ~self ~cmd:(selector "controlFillColor") ~typ:(returning (id))
  let controlHighlightColor self = msg_send ~self ~cmd:(selector "controlHighlightColor") ~typ:(returning (id))
  let controlLightHighlightColor self = msg_send ~self ~cmd:(selector "controlLightHighlightColor") ~typ:(returning (id))
  let controlShadowColor self = msg_send ~self ~cmd:(selector "controlShadowColor") ~typ:(returning (id))
  let controlStripSeparatorColor self = msg_send ~self ~cmd:(selector "controlStripSeparatorColor") ~typ:(returning (id))
  let controlTextColor self = msg_send ~self ~cmd:(selector "controlTextColor") ~typ:(returning (id))
  let currentControlTint self = msg_send ~self ~cmd:(selector "currentControlTint") ~typ:(returning (ullong))
  let cyanColor self = msg_send ~self ~cmd:(selector "cyanColor") ~typ:(returning (id))
  let darkGrayColor self = msg_send ~self ~cmd:(selector "darkGrayColor") ~typ:(returning (id))
  let detailAccentColor self = msg_send ~self ~cmd:(selector "detailAccentColor") ~typ:(returning (id))
  let disabledControlTextColor self = msg_send ~self ~cmd:(selector "disabledControlTextColor") ~typ:(returning (id))
  let findHighlightColor self = msg_send ~self ~cmd:(selector "findHighlightColor") ~typ:(returning (id))
  let graphiteControlTintColor self = msg_send ~self ~cmd:(selector "graphiteControlTintColor") ~typ:(returning (id))
  let graphiteSelectedTextBackgroundColor self = msg_send ~self ~cmd:(selector "graphiteSelectedTextBackgroundColor") ~typ:(returning (id))
  let grayColor self = msg_send ~self ~cmd:(selector "grayColor") ~typ:(returning (id))
  let grayDeviceColor self = msg_send ~self ~cmd:(selector "grayDeviceColor") ~typ:(returning (id))
  let greenColor self = msg_send ~self ~cmd:(selector "greenColor") ~typ:(returning (id))
  let gridColor self = msg_send ~self ~cmd:(selector "gridColor") ~typ:(returning (id))
  let headerColor self = msg_send ~self ~cmd:(selector "headerColor") ~typ:(returning (id))
  let headerTextColor self = msg_send ~self ~cmd:(selector "headerTextColor") ~typ:(returning (id))
  let highlightColor self = msg_send ~self ~cmd:(selector "highlightColor") ~typ:(returning (id))
  let highlightedMenuColor self = msg_send ~self ~cmd:(selector "highlightedMenuColor") ~typ:(returning (id))
  let highlightedMenuTextColor self = msg_send ~self ~cmd:(selector "highlightedMenuTextColor") ~typ:(returning (id))
  let ignoresAlpha self = msg_send ~self ~cmd:(selector "ignoresAlpha") ~typ:(returning (bool))
  let keyboardFocusIndicatorColor self = msg_send ~self ~cmd:(selector "keyboardFocusIndicatorColor") ~typ:(returning (id))
  let knobColor self = msg_send ~self ~cmd:(selector "knobColor") ~typ:(returning (id))
  let labelColor self = msg_send ~self ~cmd:(selector "labelColor") ~typ:(returning (id))
  let lightGrayColor self = msg_send ~self ~cmd:(selector "lightGrayColor") ~typ:(returning (id))
  let lightGrayDeviceColor self = msg_send ~self ~cmd:(selector "lightGrayDeviceColor") ~typ:(returning (id))
  let linenColor self = msg_send ~self ~cmd:(selector "linenColor") ~typ:(returning (id))
  let linkColor self = msg_send ~self ~cmd:(selector "linkColor") ~typ:(returning (id))
  let load self = msg_send ~self ~cmd:(selector "load") ~typ:(returning (void))
  let magentaColor self = msg_send ~self ~cmd:(selector "magentaColor") ~typ:(returning (id))
  let oldSystemColorWithCoder x self = msg_send ~self ~cmd:(selector "oldSystemColorWithCoder:") ~typ:(id @-> returning (id)) x
  let orangeColor self = msg_send ~self ~cmd:(selector "orangeColor") ~typ:(returning (id))
  let placeholderTextColor self = msg_send ~self ~cmd:(selector "placeholderTextColor") ~typ:(returning (id))
  let progressIndicatorColor self = msg_send ~self ~cmd:(selector "progressIndicatorColor") ~typ:(returning (id))
  let purpleColor self = msg_send ~self ~cmd:(selector "purpleColor") ~typ:(returning (id))
  let quarternaryLabelColor self = msg_send ~self ~cmd:(selector "quarternaryLabelColor") ~typ:(returning (id))
  let quaternaryLabelColor self = msg_send ~self ~cmd:(selector "quaternaryLabelColor") ~typ:(returning (id))
  let quinaryLabelColor self = msg_send ~self ~cmd:(selector "quinaryLabelColor") ~typ:(returning (id))
  let readableTypesForPasteboard x self = msg_send ~self ~cmd:(selector "readableTypesForPasteboard:") ~typ:(id @-> returning (id)) x
  let redColor self = msg_send ~self ~cmd:(selector "redColor") ~typ:(returning (id))
  let scriptingColorWithDescriptor x self = msg_send ~self ~cmd:(selector "scriptingColorWithDescriptor:") ~typ:(id @-> returning (id)) x
  let scrollBarColor self = msg_send ~self ~cmd:(selector "scrollBarColor") ~typ:(returning (id))
  let scrubberTexturedBackgroundColor self = msg_send ~self ~cmd:(selector "scrubberTexturedBackgroundColor") ~typ:(returning (id))
  let secondaryLabelColor self = msg_send ~self ~cmd:(selector "secondaryLabelColor") ~typ:(returning (id))
  let secondarySelectedControlColor self = msg_send ~self ~cmd:(selector "secondarySelectedControlColor") ~typ:(returning (id))
  let selectedContentBackgroundColor self = msg_send ~self ~cmd:(selector "selectedContentBackgroundColor") ~typ:(returning (id))
  let selectedContentTextColor self = msg_send ~self ~cmd:(selector "selectedContentTextColor") ~typ:(returning (id))
  let selectedControlColor self = msg_send ~self ~cmd:(selector "selectedControlColor") ~typ:(returning (id))
  let selectedControlTextColor self = msg_send ~self ~cmd:(selector "selectedControlTextColor") ~typ:(returning (id))
  let selectedHeaderTextColor self = msg_send ~self ~cmd:(selector "selectedHeaderTextColor") ~typ:(returning (id))
  let selectedInactiveColor self = msg_send ~self ~cmd:(selector "selectedInactiveColor") ~typ:(returning (id))
  let selectedKnobColor self = msg_send ~self ~cmd:(selector "selectedKnobColor") ~typ:(returning (id))
  let selectedMenuItemColor self = msg_send ~self ~cmd:(selector "selectedMenuItemColor") ~typ:(returning (id))
  let selectedMenuItemTextColor self = msg_send ~self ~cmd:(selector "selectedMenuItemTextColor") ~typ:(returning (id))
  let selectedTextBackgroundColor self = msg_send ~self ~cmd:(selector "selectedTextBackgroundColor") ~typ:(returning (id))
  let selectedTextColor self = msg_send ~self ~cmd:(selector "selectedTextColor") ~typ:(returning (id))
  let separatorColor self = msg_send ~self ~cmd:(selector "separatorColor") ~typ:(returning (id))
  let setIgnoresAlpha x self = msg_send ~self ~cmd:(selector "setIgnoresAlpha:") ~typ:(bool @-> returning (void)) x
  let shadowColor self = msg_send ~self ~cmd:(selector "shadowColor") ~typ:(returning (id))
  let sourceListBackgroundColor self = msg_send ~self ~cmd:(selector "sourceListBackgroundColor") ~typ:(returning (id))
  let springLoadedOverlayColor self = msg_send ~self ~cmd:(selector "springLoadedOverlayColor") ~typ:(returning (id))
  let supportsSecureCoding self = msg_send ~self ~cmd:(selector "supportsSecureCoding") ~typ:(returning (bool))
  let systemBlueColor self = msg_send ~self ~cmd:(selector "systemBlueColor") ~typ:(returning (id))
  let systemBrownColor self = msg_send ~self ~cmd:(selector "systemBrownColor") ~typ:(returning (id))
  let systemCyanColor self = msg_send ~self ~cmd:(selector "systemCyanColor") ~typ:(returning (id))
  let systemGrayColor self = msg_send ~self ~cmd:(selector "systemGrayColor") ~typ:(returning (id))
  let systemGreenColor self = msg_send ~self ~cmd:(selector "systemGreenColor") ~typ:(returning (id))
  let systemIndigoColor self = msg_send ~self ~cmd:(selector "systemIndigoColor") ~typ:(returning (id))
  let systemMintColor self = msg_send ~self ~cmd:(selector "systemMintColor") ~typ:(returning (id))
  let systemOrangeColor self = msg_send ~self ~cmd:(selector "systemOrangeColor") ~typ:(returning (id))
  let systemPinkColor self = msg_send ~self ~cmd:(selector "systemPinkColor") ~typ:(returning (id))
  let systemPurpleColor self = msg_send ~self ~cmd:(selector "systemPurpleColor") ~typ:(returning (id))
  let systemRedColor self = msg_send ~self ~cmd:(selector "systemRedColor") ~typ:(returning (id))
  let systemTealColor self = msg_send ~self ~cmd:(selector "systemTealColor") ~typ:(returning (id))
  let systemYellowColor self = msg_send ~self ~cmd:(selector "systemYellowColor") ~typ:(returning (id))
  let tertiaryLabelColor self = msg_send ~self ~cmd:(selector "tertiaryLabelColor") ~typ:(returning (id))
  let textBackgroundColor self = msg_send ~self ~cmd:(selector "textBackgroundColor") ~typ:(returning (id))
  let textColor self = msg_send ~self ~cmd:(selector "textColor") ~typ:(returning (id))
  let textCorrectionIndicatorColor self = msg_send ~self ~cmd:(selector "textCorrectionIndicatorColor") ~typ:(returning (id))
  let textGrammarIndicatorColor self = msg_send ~self ~cmd:(selector "textGrammarIndicatorColor") ~typ:(returning (id))
  let textSpellingIndicatorColor self = msg_send ~self ~cmd:(selector "textSpellingIndicatorColor") ~typ:(returning (id))
  let thinSplitViewDividerColor self = msg_send ~self ~cmd:(selector "thinSplitViewDividerColor") ~typ:(returning (id))
  let toolTipColor self = msg_send ~self ~cmd:(selector "toolTipColor") ~typ:(returning (id))
  let toolTipTextColor self = msg_send ~self ~cmd:(selector "toolTipTextColor") ~typ:(returning (id))
  let transparencyCheckboardPatternColor self = msg_send ~self ~cmd:(selector "transparencyCheckboardPatternColor") ~typ:(returning (id))
  let underPageBackgroundColor self = msg_send ~self ~cmd:(selector "underPageBackgroundColor") ~typ:(returning (id))
  let unemphasizedSelectedContentBackgroundColor self = msg_send ~self ~cmd:(selector "unemphasizedSelectedContentBackgroundColor") ~typ:(returning (id))
  let unemphasizedSelectedTextBackgroundColor self = msg_send ~self ~cmd:(selector "unemphasizedSelectedTextBackgroundColor") ~typ:(returning (id))
  let unemphasizedSelectedTextColor self = msg_send ~self ~cmd:(selector "unemphasizedSelectedTextColor") ~typ:(returning (id))
  let whiteColor self = msg_send ~self ~cmd:(selector "whiteColor") ~typ:(returning (id))
  let whiteDeviceColor self = msg_send ~self ~cmd:(selector "whiteDeviceColor") ~typ:(returning (id))
  let windowBackgroundColor self = msg_send ~self ~cmd:(selector "windowBackgroundColor") ~typ:(returning (id))
  let windowFrameColor self = msg_send ~self ~cmd:(selector "windowFrameColor") ~typ:(returning (id))
  let windowFrameTextColor self = msg_send ~self ~cmd:(selector "windowFrameTextColor") ~typ:(returning (id))
  let yellowColor self = msg_send ~self ~cmd:(selector "yellowColor") ~typ:(returning (id))
end

let accessibilityName self = msg_send ~self ~cmd:(selector "accessibilityName") ~typ:(returning (id))
let alphaComponent self = msg_send ~self ~cmd:(selector "alphaComponent") ~typ:(returning (double))
let blackComponent self = msg_send ~self ~cmd:(selector "blackComponent") ~typ:(returning (double))
let blendedColorWithFraction x ~ofColor self = msg_send ~self ~cmd:(selector "blendedColorWithFraction:ofColor:") ~typ:(double @-> id @-> returning (id)) x ofColor
let blueComponent self = msg_send ~self ~cmd:(selector "blueComponent") ~typ:(returning (double))
let brightnessComponent self = msg_send ~self ~cmd:(selector "brightnessComponent") ~typ:(returning (double))
let catalogNameComponent self = msg_send ~self ~cmd:(selector "catalogNameComponent") ~typ:(returning (id))
let colorNameComponent self = msg_send ~self ~cmd:(selector "colorNameComponent") ~typ:(returning (id))
let colorSpace self = msg_send ~self ~cmd:(selector "colorSpace") ~typ:(returning (id))
let colorSpaceName self = msg_send ~self ~cmd:(selector "colorSpaceName") ~typ:(returning (id))
let colorUsingColorSpace x self = msg_send ~self ~cmd:(selector "colorUsingColorSpace:") ~typ:(id @-> returning (id)) x
let colorUsingColorSpaceName x self = msg_send ~self ~cmd:(selector "colorUsingColorSpaceName:") ~typ:(id @-> returning (id)) x
let colorUsingColorSpaceName' x ~device self = msg_send ~self ~cmd:(selector "colorUsingColorSpaceName:device:") ~typ:(id @-> id @-> returning (id)) x device
let colorUsingType x self = msg_send ~self ~cmd:(selector "colorUsingType:") ~typ:(llong @-> returning (id)) x
let colorWithAlphaComponent x self = msg_send ~self ~cmd:(selector "colorWithAlphaComponent:") ~typ:(double @-> returning (id)) x
let colorWithSystemEffect x self = msg_send ~self ~cmd:(selector "colorWithSystemEffect:") ~typ:(llong @-> returning (id)) x
let copy self = msg_send ~self ~cmd:(selector "copy") ~typ:(returning (id))
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x
let cyanComponent self = msg_send ~self ~cmd:(selector "cyanComponent") ~typ:(returning (double))
let drawSwatchInRect x self = msg_send ~self ~cmd:(selector "drawSwatchInRect:") ~typ:(CGRect.t @-> returning (void)) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let getComponents x self = msg_send ~self ~cmd:(selector "getComponents:") ~typ:(ptr (double) @-> returning (void)) x
let getCyan x ~magenta ~yellow ~black ~alpha self = msg_send ~self ~cmd:(selector "getCyan:magenta:yellow:black:alpha:") ~typ:(ptr (double) @-> ptr (double) @-> ptr (double) @-> ptr (double) @-> ptr (double) @-> returning (void)) x magenta yellow black alpha
let getHue x ~saturation ~brightness ~alpha self = msg_send ~self ~cmd:(selector "getHue:saturation:brightness:alpha:") ~typ:(ptr (double) @-> ptr (double) @-> ptr (double) @-> ptr (double) @-> returning (void)) x saturation brightness alpha
let getRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "getRed:green:blue:alpha:") ~typ:(ptr (double) @-> ptr (double) @-> ptr (double) @-> ptr (double) @-> returning (void)) x green blue alpha
let getWhite x ~alpha self = msg_send ~self ~cmd:(selector "getWhite:alpha:") ~typ:(ptr (double) @-> ptr (double) @-> returning (void)) x alpha
let greenComponent self = msg_send ~self ~cmd:(selector "greenComponent") ~typ:(returning (double))
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong))
let highlightWithLevel x self = msg_send ~self ~cmd:(selector "highlightWithLevel:") ~typ:(double @-> returning (id)) x
let hueComponent self = msg_send ~self ~cmd:(selector "hueComponent") ~typ:(returning (double))
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithPasteboardPropertyList x ~ofType self = msg_send ~self ~cmd:(selector "initWithPasteboardPropertyList:ofType:") ~typ:(id @-> id @-> returning (id)) x ofType
let isUniform self = msg_send ~self ~cmd:(selector "isUniform") ~typ:(returning (bool))
let localizedCatalogNameComponent self = msg_send ~self ~cmd:(selector "localizedCatalogNameComponent") ~typ:(returning (id))
let localizedColorNameComponent self = msg_send ~self ~cmd:(selector "localizedColorNameComponent") ~typ:(returning (id))
let magentaComponent self = msg_send ~self ~cmd:(selector "magentaComponent") ~typ:(returning (double))
let numberOfComponents self = msg_send ~self ~cmd:(selector "numberOfComponents") ~typ:(returning (llong))
let pasteboardPropertyListForType x self = msg_send ~self ~cmd:(selector "pasteboardPropertyListForType:") ~typ:(id @-> returning (id)) x
let patternImage self = msg_send ~self ~cmd:(selector "patternImage") ~typ:(returning (id))
let redComponent self = msg_send ~self ~cmd:(selector "redComponent") ~typ:(returning (double))
let replacementObjectForPortCoder x self = msg_send ~self ~cmd:(selector "replacementObjectForPortCoder:") ~typ:(id @-> returning (id)) x
let saturationComponent self = msg_send ~self ~cmd:(selector "saturationComponent") ~typ:(returning (double))
let scriptingColorDescriptor self = msg_send ~self ~cmd:(selector "scriptingColorDescriptor") ~typ:(returning (id))
let set self = msg_send ~self ~cmd:(selector "set") ~typ:(returning (void))
let setFill self = msg_send ~self ~cmd:(selector "setFill") ~typ:(returning (void))
let setStroke self = msg_send ~self ~cmd:(selector "setStroke") ~typ:(returning (void))
let shadowWithLevel x self = msg_send ~self ~cmd:(selector "shadowWithLevel:") ~typ:(double @-> returning (id)) x
let type_ self = msg_send ~self ~cmd:(selector "type") ~typ:(returning (llong))
let whiteComponent self = msg_send ~self ~cmd:(selector "whiteComponent") ~typ:(returning (double))
let writableTypesForPasteboard x self = msg_send ~self ~cmd:(selector "writableTypesForPasteboard:") ~typ:(id @-> returning (id)) x
let writeToPasteboard x self = msg_send ~self ~cmd:(selector "writeToPasteboard:") ~typ:(id @-> returning (void)) x
let yellowComponent self = msg_send ~self ~cmd:(selector "yellowComponent") ~typ:(returning (double))