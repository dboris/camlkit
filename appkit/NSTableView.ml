(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "NSTableView"

module C = struct
  let accessibilityIsSingleCelled self = msg_send ~self ~cmd:(selector "accessibilityIsSingleCelled") ~typ:(returning (bool))
  let isCompatibleWithResponsiveScrolling self = msg_send ~self ~cmd:(selector "isCompatibleWithResponsiveScrolling") ~typ:(returning (bool))
end

let abortEditing self = msg_send ~self ~cmd:(selector "abortEditing") ~typ:(returning (bool))
let acceptsFirstMouse x self = msg_send ~self ~cmd:(selector "acceptsFirstMouse:") ~typ:(id @-> returning (bool)) x
let acceptsFirstResponder self = msg_send ~self ~cmd:(selector "acceptsFirstResponder") ~typ:(returning (bool))
let accessibilityArrayAttributeCount x self = msg_send ~self ~cmd:(selector "accessibilityArrayAttributeCount:") ~typ:(id @-> returning (ullong)) x
let accessibilityArrayAttributeValues x ~index ~maxCount self = msg_send ~self ~cmd:(selector "accessibilityArrayAttributeValues:index:maxCount:") ~typ:(id @-> ullong @-> ullong @-> returning (id)) x (ULLong.of_int index) (ULLong.of_int maxCount)
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning (id))
let accessibilityAuditPotentialChildren self = msg_send ~self ~cmd:(selector "accessibilityAuditPotentialChildren") ~typ:(returning (id))
let accessibilityCellForColumnAndRowAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityCellForColumnAndRowAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenAttribute") ~typ:(returning (id))
let accessibilityColumnsAttribute self = msg_send ~self ~cmd:(selector "accessibilityColumnsAttribute") ~typ:(returning (id))
let accessibilityCurrentEditorForCell x self = msg_send ~self ~cmd:(selector "accessibilityCurrentEditorForCell:") ~typ:(id @-> returning (id)) x
let accessibilityFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityFocusedUIElement") ~typ:(returning (id))
let accessibilityHeaderAttribute self = msg_send ~self ~cmd:(selector "accessibilityHeaderAttribute") ~typ:(returning (id))
let accessibilityHitTest x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let accessibilityIndexOfChild x self = msg_send ~self ~cmd:(selector "accessibilityIndexOfChild:") ~typ:(id @-> returning (ullong)) x
let accessibilityIsColumnsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsColumnsAttributeSettable") ~typ:(returning (bool))
let accessibilityIsHeaderAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsHeaderAttributeSettable") ~typ:(returning (bool))
let accessibilityIsOrientationAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsOrientationAttributeSettable") ~typ:(returning (bool))
let accessibilityIsRowsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRowsAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSelectedCellsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedCellsAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSelectedChildrenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedChildrenAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSelectedColumnsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedColumnsAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSelectedRowsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedRowsAttributeSettable") ~typ:(returning (bool))
let accessibilityIsVisibleChildrenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsVisibleChildrenAttributeSettable") ~typ:(returning (bool))
let accessibilityIsVisibleColumnsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsVisibleColumnsAttributeSettable") ~typ:(returning (bool))
let accessibilityIsVisibleRowsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsVisibleRowsAttributeSettable") ~typ:(returning (bool))
let accessibilityLabel self = msg_send ~self ~cmd:(selector "accessibilityLabel") ~typ:(returning (id))
let accessibilityOrientationAttribute self = msg_send ~self ~cmd:(selector "accessibilityOrientationAttribute") ~typ:(returning (id))
let accessibilityParameterizedAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityParameterizedAttributeNames") ~typ:(returning (id))
let accessibilityPositionOfChild x self = msg_send ~self ~cmd:(selector "accessibilityPositionOfChild:") ~typ:(id @-> returning (id)) x
let accessibilityPostNotification x self = msg_send ~self ~cmd:(selector "accessibilityPostNotification:") ~typ:(id @-> returning (void)) x
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning (id))
let accessibilityRows self = msg_send ~self ~cmd:(selector "accessibilityRows") ~typ:(returning (id))
let accessibilityRowsAttribute self = msg_send ~self ~cmd:(selector "accessibilityRowsAttribute") ~typ:(returning (id))
let accessibilitySelectedCellsAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedCellsAttribute") ~typ:(returning (id))
let accessibilitySelectedChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedChildrenAttribute") ~typ:(returning (id))
let accessibilitySelectedColumnsAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedColumnsAttribute") ~typ:(returning (id))
let accessibilitySelectedRowsAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedRowsAttribute") ~typ:(returning (id))
let accessibilitySetSelectedChildrenAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedChildrenAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetSelectedColumnsAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedColumnsAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetSelectedRowsAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedRowsAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySizeOfChild x self = msg_send ~self ~cmd:(selector "accessibilitySizeOfChild:") ~typ:(id @-> returning (id)) x
let accessibilityVisibleChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityVisibleChildrenAttribute") ~typ:(returning (id))
let accessibilityVisibleColumnsAttribute self = msg_send ~self ~cmd:(selector "accessibilityVisibleColumnsAttribute") ~typ:(returning (id))
let accessibilityVisibleRowsAttribute self = msg_send ~self ~cmd:(selector "accessibilityVisibleRowsAttribute") ~typ:(returning (id))
let accessibilityWindowPointForShowMenu self = msg_send_stret ~self ~cmd:(selector "accessibilityWindowPointForShowMenu") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let addDropBetweenFeedbackViewsForRow x self = msg_send ~self ~cmd:(selector "addDropBetweenFeedbackViewsForRow:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let addDropFeedbackViews self = msg_send ~self ~cmd:(selector "addDropFeedbackViews") ~typ:(returning (void))
let addDropOnFeedbackViewsForRow x self = msg_send ~self ~cmd:(selector "addDropOnFeedbackViewsForRow:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let addTableColumn x self = msg_send ~self ~cmd:(selector "addTableColumn:") ~typ:(id @-> returning (void)) x
let allowsColumnReordering self = msg_send ~self ~cmd:(selector "allowsColumnReordering") ~typ:(returning (bool))
let allowsColumnResizing self = msg_send ~self ~cmd:(selector "allowsColumnResizing") ~typ:(returning (bool))
let allowsColumnSelection self = msg_send ~self ~cmd:(selector "allowsColumnSelection") ~typ:(returning (bool))
let allowsEmptySelection self = msg_send ~self ~cmd:(selector "allowsEmptySelection") ~typ:(returning (bool))
let allowsMultipleSelection self = msg_send ~self ~cmd:(selector "allowsMultipleSelection") ~typ:(returning (bool))
let allowsTypeSelect self = msg_send ~self ~cmd:(selector "allowsTypeSelect") ~typ:(returning (bool))
let animationCompletionHandler self = msg_send ~self ~cmd:(selector "animationCompletionHandler") ~typ:(returning (ptr void))
let applyPermutationsFromArray x ~toArray ~insertAnimation ~removeAnimation self = msg_send ~self ~cmd:(selector "applyPermutationsFromArray:toArray:insertAnimation:removeAnimation:") ~typ:(id @-> id @-> ullong @-> ullong @-> returning (void)) x toArray (ULLong.of_int insertAnimation) (ULLong.of_int removeAnimation)
let applyPermutationsFromArray' x ~toArray ~insertionAnimation ~removalAnimation self = msg_send ~self ~cmd:(selector "applyPermutationsFromArray:toArray:insertionAnimation:removalAnimation:") ~typ:(id @-> id @-> ullong @-> ullong @-> returning (void)) x toArray (ULLong.of_int insertionAnimation) (ULLong.of_int removalAnimation)
let archivedReusableViews self = msg_send ~self ~cmd:(selector "archivedReusableViews") ~typ:(returning (id))
let autoresizesAllColumnsToFit self = msg_send ~self ~cmd:(selector "autoresizesAllColumnsToFit") ~typ:(returning (bool))
let autosaveName self = msg_send ~self ~cmd:(selector "autosaveName") ~typ:(returning (id))
let autosaveTableColumns self = msg_send ~self ~cmd:(selector "autosaveTableColumns") ~typ:(returning (bool))
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning (id))
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning (bool))
let becomeKeyWindow self = msg_send ~self ~cmd:(selector "becomeKeyWindow") ~typ:(returning (void))
let beginUpdates self = msg_send ~self ~cmd:(selector "beginUpdates") ~typ:(returning (void))
let bounds self = msg_send_stret ~self ~cmd:(selector "bounds") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let cacheReusableView x self = msg_send ~self ~cmd:(selector "cacheReusableView:") ~typ:(id @-> returning (void)) x
let canDragRowsWithIndexes x ~atPoint self = msg_send ~self ~cmd:(selector "canDragRowsWithIndexes:atPoint:") ~typ:(id @-> CGPoint.t @-> returning (bool)) x atPoint
let canFocusCell x ~atTableColumn ~row self = msg_send ~self ~cmd:(selector "canFocusCell:atTableColumn:row:") ~typ:(id @-> id @-> llong @-> returning (bool)) x atTableColumn (LLong.of_int row)
let cancelOperation x self = msg_send ~self ~cmd:(selector "cancelOperation:") ~typ:(id @-> returning (void)) x
let clickedColumn self = msg_send ~self ~cmd:(selector "clickedColumn") ~typ:(returning (llong))
let clickedRow self = msg_send ~self ~cmd:(selector "clickedRow") ~typ:(returning (llong))
let columnAtPoint x self = msg_send ~self ~cmd:(selector "columnAtPoint:") ~typ:(CGPoint.t @-> returning (llong)) x
let columnAutoresizingStyle self = msg_send ~self ~cmd:(selector "columnAutoresizingStyle") ~typ:(returning (ullong))
let columnForView x self = msg_send ~self ~cmd:(selector "columnForView:") ~typ:(id @-> returning (llong)) x
let columnIndexesInRect x self = msg_send ~self ~cmd:(selector "columnIndexesInRect:") ~typ:(CGRect.t @-> returning (id)) x
let columnWithIdentifier x self = msg_send ~self ~cmd:(selector "columnWithIdentifier:") ~typ:(id @-> returning (llong)) x
let columnsInRect x self = msg_send_stret ~self ~cmd:(selector "columnsInRect:") ~typ:(CGRect.t @-> returning (NSRange.t)) ~return_type:NSRange.t x
let concludeDragOperation x self = msg_send ~self ~cmd:(selector "concludeDragOperation:") ~typ:(id @-> returning (void)) x
let controlTextDidEndEditing x self = msg_send ~self ~cmd:(selector "controlTextDidEndEditing:") ~typ:(id @-> returning (void)) x
let cornerView self = msg_send ~self ~cmd:(selector "cornerView") ~typ:(returning (id))
let currentTypeSelectSearchString self = msg_send ~self ~cmd:(selector "currentTypeSelectSearchString") ~typ:(returning (id))
let dataSource self = msg_send ~self ~cmd:(selector "dataSource") ~typ:(returning (id))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let deepestAccessibilityDescendants self = msg_send ~self ~cmd:(selector "deepestAccessibilityDescendants") ~typ:(returning (id))
let defaultOwner self = msg_send ~self ~cmd:(selector "defaultOwner") ~typ:(returning (id))
let delayStartEditingCalled self = msg_send ~self ~cmd:(selector "delayStartEditingCalled") ~typ:(returning (bool))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let deselectAll x self = msg_send ~self ~cmd:(selector "deselectAll:") ~typ:(id @-> returning (void)) x
let deselectColumn x self = msg_send ~self ~cmd:(selector "deselectColumn:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let deselectRow x self = msg_send ~self ~cmd:(selector "deselectRow:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let designatedFocusRingView self = msg_send ~self ~cmd:(selector "designatedFocusRingView") ~typ:(returning (id))
let didAddRowView x ~forRow self = msg_send ~self ~cmd:(selector "didAddRowView:forRow:") ~typ:(id @-> llong @-> returning (void)) x (LLong.of_int forRow)
let didBecomeActiveFirstResponder self = msg_send ~self ~cmd:(selector "didBecomeActiveFirstResponder") ~typ:(returning (void))
let didCloseMenu x ~withEvent self = msg_send ~self ~cmd:(selector "didCloseMenu:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let didRemoveRowView x ~forRow self = msg_send ~self ~cmd:(selector "didRemoveRowView:forRow:") ~typ:(id @-> llong @-> returning (void)) x (LLong.of_int forRow)
let doubleAction self = msg_send ~self ~cmd:(selector "doubleAction") ~typ:(returning (_SEL))
let dragImageForRows x ~event ~dragImageOffset self = msg_send ~self ~cmd:(selector "dragImageForRows:event:dragImageOffset:") ~typ:(id @-> id @-> ptr (CGPoint.t) @-> returning (id)) x event dragImageOffset
let dragImageForRowsWithIndexes x ~tableColumns ~event ~offset self = msg_send ~self ~cmd:(selector "dragImageForRowsWithIndexes:tableColumns:event:offset:") ~typ:(id @-> id @-> id @-> ptr (CGPoint.t) @-> returning (id)) x tableColumns event offset
let draggedColumnView self = msg_send ~self ~cmd:(selector "draggedColumnView") ~typ:(returning (id))
let draggedImage x ~beganAt self = msg_send ~self ~cmd:(selector "draggedImage:beganAt:") ~typ:(id @-> CGPoint.t @-> returning (void)) x beganAt
let draggedImage1 x ~movedTo self = msg_send ~self ~cmd:(selector "draggedImage:movedTo:") ~typ:(id @-> CGPoint.t @-> returning (void)) x movedTo
let draggedImage2 x ~endedAt ~operation self = msg_send ~self ~cmd:(selector "draggedImage:endedAt:operation:") ~typ:(id @-> CGPoint.t @-> ullong @-> returning (void)) x endedAt (ULLong.of_int operation)
let draggingDestinationFeedbackStyle self = msg_send ~self ~cmd:(selector "draggingDestinationFeedbackStyle") ~typ:(returning (llong))
let draggingEntered x self = msg_send ~self ~cmd:(selector "draggingEntered:") ~typ:(id @-> returning (ullong)) x
let draggingExited x self = msg_send ~self ~cmd:(selector "draggingExited:") ~typ:(id @-> returning (void)) x
let draggingImageComponentsWithFrame x ~forDisplayObject self = msg_send ~self ~cmd:(selector "draggingImageComponentsWithFrame:forDisplayObject:") ~typ:(CGRect.t @-> id @-> returning (id)) x forDisplayObject
let draggingSession x ~namesOfPromisedFilesDroppedAtDestination self = msg_send ~self ~cmd:(selector "draggingSession:namesOfPromisedFilesDroppedAtDestination:") ~typ:(id @-> id @-> returning (id)) x namesOfPromisedFilesDroppedAtDestination
let draggingSession1 x ~sourceOperationMaskForDraggingContext self = msg_send ~self ~cmd:(selector "draggingSession:sourceOperationMaskForDraggingContext:") ~typ:(id @-> llong @-> returning (ullong)) x (LLong.of_int sourceOperationMaskForDraggingContext)
let draggingSession2 x ~willBeginAtPoint self = msg_send ~self ~cmd:(selector "draggingSession:willBeginAtPoint:") ~typ:(id @-> CGPoint.t @-> returning (void)) x willBeginAtPoint
let draggingSession3 x ~endedAtPoint ~operation self = msg_send ~self ~cmd:(selector "draggingSession:endedAtPoint:operation:") ~typ:(id @-> CGPoint.t @-> ullong @-> returning (void)) x endedAtPoint (ULLong.of_int operation)
let draggingSourceOperationMaskForLocal x self = msg_send ~self ~cmd:(selector "draggingSourceOperationMaskForLocal:") ~typ:(bool @-> returning (ullong)) x
let draggingUpdated x self = msg_send ~self ~cmd:(selector "draggingUpdated:") ~typ:(id @-> returning (ullong)) x
let drawBackgroundInClipRect x self = msg_send ~self ~cmd:(selector "drawBackgroundInClipRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawBackgroundOverhangInRect x self = msg_send ~self ~cmd:(selector "drawBackgroundOverhangInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawContextMenuHighlightForRow x self = msg_send ~self ~cmd:(selector "drawContextMenuHighlightForRow:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let drawFocusRingMask self = msg_send ~self ~cmd:(selector "drawFocusRingMask") ~typ:(returning (void))
let drawGridInClipRect x self = msg_send ~self ~cmd:(selector "drawGridInClipRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawOverlayRect x self = msg_send ~self ~cmd:(selector "drawOverlayRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawRow x ~clipRect self = msg_send ~self ~cmd:(selector "drawRow:clipRect:") ~typ:(llong @-> CGRect.t @-> returning (void)) (LLong.of_int x) clipRect
let drawRowIndexes x ~clipRect self = msg_send ~self ~cmd:(selector "drawRowIndexes:clipRect:") ~typ:(id @-> CGRect.t @-> returning (void)) x clipRect
let drawRowsInRange x ~clipRect self = msg_send ~self ~cmd:(selector "drawRowsInRange:clipRect:") ~typ:(NSRange.t @-> CGRect.t @-> returning (void)) x clipRect
let drawsBackground self = msg_send ~self ~cmd:(selector "drawsBackground") ~typ:(returning (bool))
let drawsGrid self = msg_send ~self ~cmd:(selector "drawsGrid") ~typ:(returning (bool))
let editColumn x ~row ~withEvent ~select self = msg_send ~self ~cmd:(selector "editColumn:row:withEvent:select:") ~typ:(llong @-> llong @-> id @-> bool @-> returning (void)) (LLong.of_int x) (LLong.of_int row) withEvent select
let editedColumn self = msg_send ~self ~cmd:(selector "editedColumn") ~typ:(returning (llong))
let editedRow self = msg_send ~self ~cmd:(selector "editedRow") ~typ:(returning (llong))
let effectiveRowSizeStyle self = msg_send ~self ~cmd:(selector "effectiveRowSizeStyle") ~typ:(returning (llong))
let effectiveStyle self = msg_send ~self ~cmd:(selector "effectiveStyle") ~typ:(returning (llong))
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let endUpdates self = msg_send ~self ~cmd:(selector "endUpdates") ~typ:(returning (void))
let enumerateAvailableRowViewsUsingBlock x self = msg_send ~self ~cmd:(selector "enumerateAvailableRowViewsUsingBlock:") ~typ:(ptr void @-> returning (void)) x
let floatsGroupRows self = msg_send ~self ~cmd:(selector "floatsGroupRows") ~typ:(returning (bool))
let floatsHeaderView self = msg_send ~self ~cmd:(selector "floatsHeaderView") ~typ:(returning (bool))
let focusRingMaskBounds self = msg_send_stret ~self ~cmd:(selector "focusRingMaskBounds") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let focusRingType self = msg_send ~self ~cmd:(selector "focusRingType") ~typ:(returning (ullong))
let focusedColumn self = msg_send ~self ~cmd:(selector "focusedColumn") ~typ:(returning (llong))
let frame self = msg_send_stret ~self ~cmd:(selector "frame") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let frameOfCellAtColumn x ~row self = msg_send_stret ~self ~cmd:(selector "frameOfCellAtColumn:row:") ~typ:(llong @-> llong @-> returning (CGRect.t)) ~return_type:CGRect.t (LLong.of_int x) (LLong.of_int row)
let gridColor self = msg_send ~self ~cmd:(selector "gridColor") ~typ:(returning (id))
let gridStyleMask self = msg_send ~self ~cmd:(selector "gridStyleMask") ~typ:(returning (ullong))
let groupRowStyle self = msg_send ~self ~cmd:(selector "groupRowStyle") ~typ:(returning (llong))
let headerView self = msg_send ~self ~cmd:(selector "headerView") ~typ:(returning (id))
let hiddenRowIndexes self = msg_send ~self ~cmd:(selector "hiddenRowIndexes") ~typ:(returning (id))
let hideRowsAtIndexes x ~withAnimation self = msg_send ~self ~cmd:(selector "hideRowsAtIndexes:withAnimation:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int withAnimation)
let highlightSelectionInClipRect x self = msg_send ~self ~cmd:(selector "highlightSelectionInClipRect:") ~typ:(CGRect.t @-> returning (void)) x
let highlightedTableColumn self = msg_send ~self ~cmd:(selector "highlightedTableColumn") ~typ:(returning (id))
let hitTest x self = msg_send ~self ~cmd:(selector "hitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let ignoreModifierKeysForDraggingSession x self = msg_send ~self ~cmd:(selector "ignoreModifierKeysForDraggingSession:") ~typ:(id @-> returning (bool)) x
let ignoreModifierKeysWhileDragging self = msg_send ~self ~cmd:(selector "ignoreModifierKeysWhileDragging") ~typ:(returning (bool))
let indicatorImageInTableColumn x self = msg_send ~self ~cmd:(selector "indicatorImageInTableColumn:") ~typ:(id @-> returning (id)) x
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning (id)) x
let insertRowsAtIndexes x ~withAnimation self = msg_send ~self ~cmd:(selector "insertRowsAtIndexes:withAnimation:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int withAnimation)
let instantiateWithObjectInstantiator x self = msg_send ~self ~cmd:(selector "instantiateWithObjectInstantiator:") ~typ:(id @-> returning (void)) x
let intercellSpacing self = msg_send_stret ~self ~cmd:(selector "intercellSpacing") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let interiorBackgroundStyle self = msg_send ~self ~cmd:(selector "interiorBackgroundStyle") ~typ:(returning (llong))
let intrinsicContentSize self = msg_send_stret ~self ~cmd:(selector "intrinsicContentSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let isColumnSelected x self = msg_send ~self ~cmd:(selector "isColumnSelected:") ~typ:(llong @-> returning (bool)) (LLong.of_int x)
let isDropTargetRow x self = msg_send ~self ~cmd:(selector "isDropTargetRow:") ~typ:(llong @-> returning (bool)) (LLong.of_int x)
let isEditing self = msg_send ~self ~cmd:(selector "isEditing") ~typ:(returning (bool))
let isFlipped self = msg_send ~self ~cmd:(selector "isFlipped") ~typ:(returning (bool))
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning (bool))
let isRowSelected x self = msg_send ~self ~cmd:(selector "isRowSelected:") ~typ:(llong @-> returning (bool)) (LLong.of_int x)
let isViewBased self = msg_send ~self ~cmd:(selector "isViewBased") ~typ:(returning (bool))
let keyDown x self = msg_send ~self ~cmd:(selector "keyDown:") ~typ:(id @-> returning (void)) x
let lastSelectedRow self = msg_send ~self ~cmd:(selector "lastSelectedRow") ~typ:(returning (llong))
let layout self = msg_send ~self ~cmd:(selector "layout") ~typ:(returning (void))
let makeRowViewForRow x self = msg_send ~self ~cmd:(selector "makeRowViewForRow:") ~typ:(llong @-> returning (id)) (LLong.of_int x)
let makeViewForTableColumn x ~row self = msg_send ~self ~cmd:(selector "makeViewForTableColumn:row:") ~typ:(id @-> llong @-> returning (id)) x (LLong.of_int row)
let makeViewWithIdentifier x ~owner self = msg_send ~self ~cmd:(selector "makeViewWithIdentifier:owner:") ~typ:(id @-> id @-> returning (id)) x owner
let menuForEvent x self = msg_send ~self ~cmd:(selector "menuForEvent:") ~typ:(id @-> returning (id)) x
let mouseDown x self = msg_send ~self ~cmd:(selector "mouseDown:") ~typ:(id @-> returning (void)) x
let mouseEntered x self = msg_send ~self ~cmd:(selector "mouseEntered:") ~typ:(id @-> returning (void)) x
let mouseExited x self = msg_send ~self ~cmd:(selector "mouseExited:") ~typ:(id @-> returning (void)) x
let mouseUp x self = msg_send ~self ~cmd:(selector "mouseUp:") ~typ:(id @-> returning (void)) x
let moveColumn x ~toColumn self = msg_send ~self ~cmd:(selector "moveColumn:toColumn:") ~typ:(llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int toColumn)
let moveRowAtIndex x ~toIndex self = msg_send ~self ~cmd:(selector "moveRowAtIndex:toIndex:") ~typ:(llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int toIndex)
let moveRowsInRange x ~toIndex self = msg_send ~self ~cmd:(selector "moveRowsInRange:toIndex:") ~typ:(NSRange.t @-> llong @-> returning (void)) x (LLong.of_int toIndex)
let namesOfPromisedFilesDroppedAtDestination x self = msg_send ~self ~cmd:(selector "namesOfPromisedFilesDroppedAtDestination:") ~typ:(id @-> returning (id)) x
let needsPanelToBecomeKey self = msg_send ~self ~cmd:(selector "needsPanelToBecomeKey") ~typ:(returning (bool))
let noteHeightOfRowsWithIndexesChanged x self = msg_send ~self ~cmd:(selector "noteHeightOfRowsWithIndexesChanged:") ~typ:(id @-> returning (void)) x
let noteNumberOfRowsChanged self = msg_send ~self ~cmd:(selector "noteNumberOfRowsChanged") ~typ:(returning (void))
let numberOfColumns self = msg_send ~self ~cmd:(selector "numberOfColumns") ~typ:(returning (llong))
let numberOfRows self = msg_send ~self ~cmd:(selector "numberOfRows") ~typ:(returning (llong))
let numberOfSelectedColumns self = msg_send ~self ~cmd:(selector "numberOfSelectedColumns") ~typ:(returning (llong))
let numberOfSelectedRows self = msg_send ~self ~cmd:(selector "numberOfSelectedRows") ~typ:(returning (llong))
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let overlayBounds self = msg_send_stret ~self ~cmd:(selector "overlayBounds") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let performClickOnCellAtColumn x ~row self = msg_send ~self ~cmd:(selector "performClickOnCellAtColumn:row:") ~typ:(llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int row)
let performDragOperation x self = msg_send ~self ~cmd:(selector "performDragOperation:") ~typ:(id @-> returning (bool)) x
let prepareContentInRect x self = msg_send ~self ~cmd:(selector "prepareContentInRect:") ~typ:(CGRect.t @-> returning (void)) x
let prepareDraggingDestinationView x ~forRowIndexes ~draggingStyle self = msg_send ~self ~cmd:(selector "prepareDraggingDestinationView:forRowIndexes:draggingStyle:") ~typ:(id @-> id @-> llong @-> returning (void)) x forRowIndexes (LLong.of_int draggingStyle)
let preparedCellAtColumn x ~row self = msg_send ~self ~cmd:(selector "preparedCellAtColumn:row:") ~typ:(llong @-> llong @-> returning (id)) (LLong.of_int x) (LLong.of_int row)
let rectOfColumn x self = msg_send_stret ~self ~cmd:(selector "rectOfColumn:") ~typ:(llong @-> returning (CGRect.t)) ~return_type:CGRect.t (LLong.of_int x)
let rectOfRow x self = msg_send_stret ~self ~cmd:(selector "rectOfRow:") ~typ:(llong @-> returning (CGRect.t)) ~return_type:CGRect.t (LLong.of_int x)
let refusesFirstResponder self = msg_send ~self ~cmd:(selector "refusesFirstResponder") ~typ:(returning (bool))
let registerNib x ~forIdentifier self = msg_send ~self ~cmd:(selector "registerNib:forIdentifier:") ~typ:(id @-> id @-> returning (void)) x forIdentifier
let registeredNibsByIdentifier self = msg_send ~self ~cmd:(selector "registeredNibsByIdentifier") ~typ:(returning (id))
let reloadData self = msg_send ~self ~cmd:(selector "reloadData") ~typ:(returning (void))
let reloadDataForRowIndexes x ~columnIndexes self = msg_send ~self ~cmd:(selector "reloadDataForRowIndexes:columnIndexes:") ~typ:(id @-> id @-> returning (void)) x columnIndexes
let removeDropFeedbackViewsFromOldRow x self = msg_send ~self ~cmd:(selector "removeDropFeedbackViewsFromOldRow:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let removeReuseableViewNibNameForIdentifier x self = msg_send ~self ~cmd:(selector "removeReuseableViewNibNameForIdentifier:") ~typ:(id @-> returning (void)) x
let removeRowsAtIndexes x ~withAnimation self = msg_send ~self ~cmd:(selector "removeRowsAtIndexes:withAnimation:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int withAnimation)
let removeTableColumn x self = msg_send ~self ~cmd:(selector "removeTableColumn:") ~typ:(id @-> returning (void)) x
let renameReuseableViewIdentifierFrom x ~to_ self = msg_send ~self ~cmd:(selector "renameReuseableViewIdentifierFrom:to:") ~typ:(id @-> id @-> returning (void)) x to_
let renewGState self = msg_send ~self ~cmd:(selector "renewGState") ~typ:(returning (void))
let resignFirstResponder self = msg_send ~self ~cmd:(selector "resignFirstResponder") ~typ:(returning (bool))
let resignKeyWindow self = msg_send ~self ~cmd:(selector "resignKeyWindow") ~typ:(returning (void))
let resizeWithOldSuperviewSize x self = msg_send ~self ~cmd:(selector "resizeWithOldSuperviewSize:") ~typ:(CGSize.t @-> returning (void)) x
let reuseableViewIdentifiers self = msg_send ~self ~cmd:(selector "reuseableViewIdentifiers") ~typ:(returning (id))
let reuseableViewNibNameForIdentifier x self = msg_send ~self ~cmd:(selector "reuseableViewNibNameForIdentifier:") ~typ:(id @-> returning (id)) x
let rowActionsVisible self = msg_send ~self ~cmd:(selector "rowActionsVisible") ~typ:(returning (bool))
let rowAtPoint x self = msg_send ~self ~cmd:(selector "rowAtPoint:") ~typ:(CGPoint.t @-> returning (llong)) x
let rowData self = msg_send ~self ~cmd:(selector "rowData") ~typ:(returning (id))
let rowForView x self = msg_send ~self ~cmd:(selector "rowForView:") ~typ:(id @-> returning (llong)) x
let rowHeight self = msg_send ~self ~cmd:(selector "rowHeight") ~typ:(returning (double))
let rowHeightData self = msg_send ~self ~cmd:(selector "rowHeightData") ~typ:(returning (id))
let rowSizeStyle self = msg_send ~self ~cmd:(selector "rowSizeStyle") ~typ:(returning (llong))
let rowViewAtRow x ~makeIfNecessary self = msg_send ~self ~cmd:(selector "rowViewAtRow:makeIfNecessary:") ~typ:(llong @-> bool @-> returning (id)) (LLong.of_int x) makeIfNecessary
let rowsInRect x self = msg_send_stret ~self ~cmd:(selector "rowsInRect:") ~typ:(CGRect.t @-> returning (NSRange.t)) ~return_type:NSRange.t x
let scrollColumnToVisible x self = msg_send ~self ~cmd:(selector "scrollColumnToVisible:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let scrollRowToVisible x self = msg_send ~self ~cmd:(selector "scrollRowToVisible:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let scrollToBeginningOfDocument x self = msg_send ~self ~cmd:(selector "scrollToBeginningOfDocument:") ~typ:(id @-> returning (void)) x
let scrollToEndOfDocument x self = msg_send ~self ~cmd:(selector "scrollToEndOfDocument:") ~typ:(id @-> returning (void)) x
let scrollWheel x self = msg_send ~self ~cmd:(selector "scrollWheel:") ~typ:(id @-> returning (void)) x
let selectAll x self = msg_send ~self ~cmd:(selector "selectAll:") ~typ:(id @-> returning (void)) x
let selectColumn x ~byExtendingSelection self = msg_send ~self ~cmd:(selector "selectColumn:byExtendingSelection:") ~typ:(llong @-> bool @-> returning (void)) (LLong.of_int x) byExtendingSelection
let selectColumnIndexes x ~byExtendingSelection self = msg_send ~self ~cmd:(selector "selectColumnIndexes:byExtendingSelection:") ~typ:(id @-> bool @-> returning (void)) x byExtendingSelection
let selectRow x ~byExtendingSelection self = msg_send ~self ~cmd:(selector "selectRow:byExtendingSelection:") ~typ:(llong @-> bool @-> returning (void)) (LLong.of_int x) byExtendingSelection
let selectRowIndexes x ~byExtendingSelection self = msg_send ~self ~cmd:(selector "selectRowIndexes:byExtendingSelection:") ~typ:(id @-> bool @-> returning (void)) x byExtendingSelection
let selectedCell self = msg_send ~self ~cmd:(selector "selectedCell") ~typ:(returning (id))
let selectedColumn self = msg_send ~self ~cmd:(selector "selectedColumn") ~typ:(returning (llong))
let selectedColumnEnumerator self = msg_send ~self ~cmd:(selector "selectedColumnEnumerator") ~typ:(returning (id))
let selectedColumnIndexes self = msg_send ~self ~cmd:(selector "selectedColumnIndexes") ~typ:(returning (id))
let selectedRow self = msg_send ~self ~cmd:(selector "selectedRow") ~typ:(returning (llong))
let selectedRowEnumerator self = msg_send ~self ~cmd:(selector "selectedRowEnumerator") ~typ:(returning (id))
let selectedRowIndexes self = msg_send ~self ~cmd:(selector "selectedRowIndexes") ~typ:(returning (id))
let selectionBlendingMode self = msg_send ~self ~cmd:(selector "selectionBlendingMode") ~typ:(returning (llong))
let selectionHighlightStyle self = msg_send ~self ~cmd:(selector "selectionHighlightStyle") ~typ:(returning (llong))
let selectionShouldUsePrimaryColor self = msg_send ~self ~cmd:(selector "selectionShouldUsePrimaryColor") ~typ:(returning (bool))
let setAllowsColumnReordering x self = msg_send ~self ~cmd:(selector "setAllowsColumnReordering:") ~typ:(bool @-> returning (void)) x
let setAllowsColumnResizing x self = msg_send ~self ~cmd:(selector "setAllowsColumnResizing:") ~typ:(bool @-> returning (void)) x
let setAllowsColumnSelection x self = msg_send ~self ~cmd:(selector "setAllowsColumnSelection:") ~typ:(bool @-> returning (void)) x
let setAllowsEmptySelection x self = msg_send ~self ~cmd:(selector "setAllowsEmptySelection:") ~typ:(bool @-> returning (void)) x
let setAllowsMultipleSelection x self = msg_send ~self ~cmd:(selector "setAllowsMultipleSelection:") ~typ:(bool @-> returning (void)) x
let setAllowsTypeSelect x self = msg_send ~self ~cmd:(selector "setAllowsTypeSelect:") ~typ:(bool @-> returning (void)) x
let setAnimationCompletionHandler x self = msg_send ~self ~cmd:(selector "setAnimationCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let setAutoresizesAllColumnsToFit x self = msg_send ~self ~cmd:(selector "setAutoresizesAllColumnsToFit:") ~typ:(bool @-> returning (void)) x
let setAutoresizingMask x self = msg_send ~self ~cmd:(selector "setAutoresizingMask:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setAutosaveName x self = msg_send ~self ~cmd:(selector "setAutosaveName:") ~typ:(id @-> returning (void)) x
let setAutosaveTableColumns x self = msg_send ~self ~cmd:(selector "setAutosaveTableColumns:") ~typ:(bool @-> returning (void)) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning (void)) x
let setColumnAutoresizingStyle x self = msg_send ~self ~cmd:(selector "setColumnAutoresizingStyle:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setCornerView x self = msg_send ~self ~cmd:(selector "setCornerView:") ~typ:(id @-> returning (void)) x
let setDataSource x self = msg_send ~self ~cmd:(selector "setDataSource:") ~typ:(id @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDoubleAction x self = msg_send ~self ~cmd:(selector "setDoubleAction:") ~typ:(_SEL @-> returning (void)) x
let setDraggedColumnView x self = msg_send ~self ~cmd:(selector "setDraggedColumnView:") ~typ:(id @-> returning (void)) x
let setDraggingDestinationFeedbackStyle x self = msg_send ~self ~cmd:(selector "setDraggingDestinationFeedbackStyle:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setDraggingSourceOperationMask x ~forLocal self = msg_send ~self ~cmd:(selector "setDraggingSourceOperationMask:forLocal:") ~typ:(ullong @-> bool @-> returning (void)) (ULLong.of_int x) forLocal
let setDrawsGrid x self = msg_send ~self ~cmd:(selector "setDrawsGrid:") ~typ:(bool @-> returning (void)) x
let setDropRow x ~dropOperation self = msg_send ~self ~cmd:(selector "setDropRow:dropOperation:") ~typ:(llong @-> ullong @-> returning (void)) (LLong.of_int x) (ULLong.of_int dropOperation)
let setEditing x self = msg_send ~self ~cmd:(selector "setEditing:") ~typ:(bool @-> returning (void)) x
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning (void)) x
let setFloatsGroupRows x self = msg_send ~self ~cmd:(selector "setFloatsGroupRows:") ~typ:(bool @-> returning (void)) x
let setFloatsHeaderView x self = msg_send ~self ~cmd:(selector "setFloatsHeaderView:") ~typ:(bool @-> returning (void)) x
let setFocusedColumn x self = msg_send ~self ~cmd:(selector "setFocusedColumn:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setFrameSize x self = msg_send ~self ~cmd:(selector "setFrameSize:") ~typ:(CGSize.t @-> returning (void)) x
let setGridColor x self = msg_send ~self ~cmd:(selector "setGridColor:") ~typ:(id @-> returning (void)) x
let setGridStyleMask x self = msg_send ~self ~cmd:(selector "setGridStyleMask:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setGroupRowStyle x self = msg_send ~self ~cmd:(selector "setGroupRowStyle:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setHeaderView x self = msg_send ~self ~cmd:(selector "setHeaderView:") ~typ:(id @-> returning (void)) x
let setHighlightedTableColumn x self = msg_send ~self ~cmd:(selector "setHighlightedTableColumn:") ~typ:(id @-> returning (void)) x
let setIndicatorImage x ~inTableColumn self = msg_send ~self ~cmd:(selector "setIndicatorImage:inTableColumn:") ~typ:(id @-> id @-> returning (void)) x inTableColumn
let setIntercellSpacing x self = msg_send ~self ~cmd:(selector "setIntercellSpacing:") ~typ:(CGSize.t @-> returning (void)) x
let setLastSelectedRow x self = msg_send ~self ~cmd:(selector "setLastSelectedRow:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setLayer x self = msg_send ~self ~cmd:(selector "setLayer:") ~typ:(id @-> returning (void)) x
let setRefusesFirstResponder x self = msg_send ~self ~cmd:(selector "setRefusesFirstResponder:") ~typ:(bool @-> returning (void)) x
let setReuseableViewNib x ~forIdentifier self = msg_send ~self ~cmd:(selector "setReuseableViewNib:forIdentifier:") ~typ:(id @-> id @-> returning (void)) x forIdentifier
let setReuseableViewNibName x ~forIdentifier self = msg_send ~self ~cmd:(selector "setReuseableViewNibName:forIdentifier:") ~typ:(id @-> id @-> returning (void)) x forIdentifier
let setRowActionsVisible x self = msg_send ~self ~cmd:(selector "setRowActionsVisible:") ~typ:(bool @-> returning (void)) x
let setRowHeight x self = msg_send ~self ~cmd:(selector "setRowHeight:") ~typ:(double @-> returning (void)) x
let setRowSizeStyle x self = msg_send ~self ~cmd:(selector "setRowSizeStyle:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setSelectionBlendingMode x self = msg_send ~self ~cmd:(selector "setSelectionBlendingMode:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setSelectionHighlightStyle x self = msg_send ~self ~cmd:(selector "setSelectionHighlightStyle:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setSortDescriptors x self = msg_send ~self ~cmd:(selector "setSortDescriptors:") ~typ:(id @-> returning (void)) x
let setStyle x self = msg_send ~self ~cmd:(selector "setStyle:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setToolTip x self = msg_send ~self ~cmd:(selector "setToolTip:") ~typ:(id @-> returning (void)) x
let setUserInterfaceLayoutDirection x self = msg_send ~self ~cmd:(selector "setUserInterfaceLayoutDirection:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setUsesAlternatingRowBackgroundColors x self = msg_send ~self ~cmd:(selector "setUsesAlternatingRowBackgroundColors:") ~typ:(bool @-> returning (void)) x
let setUsesAutomaticRowHeights x self = msg_send ~self ~cmd:(selector "setUsesAutomaticRowHeights:") ~typ:(bool @-> returning (void)) x
let setUsesStaticContents x self = msg_send ~self ~cmd:(selector "setUsesStaticContents:") ~typ:(bool @-> returning (void)) x
let setVerticalMotionCanBeginDrag x self = msg_send ~self ~cmd:(selector "setVerticalMotionCanBeginDrag:") ~typ:(bool @-> returning (void)) x
let setWantsFirstResponderOnMouseEvents x self = msg_send ~self ~cmd:(selector "setWantsFirstResponderOnMouseEvents:") ~typ:(bool @-> returning (void)) x
let shouldBeTreatedAsInkEvent x self = msg_send ~self ~cmd:(selector "shouldBeTreatedAsInkEvent:") ~typ:(id @-> returning (bool)) x
let shouldDelayWindowOrderingForEvent x self = msg_send ~self ~cmd:(selector "shouldDelayWindowOrderingForEvent:") ~typ:(id @-> returning (bool)) x
let shouldFocusCell x ~atColumn ~row self = msg_send ~self ~cmd:(selector "shouldFocusCell:atColumn:row:") ~typ:(id @-> llong @-> llong @-> returning (bool)) x (LLong.of_int atColumn) (LLong.of_int row)
let shouldUseViews self = msg_send ~self ~cmd:(selector "shouldUseViews") ~typ:(returning (bool))
let sizeLastColumnToFit self = msg_send ~self ~cmd:(selector "sizeLastColumnToFit") ~typ:(returning (void))
let sizeToFit self = msg_send ~self ~cmd:(selector "sizeToFit") ~typ:(returning (void))
let sortDescriptors self = msg_send ~self ~cmd:(selector "sortDescriptors") ~typ:(returning (id))
let style self = msg_send ~self ~cmd:(selector "style") ~typ:(returning (llong))
let superviewFrameChanged x self = msg_send ~self ~cmd:(selector "superviewFrameChanged:") ~typ:(id @-> returning (void)) x
let tableColumnWithIdentifier x self = msg_send ~self ~cmd:(selector "tableColumnWithIdentifier:") ~typ:(id @-> returning (id)) x
let tableColumns self = msg_send ~self ~cmd:(selector "tableColumns") ~typ:(returning (id))
let textDidBeginEditing x self = msg_send ~self ~cmd:(selector "textDidBeginEditing:") ~typ:(id @-> returning (void)) x
let textDidChange x self = msg_send ~self ~cmd:(selector "textDidChange:") ~typ:(id @-> returning (void)) x
let textDidEndEditing x self = msg_send ~self ~cmd:(selector "textDidEndEditing:") ~typ:(id @-> returning (void)) x
let textShouldBeginEditing x self = msg_send ~self ~cmd:(selector "textShouldBeginEditing:") ~typ:(id @-> returning (bool)) x
let textShouldEndEditing x self = msg_send ~self ~cmd:(selector "textShouldEndEditing:") ~typ:(id @-> returning (bool)) x
let textView x ~doCommandBySelector self = msg_send ~self ~cmd:(selector "textView:doCommandBySelector:") ~typ:(id @-> _SEL @-> returning (bool)) x doCommandBySelector
let textView1 x ~shouldChangeTextInRange ~replacementString self = msg_send ~self ~cmd:(selector "textView:shouldChangeTextInRange:replacementString:") ~typ:(id @-> NSRange.t @-> id @-> returning (bool)) x shouldChangeTextInRange replacementString
let textView2 x ~completions ~forPartialWordRange ~indexOfSelectedItem self = msg_send ~self ~cmd:(selector "textView:completions:forPartialWordRange:indexOfSelectedItem:") ~typ:(id @-> id @-> NSRange.t @-> ptr (llong) @-> returning (id)) x completions forPartialWordRange indexOfSelectedItem
let tile self = msg_send ~self ~cmd:(selector "tile") ~typ:(returning (void))
let unhideRowsAtIndexes x ~withAnimation self = msg_send ~self ~cmd:(selector "unhideRowsAtIndexes:withAnimation:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int withAnimation)
let updateCell x self = msg_send ~self ~cmd:(selector "updateCell:") ~typ:(id @-> returning (void)) x
let updateCellInside x self = msg_send ~self ~cmd:(selector "updateCellInside:") ~typ:(id @-> returning (void)) x
let updateDraggingItemsForDrag x self = msg_send ~self ~cmd:(selector "updateDraggingItemsForDrag:") ~typ:(id @-> returning (void)) x
let updateLayer self = msg_send ~self ~cmd:(selector "updateLayer") ~typ:(returning (void))
let updateTrackingAreas self = msg_send ~self ~cmd:(selector "updateTrackingAreas") ~typ:(returning (void))
let userInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "userInterfaceLayoutDirection") ~typ:(returning (llong))
let usesAlternatingRowBackgroundColors self = msg_send ~self ~cmd:(selector "usesAlternatingRowBackgroundColors") ~typ:(returning (bool))
let usesAutomaticRowHeights self = msg_send ~self ~cmd:(selector "usesAutomaticRowHeights") ~typ:(returning (bool))
let usesStaticContents self = msg_send ~self ~cmd:(selector "usesStaticContents") ~typ:(returning (bool))
let validateProposedFirstResponder x ~forEvent self = msg_send ~self ~cmd:(selector "validateProposedFirstResponder:forEvent:") ~typ:(id @-> id @-> returning (bool)) x forEvent
let validateUserInterfaceItem x self = msg_send ~self ~cmd:(selector "validateUserInterfaceItem:") ~typ:(id @-> returning (bool)) x
let verticalMotionCanBeginDrag self = msg_send ~self ~cmd:(selector "verticalMotionCanBeginDrag") ~typ:(returning (bool))
let viewAtColumn x ~row ~makeIfNecessary self = msg_send ~self ~cmd:(selector "viewAtColumn:row:makeIfNecessary:") ~typ:(llong @-> llong @-> bool @-> returning (id)) (LLong.of_int x) (LLong.of_int row) makeIfNecessary
let viewDidChangeEffectiveAppearance self = msg_send ~self ~cmd:(selector "viewDidChangeEffectiveAppearance") ~typ:(returning (void))
let viewDidEndLiveResize self = msg_send ~self ~cmd:(selector "viewDidEndLiveResize") ~typ:(returning (void))
let viewDidMoveToSuperview self = msg_send ~self ~cmd:(selector "viewDidMoveToSuperview") ~typ:(returning (void))
let viewWillDraw self = msg_send ~self ~cmd:(selector "viewWillDraw") ~typ:(returning (void))
let viewWillMoveToSuperview x self = msg_send ~self ~cmd:(selector "viewWillMoveToSuperview:") ~typ:(id @-> returning (void)) x
let viewWillStartLiveResize self = msg_send ~self ~cmd:(selector "viewWillStartLiveResize") ~typ:(returning (void))
let wantsFirstResponderOnMouseEvents self = msg_send ~self ~cmd:(selector "wantsFirstResponderOnMouseEvents") ~typ:(returning (bool))
let wantsScrollEventsForSwipeTrackingOnAxis x self = msg_send ~self ~cmd:(selector "wantsScrollEventsForSwipeTrackingOnAxis:") ~typ:(llong @-> returning (bool)) (LLong.of_int x)
let wantsUpdateLayer self = msg_send ~self ~cmd:(selector "wantsUpdateLayer") ~typ:(returning (bool))
let willOpenMenu x ~withEvent self = msg_send ~self ~cmd:(selector "willOpenMenu:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent