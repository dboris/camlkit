(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "NSWindow"

module Class = struct
  let allowsAutomaticWindowTabbing self = msg_send ~self ~cmd:(selector "allowsAutomaticWindowTabbing") ~typ:(returning (bool))
  let automaticallyNotifiesObserversForKey x self = msg_send ~self ~cmd:(selector "automaticallyNotifiesObserversForKey:") ~typ:(id @-> returning (bool)) x
  let automaticallyNotifiesObserversOfAppearance self = msg_send ~self ~cmd:(selector "automaticallyNotifiesObserversOfAppearance") ~typ:(returning (bool))
  let canBeResizedFromInterior self = msg_send ~self ~cmd:(selector "canBeResizedFromInterior") ~typ:(returning (bool))
  let contentRectForFrameRect x ~styleMask self = msg_send_stret ~self ~cmd:(selector "contentRectForFrameRect:styleMask:") ~typ:(CGRect.t @-> ullong @-> returning (CGRect.t)) ~return_type:CGRect.t x styleMask
  let coreUIRenderer self = msg_send ~self ~cmd:(selector "coreUIRenderer") ~typ:(returning (ptr void))
  let defaultAnimationForKey x self = msg_send ~self ~cmd:(selector "defaultAnimationForKey:") ~typ:(id @-> returning (id)) x
  let defaultAnimationForKeyPath x self = msg_send ~self ~cmd:(selector "defaultAnimationForKeyPath:") ~typ:(id @-> returning (id)) x
  let defaultDepthLimit self = msg_send ~self ~cmd:(selector "defaultDepthLimit") ~typ:(returning (int))
  let frameRectForContentRect x ~styleMask self = msg_send_stret ~self ~cmd:(selector "frameRectForContentRect:styleMask:") ~typ:(CGRect.t @-> ullong @-> returning (CGRect.t)) ~return_type:CGRect.t x styleMask
  let frameViewClassForStyleMask x self = msg_send ~self ~cmd:(selector "frameViewClassForStyleMask:") ~typ:(ullong @-> returning (_Class)) x
  let initialize self = msg_send ~self ~cmd:(selector "initialize") ~typ:(returning (void))
  let keyPathsForValuesAffectingAppearance self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingAppearance") ~typ:(returning (id))
  let keyPathsForValuesAffectingContentLayoutRect self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingContentLayoutRect") ~typ:(returning (id))
  let keyPathsForValuesAffectingEffectiveAppearance self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingEffectiveAppearance") ~typ:(returning (id))
  let keyPathsForValuesAffectingTitlebarBlendingMode self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingTitlebarBlendingMode") ~typ:(returning (id))
  let keyPathsForValuesAffectingUndoManager self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingUndoManager") ~typ:(returning (id))
  let minContentSizeForMinFrameSize x ~styleMask self = msg_send_stret ~self ~cmd:(selector "minContentSizeForMinFrameSize:styleMask:") ~typ:(CGSize.t @-> ullong @-> returning (CGSize.t)) ~return_type:CGSize.t x styleMask
  let minFrameSizeForMinContentSize x ~styleMask self = msg_send_stret ~self ~cmd:(selector "minFrameSizeForMinContentSize:styleMask:") ~typ:(CGSize.t @-> ullong @-> returning (CGSize.t)) ~return_type:CGSize.t x styleMask
  let minFrameWidthWithTitle x ~styleMask self = msg_send ~self ~cmd:(selector "minFrameWidthWithTitle:styleMask:") ~typ:(id @-> ullong @-> returning (double)) x styleMask
  let removeFrameUsingName x self = msg_send ~self ~cmd:(selector "removeFrameUsingName:") ~typ:(id @-> returning (void)) x
  let setAllowsAutomaticWindowTabbing x self = msg_send ~self ~cmd:(selector "setAllowsAutomaticWindowTabbing:") ~typ:(bool @-> returning (void)) x
  let setUserTabbingPreference x self = msg_send ~self ~cmd:(selector "setUserTabbingPreference:") ~typ:(llong @-> returning (void)) x
  let shouldPreferWindowTabbingForEvent x self = msg_send ~self ~cmd:(selector "shouldPreferWindowTabbingForEvent:") ~typ:(id @-> returning (bool)) x
  let shouldPreferWindowTabbingForEvent' x ~withIdentifier self = msg_send ~self ~cmd:(selector "shouldPreferWindowTabbingForEvent:withIdentifier:") ~typ:(id @-> id @-> returning (bool)) x withIdentifier
  let standardContentBorderThicknessForEdge x ~borderSize ~styleMask self = msg_send ~self ~cmd:(selector "standardContentBorderThicknessForEdge:borderSize:styleMask:") ~typ:(ullong @-> ullong @-> ullong @-> returning (double)) x borderSize styleMask
  let standardWindowButton x ~forStyleMask self = msg_send ~self ~cmd:(selector "standardWindowButton:forStyleMask:") ~typ:(ullong @-> ullong @-> returning (id)) x forStyleMask
  let userTabbingPreference self = msg_send ~self ~cmd:(selector "userTabbingPreference") ~typ:(returning (llong))
  let windowNumberAtPoint x ~belowWindowWithWindowNumber self = msg_send ~self ~cmd:(selector "windowNumberAtPoint:belowWindowWithWindowNumber:") ~typ:(CGPoint.t @-> llong @-> returning (llong)) x belowWindowWithWindowNumber
  let windowNumbersWithOptions x self = msg_send ~self ~cmd:(selector "windowNumbersWithOptions:") ~typ:(ullong @-> returning (id)) x
  let windowWithContentViewController x self = msg_send ~self ~cmd:(selector "windowWithContentViewController:") ~typ:(id @-> returning (id)) x
end

let _GDBDumpCursorRects self = msg_send ~self ~cmd:(selector "GDBDumpCursorRects") ~typ:(returning (void))
let acceptsMouseMovedEvents self = msg_send ~self ~cmd:(selector "acceptsMouseMovedEvents") ~typ:(returning (bool))
let accessibilityActionDescription x self = msg_send ~self ~cmd:(selector "accessibilityActionDescription:") ~typ:(id @-> returning (id)) x
let accessibilityActionNames self = msg_send ~self ~cmd:(selector "accessibilityActionNames") ~typ:(returning (id))
let accessibilityActivationPointAttribute self = msg_send ~self ~cmd:(selector "accessibilityActivationPointAttribute") ~typ:(returning (id))
let accessibilityAddDeferredNotification x self = msg_send ~self ~cmd:(selector "accessibilityAddDeferredNotification:") ~typ:(id @-> returning (void)) x
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning (id))
let accessibilityAttributeValue x self = msg_send ~self ~cmd:(selector "accessibilityAttributeValue:") ~typ:(id @-> returning (id)) x
let accessibilityAuditIssuesAttribute self = msg_send ~self ~cmd:(selector "accessibilityAuditIssuesAttribute") ~typ:(returning (id))
let accessibilityCancelButtonAttribute self = msg_send ~self ~cmd:(selector "accessibilityCancelButtonAttribute") ~typ:(returning (id))
let accessibilityChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenAttribute") ~typ:(returning (id))
let accessibilityChildrenInNavigationOrderAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenInNavigationOrderAttribute") ~typ:(returning (id))
let accessibilityCloseButtonAttribute self = msg_send ~self ~cmd:(selector "accessibilityCloseButtonAttribute") ~typ:(returning (id))
let accessibilityDefaultButtonAttribute self = msg_send ~self ~cmd:(selector "accessibilityDefaultButtonAttribute") ~typ:(returning (id))
let accessibilityDocumentAttribute self = msg_send ~self ~cmd:(selector "accessibilityDocumentAttribute") ~typ:(returning (id))
let accessibilityFocusRingBounds self = msg_send_stret ~self ~cmd:(selector "accessibilityFocusRingBounds") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let accessibilityFocusedAttribute self = msg_send ~self ~cmd:(selector "accessibilityFocusedAttribute") ~typ:(returning (id))
let accessibilityFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityFocusedUIElement") ~typ:(returning (id))
let accessibilityFrame self = msg_send_stret ~self ~cmd:(selector "accessibilityFrame") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let accessibilityFullScreenAttribute self = msg_send ~self ~cmd:(selector "accessibilityFullScreenAttribute") ~typ:(returning (id))
let accessibilityFullScreenButtonAttribute self = msg_send ~self ~cmd:(selector "accessibilityFullScreenButtonAttribute") ~typ:(returning (id))
let accessibilityHelpStringForChild x self = msg_send ~self ~cmd:(selector "accessibilityHelpStringForChild:") ~typ:(id @-> returning (id)) x
let accessibilityHitTest x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let accessibilityIsAttributeSettable x self = msg_send ~self ~cmd:(selector "accessibilityIsAttributeSettable:") ~typ:(id @-> returning (bool)) x
let accessibilityIsCancelButtonAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsCancelButtonAttributeSettable") ~typ:(returning (bool))
let accessibilityIsChildFocusable x self = msg_send ~self ~cmd:(selector "accessibilityIsChildFocusable:") ~typ:(id @-> returning (bool)) x
let accessibilityIsChildOfApp self = msg_send ~self ~cmd:(selector "accessibilityIsChildOfApp") ~typ:(returning (bool))
let accessibilityIsChildrenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsChildrenAttributeSettable") ~typ:(returning (bool))
let accessibilityIsCloseButtonAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsCloseButtonAttributeSettable") ~typ:(returning (bool))
let accessibilityIsDefaultButtonAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsDefaultButtonAttributeSettable") ~typ:(returning (bool))
let accessibilityIsDocumentAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsDocumentAttributeSettable") ~typ:(returning (bool))
let accessibilityIsFocusedAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFocusedAttributeSettable") ~typ:(returning (bool))
let accessibilityIsFullScreenAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFullScreenAttributeSettable") ~typ:(returning (bool))
let accessibilityIsFullScreenButtonAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsFullScreenButtonAttributeSettable") ~typ:(returning (bool))
let accessibilityIsGrowAreaAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsGrowAreaAttributeSettable") ~typ:(returning (bool))
let accessibilityIsIgnored self = msg_send ~self ~cmd:(selector "accessibilityIsIgnored") ~typ:(returning (bool))
let accessibilityIsMainAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsMainAttributeSettable") ~typ:(returning (bool))
let accessibilityIsMinimizeButtonAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsMinimizeButtonAttributeSettable") ~typ:(returning (bool))
let accessibilityIsMinimizedAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsMinimizedAttributeSettable") ~typ:(returning (bool))
let accessibilityIsModalAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsModalAttributeSettable") ~typ:(returning (bool))
let accessibilityIsParentAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsParentAttributeSettable") ~typ:(returning (bool))
let accessibilityIsPositionAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsPositionAttributeSettable") ~typ:(returning (bool))
let accessibilityIsProxyAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsProxyAttributeSettable") ~typ:(returning (bool))
let accessibilityIsRoleAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRoleAttributeSettable") ~typ:(returning (bool))
let accessibilityIsRoleDescriptionAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsRoleDescriptionAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSectionsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSectionsAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSizeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSizeAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSubroleAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSubroleAttributeSettable") ~typ:(returning (bool))
let accessibilityIsTitleAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsTitleAttributeSettable") ~typ:(returning (bool))
let accessibilityIsTitleUIElementAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsTitleUIElementAttributeSettable") ~typ:(returning (bool))
let accessibilityIsToolbarButtonAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsToolbarButtonAttributeSettable") ~typ:(returning (bool))
let accessibilityIsWindowAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsWindowAttributeSettable") ~typ:(returning (bool))
let accessibilityIsZoomButtonAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsZoomButtonAttributeSettable") ~typ:(returning (bool))
let accessibilityMainAttribute self = msg_send ~self ~cmd:(selector "accessibilityMainAttribute") ~typ:(returning (id))
let accessibilityMinimizeButtonAttribute self = msg_send ~self ~cmd:(selector "accessibilityMinimizeButtonAttribute") ~typ:(returning (id))
let accessibilityMinimizedAttribute self = msg_send ~self ~cmd:(selector "accessibilityMinimizedAttribute") ~typ:(returning (id))
let accessibilityModalAttribute self = msg_send ~self ~cmd:(selector "accessibilityModalAttribute") ~typ:(returning (id))
let accessibilityParent self = msg_send ~self ~cmd:(selector "accessibilityParent") ~typ:(returning (id))
let accessibilityParentAttribute self = msg_send ~self ~cmd:(selector "accessibilityParentAttribute") ~typ:(returning (id))
let accessibilityPerformAction x self = msg_send ~self ~cmd:(selector "accessibilityPerformAction:") ~typ:(id @-> returning (void)) x
let accessibilityPositionAttribute self = msg_send ~self ~cmd:(selector "accessibilityPositionAttribute") ~typ:(returning (id))
let accessibilityPositionOfChild x self = msg_send ~self ~cmd:(selector "accessibilityPositionOfChild:") ~typ:(id @-> returning (id)) x
let accessibilityPostNotification x self = msg_send ~self ~cmd:(selector "accessibilityPostNotification:") ~typ:(id @-> returning (void)) x
let accessibilityProxyAttribute self = msg_send ~self ~cmd:(selector "accessibilityProxyAttribute") ~typ:(returning (id))
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning (id))
let accessibilityRoleDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleDescriptionAttribute") ~typ:(returning (id))
let accessibilitySectionsAttribute self = msg_send ~self ~cmd:(selector "accessibilitySectionsAttribute") ~typ:(returning (id))
let accessibilitySendDeferredNotifications self = msg_send ~self ~cmd:(selector "accessibilitySendDeferredNotifications") ~typ:(returning (void))
let accessibilitySetFullScreenAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetFullScreenAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetMainAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetMainAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetMinimizedAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetMinimizedAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetPositionAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetPositionAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetSizeAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSizeAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetValue x ~forAttribute self = msg_send ~self ~cmd:(selector "accessibilitySetValue:forAttribute:") ~typ:(id @-> id @-> returning (void)) x forAttribute
let accessibilityShouldUseUniqueId self = msg_send ~self ~cmd:(selector "accessibilityShouldUseUniqueId") ~typ:(returning (bool))
let accessibilitySizeAttribute self = msg_send ~self ~cmd:(selector "accessibilitySizeAttribute") ~typ:(returning (id))
let accessibilitySizeOfChild x self = msg_send ~self ~cmd:(selector "accessibilitySizeOfChild:") ~typ:(id @-> returning (id)) x
let accessibilitySubroleAttribute self = msg_send ~self ~cmd:(selector "accessibilitySubroleAttribute") ~typ:(returning (id))
let accessibilitySubtitleUIElementAttribute self = msg_send ~self ~cmd:(selector "accessibilitySubtitleUIElementAttribute") ~typ:(returning (id))
let accessibilitySupportsOverriddenAttributes self = msg_send ~self ~cmd:(selector "accessibilitySupportsOverriddenAttributes") ~typ:(returning (bool))
let accessibilityTitleAttribute self = msg_send ~self ~cmd:(selector "accessibilityTitleAttribute") ~typ:(returning (id))
let accessibilityTitleUIElementAttribute self = msg_send ~self ~cmd:(selector "accessibilityTitleUIElementAttribute") ~typ:(returning (id))
let accessibilityToolbarButtonAttribute self = msg_send ~self ~cmd:(selector "accessibilityToolbarButtonAttribute") ~typ:(returning (id))
let accessibilityTopLevelUIElementAttributeValueHelper self = msg_send ~self ~cmd:(selector "accessibilityTopLevelUIElementAttributeValueHelper") ~typ:(returning (id))
let accessibilityVisibleArea self = msg_send ~self ~cmd:(selector "accessibilityVisibleArea") ~typ:(returning (double))
let accessibilityWindowAttribute self = msg_send ~self ~cmd:(selector "accessibilityWindowAttribute") ~typ:(returning (id))
let accessibilityWindowAttributeValueHelper self = msg_send ~self ~cmd:(selector "accessibilityWindowAttributeValueHelper") ~typ:(returning (id))
let accessibilityWindowNumber self = msg_send ~self ~cmd:(selector "accessibilityWindowNumber") ~typ:(returning (llong))
let accessibilityZoomButtonAttribute self = msg_send ~self ~cmd:(selector "accessibilityZoomButtonAttribute") ~typ:(returning (id))
let acquireKeyAppearance self = msg_send ~self ~cmd:(selector "acquireKeyAppearance") ~typ:(returning (void))
let acquireMainAppearance self = msg_send ~self ~cmd:(selector "acquireMainAppearance") ~typ:(returning (void))
let addChildWindow x ~ordered self = msg_send ~self ~cmd:(selector "addChildWindow:ordered:") ~typ:(id @-> llong @-> returning (void)) x ordered
let addChildWindow' x ~ordered ~shareKey self = msg_send ~self ~cmd:(selector "addChildWindow:ordered:shareKey:") ~typ:(id @-> llong @-> bool @-> returning (void)) x ordered shareKey
let addDocumentIconButton self = msg_send ~self ~cmd:(selector "addDocumentIconButton") ~typ:(returning (void))
let addObserver x ~forKeyPath ~options ~context self = msg_send ~self ~cmd:(selector "addObserver:forKeyPath:options:context:") ~typ:(id @-> id @-> ullong @-> ptr (void) @-> returning (void)) x forKeyPath options context
let addTabbedWindow x ~ordered self = msg_send ~self ~cmd:(selector "addTabbedWindow:ordered:") ~typ:(id @-> llong @-> returning (void)) x ordered
let addTitlebarAccessoryViewController x self = msg_send ~self ~cmd:(selector "addTitlebarAccessoryViewController:") ~typ:(id @-> returning (void)) x
let addUnderTitlebarView x ~withAssociatedWithView self = msg_send ~self ~cmd:(selector "addUnderTitlebarView:withAssociatedWithView:") ~typ:(id @-> id @-> returning (void)) x withAssociatedWithView
let adjustLayoutForResolutionChangeToRetina x self = msg_send ~self ~cmd:(selector "adjustLayoutForResolutionChangeToRetina:") ~typ:(bool @-> returning (void)) x
let allowsConcurrentViewDrawing self = msg_send ~self ~cmd:(selector "allowsConcurrentViewDrawing") ~typ:(returning (bool))
let allowsCursorRectsWhenInactive self = msg_send ~self ~cmd:(selector "allowsCursorRectsWhenInactive") ~typ:(returning (bool))
let allowsInteriorShadow self = msg_send ~self ~cmd:(selector "allowsInteriorShadow") ~typ:(returning (bool))
let allowsToolTipsWhenApplicationIsInactive self = msg_send ~self ~cmd:(selector "allowsToolTipsWhenApplicationIsInactive") ~typ:(returning (bool))
let alphaValue self = msg_send ~self ~cmd:(selector "alphaValue") ~typ:(returning (double))
let anchorAttributeForOrientation x self = msg_send ~self ~cmd:(selector "anchorAttributeForOrientation:") ~typ:(llong @-> returning (llong)) x
let anchorItemForOrientation x self = msg_send ~self ~cmd:(selector "anchorItemForOrientation:") ~typ:(llong @-> returning (id)) x
let animationBehavior self = msg_send ~self ~cmd:(selector "animationBehavior") ~typ:(returning (llong))
let animationForKey x self = msg_send ~self ~cmd:(selector "animationForKey:") ~typ:(id @-> returning (id)) x
let animationForKeyPath x self = msg_send ~self ~cmd:(selector "animationForKeyPath:") ~typ:(id @-> returning (id)) x
let animationResizeTime x self = msg_send ~self ~cmd:(selector "animationResizeTime:") ~typ:(CGRect.t @-> returning (double)) x
let animations self = msg_send ~self ~cmd:(selector "animations") ~typ:(returning (id))
let animator self = msg_send ~self ~cmd:(selector "animator") ~typ:(returning (id))
let appearance self = msg_send ~self ~cmd:(selector "appearance") ~typ:(returning (id))
let appearanceParent self = msg_send ~self ~cmd:(selector "appearanceParent") ~typ:(returning (id))
let appearanceSource self = msg_send ~self ~cmd:(selector "appearanceSource") ~typ:(returning (id))
let areCursorRectsEnabled self = msg_send ~self ~cmd:(selector "areCursorRectsEnabled") ~typ:(returning (bool))
let aspectRatio self = msg_send_stret ~self ~cmd:(selector "aspectRatio") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let attachedSheet self = msg_send ~self ~cmd:(selector "attachedSheet") ~typ:(returning (id))
let autofill self = msg_send ~self ~cmd:(selector "autofill") ~typ:(returning (bool))
let autofillColor self = msg_send ~self ~cmd:(selector "autofillColor") ~typ:(returning (id))
let autorecalculatesContentBorderThicknessForEdge x self = msg_send ~self ~cmd:(selector "autorecalculatesContentBorderThicknessForEdge:") ~typ:(ullong @-> returning (bool)) x
let autorecalculatesKeyViewLoop self = msg_send ~self ~cmd:(selector "autorecalculatesKeyViewLoop") ~typ:(returning (bool))
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning (id))
let backingAlignedRect x ~options self = msg_send_stret ~self ~cmd:(selector "backingAlignedRect:options:") ~typ:(CGRect.t @-> ullong @-> returning (CGRect.t)) ~return_type:CGRect.t x options
let backingLocation self = msg_send ~self ~cmd:(selector "backingLocation") ~typ:(returning (ullong))
let backingScaleFactor self = msg_send ~self ~cmd:(selector "backingScaleFactor") ~typ:(returning (double))
let backingType self = msg_send ~self ~cmd:(selector "backingType") ~typ:(returning (ullong))
let becomeKeyWindow self = msg_send ~self ~cmd:(selector "becomeKeyWindow") ~typ:(returning (void))
let becomeMainWindow self = msg_send ~self ~cmd:(selector "becomeMainWindow") ~typ:(returning (void))
let becomesKeyOnlyIfNeeded self = msg_send ~self ~cmd:(selector "becomesKeyOnlyIfNeeded") ~typ:(returning (bool))
let beginCriticalSheet x ~completionHandler self = msg_send ~self ~cmd:(selector "beginCriticalSheet:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let beginSheet x ~completionHandler self = msg_send ~self ~cmd:(selector "beginSheet:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let bottomCornerRounded self = msg_send ~self ~cmd:(selector "bottomCornerRounded") ~typ:(returning (bool))
let boundsAsQDRect self = msg_send ~self ~cmd:(selector "boundsAsQDRect") ~typ:(returning (id))
let cacheImageInRect x self = msg_send ~self ~cmd:(selector "cacheImageInRect:") ~typ:(CGRect.t @-> returning (void)) x
let cacheMiniwindowTitle x ~guess self = msg_send ~self ~cmd:(selector "cacheMiniwindowTitle:guess:") ~typ:(id @-> bool @-> returning (void)) x guess
let canBeVisibleOnAllSpaces self = msg_send ~self ~cmd:(selector "canBeVisibleOnAllSpaces") ~typ:(returning (bool))
let canBecomeKeyWindow self = msg_send ~self ~cmd:(selector "canBecomeKeyWindow") ~typ:(returning (bool))
let canBecomeMainWindow self = msg_send ~self ~cmd:(selector "canBecomeMainWindow") ~typ:(returning (bool))
let canBecomeVisibleWithoutLogin self = msg_send ~self ~cmd:(selector "canBecomeVisibleWithoutLogin") ~typ:(returning (bool))
let canEnterFullScreenMode self = msg_send ~self ~cmd:(selector "canEnterFullScreenMode") ~typ:(returning (bool))
let canHide self = msg_send ~self ~cmd:(selector "canHide") ~typ:(returning (bool))
let canHostLayersInWindowServer self = msg_send ~self ~cmd:(selector "canHostLayersInWindowServer") ~typ:(returning (bool))
let canMoveToCurrentSpaceOnScreen x self = msg_send ~self ~cmd:(selector "canMoveToCurrentSpaceOnScreen:") ~typ:(id @-> returning (bool)) x
let canRepresentDisplayGamut x self = msg_send ~self ~cmd:(selector "canRepresentDisplayGamut:") ~typ:(llong @-> returning (bool)) x
let canStoreColor self = msg_send ~self ~cmd:(selector "canStoreColor") ~typ:(returning (bool))
let cancelOperation x self = msg_send ~self ~cmd:(selector "cancelOperation:") ~typ:(id @-> returning (void)) x
let cascadeTopLeftFromPoint x self = msg_send_stret ~self ~cmd:(selector "cascadeTopLeftFromPoint:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let center self = msg_send ~self ~cmd:(selector "center") ~typ:(returning (void))
let changeToolBarDisplayModeToDisplayMode x self = msg_send ~self ~cmd:(selector "changeToolBarDisplayModeToDisplayMode:") ~typ:(ullong @-> returning (void)) x
let changeToolbarDisplayMode x self = msg_send ~self ~cmd:(selector "changeToolbarDisplayMode:") ~typ:(id @-> returning (void)) x
let changeToolbarDisplayModeToNumber x self = msg_send ~self ~cmd:(selector "changeToolbarDisplayModeToNumber:") ~typ:(id @-> returning (void)) x
let childWindows self = msg_send ~self ~cmd:(selector "childWindows") ~typ:(returning (id))
let close self = msg_send ~self ~cmd:(selector "close") ~typ:(returning (void))
let collectionBehavior self = msg_send ~self ~cmd:(selector "collectionBehavior") ~typ:(returning (ullong))
let colorSpace self = msg_send ~self ~cmd:(selector "colorSpace") ~typ:(returning (id))
let concludeDragOperation x self = msg_send ~self ~cmd:(selector "concludeDragOperation:") ~typ:(id @-> returning (void)) x
let constrainFrameRect x ~toScreen self = msg_send_stret ~self ~cmd:(selector "constrainFrameRect:toScreen:") ~typ:(CGRect.t @-> id @-> returning (CGRect.t)) ~return_type:CGRect.t x toScreen
let constraintsDidChangeInEngine x self = msg_send ~self ~cmd:(selector "constraintsDidChangeInEngine:") ~typ:(id @-> returning (void)) x
let contentAspectRatio self = msg_send_stret ~self ~cmd:(selector "contentAspectRatio") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let contentBorderThicknessForEdge x self = msg_send ~self ~cmd:(selector "contentBorderThicknessForEdge:") ~typ:(ullong @-> returning (double)) x
let contentInsetColor self = msg_send ~self ~cmd:(selector "contentInsetColor") ~typ:(returning (id))
let contentLayoutGuide self = msg_send ~self ~cmd:(selector "contentLayoutGuide") ~typ:(returning (id))
let contentLayoutRect self = msg_send_stret ~self ~cmd:(selector "contentLayoutRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let contentMaxSize self = msg_send_stret ~self ~cmd:(selector "contentMaxSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let contentMinSize self = msg_send_stret ~self ~cmd:(selector "contentMinSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let contentRectForFrameRect x self = msg_send_stret ~self ~cmd:(selector "contentRectForFrameRect:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let contentRectForFrameRect' x ~styleMask self = msg_send_stret ~self ~cmd:(selector "contentRectForFrameRect:styleMask:") ~typ:(CGRect.t @-> ullong @-> returning (CGRect.t)) ~return_type:CGRect.t x styleMask
let contentResizeIncrements self = msg_send_stret ~self ~cmd:(selector "contentResizeIncrements") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let contentSeparatorColor self = msg_send ~self ~cmd:(selector "contentSeparatorColor") ~typ:(returning (id))
let contentTitlebarSeparatorStyle self = msg_send ~self ~cmd:(selector "contentTitlebarSeparatorStyle") ~typ:(returning (llong))
let contentView self = msg_send ~self ~cmd:(selector "contentView") ~typ:(returning (id))
let contentViewController self = msg_send ~self ~cmd:(selector "contentViewController") ~typ:(returning (id))
let convertBaseToScreen x self = msg_send_stret ~self ~cmd:(selector "convertBaseToScreen:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let convertPointFromBacking x self = msg_send_stret ~self ~cmd:(selector "convertPointFromBacking:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let convertPointFromScreen x self = msg_send_stret ~self ~cmd:(selector "convertPointFromScreen:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let convertPointToBacking x self = msg_send_stret ~self ~cmd:(selector "convertPointToBacking:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let convertPointToScreen x self = msg_send_stret ~self ~cmd:(selector "convertPointToScreen:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let convertRectFromBacking x self = msg_send_stret ~self ~cmd:(selector "convertRectFromBacking:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertRectFromScreen x self = msg_send_stret ~self ~cmd:(selector "convertRectFromScreen:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertRectToBacking x self = msg_send_stret ~self ~cmd:(selector "convertRectToBacking:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertRectToScreen x self = msg_send_stret ~self ~cmd:(selector "convertRectToScreen:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let convertScreenToBase x self = msg_send_stret ~self ~cmd:(selector "convertScreenToBase:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let currentEvent self = msg_send ~self ~cmd:(selector "currentEvent") ~typ:(returning (id))
let cursorUpdate x self = msg_send ~self ~cmd:(selector "cursorUpdate:") ~typ:(id @-> returning (void)) x
let dataWithEPSInsideRect x self = msg_send ~self ~cmd:(selector "dataWithEPSInsideRect:") ~typ:(CGRect.t @-> returning (id)) x
let dataWithPDFInsideRect x self = msg_send ~self ~cmd:(selector "dataWithPDFInsideRect:") ~typ:(CGRect.t @-> returning (id)) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let deepestScreen self = msg_send ~self ~cmd:(selector "deepestScreen") ~typ:(returning (id))
let defaultButtonCell self = msg_send ~self ~cmd:(selector "defaultButtonCell") ~typ:(returning (id))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let deminiaturize x self = msg_send ~self ~cmd:(selector "deminiaturize:") ~typ:(id @-> returning (void)) x
let depthLimit self = msg_send ~self ~cmd:(selector "depthLimit") ~typ:(returning (int))
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let deviceDescription self = msg_send ~self ~cmd:(selector "deviceDescription") ~typ:(returning (id))
let disableCursorRects self = msg_send ~self ~cmd:(selector "disableCursorRects") ~typ:(returning (void))
let disableFlushWindow self = msg_send ~self ~cmd:(selector "disableFlushWindow") ~typ:(returning (void))
let disableKeyEquivalentForDefaultButtonCell self = msg_send ~self ~cmd:(selector "disableKeyEquivalentForDefaultButtonCell") ~typ:(returning (void))
let disableScreenUpdatesUntilFlush self = msg_send ~self ~cmd:(selector "disableScreenUpdatesUntilFlush") ~typ:(returning (void))
let disableSnapshotRestoration self = msg_send ~self ~cmd:(selector "disableSnapshotRestoration") ~typ:(returning (void))
let discardCachedImage self = msg_send ~self ~cmd:(selector "discardCachedImage") ~typ:(returning (void))
let discardCursorRects self = msg_send ~self ~cmd:(selector "discardCursorRects") ~typ:(returning (void))
let discardEventsMatchingMask x ~beforeEvent self = msg_send ~self ~cmd:(selector "discardEventsMatchingMask:beforeEvent:") ~typ:(ullong @-> id @-> returning (void)) x beforeEvent
let display self = msg_send ~self ~cmd:(selector "display") ~typ:(returning (void))
let displayIfNeeded self = msg_send ~self ~cmd:(selector "displayIfNeeded") ~typ:(returning (void))
let displaysWhenScreenProfileChanges self = msg_send ~self ~cmd:(selector "displaysWhenScreenProfileChanges") ~typ:(returning (bool))
let doCommandBySelector x self = msg_send ~self ~cmd:(selector "doCommandBySelector:") ~typ:(_SEL @-> returning (void)) x
let dockTile self = msg_send ~self ~cmd:(selector "dockTile") ~typ:(returning (id))
let dockTitleIsGuess self = msg_send ~self ~cmd:(selector "dockTitleIsGuess") ~typ:(returning (bool))
let document self = msg_send ~self ~cmd:(selector "document") ~typ:(returning (id))
let dragImage x ~at ~offset ~event ~pasteboard ~source ~slideBack self = msg_send ~self ~cmd:(selector "dragImage:at:offset:event:pasteboard:source:slideBack:") ~typ:(id @-> CGPoint.t @-> CGSize.t @-> id @-> id @-> id @-> bool @-> returning (void)) x at offset event pasteboard source slideBack
let dragRectForFrameRect x self = msg_send_stret ~self ~cmd:(selector "dragRectForFrameRect:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let draggingEnded x self = msg_send ~self ~cmd:(selector "draggingEnded:") ~typ:(id @-> returning (void)) x
let draggingEntered x self = msg_send ~self ~cmd:(selector "draggingEntered:") ~typ:(id @-> returning (ullong)) x
let draggingExited x self = msg_send ~self ~cmd:(selector "draggingExited:") ~typ:(id @-> returning (void)) x
let draggingUpdated x self = msg_send ~self ~cmd:(selector "draggingUpdated:") ~typ:(id @-> returning (ullong)) x
let drawers self = msg_send ~self ~cmd:(selector "drawers") ~typ:(returning (id))
let editTitle x self = msg_send ~self ~cmd:(selector "editTitle:") ~typ:(id @-> returning (void)) x
let editTitleWithCompletionHandler x self = msg_send ~self ~cmd:(selector "editTitleWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let effectiveAppearance self = msg_send ~self ~cmd:(selector "effectiveAppearance") ~typ:(returning (id))
let enableCursorRects self = msg_send ~self ~cmd:(selector "enableCursorRects") ~typ:(returning (void))
let enableFlushWindow self = msg_send ~self ~cmd:(selector "enableFlushWindow") ~typ:(returning (void))
let enableKeyEquivalentForDefaultButtonCell self = msg_send ~self ~cmd:(selector "enableKeyEquivalentForDefaultButtonCell") ~typ:(returning (void))
let enableSnapshotRestoration self = msg_send ~self ~cmd:(selector "enableSnapshotRestoration") ~typ:(returning (void))
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning (void)) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let endEditingFor x self = msg_send ~self ~cmd:(selector "endEditingFor:") ~typ:(id @-> returning (void)) x
let endSheet x self = msg_send ~self ~cmd:(selector "endSheet:") ~typ:(id @-> returning (void)) x
let endSheet' x ~returnCode self = msg_send ~self ~cmd:(selector "endSheet:returnCode:") ~typ:(id @-> llong @-> returning (void)) x returnCode
let enterFullScreenMode x self = msg_send ~self ~cmd:(selector "enterFullScreenMode:") ~typ:(id @-> returning (void)) x
let exerciseAmbiguityInLayout self = msg_send ~self ~cmd:(selector "exerciseAmbiguityInLayout") ~typ:(returning (void))
let exitFullScreenMode x self = msg_send ~self ~cmd:(selector "exitFullScreenMode:") ~typ:(id @-> returning (void)) x
let fieldEditor x ~forObject self = msg_send ~self ~cmd:(selector "fieldEditor:forObject:") ~typ:(bool @-> id @-> returning (id)) x forObject
let firstResponder self = msg_send ~self ~cmd:(selector "firstResponder") ~typ:(returning (id))
let flushWindow self = msg_send ~self ~cmd:(selector "flushWindow") ~typ:(returning (void))
let flushWindowIfNeeded self = msg_send ~self ~cmd:(selector "flushWindowIfNeeded") ~typ:(returning (void))
let frame self = msg_send_stret ~self ~cmd:(selector "frame") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let frameAutosaveName self = msg_send ~self ~cmd:(selector "frameAutosaveName") ~typ:(returning (id))
let frameOrigin self = msg_send_stret ~self ~cmd:(selector "frameOrigin") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let frameRectForContentRect x self = msg_send_stret ~self ~cmd:(selector "frameRectForContentRect:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let frameRectForContentRect' x ~styleMask self = msg_send_stret ~self ~cmd:(selector "frameRectForContentRect:styleMask:") ~typ:(CGRect.t @-> ullong @-> returning (CGRect.t)) ~return_type:CGRect.t x styleMask
let frameTopLeftPoint self = msg_send_stret ~self ~cmd:(selector "frameTopLeftPoint") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let functionRow self = msg_send ~self ~cmd:(selector "functionRow") ~typ:(returning (id))
let gState self = msg_send ~self ~cmd:(selector "gState") ~typ:(returning (llong))
let gestureEventMask self = msg_send ~self ~cmd:(selector "gestureEventMask") ~typ:(returning (ullong))
let gestureRecognizer x ~shouldAttemptToRecognizeWithEvent self = msg_send ~self ~cmd:(selector "gestureRecognizer:shouldAttemptToRecognizeWithEvent:") ~typ:(id @-> id @-> returning (bool)) x shouldAttemptToRecognizeWithEvent
let graphicsContext self = msg_send ~self ~cmd:(selector "graphicsContext") ~typ:(returning (id))
let graphicsPort self = msg_send ~self ~cmd:(selector "graphicsPort") ~typ:(returning (ptr (void)))
let guessDockTitle x self = msg_send ~self ~cmd:(selector "guessDockTitle:") ~typ:(id @-> returning (void)) x
let handleCloseScriptCommand x self = msg_send ~self ~cmd:(selector "handleCloseScriptCommand:") ~typ:(id @-> returning (id)) x
let handlePrintScriptCommand x self = msg_send ~self ~cmd:(selector "handlePrintScriptCommand:") ~typ:(id @-> returning (id)) x
let handleSaveScriptCommand x self = msg_send ~self ~cmd:(selector "handleSaveScriptCommand:") ~typ:(id @-> returning (id)) x
let hasAmbiguousLayout self = msg_send ~self ~cmd:(selector "hasAmbiguousLayout") ~typ:(returning (bool))
let hasCloseBox self = msg_send ~self ~cmd:(selector "hasCloseBox") ~typ:(returning (bool))
let hasColorSensitiveUI self = msg_send ~self ~cmd:(selector "hasColorSensitiveUI") ~typ:(returning (bool))
let hasDynamicDepthLimit self = msg_send ~self ~cmd:(selector "hasDynamicDepthLimit") ~typ:(returning (bool))
let hasKeyAppearance self = msg_send ~self ~cmd:(selector "hasKeyAppearance") ~typ:(returning (bool))
let hasKeyAppearanceIncludingSheets x self = msg_send ~self ~cmd:(selector "hasKeyAppearanceIncludingSheets:") ~typ:(bool @-> returning (bool)) x
let hasMainAppearance self = msg_send ~self ~cmd:(selector "hasMainAppearance") ~typ:(returning (bool))
let hasShadow self = msg_send ~self ~cmd:(selector "hasShadow") ~typ:(returning (bool))
let hasTitleBar self = msg_send ~self ~cmd:(selector "hasTitleBar") ~typ:(returning (bool))
let helpRequested x self = msg_send ~self ~cmd:(selector "helpRequested:") ~typ:(id @-> returning (void)) x
let hideToolbar x self = msg_send ~self ~cmd:(selector "hideToolbar:") ~typ:(id @-> returning (void)) x
let hidesOnDeactivate self = msg_send ~self ~cmd:(selector "hidesOnDeactivate") ~typ:(returning (bool))
let hostsLayersInWindowServer self = msg_send ~self ~cmd:(selector "hostsLayersInWindowServer") ~typ:(returning (bool))
let identifier self = msg_send ~self ~cmd:(selector "identifier") ~typ:(returning (id))
let ignoresMouseEvents self = msg_send ~self ~cmd:(selector "ignoresMouseEvents") ~typ:(returning (bool))
let inLiveResize self = msg_send ~self ~cmd:(selector "inLiveResize") ~typ:(returning (bool))
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithContentRect x ~styleMask ~backing ~defer self = msg_send ~self ~cmd:(selector "initWithContentRect:styleMask:backing:defer:") ~typ:(CGRect.t @-> ullong @-> ullong @-> bool @-> returning (id)) x styleMask backing defer
let initWithContentRect' x ~styleMask ~backing ~defer ~screen self = msg_send ~self ~cmd:(selector "initWithContentRect:styleMask:backing:defer:screen:") ~typ:(CGRect.t @-> ullong @-> ullong @-> bool @-> id @-> returning (id)) x styleMask backing defer screen
let initWithWindowRef x self = msg_send ~self ~cmd:(selector "initWithWindowRef:") ~typ:(ptr (void) @-> returning (id)) x
let initialFirstResponder self = msg_send ~self ~cmd:(selector "initialFirstResponder") ~typ:(returning (id))
let insertTitlebarAccessoryViewController x ~atIndex self = msg_send ~self ~cmd:(selector "insertTitlebarAccessoryViewController:atIndex:") ~typ:(id @-> llong @-> returning (void)) x atIndex
let inspectorBar self = msg_send ~self ~cmd:(selector "inspectorBar") ~typ:(returning (id))
let invalidateCursorRectsForView x self = msg_send ~self ~cmd:(selector "invalidateCursorRectsForView:") ~typ:(id @-> returning (void)) x
let invalidateShadow self = msg_send ~self ~cmd:(selector "invalidateShadow") ~typ:(returning (void))
let isAutodisplay self = msg_send ~self ~cmd:(selector "isAutodisplay") ~typ:(returning (bool))
let isDocumentEdited self = msg_send ~self ~cmd:(selector "isDocumentEdited") ~typ:(returning (bool))
let isExcludedFromWindowsMenu self = msg_send ~self ~cmd:(selector "isExcludedFromWindowsMenu") ~typ:(returning (bool))
let isFloatingPanel self = msg_send ~self ~cmd:(selector "isFloatingPanel") ~typ:(returning (bool))
let isFlushWindowDisabled self = msg_send ~self ~cmd:(selector "isFlushWindowDisabled") ~typ:(returning (bool))
let isInKeyWindow self = msg_send ~self ~cmd:(selector "isInKeyWindow") ~typ:(returning (bool))
let isKeyWindow self = msg_send ~self ~cmd:(selector "isKeyWindow") ~typ:(returning (bool))
let isMainWindow self = msg_send ~self ~cmd:(selector "isMainWindow") ~typ:(returning (bool))
let isMiniaturizable self = msg_send ~self ~cmd:(selector "isMiniaturizable") ~typ:(returning (bool))
let isMiniaturized self = msg_send ~self ~cmd:(selector "isMiniaturized") ~typ:(returning (bool))
let isModalPanel self = msg_send ~self ~cmd:(selector "isModalPanel") ~typ:(returning (bool))
let isMovable self = msg_send ~self ~cmd:(selector "isMovable") ~typ:(returning (bool))
let isMovableByWindowBackground self = msg_send ~self ~cmd:(selector "isMovableByWindowBackground") ~typ:(returning (bool))
let isOnActiveSpace self = msg_send ~self ~cmd:(selector "isOnActiveSpace") ~typ:(returning (bool))
let isOneShot self = msg_send ~self ~cmd:(selector "isOneShot") ~typ:(returning (bool))
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning (bool))
let isPreferenceToolbarWindow self = msg_send ~self ~cmd:(selector "isPreferenceToolbarWindow") ~typ:(returning (bool))
let isReleasedWhenClosed self = msg_send ~self ~cmd:(selector "isReleasedWhenClosed") ~typ:(returning (bool))
let isResizable self = msg_send ~self ~cmd:(selector "isResizable") ~typ:(returning (bool))
let isRestorable self = msg_send ~self ~cmd:(selector "isRestorable") ~typ:(returning (bool))
let isSheet self = msg_send ~self ~cmd:(selector "isSheet") ~typ:(returning (bool))
let isTabOverviewVisible self = msg_send ~self ~cmd:(selector "isTabOverviewVisible") ~typ:(returning (bool))
let isTabbed self = msg_send ~self ~cmd:(selector "isTabbed") ~typ:(returning (bool))
let isVisible self = msg_send ~self ~cmd:(selector "isVisible") ~typ:(returning (bool))
let isZoomable self = msg_send ~self ~cmd:(selector "isZoomable") ~typ:(returning (bool))
let isZoomed self = msg_send ~self ~cmd:(selector "isZoomed") ~typ:(returning (bool))
let keyDown x self = msg_send ~self ~cmd:(selector "keyDown:") ~typ:(id @-> returning (void)) x
let keyViewSelectionDirection self = msg_send ~self ~cmd:(selector "keyViewSelectionDirection") ~typ:(returning (ullong))
let layoutIfNeeded self = msg_send ~self ~cmd:(selector "layoutIfNeeded") ~typ:(returning (void))
let level self = msg_send ~self ~cmd:(selector "level") ~typ:(returning (llong))
let liveResizeEdges self = msg_send ~self ~cmd:(selector "liveResizeEdges") ~typ:(returning (ullong))
let lockButtonClicked x self = msg_send ~self ~cmd:(selector "lockButtonClicked:") ~typ:(id @-> returning (void)) x
let makeFirstResponder x self = msg_send ~self ~cmd:(selector "makeFirstResponder:") ~typ:(id @-> returning (bool)) x
let makeKeyAndOrderFront x self = msg_send ~self ~cmd:(selector "makeKeyAndOrderFront:") ~typ:(id @-> returning (void)) x
let makeKeyWindow self = msg_send ~self ~cmd:(selector "makeKeyWindow") ~typ:(returning (void))
let makeMainWindow self = msg_send ~self ~cmd:(selector "makeMainWindow") ~typ:(returning (void))
let maxFullScreenContentSize self = msg_send_stret ~self ~cmd:(selector "maxFullScreenContentSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let maxSize self = msg_send_stret ~self ~cmd:(selector "maxSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let maxTitlebarTitleRect self = msg_send_stret ~self ~cmd:(selector "maxTitlebarTitleRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let menu self = msg_send ~self ~cmd:(selector "menu") ~typ:(returning (id))
let mergeAllWindows x self = msg_send ~self ~cmd:(selector "mergeAllWindows:") ~typ:(id @-> returning (void)) x
let minFrameSizeForMinContentSize x ~styleMask self = msg_send_stret ~self ~cmd:(selector "minFrameSizeForMinContentSize:styleMask:") ~typ:(CGSize.t @-> ullong @-> returning (CGSize.t)) ~return_type:CGSize.t x styleMask
let minFullScreenContentSize self = msg_send_stret ~self ~cmd:(selector "minFullScreenContentSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let minSize self = msg_send_stret ~self ~cmd:(selector "minSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let miniaturize x self = msg_send ~self ~cmd:(selector "miniaturize:") ~typ:(id @-> returning (void)) x
let miniwindowImage self = msg_send ~self ~cmd:(selector "miniwindowImage") ~typ:(returning (id))
let miniwindowTitle self = msg_send ~self ~cmd:(selector "miniwindowTitle") ~typ:(returning (id))
let mouseConfinementRect self = msg_send_stret ~self ~cmd:(selector "mouseConfinementRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let mouseDown x self = msg_send ~self ~cmd:(selector "mouseDown:") ~typ:(id @-> returning (void)) x
let mouseLocationOutsideOfEventStream self = msg_send_stret ~self ~cmd:(selector "mouseLocationOutsideOfEventStream") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let moveTabToNewWindow x self = msg_send ~self ~cmd:(selector "moveTabToNewWindow:") ~typ:(id @-> returning (void)) x
let nextEventMatchingMask x self = msg_send ~self ~cmd:(selector "nextEventMatchingMask:") ~typ:(ullong @-> returning (id)) x
let nextEventMatchingMask' x ~untilDate ~inMode ~dequeue self = msg_send ~self ~cmd:(selector "nextEventMatchingMask:untilDate:inMode:dequeue:") ~typ:(ullong @-> id @-> id @-> bool @-> returning (id)) x untilDate inMode dequeue
let objectSpecifier self = msg_send ~self ~cmd:(selector "objectSpecifier") ~typ:(returning (id))
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let occlusionState self = msg_send ~self ~cmd:(selector "occlusionState") ~typ:(returning (ullong))
let openDrawers self = msg_send ~self ~cmd:(selector "openDrawers") ~typ:(returning (id))
let orderBack x self = msg_send ~self ~cmd:(selector "orderBack:") ~typ:(id @-> returning (void)) x
let orderFront x self = msg_send ~self ~cmd:(selector "orderFront:") ~typ:(id @-> returning (void)) x
let orderFrontRegardless self = msg_send ~self ~cmd:(selector "orderFrontRegardless") ~typ:(returning (void))
let orderOut x self = msg_send ~self ~cmd:(selector "orderOut:") ~typ:(id @-> returning (void)) x
let orderOutTabbedWindowGroup x self = msg_send ~self ~cmd:(selector "orderOutTabbedWindowGroup:") ~typ:(id @-> returning (void)) x
let orderWindow x ~relativeTo self = msg_send ~self ~cmd:(selector "orderWindow:relativeTo:") ~typ:(llong @-> llong @-> returning (void)) x relativeTo
let orderedIndex self = msg_send ~self ~cmd:(selector "orderedIndex") ~typ:(returning (llong))
let parentWindow self = msg_send ~self ~cmd:(selector "parentWindow") ~typ:(returning (id))
let performClose x self = msg_send ~self ~cmd:(selector "performClose:") ~typ:(id @-> returning (void)) x
let performCloseOtherTabs x self = msg_send ~self ~cmd:(selector "performCloseOtherTabs:") ~typ:(id @-> returning (void)) x
let performCloseTabbedWindowGroup x self = msg_send ~self ~cmd:(selector "performCloseTabbedWindowGroup:") ~typ:(id @-> returning (void)) x
let performDragOperation x self = msg_send ~self ~cmd:(selector "performDragOperation:") ~typ:(id @-> returning (bool)) x
let performKeyEquivalent x self = msg_send ~self ~cmd:(selector "performKeyEquivalent:") ~typ:(id @-> returning (bool)) x
let performMiniaturize x self = msg_send ~self ~cmd:(selector "performMiniaturize:") ~typ:(id @-> returning (void)) x
let performMnemonic x self = msg_send ~self ~cmd:(selector "performMnemonic:") ~typ:(id @-> returning (bool)) x
let performWindowDragWithEvent x self = msg_send ~self ~cmd:(selector "performWindowDragWithEvent:") ~typ:(id @-> returning (void)) x
let performZoom x self = msg_send ~self ~cmd:(selector "performZoom:") ~typ:(id @-> returning (void)) x
let pinTab x self = msg_send ~self ~cmd:(selector "pinTab:") ~typ:(id @-> returning (void)) x
let postEvent x ~atStart self = msg_send ~self ~cmd:(selector "postEvent:atStart:") ~typ:(id @-> bool @-> returning (void)) x atStart
let preferredBackingLocation self = msg_send ~self ~cmd:(selector "preferredBackingLocation") ~typ:(returning (ullong))
let prefersFullWidthTitlebarWhenAccessoriesVisible self = msg_send ~self ~cmd:(selector "prefersFullWidthTitlebarWhenAccessoriesVisible") ~typ:(returning (bool))
let prepareForDragOperation x self = msg_send ~self ~cmd:(selector "prepareForDragOperation:") ~typ:(id @-> returning (bool)) x
let preservesContentDuringLiveResize self = msg_send ~self ~cmd:(selector "preservesContentDuringLiveResize") ~typ:(returning (bool))
let preventsApplicationTerminationWhenModal self = msg_send ~self ~cmd:(selector "preventsApplicationTerminationWhenModal") ~typ:(returning (bool))
let print x self = msg_send ~self ~cmd:(selector "print:") ~typ:(id @-> returning (void)) x
let quickLookPreviewItems x self = msg_send ~self ~cmd:(selector "quickLookPreviewItems:") ~typ:(id @-> returning (void)) x
let quickLookPreviewItemsAtWindowLocation x self = msg_send ~self ~cmd:(selector "quickLookPreviewItemsAtWindowLocation:") ~typ:(CGPoint.t @-> returning (void)) x
let quickLookWithEvent x self = msg_send ~self ~cmd:(selector "quickLookWithEvent:") ~typ:(id @-> returning (void)) x
let rebuildLayoutFromScratch self = msg_send ~self ~cmd:(selector "rebuildLayoutFromScratch") ~typ:(returning (void))
let recalculateKeyViewLoop self = msg_send ~self ~cmd:(selector "recalculateKeyViewLoop") ~typ:(returning (void))
let recursiveDescription self = msg_send ~self ~cmd:(selector "recursiveDescription") ~typ:(returning (id))
let redo x self = msg_send ~self ~cmd:(selector "redo:") ~typ:(id @-> returning (void)) x
let registerForDraggedTypes x self = msg_send ~self ~cmd:(selector "registerForDraggedTypes:") ~typ:(id @-> returning (void)) x
let registerScrollViewSeparatorTrackingAdapter x self = msg_send ~self ~cmd:(selector "registerScrollViewSeparatorTrackingAdapter:") ~typ:(id @-> returning (bool)) x
let registerSplitViewItemSeparatorTrackingAdapter x self = msg_send ~self ~cmd:(selector "registerSplitViewItemSeparatorTrackingAdapter:") ~typ:(id @-> returning (void)) x
let registeredDraggedTypes self = msg_send ~self ~cmd:(selector "registeredDraggedTypes") ~typ:(returning (id))
let remoteUIElement self = msg_send ~self ~cmd:(selector "remoteUIElement") ~typ:(returning (id))
let removeChildWindow x self = msg_send ~self ~cmd:(selector "removeChildWindow:") ~typ:(id @-> returning (void)) x
let removeObserver x ~forKeyPath ~context self = msg_send ~self ~cmd:(selector "removeObserver:forKeyPath:context:") ~typ:(id @-> id @-> ptr (void) @-> returning (void)) x forKeyPath context
let removeTitlebarAccessoryViewControllerAtIndex x self = msg_send ~self ~cmd:(selector "removeTitlebarAccessoryViewControllerAtIndex:") ~typ:(llong @-> returning (void)) x
let removeUnderTitlebarView x ~withAssociatedWithView self = msg_send ~self ~cmd:(selector "removeUnderTitlebarView:withAssociatedWithView:") ~typ:(id @-> id @-> returning (void)) x withAssociatedWithView
let representedFilename self = msg_send ~self ~cmd:(selector "representedFilename") ~typ:(returning (id))
let representedURL self = msg_send ~self ~cmd:(selector "representedURL") ~typ:(returning (id))
let resetCursorRects self = msg_send ~self ~cmd:(selector "resetCursorRects") ~typ:(returning (void))
let resignKeyAppearance self = msg_send ~self ~cmd:(selector "resignKeyAppearance") ~typ:(returning (void))
let resignKeyWindow self = msg_send ~self ~cmd:(selector "resignKeyWindow") ~typ:(returning (void))
let resignMainAppearance self = msg_send ~self ~cmd:(selector "resignMainAppearance") ~typ:(returning (void))
let resignMainWindow self = msg_send ~self ~cmd:(selector "resignMainWindow") ~typ:(returning (void))
let resizeFlags self = msg_send ~self ~cmd:(selector "resizeFlags") ~typ:(returning (ullong))
let resizeIncrements self = msg_send_stret ~self ~cmd:(selector "resizeIncrements") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let restorationClass self = msg_send ~self ~cmd:(selector "restorationClass") ~typ:(returning (_Class))
let restoreCachedImage self = msg_send ~self ~cmd:(selector "restoreCachedImage") ~typ:(returning (void))
let restoreStateWithCoder x self = msg_send ~self ~cmd:(selector "restoreStateWithCoder:") ~typ:(id @-> returning (void)) x
let restoreWindowOnDockDeath self = msg_send ~self ~cmd:(selector "restoreWindowOnDockDeath") ~typ:(returning (id))
let restoreWindowOnDockReincarnation self = msg_send ~self ~cmd:(selector "restoreWindowOnDockReincarnation") ~typ:(returning (id))
let rightMouseDown x self = msg_send ~self ~cmd:(selector "rightMouseDown:") ~typ:(id @-> returning (void)) x
let runToolbarConfigurationPalette x self = msg_send ~self ~cmd:(selector "runToolbarConfigurationPalette:") ~typ:(id @-> returning (void)) x
let runToolbarCustomizationPalette x self = msg_send ~self ~cmd:(selector "runToolbarCustomizationPalette:") ~typ:(id @-> returning (void)) x
let saveFrameUsingName x self = msg_send ~self ~cmd:(selector "saveFrameUsingName:") ~typ:(id @-> returning (void)) x
let screen self = msg_send ~self ~cmd:(selector "screen") ~typ:(returning (id))
let selectKeyViewFollowingView x self = msg_send ~self ~cmd:(selector "selectKeyViewFollowingView:") ~typ:(id @-> returning (void)) x
let selectKeyViewPrecedingView x self = msg_send ~self ~cmd:(selector "selectKeyViewPrecedingView:") ~typ:(id @-> returning (void)) x
let selectNextKeyView x self = msg_send ~self ~cmd:(selector "selectNextKeyView:") ~typ:(id @-> returning (void)) x
let selectNextTab x self = msg_send ~self ~cmd:(selector "selectNextTab:") ~typ:(id @-> returning (void)) x
let selectPreviousKeyView x self = msg_send ~self ~cmd:(selector "selectPreviousKeyView:") ~typ:(id @-> returning (void)) x
let selectPreviousTab x self = msg_send ~self ~cmd:(selector "selectPreviousTab:") ~typ:(id @-> returning (void)) x
let sendEvent x self = msg_send ~self ~cmd:(selector "sendEvent:") ~typ:(id @-> returning (void)) x
let setAcceptsMouseMovedEvents x self = msg_send ~self ~cmd:(selector "setAcceptsMouseMovedEvents:") ~typ:(bool @-> returning (void)) x
let setAccessibilitySections x self = msg_send ~self ~cmd:(selector "setAccessibilitySections:") ~typ:(id @-> returning (void)) x
let setAllowsConcurrentViewDrawing x self = msg_send ~self ~cmd:(selector "setAllowsConcurrentViewDrawing:") ~typ:(bool @-> returning (void)) x
let setAllowsCursorRectsWhenInactive x self = msg_send ~self ~cmd:(selector "setAllowsCursorRectsWhenInactive:") ~typ:(bool @-> returning (void)) x
let setAllowsToolTipsWhenApplicationIsInactive x self = msg_send ~self ~cmd:(selector "setAllowsToolTipsWhenApplicationIsInactive:") ~typ:(bool @-> returning (void)) x
let setAlphaValue x self = msg_send ~self ~cmd:(selector "setAlphaValue:") ~typ:(double @-> returning (void)) x
let setAnchorAttribute x ~forOrientation self = msg_send ~self ~cmd:(selector "setAnchorAttribute:forOrientation:") ~typ:(llong @-> llong @-> returning (void)) x forOrientation
let setAnchorItem x ~forOrientation self = msg_send ~self ~cmd:(selector "setAnchorItem:forOrientation:") ~typ:(id @-> llong @-> returning (void)) x forOrientation
let setAnimationBehavior x self = msg_send ~self ~cmd:(selector "setAnimationBehavior:") ~typ:(llong @-> returning (void)) x
let setAnimations x self = msg_send ~self ~cmd:(selector "setAnimations:") ~typ:(id @-> returning (void)) x
let setAppearance x self = msg_send ~self ~cmd:(selector "setAppearance:") ~typ:(id @-> returning (void)) x
let setAppearanceParent x self = msg_send ~self ~cmd:(selector "setAppearanceParent:") ~typ:(id @-> returning (void)) x
let setAppearanceSource x self = msg_send ~self ~cmd:(selector "setAppearanceSource:") ~typ:(id @-> returning (void)) x
let setAspectRatio x self = msg_send ~self ~cmd:(selector "setAspectRatio:") ~typ:(CGSize.t @-> returning (void)) x
let setAutodisplay x self = msg_send ~self ~cmd:(selector "setAutodisplay:") ~typ:(bool @-> returning (void)) x
let setAutofill x self = msg_send ~self ~cmd:(selector "setAutofill:") ~typ:(bool @-> returning (void)) x
let setAutofillColor x self = msg_send ~self ~cmd:(selector "setAutofillColor:") ~typ:(id @-> returning (void)) x
let setAutorecalculatesContentBorderThickness x ~forEdge self = msg_send ~self ~cmd:(selector "setAutorecalculatesContentBorderThickness:forEdge:") ~typ:(bool @-> ullong @-> returning (void)) x forEdge
let setAutorecalculatesKeyViewLoop x self = msg_send ~self ~cmd:(selector "setAutorecalculatesKeyViewLoop:") ~typ:(bool @-> returning (void)) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning (void)) x
let setBackingType x self = msg_send ~self ~cmd:(selector "setBackingType:") ~typ:(ullong @-> returning (void)) x
let setBottomCornerRounded x self = msg_send ~self ~cmd:(selector "setBottomCornerRounded:") ~typ:(bool @-> returning (void)) x
let setBoundsAsQDRect x self = msg_send ~self ~cmd:(selector "setBoundsAsQDRect:") ~typ:(id @-> returning (void)) x
let setCanBeVisibleOnAllSpaces x self = msg_send ~self ~cmd:(selector "setCanBeVisibleOnAllSpaces:") ~typ:(bool @-> returning (void)) x
let setCanBecomeVisibleWithoutLogin x self = msg_send ~self ~cmd:(selector "setCanBecomeVisibleWithoutLogin:") ~typ:(bool @-> returning (void)) x
let setCanEnterFullScreenMode x self = msg_send ~self ~cmd:(selector "setCanEnterFullScreenMode:") ~typ:(bool @-> returning (void)) x
let setCanHide x self = msg_send ~self ~cmd:(selector "setCanHide:") ~typ:(bool @-> returning (void)) x
let setCanHostLayersInWindowServer x self = msg_send ~self ~cmd:(selector "setCanHostLayersInWindowServer:") ~typ:(bool @-> returning (void)) x
let setCollectionBehavior x self = msg_send ~self ~cmd:(selector "setCollectionBehavior:") ~typ:(ullong @-> returning (void)) x
let setColorSpace x self = msg_send ~self ~cmd:(selector "setColorSpace:") ~typ:(id @-> returning (void)) x
let setContentAspectRatio x self = msg_send ~self ~cmd:(selector "setContentAspectRatio:") ~typ:(CGSize.t @-> returning (void)) x
let setContentBorderThickness x ~forEdge self = msg_send ~self ~cmd:(selector "setContentBorderThickness:forEdge:") ~typ:(double @-> ullong @-> returning (void)) x forEdge
let setContentMaxSize x self = msg_send ~self ~cmd:(selector "setContentMaxSize:") ~typ:(CGSize.t @-> returning (void)) x
let setContentMinSize x self = msg_send ~self ~cmd:(selector "setContentMinSize:") ~typ:(CGSize.t @-> returning (void)) x
let setContentResizeIncrements x self = msg_send ~self ~cmd:(selector "setContentResizeIncrements:") ~typ:(CGSize.t @-> returning (void)) x
let setContentSize x self = msg_send ~self ~cmd:(selector "setContentSize:") ~typ:(CGSize.t @-> returning (void)) x
let setContentTitlebarSeparatorStyle x self = msg_send ~self ~cmd:(selector "setContentTitlebarSeparatorStyle:") ~typ:(llong @-> returning (void)) x
let setContentView x self = msg_send ~self ~cmd:(selector "setContentView:") ~typ:(id @-> returning (void)) x
let setContentViewController x self = msg_send ~self ~cmd:(selector "setContentViewController:") ~typ:(id @-> returning (void)) x
let setDefaultButtonCell x self = msg_send ~self ~cmd:(selector "setDefaultButtonCell:") ~typ:(id @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDepthLimit x self = msg_send ~self ~cmd:(selector "setDepthLimit:") ~typ:(int @-> returning (void)) x
let setDisplaysWhenScreenProfileChanges x self = msg_send ~self ~cmd:(selector "setDisplaysWhenScreenProfileChanges:") ~typ:(bool @-> returning (void)) x
let setDocumentEdited x self = msg_send ~self ~cmd:(selector "setDocumentEdited:") ~typ:(bool @-> returning (void)) x
let setDynamicDepthLimit x self = msg_send ~self ~cmd:(selector "setDynamicDepthLimit:") ~typ:(bool @-> returning (void)) x
let setExcludedFromWindowsMenu x self = msg_send ~self ~cmd:(selector "setExcludedFromWindowsMenu:") ~typ:(bool @-> returning (void)) x
let setFrame x ~display self = msg_send ~self ~cmd:(selector "setFrame:display:") ~typ:(CGRect.t @-> bool @-> returning (void)) x display
let setFrame' x ~display ~animate self = msg_send ~self ~cmd:(selector "setFrame:display:animate:") ~typ:(CGRect.t @-> bool @-> bool @-> returning (void)) x display animate
let setFrameAutosaveName x self = msg_send ~self ~cmd:(selector "setFrameAutosaveName:") ~typ:(id @-> returning (bool)) x
let setFrameFromString x self = msg_send ~self ~cmd:(selector "setFrameFromString:") ~typ:(id @-> returning (void)) x
let setFrameOrigin x self = msg_send ~self ~cmd:(selector "setFrameOrigin:") ~typ:(CGPoint.t @-> returning (void)) x
let setFrameTopLeftPoint x self = msg_send ~self ~cmd:(selector "setFrameTopLeftPoint:") ~typ:(CGPoint.t @-> returning (void)) x
let setFrameUsingName x self = msg_send ~self ~cmd:(selector "setFrameUsingName:") ~typ:(id @-> returning (bool)) x
let setFrameUsingName' x ~force self = msg_send ~self ~cmd:(selector "setFrameUsingName:force:") ~typ:(id @-> bool @-> returning (bool)) x force
let setGestureEventMask x self = msg_send ~self ~cmd:(selector "setGestureEventMask:") ~typ:(ullong @-> returning (void)) x
let setHasColorSensitiveUI x self = msg_send ~self ~cmd:(selector "setHasColorSensitiveUI:") ~typ:(bool @-> returning (void)) x
let setHasShadow x self = msg_send ~self ~cmd:(selector "setHasShadow:") ~typ:(bool @-> returning (void)) x
let setHidesOnDeactivate x self = msg_send ~self ~cmd:(selector "setHidesOnDeactivate:") ~typ:(bool @-> returning (void)) x
let setIdentifier x self = msg_send ~self ~cmd:(selector "setIdentifier:") ~typ:(id @-> returning (void)) x
let setIgnoresMouseEvents x self = msg_send ~self ~cmd:(selector "setIgnoresMouseEvents:") ~typ:(bool @-> returning (void)) x
let setInitialFirstResponder x self = msg_send ~self ~cmd:(selector "setInitialFirstResponder:") ~typ:(id @-> returning (void)) x
let setInspectorBar x self = msg_send ~self ~cmd:(selector "setInspectorBar:") ~typ:(id @-> returning (void)) x
let setIsMiniaturized x self = msg_send ~self ~cmd:(selector "setIsMiniaturized:") ~typ:(bool @-> returning (void)) x
let setIsVisible x self = msg_send ~self ~cmd:(selector "setIsVisible:") ~typ:(bool @-> returning (void)) x
let setIsZoomed x self = msg_send ~self ~cmd:(selector "setIsZoomed:") ~typ:(bool @-> returning (void)) x
let setKeyView x self = msg_send ~self ~cmd:(selector "setKeyView:") ~typ:(id @-> returning (void)) x
let setLevel x self = msg_send ~self ~cmd:(selector "setLevel:") ~typ:(llong @-> returning (void)) x
let setMaxFullScreenContentSize x self = msg_send ~self ~cmd:(selector "setMaxFullScreenContentSize:") ~typ:(CGSize.t @-> returning (void)) x
let setMaxSize x self = msg_send ~self ~cmd:(selector "setMaxSize:") ~typ:(CGSize.t @-> returning (void)) x
let setMenu x self = msg_send ~self ~cmd:(selector "setMenu:") ~typ:(id @-> returning (void)) x
let setMinFullScreenContentSize x self = msg_send ~self ~cmd:(selector "setMinFullScreenContentSize:") ~typ:(CGSize.t @-> returning (void)) x
let setMinSize x self = msg_send ~self ~cmd:(selector "setMinSize:") ~typ:(CGSize.t @-> returning (void)) x
let setMiniwindowImage x self = msg_send ~self ~cmd:(selector "setMiniwindowImage:") ~typ:(id @-> returning (void)) x
let setMiniwindowTitle x self = msg_send ~self ~cmd:(selector "setMiniwindowTitle:") ~typ:(id @-> returning (void)) x
let setMouseConfinementRect x self = msg_send ~self ~cmd:(selector "setMouseConfinementRect:") ~typ:(CGRect.t @-> returning (void)) x
let setMovable x self = msg_send ~self ~cmd:(selector "setMovable:") ~typ:(bool @-> returning (void)) x
let setMovableByWindowBackground x self = msg_send ~self ~cmd:(selector "setMovableByWindowBackground:") ~typ:(bool @-> returning (void)) x
let setOneShot x self = msg_send ~self ~cmd:(selector "setOneShot:") ~typ:(bool @-> returning (void)) x
let setOpaque x self = msg_send ~self ~cmd:(selector "setOpaque:") ~typ:(bool @-> returning (void)) x
let setOrderedIndex x self = msg_send ~self ~cmd:(selector "setOrderedIndex:") ~typ:(llong @-> returning (void)) x
let setParentWindow x self = msg_send ~self ~cmd:(selector "setParentWindow:") ~typ:(id @-> returning (void)) x
let setPreferredBackingLocation x self = msg_send ~self ~cmd:(selector "setPreferredBackingLocation:") ~typ:(ullong @-> returning (void)) x
let setPrefersFullWidthTitlebarWhenAccessoriesVisible x self = msg_send ~self ~cmd:(selector "setPrefersFullWidthTitlebarWhenAccessoriesVisible:") ~typ:(bool @-> returning (void)) x
let setPreservesContentDuringLiveResize x self = msg_send ~self ~cmd:(selector "setPreservesContentDuringLiveResize:") ~typ:(bool @-> returning (void)) x
let setPreventsApplicationTerminationWhenModal x self = msg_send ~self ~cmd:(selector "setPreventsApplicationTerminationWhenModal:") ~typ:(bool @-> returning (void)) x
let setReleasedWhenClosed x self = msg_send ~self ~cmd:(selector "setReleasedWhenClosed:") ~typ:(bool @-> returning (void)) x
let setRemoteUIElement x self = msg_send ~self ~cmd:(selector "setRemoteUIElement:") ~typ:(id @-> returning (void)) x
let setRepresentedFilename x self = msg_send ~self ~cmd:(selector "setRepresentedFilename:") ~typ:(id @-> returning (void)) x
let setRepresentedURL x self = msg_send ~self ~cmd:(selector "setRepresentedURL:") ~typ:(id @-> returning (void)) x
let setResizeIncrements x self = msg_send ~self ~cmd:(selector "setResizeIncrements:") ~typ:(CGSize.t @-> returning (void)) x
let setRestorable x self = msg_send ~self ~cmd:(selector "setRestorable:") ~typ:(bool @-> returning (void)) x
let setRestorationClass x self = msg_send ~self ~cmd:(selector "setRestorationClass:") ~typ:(_Class @-> returning (void)) x
let setShadowStyle x self = msg_send ~self ~cmd:(selector "setShadowStyle:") ~typ:(ullong @-> returning (void)) x
let setSharingType x self = msg_send ~self ~cmd:(selector "setSharingType:") ~typ:(ullong @-> returning (void)) x
let setShowsAutosaveButton x self = msg_send ~self ~cmd:(selector "setShowsAutosaveButton:") ~typ:(bool @-> returning (void)) x
let setShowsContentSeparator x ~forEdge self = msg_send ~self ~cmd:(selector "setShowsContentSeparator:forEdge:") ~typ:(bool @-> ullong @-> returning (void)) x forEdge
let setShowsLockButton x self = msg_send ~self ~cmd:(selector "setShowsLockButton:") ~typ:(bool @-> returning (void)) x
let setShowsResizeIndicator x self = msg_send ~self ~cmd:(selector "setShowsResizeIndicator:") ~typ:(bool @-> returning (void)) x
let setShowsToolbarButton x self = msg_send ~self ~cmd:(selector "setShowsToolbarButton:") ~typ:(bool @-> returning (void)) x
let setStandardWindowButtonGroupOffset x self = msg_send ~self ~cmd:(selector "setStandardWindowButtonGroupOffset:") ~typ:(CGSize.t @-> returning (void)) x
let setStandardWindowTitleButtonsAlphaValue x self = msg_send ~self ~cmd:(selector "setStandardWindowTitleButtonsAlphaValue:") ~typ:(double @-> returning (void)) x
let setStyleMask x self = msg_send ~self ~cmd:(selector "setStyleMask:") ~typ:(ullong @-> returning (void)) x
let setSubtitle x self = msg_send ~self ~cmd:(selector "setSubtitle:") ~typ:(id @-> returning (void)) x
let setTabOverviewVisible x self = msg_send ~self ~cmd:(selector "setTabOverviewVisible:") ~typ:(bool @-> returning (void)) x
let setTabbingIdentifier x self = msg_send ~self ~cmd:(selector "setTabbingIdentifier:") ~typ:(id @-> returning (void)) x
let setTabbingMode x self = msg_send ~self ~cmd:(selector "setTabbingMode:") ~typ:(llong @-> returning (void)) x
let setTimeMachineDelegate x self = msg_send ~self ~cmd:(selector "setTimeMachineDelegate:") ~typ:(id @-> returning (void)) x
let setTitle x self = msg_send ~self ~cmd:(selector "setTitle:") ~typ:(id @-> returning (void)) x
let setTitleHidden x self = msg_send ~self ~cmd:(selector "setTitleHidden:") ~typ:(bool @-> returning (void)) x
let setTitleMode x self = msg_send ~self ~cmd:(selector "setTitleMode:") ~typ:(llong @-> returning (void)) x
let setTitlePosition x self = msg_send ~self ~cmd:(selector "setTitlePosition:") ~typ:(llong @-> returning (void)) x
let setTitleVisibility x self = msg_send ~self ~cmd:(selector "setTitleVisibility:") ~typ:(llong @-> returning (void)) x
let setTitleWithRepresentedFilename x self = msg_send ~self ~cmd:(selector "setTitleWithRepresentedFilename:") ~typ:(id @-> returning (void)) x
let setTitlebarAlphaValue x self = msg_send ~self ~cmd:(selector "setTitlebarAlphaValue:") ~typ:(double @-> returning (void)) x
let setTitlebarAppearsTransparent x self = msg_send ~self ~cmd:(selector "setTitlebarAppearsTransparent:") ~typ:(bool @-> returning (void)) x
let setTitlebarAppearsTransparentWhenFullscreen x self = msg_send ~self ~cmd:(selector "setTitlebarAppearsTransparentWhenFullscreen:") ~typ:(bool @-> returning (void)) x
let setTitlebarBlurFiltersDisabled x self = msg_send ~self ~cmd:(selector "setTitlebarBlurFiltersDisabled:") ~typ:(bool @-> returning (void)) x
let setTitlebarDrawsBottomDividerWhenTransparent x self = msg_send ~self ~cmd:(selector "setTitlebarDrawsBottomDividerWhenTransparent:") ~typ:(bool @-> returning (void)) x
let setTitlebarHandlesDoubleClickWhenTransparent x self = msg_send ~self ~cmd:(selector "setTitlebarHandlesDoubleClickWhenTransparent:") ~typ:(bool @-> returning (void)) x
let setTitlebarHeight x self = msg_send ~self ~cmd:(selector "setTitlebarHeight:") ~typ:(double @-> returning (void)) x
let setTitlebarSeparatorStyle x self = msg_send ~self ~cmd:(selector "setTitlebarSeparatorStyle:") ~typ:(llong @-> returning (void)) x
let setToolbar x self = msg_send ~self ~cmd:(selector "setToolbar:") ~typ:(id @-> returning (void)) x
let setToolbarStyle x self = msg_send ~self ~cmd:(selector "setToolbarStyle:") ~typ:(llong @-> returning (void)) x
let setUnsnappedFrame x self = msg_send ~self ~cmd:(selector "setUnsnappedFrame:") ~typ:(CGRect.t @-> returning (void)) x
let setUserInterfaceItemIdentifier x self = msg_send ~self ~cmd:(selector "setUserInterfaceItemIdentifier:") ~typ:(id @-> returning (void)) x
let setUserInterfaceLayoutDirection x self = msg_send ~self ~cmd:(selector "setUserInterfaceLayoutDirection:") ~typ:(llong @-> returning (void)) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let setViewsNeedDisplay x self = msg_send ~self ~cmd:(selector "setViewsNeedDisplay:") ~typ:(bool @-> returning (void)) x
let setWindowController x self = msg_send ~self ~cmd:(selector "setWindowController:") ~typ:(id @-> returning (void)) x
let shadowOptions self = msg_send ~self ~cmd:(selector "shadowOptions") ~typ:(returning (ullong))
let shadowOptionsForActiveAppearance x self = msg_send ~self ~cmd:(selector "shadowOptionsForActiveAppearance:") ~typ:(bool @-> returning (ullong)) x
let shadowParameters self = msg_send ~self ~cmd:(selector "shadowParameters") ~typ:(returning (id))
let shadowStyle self = msg_send ~self ~cmd:(selector "shadowStyle") ~typ:(returning (ullong))
let sharingIndicator self = msg_send ~self ~cmd:(selector "sharingIndicator") ~typ:(returning (id))
let sharingType self = msg_send ~self ~cmd:(selector "sharingType") ~typ:(returning (ullong))
let sheetBehavior self = msg_send ~self ~cmd:(selector "sheetBehavior") ~typ:(returning (ullong))
let sheetParent self = msg_send ~self ~cmd:(selector "sheetParent") ~typ:(returning (id))
let sheets self = msg_send ~self ~cmd:(selector "sheets") ~typ:(returning (id))
let shouldBeTreatedAsInkEvent x self = msg_send ~self ~cmd:(selector "shouldBeTreatedAsInkEvent:") ~typ:(id @-> returning (bool)) x
let showDeminiaturizedWindow self = msg_send ~self ~cmd:(selector "showDeminiaturizedWindow") ~typ:(returning (id))
let showToolbar x self = msg_send ~self ~cmd:(selector "showToolbar:") ~typ:(id @-> returning (void)) x
let showsAutosaveButton self = msg_send ~self ~cmd:(selector "showsAutosaveButton") ~typ:(returning (bool))
let showsContentSeparatorForEdge x self = msg_send ~self ~cmd:(selector "showsContentSeparatorForEdge:") ~typ:(ullong @-> returning (bool)) x
let showsFullScreenButton self = msg_send ~self ~cmd:(selector "showsFullScreenButton") ~typ:(returning (bool))
let showsLockButton self = msg_send ~self ~cmd:(selector "showsLockButton") ~typ:(returning (bool))
let showsResizeIndicator self = msg_send ~self ~cmd:(selector "showsResizeIndicator") ~typ:(returning (bool))
let showsToolbarButton self = msg_send ~self ~cmd:(selector "showsToolbarButton") ~typ:(returning (bool))
let singleWindowSharingActive self = msg_send ~self ~cmd:(selector "singleWindowSharingActive") ~typ:(returning (bool))
let snapshotFromRect x ~options self = msg_send ~self ~cmd:(selector "snapshotFromRect:options:") ~typ:(CGRect.t @-> ullong @-> returning (id)) x options
let standardWindowButton x self = msg_send ~self ~cmd:(selector "standardWindowButton:") ~typ:(ullong @-> returning (id)) x
let standardWindowButtonGroupOffset self = msg_send_stret ~self ~cmd:(selector "standardWindowButtonGroupOffset") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let standardWindowTitleButtonsAlphaValue self = msg_send ~self ~cmd:(selector "standardWindowTitleButtonsAlphaValue") ~typ:(returning (double))
let startRectForSheet x self = msg_send_stret ~self ~cmd:(selector "startRectForSheet:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let statusItem self = msg_send ~self ~cmd:(selector "statusItem") ~typ:(returning (id))
let stringWithSavedFrame self = msg_send ~self ~cmd:(selector "stringWithSavedFrame") ~typ:(returning (id))
let styleMask self = msg_send ~self ~cmd:(selector "styleMask") ~typ:(returning (ullong))
let subtitle self = msg_send ~self ~cmd:(selector "subtitle") ~typ:(returning (id))
let supplementalTargetForAction x ~sender self = msg_send ~self ~cmd:(selector "supplementalTargetForAction:sender:") ~typ:(_SEL @-> id @-> returning (id)) x sender
let tab self = msg_send ~self ~cmd:(selector "tab") ~typ:(returning (id))
let tabGroup self = msg_send ~self ~cmd:(selector "tabGroup") ~typ:(returning (id))
let tabbedWindows self = msg_send ~self ~cmd:(selector "tabbedWindows") ~typ:(returning (id))
let tabbingIdentifier self = msg_send ~self ~cmd:(selector "tabbingIdentifier") ~typ:(returning (id))
let tabbingMode self = msg_send ~self ~cmd:(selector "tabbingMode") ~typ:(returning (llong))
let timeMachineDelegate self = msg_send ~self ~cmd:(selector "timeMachineDelegate") ~typ:(returning (id))
let title self = msg_send ~self ~cmd:(selector "title") ~typ:(returning (id))
let titleHidden self = msg_send ~self ~cmd:(selector "titleHidden") ~typ:(returning (bool))
let titleMode self = msg_send ~self ~cmd:(selector "titleMode") ~typ:(returning (llong))
let titlePosition self = msg_send ~self ~cmd:(selector "titlePosition") ~typ:(returning (llong))
let titleVisibility self = msg_send ~self ~cmd:(selector "titleVisibility") ~typ:(returning (llong))
let titlebarAccessoryViewControllers self = msg_send ~self ~cmd:(selector "titlebarAccessoryViewControllers") ~typ:(returning (id))
let titlebarAlphaValue self = msg_send ~self ~cmd:(selector "titlebarAlphaValue") ~typ:(returning (double))
let titlebarAppearsTransparent self = msg_send ~self ~cmd:(selector "titlebarAppearsTransparent") ~typ:(returning (bool))
let titlebarAppearsTransparentWhenFullscreen self = msg_send ~self ~cmd:(selector "titlebarAppearsTransparentWhenFullscreen") ~typ:(returning (bool))
let titlebarBlendingMode self = msg_send ~self ~cmd:(selector "titlebarBlendingMode") ~typ:(returning (llong))
let titlebarBlurFiltersDisabled self = msg_send ~self ~cmd:(selector "titlebarBlurFiltersDisabled") ~typ:(returning (bool))
let titlebarDrawsBottomDividerWhenTransparent self = msg_send ~self ~cmd:(selector "titlebarDrawsBottomDividerWhenTransparent") ~typ:(returning (bool))
let titlebarHandlesDoubleClickWhenTransparent self = msg_send ~self ~cmd:(selector "titlebarHandlesDoubleClickWhenTransparent") ~typ:(returning (bool))
let titlebarHeight self = msg_send ~self ~cmd:(selector "titlebarHeight") ~typ:(returning (double))
let titlebarSeparatorStyle self = msg_send ~self ~cmd:(selector "titlebarSeparatorStyle") ~typ:(returning (llong))
let titlebarTitleFont self = msg_send ~self ~cmd:(selector "titlebarTitleFont") ~typ:(returning (id))
let titlebarTitleRect self = msg_send_stret ~self ~cmd:(selector "titlebarTitleRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let titlebarViewController self = msg_send ~self ~cmd:(selector "titlebarViewController") ~typ:(returning (id))
let toggleFullScreen x self = msg_send ~self ~cmd:(selector "toggleFullScreen:") ~typ:(id @-> returning (void)) x
let toggleSidebar x self = msg_send ~self ~cmd:(selector "toggleSidebar:") ~typ:(id @-> returning (void)) x
let toggleTabBar x self = msg_send ~self ~cmd:(selector "toggleTabBar:") ~typ:(id @-> returning (void)) x
let toggleTabOverview x self = msg_send ~self ~cmd:(selector "toggleTabOverview:") ~typ:(id @-> returning (void)) x
let toggleToolbarShown x self = msg_send ~self ~cmd:(selector "toggleToolbarShown:") ~typ:(id @-> returning (void)) x
let toggleUsingSmallToolbarIcons x self = msg_send ~self ~cmd:(selector "toggleUsingSmallToolbarIcons:") ~typ:(id @-> returning (void)) x
let toolbar self = msg_send ~self ~cmd:(selector "toolbar") ~typ:(returning (id))
let toolbarStyle self = msg_send ~self ~cmd:(selector "toolbarStyle") ~typ:(returning (llong))
let topLeftPoint self = msg_send_stret ~self ~cmd:(selector "topLeftPoint") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let trackEventsMatchingMask x ~timeout ~mode ~handler self = msg_send ~self ~cmd:(selector "trackEventsMatchingMask:timeout:mode:handler:") ~typ:(ullong @-> double @-> id @-> ptr void @-> returning (void)) x timeout mode handler
let tryToPerform x ~with_ self = msg_send ~self ~cmd:(selector "tryToPerform:with:") ~typ:(_SEL @-> id @-> returning (bool)) x with_
let undo x self = msg_send ~self ~cmd:(selector "undo:") ~typ:(id @-> returning (void)) x
let undoManager self = msg_send ~self ~cmd:(selector "undoManager") ~typ:(returning (id))
let uniqueID self = msg_send ~self ~cmd:(selector "uniqueID") ~typ:(returning (llong))
let unpinTab x self = msg_send ~self ~cmd:(selector "unpinTab:") ~typ:(id @-> returning (void)) x
let unregisterDraggedTypes self = msg_send ~self ~cmd:(selector "unregisterDraggedTypes") ~typ:(returning (void))
let unregisterScrollViewSeparatorTrackingAdapter x self = msg_send ~self ~cmd:(selector "unregisterScrollViewSeparatorTrackingAdapter:") ~typ:(id @-> returning (void)) x
let unregisterSplitViewItemSeparatorTrackingAdapter x self = msg_send ~self ~cmd:(selector "unregisterSplitViewItemSeparatorTrackingAdapter:") ~typ:(id @-> returning (void)) x
let unsnappedFrame self = msg_send_stret ~self ~cmd:(selector "unsnappedFrame") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let update self = msg_send ~self ~cmd:(selector "update") ~typ:(returning (void))
let updateConstraintsIfNeeded self = msg_send ~self ~cmd:(selector "updateConstraintsIfNeeded") ~typ:(returning (void))
let updateDraggingItemsForDrag x self = msg_send ~self ~cmd:(selector "updateDraggingItemsForDrag:") ~typ:(id @-> returning (void)) x
let updateInDock self = msg_send ~self ~cmd:(selector "updateInDock") ~typ:(returning (void))
let useOptimizedDrawing x self = msg_send ~self ~cmd:(selector "useOptimizedDrawing:") ~typ:(bool @-> returning (void)) x
let userInterfaceItemIdentifier self = msg_send ~self ~cmd:(selector "userInterfaceItemIdentifier") ~typ:(returning (id))
let userInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "userInterfaceLayoutDirection") ~typ:(returning (llong))
let userSpaceScaleFactor self = msg_send ~self ~cmd:(selector "userSpaceScaleFactor") ~typ:(returning (double))
let validRequestorForSendType x ~returnType self = msg_send ~self ~cmd:(selector "validRequestorForSendType:returnType:") ~typ:(id @-> id @-> returning (id)) x returnType
let validateMenuItem x self = msg_send ~self ~cmd:(selector "validateMenuItem:") ~typ:(id @-> returning (bool)) x
let validateUserInterfaceItem x self = msg_send ~self ~cmd:(selector "validateUserInterfaceItem:") ~typ:(id @-> returning (bool)) x
let view x ~acceptsFirstMouseEvent ~initialKeyWindow self = msg_send ~self ~cmd:(selector "view:acceptsFirstMouseEvent:initialKeyWindow:") ~typ:(id @-> id @-> id @-> returning (bool)) x acceptsFirstMouseEvent initialKeyWindow
let viewsNeedDisplay self = msg_send ~self ~cmd:(selector "viewsNeedDisplay") ~typ:(returning (bool))
let visualizeConstraints x self = msg_send ~self ~cmd:(selector "visualizeConstraints:") ~typ:(id @-> returning (void)) x
let wantsPeriodicDraggingUpdates self = msg_send ~self ~cmd:(selector "wantsPeriodicDraggingUpdates") ~typ:(returning (bool))
let windowController self = msg_send ~self ~cmd:(selector "windowController") ~typ:(returning (id))
let windowDidBecomeTabbed self = msg_send ~self ~cmd:(selector "windowDidBecomeTabbed") ~typ:(returning (void))
let windowNumber self = msg_send ~self ~cmd:(selector "windowNumber") ~typ:(returning (llong))
let windowRef self = msg_send ~self ~cmd:(selector "windowRef") ~typ:(returning (ptr (void)))
let windowRefWithCompositedAttribute x ~andFrameworkScaledAttribute self = msg_send ~self ~cmd:(selector "windowRefWithCompositedAttribute:andFrameworkScaledAttribute:") ~typ:(bool @-> bool @-> returning (ptr (void))) x andFrameworkScaledAttribute
let windowSectionController self = msg_send ~self ~cmd:(selector "windowSectionController") ~typ:(returning (id))
let windowTitleController self = msg_send ~self ~cmd:(selector "windowTitleController") ~typ:(returning (id))
let windowTitlebarLayoutDirection self = msg_send ~self ~cmd:(selector "windowTitlebarLayoutDirection") ~typ:(returning (llong))
let worksWhenModal self = msg_send ~self ~cmd:(selector "worksWhenModal") ~typ:(returning (bool))
let zoom x self = msg_send ~self ~cmd:(selector "zoom:") ~typ:(id @-> returning (void)) x