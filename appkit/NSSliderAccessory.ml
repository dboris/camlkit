(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

include NSObject

let _class_ = get_class "NSSliderAccessory"

module Class = struct
  let accessoryWithImage x self = msg_send ~self ~cmd:(selector "accessoryWithImage:") ~typ:(id @-> returning (id)) x
  let keyPathsForValuesAffectingRepeatsOnLongPress self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingRepeatsOnLongPress") ~typ:(returning (id))
end

let accessibilityActivationPoint self = msg_send ~self ~cmd:(selector "accessibilityActivationPoint") ~typ:(returning (CGPoint.t))
let accessibilityAllowedValues self = msg_send ~self ~cmd:(selector "accessibilityAllowedValues") ~typ:(returning (id))
let accessibilityApplicationFocusedUIElement self = msg_send ~self ~cmd:(selector "accessibilityApplicationFocusedUIElement") ~typ:(returning (id))
let accessibilityAttributedStringForRange x self = msg_send ~self ~cmd:(selector "accessibilityAttributedStringForRange:") ~typ:(NSRange.t @-> returning (id)) x
let accessibilityAttributedUserInputLabels self = msg_send ~self ~cmd:(selector "accessibilityAttributedUserInputLabels") ~typ:(returning (id))
let accessibilityAuditIssues self = msg_send ~self ~cmd:(selector "accessibilityAuditIssues") ~typ:(returning (id))
let accessibilityCancelButton self = msg_send ~self ~cmd:(selector "accessibilityCancelButton") ~typ:(returning (id))
let accessibilityCellForColumn x ~row self = msg_send ~self ~cmd:(selector "accessibilityCellForColumn:row:") ~typ:(llong @-> llong @-> returning (id)) x row
let accessibilityChartDescriptor self = msg_send ~self ~cmd:(selector "accessibilityChartDescriptor") ~typ:(returning (id))
let accessibilityChildren self = msg_send ~self ~cmd:(selector "accessibilityChildren") ~typ:(returning (id))
let accessibilityChildrenInNavigationOrder self = msg_send ~self ~cmd:(selector "accessibilityChildrenInNavigationOrder") ~typ:(returning (id))
let accessibilityClearButton self = msg_send ~self ~cmd:(selector "accessibilityClearButton") ~typ:(returning (id))
let accessibilityCloseButton self = msg_send ~self ~cmd:(selector "accessibilityCloseButton") ~typ:(returning (id))
let accessibilityColumnCount self = msg_send ~self ~cmd:(selector "accessibilityColumnCount") ~typ:(returning (llong))
let accessibilityColumnHeaderUIElements self = msg_send ~self ~cmd:(selector "accessibilityColumnHeaderUIElements") ~typ:(returning (id))
let accessibilityColumnIndexRange self = msg_send ~self ~cmd:(selector "accessibilityColumnIndexRange") ~typ:(returning (NSRange.t))
let accessibilityColumnTitles self = msg_send ~self ~cmd:(selector "accessibilityColumnTitles") ~typ:(returning (id))
let accessibilityColumns self = msg_send ~self ~cmd:(selector "accessibilityColumns") ~typ:(returning (id))
let accessibilityContainerType self = msg_send ~self ~cmd:(selector "accessibilityContainerType") ~typ:(returning (llong))
let accessibilityContentSiblingAbove self = msg_send ~self ~cmd:(selector "accessibilityContentSiblingAbove") ~typ:(returning (id))
let accessibilityContentSiblingBelow self = msg_send ~self ~cmd:(selector "accessibilityContentSiblingBelow") ~typ:(returning (id))
let accessibilityContents self = msg_send ~self ~cmd:(selector "accessibilityContents") ~typ:(returning (id))
let accessibilityCriticalValue self = msg_send ~self ~cmd:(selector "accessibilityCriticalValue") ~typ:(returning (id))
let accessibilityCustomActions self = msg_send ~self ~cmd:(selector "accessibilityCustomActions") ~typ:(returning (id))
let accessibilityCustomChoosers self = msg_send ~self ~cmd:(selector "accessibilityCustomChoosers") ~typ:(returning (id))
let accessibilityCustomContent self = msg_send ~self ~cmd:(selector "accessibilityCustomContent") ~typ:(returning (id))
let accessibilityCustomRotors self = msg_send ~self ~cmd:(selector "accessibilityCustomRotors") ~typ:(returning (id))
let accessibilityDecrementButton self = msg_send ~self ~cmd:(selector "accessibilityDecrementButton") ~typ:(returning (id))
let accessibilityDefaultButton self = msg_send ~self ~cmd:(selector "accessibilityDefaultButton") ~typ:(returning (id))
let accessibilityDisclosedByRow self = msg_send ~self ~cmd:(selector "accessibilityDisclosedByRow") ~typ:(returning (id))
let accessibilityDisclosedRows self = msg_send ~self ~cmd:(selector "accessibilityDisclosedRows") ~typ:(returning (id))
let accessibilityDisclosureLevel self = msg_send ~self ~cmd:(selector "accessibilityDisclosureLevel") ~typ:(returning (llong))
let accessibilityDocument self = msg_send ~self ~cmd:(selector "accessibilityDocument") ~typ:(returning (id))
let accessibilityEmbeddedImageDescription self = msg_send ~self ~cmd:(selector "accessibilityEmbeddedImageDescription") ~typ:(returning (id))
let accessibilityExtrasMenuBar self = msg_send ~self ~cmd:(selector "accessibilityExtrasMenuBar") ~typ:(returning (id))
let accessibilityFilename self = msg_send ~self ~cmd:(selector "accessibilityFilename") ~typ:(returning (id))
let accessibilityFocusedWindow self = msg_send ~self ~cmd:(selector "accessibilityFocusedWindow") ~typ:(returning (id))
let accessibilityFrame self = msg_send ~self ~cmd:(selector "accessibilityFrame") ~typ:(returning (CGRect.t))
let accessibilityFrameForRange x self = msg_send ~self ~cmd:(selector "accessibilityFrameForRange:") ~typ:(NSRange.t @-> returning (CGRect.t)) x
let accessibilityFrameInParentSpace self = msg_send ~self ~cmd:(selector "accessibilityFrameInParentSpace") ~typ:(returning (CGRect.t))
let accessibilityFullScreenButton self = msg_send ~self ~cmd:(selector "accessibilityFullScreenButton") ~typ:(returning (id))
let accessibilityFunctionRowTopLevelElements self = msg_send ~self ~cmd:(selector "accessibilityFunctionRowTopLevelElements") ~typ:(returning (id))
let accessibilityGrowArea self = msg_send ~self ~cmd:(selector "accessibilityGrowArea") ~typ:(returning (id))
let accessibilityHandles self = msg_send ~self ~cmd:(selector "accessibilityHandles") ~typ:(returning (id))
let accessibilityHeader self = msg_send ~self ~cmd:(selector "accessibilityHeader") ~typ:(returning (id))
let accessibilityHeaderForColumnIndex x self = msg_send ~self ~cmd:(selector "accessibilityHeaderForColumnIndex:") ~typ:(llong @-> returning (id)) x
let accessibilityHeaderForRowIndex x self = msg_send ~self ~cmd:(selector "accessibilityHeaderForRowIndex:") ~typ:(llong @-> returning (id)) x
let accessibilityHeaderGroup self = msg_send ~self ~cmd:(selector "accessibilityHeaderGroup") ~typ:(returning (id))
let accessibilityHelp self = msg_send ~self ~cmd:(selector "accessibilityHelp") ~typ:(returning (id))
let accessibilityHorizontalScrollBar self = msg_send ~self ~cmd:(selector "accessibilityHorizontalScrollBar") ~typ:(returning (id))
let accessibilityHorizontalUnitDescription self = msg_send ~self ~cmd:(selector "accessibilityHorizontalUnitDescription") ~typ:(returning (id))
let accessibilityHorizontalUnits self = msg_send ~self ~cmd:(selector "accessibilityHorizontalUnits") ~typ:(returning (llong))
let accessibilityIdentifier self = msg_send ~self ~cmd:(selector "accessibilityIdentifier") ~typ:(returning (id))
let accessibilityIncrementButton self = msg_send ~self ~cmd:(selector "accessibilityIncrementButton") ~typ:(returning (id))
let accessibilityIndex self = msg_send ~self ~cmd:(selector "accessibilityIndex") ~typ:(returning (llong))
let accessibilityInsertionPointLineNumber self = msg_send ~self ~cmd:(selector "accessibilityInsertionPointLineNumber") ~typ:(returning (llong))
let accessibilityLabel self = msg_send ~self ~cmd:(selector "accessibilityLabel") ~typ:(returning (id))
let accessibilityLabelUIElements self = msg_send ~self ~cmd:(selector "accessibilityLabelUIElements") ~typ:(returning (id))
let accessibilityLabelValue self = msg_send ~self ~cmd:(selector "accessibilityLabelValue") ~typ:(returning (float))
let accessibilityLayoutPointForScreenPoint x self = msg_send ~self ~cmd:(selector "accessibilityLayoutPointForScreenPoint:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) x
let accessibilityLayoutSizeForScreenSize x self = msg_send ~self ~cmd:(selector "accessibilityLayoutSizeForScreenSize:") ~typ:(CGSize.t @-> returning (CGSize.t)) x
let accessibilityLineForIndex x self = msg_send ~self ~cmd:(selector "accessibilityLineForIndex:") ~typ:(llong @-> returning (llong)) x
let accessibilityLinkedUIElements self = msg_send ~self ~cmd:(selector "accessibilityLinkedUIElements") ~typ:(returning (id))
let accessibilityMainWindow self = msg_send ~self ~cmd:(selector "accessibilityMainWindow") ~typ:(returning (id))
let accessibilityMarkerGroupUIElement self = msg_send ~self ~cmd:(selector "accessibilityMarkerGroupUIElement") ~typ:(returning (id))
let accessibilityMarkerTypeDescription self = msg_send ~self ~cmd:(selector "accessibilityMarkerTypeDescription") ~typ:(returning (id))
let accessibilityMarkerUIElements self = msg_send ~self ~cmd:(selector "accessibilityMarkerUIElements") ~typ:(returning (id))
let accessibilityMarkerValues self = msg_send ~self ~cmd:(selector "accessibilityMarkerValues") ~typ:(returning (id))
let accessibilityMaxValue self = msg_send ~self ~cmd:(selector "accessibilityMaxValue") ~typ:(returning (id))
let accessibilityMenuBar self = msg_send ~self ~cmd:(selector "accessibilityMenuBar") ~typ:(returning (id))
let accessibilityMinValue self = msg_send ~self ~cmd:(selector "accessibilityMinValue") ~typ:(returning (id))
let accessibilityMinimizeButton self = msg_send ~self ~cmd:(selector "accessibilityMinimizeButton") ~typ:(returning (id))
let accessibilityNextContentSibling self = msg_send ~self ~cmd:(selector "accessibilityNextContentSibling") ~typ:(returning (id))
let accessibilityNextContents self = msg_send ~self ~cmd:(selector "accessibilityNextContents") ~typ:(returning (id))
let accessibilityNumberOfCharacters self = msg_send ~self ~cmd:(selector "accessibilityNumberOfCharacters") ~typ:(returning (llong))
let accessibilityOrientation self = msg_send ~self ~cmd:(selector "accessibilityOrientation") ~typ:(returning (llong))
let accessibilityOverflowButton self = msg_send ~self ~cmd:(selector "accessibilityOverflowButton") ~typ:(returning (id))
let accessibilityOverridesAlwaysTakePrecedence self = msg_send ~self ~cmd:(selector "accessibilityOverridesAlwaysTakePrecedence") ~typ:(returning (bool))
let accessibilityParent self = msg_send ~self ~cmd:(selector "accessibilityParent") ~typ:(returning (id))
let accessibilityPath self = msg_send ~self ~cmd:(selector "accessibilityPath") ~typ:(returning (id))
let accessibilityPerformCancel self = msg_send ~self ~cmd:(selector "accessibilityPerformCancel") ~typ:(returning (bool))
let accessibilityPerformConfirm self = msg_send ~self ~cmd:(selector "accessibilityPerformConfirm") ~typ:(returning (bool))
let accessibilityPerformDecrement self = msg_send ~self ~cmd:(selector "accessibilityPerformDecrement") ~typ:(returning (bool))
let accessibilityPerformDelete self = msg_send ~self ~cmd:(selector "accessibilityPerformDelete") ~typ:(returning (bool))
let accessibilityPerformIncrement self = msg_send ~self ~cmd:(selector "accessibilityPerformIncrement") ~typ:(returning (bool))
let accessibilityPerformPick self = msg_send ~self ~cmd:(selector "accessibilityPerformPick") ~typ:(returning (bool))
let accessibilityPerformPress self = msg_send ~self ~cmd:(selector "accessibilityPerformPress") ~typ:(returning (bool))
let accessibilityPerformRaise self = msg_send ~self ~cmd:(selector "accessibilityPerformRaise") ~typ:(returning (bool))
let accessibilityPerformShowAlternateUI self = msg_send ~self ~cmd:(selector "accessibilityPerformShowAlternateUI") ~typ:(returning (bool))
let accessibilityPerformShowDefaultUI self = msg_send ~self ~cmd:(selector "accessibilityPerformShowDefaultUI") ~typ:(returning (bool))
let accessibilityPerformShowMenu self = msg_send ~self ~cmd:(selector "accessibilityPerformShowMenu") ~typ:(returning (bool))
let accessibilityPlaceholderValue self = msg_send ~self ~cmd:(selector "accessibilityPlaceholderValue") ~typ:(returning (id))
let accessibilityPreviousContentSibling self = msg_send ~self ~cmd:(selector "accessibilityPreviousContentSibling") ~typ:(returning (id))
let accessibilityPreviousContents self = msg_send ~self ~cmd:(selector "accessibilityPreviousContents") ~typ:(returning (id))
let accessibilityProxy self = msg_send ~self ~cmd:(selector "accessibilityProxy") ~typ:(returning (id))
let accessibilityRTFForRange x self = msg_send ~self ~cmd:(selector "accessibilityRTFForRange:") ~typ:(NSRange.t @-> returning (id)) x
let accessibilityRangeForIndex x self = msg_send ~self ~cmd:(selector "accessibilityRangeForIndex:") ~typ:(llong @-> returning (NSRange.t)) x
let accessibilityRangeForLine x self = msg_send ~self ~cmd:(selector "accessibilityRangeForLine:") ~typ:(llong @-> returning (NSRange.t)) x
let accessibilityRangeForPosition x self = msg_send ~self ~cmd:(selector "accessibilityRangeForPosition:") ~typ:(CGPoint.t @-> returning (NSRange.t)) x
let accessibilityResultsForSearchPredicate x self = msg_send ~self ~cmd:(selector "accessibilityResultsForSearchPredicate:") ~typ:(id @-> returning (id)) x
let accessibilityRole self = msg_send ~self ~cmd:(selector "accessibilityRole") ~typ:(returning (id))
let accessibilityRoleDescription self = msg_send ~self ~cmd:(selector "accessibilityRoleDescription") ~typ:(returning (id))
let accessibilityRowCount self = msg_send ~self ~cmd:(selector "accessibilityRowCount") ~typ:(returning (llong))
let accessibilityRowHeaderUIElements self = msg_send ~self ~cmd:(selector "accessibilityRowHeaderUIElements") ~typ:(returning (id))
let accessibilityRowIndexRange self = msg_send ~self ~cmd:(selector "accessibilityRowIndexRange") ~typ:(returning (NSRange.t))
let accessibilityRows self = msg_send ~self ~cmd:(selector "accessibilityRows") ~typ:(returning (id))
let accessibilityRulerMarkerType self = msg_send ~self ~cmd:(selector "accessibilityRulerMarkerType") ~typ:(returning (llong))
let accessibilityScreenPointForLayoutPoint x self = msg_send ~self ~cmd:(selector "accessibilityScreenPointForLayoutPoint:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) x
let accessibilityScreenSizeForLayoutSize x self = msg_send ~self ~cmd:(selector "accessibilityScreenSizeForLayoutSize:") ~typ:(CGSize.t @-> returning (CGSize.t)) x
let accessibilitySearchButton self = msg_send ~self ~cmd:(selector "accessibilitySearchButton") ~typ:(returning (id))
let accessibilitySearchMenu self = msg_send ~self ~cmd:(selector "accessibilitySearchMenu") ~typ:(returning (id))
let accessibilitySections self = msg_send ~self ~cmd:(selector "accessibilitySections") ~typ:(returning (id))
let accessibilitySelectedCells self = msg_send ~self ~cmd:(selector "accessibilitySelectedCells") ~typ:(returning (id))
let accessibilitySelectedChildren self = msg_send ~self ~cmd:(selector "accessibilitySelectedChildren") ~typ:(returning (id))
let accessibilitySelectedColumns self = msg_send ~self ~cmd:(selector "accessibilitySelectedColumns") ~typ:(returning (id))
let accessibilitySelectedRows self = msg_send ~self ~cmd:(selector "accessibilitySelectedRows") ~typ:(returning (id))
let accessibilitySelectedText self = msg_send ~self ~cmd:(selector "accessibilitySelectedText") ~typ:(returning (id))
let accessibilitySelectedTextRange self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextRange") ~typ:(returning (NSRange.t))
let accessibilitySelectedTextRanges self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextRanges") ~typ:(returning (id))
let accessibilityServesAsTitleForUIElements self = msg_send ~self ~cmd:(selector "accessibilityServesAsTitleForUIElements") ~typ:(returning (id))
let accessibilitySharedCharacterRange self = msg_send ~self ~cmd:(selector "accessibilitySharedCharacterRange") ~typ:(returning (NSRange.t))
let accessibilitySharedFocusElements self = msg_send ~self ~cmd:(selector "accessibilitySharedFocusElements") ~typ:(returning (id))
let accessibilitySharedTextUIElements self = msg_send ~self ~cmd:(selector "accessibilitySharedTextUIElements") ~typ:(returning (id))
let accessibilityShownMenu self = msg_send ~self ~cmd:(selector "accessibilityShownMenu") ~typ:(returning (id))
let accessibilitySortDirection self = msg_send ~self ~cmd:(selector "accessibilitySortDirection") ~typ:(returning (llong))
let accessibilitySplitters self = msg_send ~self ~cmd:(selector "accessibilitySplitters") ~typ:(returning (id))
let accessibilityStringForRange x self = msg_send ~self ~cmd:(selector "accessibilityStringForRange:") ~typ:(NSRange.t @-> returning (id)) x
let accessibilityStyleRangeForIndex x self = msg_send ~self ~cmd:(selector "accessibilityStyleRangeForIndex:") ~typ:(llong @-> returning (NSRange.t)) x
let accessibilitySubrole self = msg_send ~self ~cmd:(selector "accessibilitySubrole") ~typ:(returning (id))
let accessibilityTabs self = msg_send ~self ~cmd:(selector "accessibilityTabs") ~typ:(returning (id))
let accessibilityTitle self = msg_send ~self ~cmd:(selector "accessibilityTitle") ~typ:(returning (id))
let accessibilityTitleUIElement self = msg_send ~self ~cmd:(selector "accessibilityTitleUIElement") ~typ:(returning (id))
let accessibilityToolbarButton self = msg_send ~self ~cmd:(selector "accessibilityToolbarButton") ~typ:(returning (id))
let accessibilityTopLevelUIElement self = msg_send ~self ~cmd:(selector "accessibilityTopLevelUIElement") ~typ:(returning (id))
let accessibilityURL self = msg_send ~self ~cmd:(selector "accessibilityURL") ~typ:(returning (id))
let accessibilityUnitDescription self = msg_send ~self ~cmd:(selector "accessibilityUnitDescription") ~typ:(returning (id))
let accessibilityUnits self = msg_send ~self ~cmd:(selector "accessibilityUnits") ~typ:(returning (llong))
let accessibilityUserInputLabels self = msg_send ~self ~cmd:(selector "accessibilityUserInputLabels") ~typ:(returning (id))
let accessibilityValue self = msg_send ~self ~cmd:(selector "accessibilityValue") ~typ:(returning (id))
let accessibilityValueDescription self = msg_send ~self ~cmd:(selector "accessibilityValueDescription") ~typ:(returning (id))
let accessibilityVerticalScrollBar self = msg_send ~self ~cmd:(selector "accessibilityVerticalScrollBar") ~typ:(returning (id))
let accessibilityVerticalUnitDescription self = msg_send ~self ~cmd:(selector "accessibilityVerticalUnitDescription") ~typ:(returning (id))
let accessibilityVerticalUnits self = msg_send ~self ~cmd:(selector "accessibilityVerticalUnits") ~typ:(returning (llong))
let accessibilityVisibleCells self = msg_send ~self ~cmd:(selector "accessibilityVisibleCells") ~typ:(returning (id))
let accessibilityVisibleCharacterRange self = msg_send ~self ~cmd:(selector "accessibilityVisibleCharacterRange") ~typ:(returning (NSRange.t))
let accessibilityVisibleChildren self = msg_send ~self ~cmd:(selector "accessibilityVisibleChildren") ~typ:(returning (id))
let accessibilityVisibleColumns self = msg_send ~self ~cmd:(selector "accessibilityVisibleColumns") ~typ:(returning (id))
let accessibilityVisibleRows self = msg_send ~self ~cmd:(selector "accessibilityVisibleRows") ~typ:(returning (id))
let accessibilityWarningValue self = msg_send ~self ~cmd:(selector "accessibilityWarningValue") ~typ:(returning (id))
let accessibilityWindow self = msg_send ~self ~cmd:(selector "accessibilityWindow") ~typ:(returning (id))
let accessibilityWindows self = msg_send ~self ~cmd:(selector "accessibilityWindows") ~typ:(returning (id))
let accessibilityZoomButton self = msg_send ~self ~cmd:(selector "accessibilityZoomButton") ~typ:(returning (id))
let behavior self = msg_send ~self ~cmd:(selector "behavior") ~typ:(returning (id))
let container self = msg_send ~self ~cmd:(selector "container") ~typ:(returning (id))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let enclosingSlider self = msg_send ~self ~cmd:(selector "enclosingSlider") ~typ:(returning (id))
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithImage x self = msg_send ~self ~cmd:(selector "initWithImage:") ~typ:(id @-> returning (id)) x
let isAccessibilityAlternateUIVisible self = msg_send ~self ~cmd:(selector "isAccessibilityAlternateUIVisible") ~typ:(returning (bool))
let isAccessibilityAutoInteractable self = msg_send ~self ~cmd:(selector "isAccessibilityAutoInteractable") ~typ:(returning (bool))
let isAccessibilityDisclosed self = msg_send ~self ~cmd:(selector "isAccessibilityDisclosed") ~typ:(returning (bool))
let isAccessibilityEdited self = msg_send ~self ~cmd:(selector "isAccessibilityEdited") ~typ:(returning (bool))
let isAccessibilityElement self = msg_send ~self ~cmd:(selector "isAccessibilityElement") ~typ:(returning (bool))
let isAccessibilityEnabled self = msg_send ~self ~cmd:(selector "isAccessibilityEnabled") ~typ:(returning (bool))
let isAccessibilityEnhancedUserInterface self = msg_send ~self ~cmd:(selector "isAccessibilityEnhancedUserInterface") ~typ:(returning (bool))
let isAccessibilityExpanded self = msg_send ~self ~cmd:(selector "isAccessibilityExpanded") ~typ:(returning (bool))
let isAccessibilityFocused self = msg_send ~self ~cmd:(selector "isAccessibilityFocused") ~typ:(returning (bool))
let isAccessibilityFrontmost self = msg_send ~self ~cmd:(selector "isAccessibilityFrontmost") ~typ:(returning (bool))
let isAccessibilityHidden self = msg_send ~self ~cmd:(selector "isAccessibilityHidden") ~typ:(returning (bool))
let isAccessibilityMain self = msg_send ~self ~cmd:(selector "isAccessibilityMain") ~typ:(returning (bool))
let isAccessibilityMimicNativeView self = msg_send ~self ~cmd:(selector "isAccessibilityMimicNativeView") ~typ:(returning (bool))
let isAccessibilityMinimized self = msg_send ~self ~cmd:(selector "isAccessibilityMinimized") ~typ:(returning (bool))
let isAccessibilityModal self = msg_send ~self ~cmd:(selector "isAccessibilityModal") ~typ:(returning (bool))
let isAccessibilityOrderedByRow self = msg_send ~self ~cmd:(selector "isAccessibilityOrderedByRow") ~typ:(returning (bool))
let isAccessibilityProtectedContent self = msg_send ~self ~cmd:(selector "isAccessibilityProtectedContent") ~typ:(returning (bool))
let isAccessibilityRequired self = msg_send ~self ~cmd:(selector "isAccessibilityRequired") ~typ:(returning (bool))
let isAccessibilitySelected self = msg_send ~self ~cmd:(selector "isAccessibilitySelected") ~typ:(returning (bool))
let isAccessibilitySelectorAllowed x self = msg_send ~self ~cmd:(selector "isAccessibilitySelectorAllowed:") ~typ:(_SEL @-> returning (bool)) x
let isEnabled self = msg_send ~self ~cmd:(selector "isEnabled") ~typ:(returning (bool))
let repeatsOnLongPress self = msg_send ~self ~cmd:(selector "repeatsOnLongPress") ~typ:(returning (bool))
let setAccessibilityActivationPoint x self = msg_send ~self ~cmd:(selector "setAccessibilityActivationPoint:") ~typ:(CGPoint.t @-> returning (void)) x
let setAccessibilityAllowedValues x self = msg_send ~self ~cmd:(selector "setAccessibilityAllowedValues:") ~typ:(id @-> returning (void)) x
let setAccessibilityAlternateUIVisible x self = msg_send ~self ~cmd:(selector "setAccessibilityAlternateUIVisible:") ~typ:(bool @-> returning (void)) x
let setAccessibilityApplicationFocusedUIElement x self = msg_send ~self ~cmd:(selector "setAccessibilityApplicationFocusedUIElement:") ~typ:(id @-> returning (void)) x
let setAccessibilityAttributedUserInputLabels x self = msg_send ~self ~cmd:(selector "setAccessibilityAttributedUserInputLabels:") ~typ:(id @-> returning (void)) x
let setAccessibilityAuditIssues x self = msg_send ~self ~cmd:(selector "setAccessibilityAuditIssues:") ~typ:(id @-> returning (void)) x
let setAccessibilityAutoInteractable x self = msg_send ~self ~cmd:(selector "setAccessibilityAutoInteractable:") ~typ:(bool @-> returning (void)) x
let setAccessibilityCancelButton x self = msg_send ~self ~cmd:(selector "setAccessibilityCancelButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityChartDescriptor x self = msg_send ~self ~cmd:(selector "setAccessibilityChartDescriptor:") ~typ:(id @-> returning (void)) x
let setAccessibilityChildren x self = msg_send ~self ~cmd:(selector "setAccessibilityChildren:") ~typ:(id @-> returning (void)) x
let setAccessibilityChildrenInNavigationOrder x self = msg_send ~self ~cmd:(selector "setAccessibilityChildrenInNavigationOrder:") ~typ:(id @-> returning (void)) x
let setAccessibilityClearButton x self = msg_send ~self ~cmd:(selector "setAccessibilityClearButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityCloseButton x self = msg_send ~self ~cmd:(selector "setAccessibilityCloseButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityColumnCount x self = msg_send ~self ~cmd:(selector "setAccessibilityColumnCount:") ~typ:(llong @-> returning (void)) x
let setAccessibilityColumnHeaderUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityColumnHeaderUIElements:") ~typ:(id @-> returning (void)) x
let setAccessibilityColumnIndexRange x self = msg_send ~self ~cmd:(selector "setAccessibilityColumnIndexRange:") ~typ:(NSRange.t @-> returning (void)) x
let setAccessibilityColumnTitles x self = msg_send ~self ~cmd:(selector "setAccessibilityColumnTitles:") ~typ:(id @-> returning (void)) x
let setAccessibilityColumns x self = msg_send ~self ~cmd:(selector "setAccessibilityColumns:") ~typ:(id @-> returning (void)) x
let setAccessibilityContainerType x self = msg_send ~self ~cmd:(selector "setAccessibilityContainerType:") ~typ:(llong @-> returning (void)) x
let setAccessibilityContentSiblingAbove x self = msg_send ~self ~cmd:(selector "setAccessibilityContentSiblingAbove:") ~typ:(id @-> returning (void)) x
let setAccessibilityContentSiblingBelow x self = msg_send ~self ~cmd:(selector "setAccessibilityContentSiblingBelow:") ~typ:(id @-> returning (void)) x
let setAccessibilityContents x self = msg_send ~self ~cmd:(selector "setAccessibilityContents:") ~typ:(id @-> returning (void)) x
let setAccessibilityCriticalValue x self = msg_send ~self ~cmd:(selector "setAccessibilityCriticalValue:") ~typ:(id @-> returning (void)) x
let setAccessibilityCustomActions x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomActions:") ~typ:(id @-> returning (void)) x
let setAccessibilityCustomChoosers x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomChoosers:") ~typ:(id @-> returning (void)) x
let setAccessibilityCustomContent x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomContent:") ~typ:(id @-> returning (void)) x
let setAccessibilityCustomRotors x self = msg_send ~self ~cmd:(selector "setAccessibilityCustomRotors:") ~typ:(id @-> returning (void)) x
let setAccessibilityDecrementButton x self = msg_send ~self ~cmd:(selector "setAccessibilityDecrementButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityDefaultButton x self = msg_send ~self ~cmd:(selector "setAccessibilityDefaultButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityDisclosed x self = msg_send ~self ~cmd:(selector "setAccessibilityDisclosed:") ~typ:(bool @-> returning (void)) x
let setAccessibilityDisclosedByRow x self = msg_send ~self ~cmd:(selector "setAccessibilityDisclosedByRow:") ~typ:(id @-> returning (void)) x
let setAccessibilityDisclosedRows x self = msg_send ~self ~cmd:(selector "setAccessibilityDisclosedRows:") ~typ:(id @-> returning (void)) x
let setAccessibilityDisclosureLevel x self = msg_send ~self ~cmd:(selector "setAccessibilityDisclosureLevel:") ~typ:(llong @-> returning (void)) x
let setAccessibilityDocument x self = msg_send ~self ~cmd:(selector "setAccessibilityDocument:") ~typ:(id @-> returning (void)) x
let setAccessibilityEdited x self = msg_send ~self ~cmd:(selector "setAccessibilityEdited:") ~typ:(bool @-> returning (void)) x
let setAccessibilityElement x self = msg_send ~self ~cmd:(selector "setAccessibilityElement:") ~typ:(bool @-> returning (void)) x
let setAccessibilityEmbeddedImageDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityEmbeddedImageDescription:") ~typ:(id @-> returning (void)) x
let setAccessibilityEnabled x self = msg_send ~self ~cmd:(selector "setAccessibilityEnabled:") ~typ:(bool @-> returning (void)) x
let setAccessibilityEnhancedUserInterface x self = msg_send ~self ~cmd:(selector "setAccessibilityEnhancedUserInterface:") ~typ:(bool @-> returning (void)) x
let setAccessibilityExpanded x self = msg_send ~self ~cmd:(selector "setAccessibilityExpanded:") ~typ:(bool @-> returning (void)) x
let setAccessibilityExtrasMenuBar x self = msg_send ~self ~cmd:(selector "setAccessibilityExtrasMenuBar:") ~typ:(id @-> returning (void)) x
let setAccessibilityFilename x self = msg_send ~self ~cmd:(selector "setAccessibilityFilename:") ~typ:(id @-> returning (void)) x
let setAccessibilityFocused x self = msg_send ~self ~cmd:(selector "setAccessibilityFocused:") ~typ:(bool @-> returning (void)) x
let setAccessibilityFocusedWindow x self = msg_send ~self ~cmd:(selector "setAccessibilityFocusedWindow:") ~typ:(id @-> returning (void)) x
let setAccessibilityFrame x self = msg_send ~self ~cmd:(selector "setAccessibilityFrame:") ~typ:(CGRect.t @-> returning (void)) x
let setAccessibilityFrameInParentSpace x self = msg_send ~self ~cmd:(selector "setAccessibilityFrameInParentSpace:") ~typ:(CGRect.t @-> returning (void)) x
let setAccessibilityFrontmost x self = msg_send ~self ~cmd:(selector "setAccessibilityFrontmost:") ~typ:(bool @-> returning (void)) x
let setAccessibilityFullScreenButton x self = msg_send ~self ~cmd:(selector "setAccessibilityFullScreenButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityFunctionRowTopLevelElements x self = msg_send ~self ~cmd:(selector "setAccessibilityFunctionRowTopLevelElements:") ~typ:(id @-> returning (void)) x
let setAccessibilityGrowArea x self = msg_send ~self ~cmd:(selector "setAccessibilityGrowArea:") ~typ:(id @-> returning (void)) x
let setAccessibilityHandles x self = msg_send ~self ~cmd:(selector "setAccessibilityHandles:") ~typ:(id @-> returning (void)) x
let setAccessibilityHeader x self = msg_send ~self ~cmd:(selector "setAccessibilityHeader:") ~typ:(id @-> returning (void)) x
let setAccessibilityHeaderGroup x self = msg_send ~self ~cmd:(selector "setAccessibilityHeaderGroup:") ~typ:(id @-> returning (void)) x
let setAccessibilityHelp x self = msg_send ~self ~cmd:(selector "setAccessibilityHelp:") ~typ:(id @-> returning (void)) x
let setAccessibilityHidden x self = msg_send ~self ~cmd:(selector "setAccessibilityHidden:") ~typ:(bool @-> returning (void)) x
let setAccessibilityHorizontalScrollBar x self = msg_send ~self ~cmd:(selector "setAccessibilityHorizontalScrollBar:") ~typ:(id @-> returning (void)) x
let setAccessibilityHorizontalUnitDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityHorizontalUnitDescription:") ~typ:(id @-> returning (void)) x
let setAccessibilityHorizontalUnits x self = msg_send ~self ~cmd:(selector "setAccessibilityHorizontalUnits:") ~typ:(llong @-> returning (void)) x
let setAccessibilityIdentifier x self = msg_send ~self ~cmd:(selector "setAccessibilityIdentifier:") ~typ:(id @-> returning (void)) x
let setAccessibilityIncrementButton x self = msg_send ~self ~cmd:(selector "setAccessibilityIncrementButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityIndex x self = msg_send ~self ~cmd:(selector "setAccessibilityIndex:") ~typ:(llong @-> returning (void)) x
let setAccessibilityInsertionPointLineNumber x self = msg_send ~self ~cmd:(selector "setAccessibilityInsertionPointLineNumber:") ~typ:(llong @-> returning (void)) x
let setAccessibilityLabel x self = msg_send ~self ~cmd:(selector "setAccessibilityLabel:") ~typ:(id @-> returning (void)) x
let setAccessibilityLabelUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityLabelUIElements:") ~typ:(id @-> returning (void)) x
let setAccessibilityLabelValue x self = msg_send ~self ~cmd:(selector "setAccessibilityLabelValue:") ~typ:(float @-> returning (void)) x
let setAccessibilityLinkedUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityLinkedUIElements:") ~typ:(id @-> returning (void)) x
let setAccessibilityMain x self = msg_send ~self ~cmd:(selector "setAccessibilityMain:") ~typ:(bool @-> returning (void)) x
let setAccessibilityMainWindow x self = msg_send ~self ~cmd:(selector "setAccessibilityMainWindow:") ~typ:(id @-> returning (void)) x
let setAccessibilityMarkerGroupUIElement x self = msg_send ~self ~cmd:(selector "setAccessibilityMarkerGroupUIElement:") ~typ:(id @-> returning (void)) x
let setAccessibilityMarkerTypeDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityMarkerTypeDescription:") ~typ:(id @-> returning (void)) x
let setAccessibilityMarkerUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityMarkerUIElements:") ~typ:(id @-> returning (void)) x
let setAccessibilityMarkerValues x self = msg_send ~self ~cmd:(selector "setAccessibilityMarkerValues:") ~typ:(id @-> returning (void)) x
let setAccessibilityMaxValue x self = msg_send ~self ~cmd:(selector "setAccessibilityMaxValue:") ~typ:(id @-> returning (void)) x
let setAccessibilityMenuBar x self = msg_send ~self ~cmd:(selector "setAccessibilityMenuBar:") ~typ:(id @-> returning (void)) x
let setAccessibilityMimicNativeView x self = msg_send ~self ~cmd:(selector "setAccessibilityMimicNativeView:") ~typ:(bool @-> returning (void)) x
let setAccessibilityMinValue x self = msg_send ~self ~cmd:(selector "setAccessibilityMinValue:") ~typ:(id @-> returning (void)) x
let setAccessibilityMinimizeButton x self = msg_send ~self ~cmd:(selector "setAccessibilityMinimizeButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityMinimized x self = msg_send ~self ~cmd:(selector "setAccessibilityMinimized:") ~typ:(bool @-> returning (void)) x
let setAccessibilityModal x self = msg_send ~self ~cmd:(selector "setAccessibilityModal:") ~typ:(bool @-> returning (void)) x
let setAccessibilityNextContents x self = msg_send ~self ~cmd:(selector "setAccessibilityNextContents:") ~typ:(id @-> returning (void)) x
let setAccessibilityNumberOfCharacters x self = msg_send ~self ~cmd:(selector "setAccessibilityNumberOfCharacters:") ~typ:(llong @-> returning (void)) x
let setAccessibilityOrderedByRow x self = msg_send ~self ~cmd:(selector "setAccessibilityOrderedByRow:") ~typ:(bool @-> returning (void)) x
let setAccessibilityOrientation x self = msg_send ~self ~cmd:(selector "setAccessibilityOrientation:") ~typ:(llong @-> returning (void)) x
let setAccessibilityOverflowButton x self = msg_send ~self ~cmd:(selector "setAccessibilityOverflowButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityOverridesAlwaysTakePrecedence x self = msg_send ~self ~cmd:(selector "setAccessibilityOverridesAlwaysTakePrecedence:") ~typ:(bool @-> returning (void)) x
let setAccessibilityParent x self = msg_send ~self ~cmd:(selector "setAccessibilityParent:") ~typ:(id @-> returning (void)) x
let setAccessibilityPath x self = msg_send ~self ~cmd:(selector "setAccessibilityPath:") ~typ:(id @-> returning (void)) x
let setAccessibilityPlaceholderValue x self = msg_send ~self ~cmd:(selector "setAccessibilityPlaceholderValue:") ~typ:(id @-> returning (void)) x
let setAccessibilityPreviousContents x self = msg_send ~self ~cmd:(selector "setAccessibilityPreviousContents:") ~typ:(id @-> returning (void)) x
let setAccessibilityProtectedContent x self = msg_send ~self ~cmd:(selector "setAccessibilityProtectedContent:") ~typ:(bool @-> returning (void)) x
let setAccessibilityProxy x self = msg_send ~self ~cmd:(selector "setAccessibilityProxy:") ~typ:(id @-> returning (void)) x
let setAccessibilityRequired x self = msg_send ~self ~cmd:(selector "setAccessibilityRequired:") ~typ:(bool @-> returning (void)) x
let setAccessibilityRole x self = msg_send ~self ~cmd:(selector "setAccessibilityRole:") ~typ:(id @-> returning (void)) x
let setAccessibilityRoleDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityRoleDescription:") ~typ:(id @-> returning (void)) x
let setAccessibilityRowCount x self = msg_send ~self ~cmd:(selector "setAccessibilityRowCount:") ~typ:(llong @-> returning (void)) x
let setAccessibilityRowHeaderUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityRowHeaderUIElements:") ~typ:(id @-> returning (void)) x
let setAccessibilityRowIndexRange x self = msg_send ~self ~cmd:(selector "setAccessibilityRowIndexRange:") ~typ:(NSRange.t @-> returning (void)) x
let setAccessibilityRows x self = msg_send ~self ~cmd:(selector "setAccessibilityRows:") ~typ:(id @-> returning (void)) x
let setAccessibilityRulerMarkerType x self = msg_send ~self ~cmd:(selector "setAccessibilityRulerMarkerType:") ~typ:(llong @-> returning (void)) x
let setAccessibilitySearchButton x self = msg_send ~self ~cmd:(selector "setAccessibilitySearchButton:") ~typ:(id @-> returning (void)) x
let setAccessibilitySearchMenu x self = msg_send ~self ~cmd:(selector "setAccessibilitySearchMenu:") ~typ:(id @-> returning (void)) x
let setAccessibilitySections x self = msg_send ~self ~cmd:(selector "setAccessibilitySections:") ~typ:(id @-> returning (void)) x
let setAccessibilitySelected x self = msg_send ~self ~cmd:(selector "setAccessibilitySelected:") ~typ:(bool @-> returning (void)) x
let setAccessibilitySelectedCells x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedCells:") ~typ:(id @-> returning (void)) x
let setAccessibilitySelectedChildren x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedChildren:") ~typ:(id @-> returning (void)) x
let setAccessibilitySelectedColumns x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedColumns:") ~typ:(id @-> returning (void)) x
let setAccessibilitySelectedRows x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedRows:") ~typ:(id @-> returning (void)) x
let setAccessibilitySelectedText x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedText:") ~typ:(id @-> returning (void)) x
let setAccessibilitySelectedTextRange x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedTextRange:") ~typ:(NSRange.t @-> returning (void)) x
let setAccessibilitySelectedTextRanges x self = msg_send ~self ~cmd:(selector "setAccessibilitySelectedTextRanges:") ~typ:(id @-> returning (void)) x
let setAccessibilityServesAsTitleForUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilityServesAsTitleForUIElements:") ~typ:(id @-> returning (void)) x
let setAccessibilitySharedCharacterRange x self = msg_send ~self ~cmd:(selector "setAccessibilitySharedCharacterRange:") ~typ:(NSRange.t @-> returning (void)) x
let setAccessibilitySharedFocusElements x self = msg_send ~self ~cmd:(selector "setAccessibilitySharedFocusElements:") ~typ:(id @-> returning (void)) x
let setAccessibilitySharedTextUIElements x self = msg_send ~self ~cmd:(selector "setAccessibilitySharedTextUIElements:") ~typ:(id @-> returning (void)) x
let setAccessibilityShownMenu x self = msg_send ~self ~cmd:(selector "setAccessibilityShownMenu:") ~typ:(id @-> returning (void)) x
let setAccessibilitySortDirection x self = msg_send ~self ~cmd:(selector "setAccessibilitySortDirection:") ~typ:(llong @-> returning (void)) x
let setAccessibilitySplitters x self = msg_send ~self ~cmd:(selector "setAccessibilitySplitters:") ~typ:(id @-> returning (void)) x
let setAccessibilitySubrole x self = msg_send ~self ~cmd:(selector "setAccessibilitySubrole:") ~typ:(id @-> returning (void)) x
let setAccessibilityTabs x self = msg_send ~self ~cmd:(selector "setAccessibilityTabs:") ~typ:(id @-> returning (void)) x
let setAccessibilityTitle x self = msg_send ~self ~cmd:(selector "setAccessibilityTitle:") ~typ:(id @-> returning (void)) x
let setAccessibilityTitleUIElement x self = msg_send ~self ~cmd:(selector "setAccessibilityTitleUIElement:") ~typ:(id @-> returning (void)) x
let setAccessibilityToolbarButton x self = msg_send ~self ~cmd:(selector "setAccessibilityToolbarButton:") ~typ:(id @-> returning (void)) x
let setAccessibilityTopLevelUIElement x self = msg_send ~self ~cmd:(selector "setAccessibilityTopLevelUIElement:") ~typ:(id @-> returning (void)) x
let setAccessibilityURL x self = msg_send ~self ~cmd:(selector "setAccessibilityURL:") ~typ:(id @-> returning (void)) x
let setAccessibilityUnitDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityUnitDescription:") ~typ:(id @-> returning (void)) x
let setAccessibilityUnits x self = msg_send ~self ~cmd:(selector "setAccessibilityUnits:") ~typ:(llong @-> returning (void)) x
let setAccessibilityUserInputLabels x self = msg_send ~self ~cmd:(selector "setAccessibilityUserInputLabels:") ~typ:(id @-> returning (void)) x
let setAccessibilityValue x self = msg_send ~self ~cmd:(selector "setAccessibilityValue:") ~typ:(id @-> returning (void)) x
let setAccessibilityValueDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityValueDescription:") ~typ:(id @-> returning (void)) x
let setAccessibilityVerticalScrollBar x self = msg_send ~self ~cmd:(selector "setAccessibilityVerticalScrollBar:") ~typ:(id @-> returning (void)) x
let setAccessibilityVerticalUnitDescription x self = msg_send ~self ~cmd:(selector "setAccessibilityVerticalUnitDescription:") ~typ:(id @-> returning (void)) x
let setAccessibilityVerticalUnits x self = msg_send ~self ~cmd:(selector "setAccessibilityVerticalUnits:") ~typ:(llong @-> returning (void)) x
let setAccessibilityVisibleCells x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleCells:") ~typ:(id @-> returning (void)) x
let setAccessibilityVisibleCharacterRange x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleCharacterRange:") ~typ:(NSRange.t @-> returning (void)) x
let setAccessibilityVisibleChildren x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleChildren:") ~typ:(id @-> returning (void)) x
let setAccessibilityVisibleColumns x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleColumns:") ~typ:(id @-> returning (void)) x
let setAccessibilityVisibleRows x self = msg_send ~self ~cmd:(selector "setAccessibilityVisibleRows:") ~typ:(id @-> returning (void)) x
let setAccessibilityWarningValue x self = msg_send ~self ~cmd:(selector "setAccessibilityWarningValue:") ~typ:(id @-> returning (void)) x
let setAccessibilityWindow x self = msg_send ~self ~cmd:(selector "setAccessibilityWindow:") ~typ:(id @-> returning (void)) x
let setAccessibilityWindows x self = msg_send ~self ~cmd:(selector "setAccessibilityWindows:") ~typ:(id @-> returning (void)) x
let setAccessibilityZoomButton x self = msg_send ~self ~cmd:(selector "setAccessibilityZoomButton:") ~typ:(id @-> returning (void)) x
let setBehavior x self = msg_send ~self ~cmd:(selector "setBehavior:") ~typ:(id @-> returning (void)) x
let setContainer x self = msg_send ~self ~cmd:(selector "setContainer:") ~typ:(id @-> returning (void)) x
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning (void)) x
let setEnclosingSlider x self = msg_send ~self ~cmd:(selector "setEnclosingSlider:") ~typ:(id @-> returning (void)) x
let setNextContentSibling x self = msg_send ~self ~cmd:(selector "setNextContentSibling:") ~typ:(id @-> returning (void)) x
let setPreviousContentSibling x self = msg_send ~self ~cmd:(selector "setPreviousContentSibling:") ~typ:(id @-> returning (void)) x