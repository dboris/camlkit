(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

include NSPanel

let _class_ = get_class "NSSavePanel"

module Class = struct
  let keyPathsForValuesAffectingValueForKey x self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingValueForKey:") ~typ:(id @-> returning (id)) x
  let savePanel self = msg_send ~self ~cmd:(selector "savePanel") ~typ:(returning (id))
end

let _MondoSetFilenameWithProperSelection x self = msg_send ~self ~cmd:(selector "MondoSetFilenameWithProperSelection:") ~typ:(id @-> returning (void)) x
let _URL self = msg_send ~self ~cmd:(selector "URL") ~typ:(returning (id))
let _URLs self = msg_send ~self ~cmd:(selector "URLs") ~typ:(returning (id))
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning (id))
let accessibilityDescriptionAttribute self = msg_send ~self ~cmd:(selector "accessibilityDescriptionAttribute") ~typ:(returning (id))
let accessibilityIdentifier self = msg_send ~self ~cmd:(selector "accessibilityIdentifier") ~typ:(returning (id))
let accessibilityIsDescriptionAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsDescriptionAttributeSettable") ~typ:(returning (bool))
let accessoryDidChangeConstraints x self = msg_send ~self ~cmd:(selector "accessoryDidChangeConstraints:") ~typ:(CGSize.t @-> returning (void)) x
let accessoryView self = msg_send ~self ~cmd:(selector "accessoryView") ~typ:(returning (id))
let accessoryWindowOfViewWillUpdateConstraintsIfNeeded x self = msg_send ~self ~cmd:(selector "accessoryWindowOfViewWillUpdateConstraintsIfNeeded:") ~typ:(id @-> returning (void)) x
let advanceToRunPhaseCompletionHandler self = msg_send ~self ~cmd:(selector "advanceToRunPhaseCompletionHandler") ~typ:(returning (ptr void))
let advanceToRunPhaseExceptionHandler self = msg_send ~self ~cmd:(selector "advanceToRunPhaseExceptionHandler") ~typ:(returning (ptr void))
let advanceToRunPhaseIfNeededSemaphore self = msg_send ~self ~cmd:(selector "advanceToRunPhaseIfNeededSemaphore") ~typ:(returning (id))
let allowedContentTypes self = msg_send ~self ~cmd:(selector "allowedContentTypes") ~typ:(returning (id))
let allowedFileTypes self = msg_send ~self ~cmd:(selector "allowedFileTypes") ~typ:(returning (id))
let allowsMultipleSelection self = msg_send ~self ~cmd:(selector "allowsMultipleSelection") ~typ:(returning (bool))
let allowsOtherFileTypes self = msg_send ~self ~cmd:(selector "allowsOtherFileTypes") ~typ:(returning (bool))
let appCentric self = msg_send ~self ~cmd:(selector "appCentric") ~typ:(returning (bool))
let attachSandboxExtensionsToFinalURLDone self = msg_send ~self ~cmd:(selector "attachSandboxExtensionsToFinalURLDone") ~typ:(returning (bool))
let attachSandboxExtensionsToFinalURLsDone self = msg_send ~self ~cmd:(selector "attachSandboxExtensionsToFinalURLsDone") ~typ:(returning (bool))
let becameAppModalWindow self = msg_send ~self ~cmd:(selector "becameAppModalWindow") ~typ:(returning (bool))
let beginServicePanel self = msg_send ~self ~cmd:(selector "beginServicePanel") ~typ:(returning (bool))
let beginServicePanel' x ~asyncExHandler self = msg_send ~self ~cmd:(selector "beginServicePanel:asyncExHandler:") ~typ:(ptr void @-> ptr void @-> returning (bool)) x asyncExHandler
let beginSheetForDirectory x ~file ~modalForWindow ~modalDelegate ~didEndSelector ~contextInfo self = msg_send ~self ~cmd:(selector "beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:") ~typ:(id @-> id @-> id @-> id @-> _SEL @-> ptr (void) @-> returning (void)) x file modalForWindow modalDelegate didEndSelector contextInfo
let beginSheetForDirectory' x ~file ~types ~modalForWindow ~modalDelegate ~didEndSelector ~contextInfo self = msg_send ~self ~cmd:(selector "beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:") ~typ:(id @-> id @-> id @-> id @-> id @-> _SEL @-> ptr (void) @-> returning (void)) x file types modalForWindow modalDelegate didEndSelector contextInfo
let beginSheetModalForWindow x ~completionHandler self = msg_send ~self ~cmd:(selector "beginSheetModalForWindow:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let beginWithCompletionHandler x self = msg_send ~self ~cmd:(selector "beginWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let bridge self = msg_send ~self ~cmd:(selector "bridge") ~typ:(returning (id))
let canChooseDirectories self = msg_send ~self ~cmd:(selector "canChooseDirectories") ~typ:(returning (bool))
let canChooseFiles self = msg_send ~self ~cmd:(selector "canChooseFiles") ~typ:(returning (bool))
let canCreateDirectories self = msg_send ~self ~cmd:(selector "canCreateDirectories") ~typ:(returning (bool))
let canDownloadUbiquitousContents self = msg_send ~self ~cmd:(selector "canDownloadUbiquitousContents") ~typ:(returning (bool))
let canResolveUbiquitousConflicts self = msg_send ~self ~cmd:(selector "canResolveUbiquitousConflicts") ~typ:(returning (bool))
let canSelectHiddenExtension self = msg_send ~self ~cmd:(selector "canSelectHiddenExtension") ~typ:(returning (bool))
let cancel x self = msg_send ~self ~cmd:(selector "cancel:") ~typ:(id @-> returning (void)) x
let completeModal x self = msg_send ~self ~cmd:(selector "completeModal:") ~typ:(llong @-> returning (void)) x
let completeModeless x self = msg_send ~self ~cmd:(selector "completeModeless:") ~typ:(llong @-> returning (void)) x
let completeSheet x self = msg_send ~self ~cmd:(selector "completeSheet:") ~typ:(llong @-> returning (void)) x
let completeWithReturnCode x ~url ~urls self = msg_send ~self ~cmd:(selector "completeWithReturnCode:url:urls:") ~typ:(llong @-> id @-> id @-> returning (void)) x url urls
let completionHandler self = msg_send ~self ~cmd:(selector "completionHandler") ~typ:(returning (ptr void))
let configureContentView x self = msg_send ~self ~cmd:(selector "configureContentView:") ~typ:(id @-> returning (void)) x
let customActions self = msg_send ~self ~cmd:(selector "customActions") ~typ:(returning (id))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let delegateCustomActionInvoked x ~forURLs self = msg_send ~self ~cmd:(selector "delegateCustomActionInvoked:forURLs:") ~typ:(id @-> id @-> returning (void)) x forURLs
let delegateRequestNewDocumentNameWithReply x self = msg_send ~self ~cmd:(selector "delegateRequestNewDocumentNameWithReply:") ~typ:(ptr void @-> returning (void)) x
let delegateShouldCreateNewDocumentAtURL x self = msg_send ~self ~cmd:(selector "delegateShouldCreateNewDocumentAtURL:") ~typ:(id @-> returning (void)) x
let delegateValidateURLs x ~withReply self = msg_send ~self ~cmd:(selector "delegateValidateURLs:withReply:") ~typ:(id @-> ptr void @-> returning (void)) x withReply
let didBeginServicePanel self = msg_send ~self ~cmd:(selector "didBeginServicePanel") ~typ:(returning (bool))
let didEndPanelWithReturnCode x self = msg_send ~self ~cmd:(selector "didEndPanelWithReturnCode:") ~typ:(llong @-> returning (void)) x
let didEndSheet x ~returnCode ~contextInfo self = msg_send ~self ~cmd:(selector "didEndSheet:returnCode:contextInfo:") ~typ:(id @-> llong @-> ptr (void) @-> returning (void)) x returnCode contextInfo
let didPrepareToRun self = msg_send ~self ~cmd:(selector "didPrepareToRun") ~typ:(returning (bool))
let directory self = msg_send ~self ~cmd:(selector "directory") ~typ:(returning (id))
let directoryURL self = msg_send ~self ~cmd:(selector "directoryURL") ~typ:(returning (id))
let exportedInterface self = msg_send ~self ~cmd:(selector "exportedInterface") ~typ:(returning (id))
let filename self = msg_send ~self ~cmd:(selector "filename") ~typ:(returning (id))
let filenames self = msg_send ~self ~cmd:(selector "filenames") ~typ:(returning (id))
let finalURL self = msg_send ~self ~cmd:(selector "finalURL") ~typ:(returning (id))
let finalURLs self = msg_send ~self ~cmd:(selector "finalURLs") ~typ:(returning (id))
let hidesSharedSection self = msg_send ~self ~cmd:(selector "hidesSharedSection") ~typ:(returning (bool))
let iCloudOpenPanel self = msg_send ~self ~cmd:(selector "iCloudOpenPanel") ~typ:(returning (bool))
let induceEventLoopIterationSoon self = msg_send ~self ~cmd:(selector "induceEventLoopIterationSoon") ~typ:(returning (void))
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initWithContentRect x ~styleMask ~backing ~defer self = msg_send ~self ~cmd:(selector "initWithContentRect:styleMask:backing:defer:") ~typ:(CGRect.t @-> ullong @-> ullong @-> bool @-> returning (id)) x styleMask backing defer
let isAccessoryViewDisclosed self = msg_send ~self ~cmd:(selector "isAccessoryViewDisclosed") ~typ:(returning (bool))
let isExpanded self = msg_send ~self ~cmd:(selector "isExpanded") ~typ:(returning (bool))
let isExtensionHidden self = msg_send ~self ~cmd:(selector "isExtensionHidden") ~typ:(returning (bool))
let kvoKeys self = msg_send ~self ~cmd:(selector "kvoKeys") ~typ:(returning (id))
let lastReportedAccessorySize self = msg_send ~self ~cmd:(selector "lastReportedAccessorySize") ~typ:(returning (CGSize.t))
let message self = msg_send ~self ~cmd:(selector "message") ~typ:(returning (id))
let nameFieldLabel self = msg_send ~self ~cmd:(selector "nameFieldLabel") ~typ:(returning (id))
let nameFieldStringValue self = msg_send ~self ~cmd:(selector "nameFieldStringValue") ~typ:(returning (id))
let nsAppObservers self = msg_send ~self ~cmd:(selector "nsAppObservers") ~typ:(returning (bool))
let observeAsynchronousDelegateMethodCallKeyPath x ~paramDict self = msg_send ~self ~cmd:(selector "observeAsynchronousDelegateMethodCallKeyPath:paramDict:") ~typ:(id @-> id @-> returning (void)) x paramDict
let observeAsynchronousIBActionKeyPath x ~paramDict self = msg_send ~self ~cmd:(selector "observeAsynchronousIBActionKeyPath:paramDict:") ~typ:(id @-> id @-> returning (void)) x paramDict
let observeAsynchronousRemoteMethodCallKeyPath x ~paramDict self = msg_send ~self ~cmd:(selector "observeAsynchronousRemoteMethodCallKeyPath:paramDict:") ~typ:(id @-> id @-> returning (void)) x paramDict
let observeMostRecentCompletion x self = msg_send ~self ~cmd:(selector "observeMostRecentCompletion:") ~typ:(id @-> returning (void)) x
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let observingBridge self = msg_send ~self ~cmd:(selector "observingBridge") ~typ:(returning (bool))
let ok x self = msg_send ~self ~cmd:(selector "ok:") ~typ:(id @-> returning (void)) x
let openSaveDelegate self = msg_send ~self ~cmd:(selector "openSaveDelegate") ~typ:(returning (id))
let panel self = msg_send ~self ~cmd:(selector "panel") ~typ:(returning (id))
let panelCompleted self = msg_send ~self ~cmd:(selector "panelCompleted") ~typ:(returning (bool))
let panelIsNowUseless self = msg_send ~self ~cmd:(selector "panelIsNowUseless") ~typ:(returning (bool))
let prompt self = msg_send ~self ~cmd:(selector "prompt") ~typ:(returning (id))
let refreshDelegateOptions self = msg_send ~self ~cmd:(selector "refreshDelegateOptions") ~typ:(returning (void))
let remoteView self = msg_send ~self ~cmd:(selector "remoteView") ~typ:(returning (id))
let requestAppEnabledStateForItems x ~replyBlock self = msg_send ~self ~cmd:(selector "requestAppEnabledStateForItems:replyBlock:") ~typ:(id @-> ptr void @-> returning (void)) x replyBlock
let requiredFileType self = msg_send ~self ~cmd:(selector "requiredFileType") ~typ:(returning (id))
let resolvesAliases self = msg_send ~self ~cmd:(selector "resolvesAliases") ~typ:(returning (bool))
let retained self = msg_send ~self ~cmd:(selector "retained") ~typ:(returning (bool))
let runModal self = msg_send ~self ~cmd:(selector "runModal") ~typ:(returning (llong))
let runModalForDirectory x ~file self = msg_send ~self ~cmd:(selector "runModalForDirectory:file:") ~typ:(id @-> id @-> returning (llong)) x file
let runModalForDirectory' x ~file ~types self = msg_send ~self ~cmd:(selector "runModalForDirectory:file:types:") ~typ:(id @-> id @-> id @-> returning (llong)) x file types
let runModalForTypes x self = msg_send ~self ~cmd:(selector "runModalForTypes:") ~typ:(id @-> returning (llong)) x
let runningAppModalExplicitly self = msg_send ~self ~cmd:(selector "runningAppModalExplicitly") ~typ:(returning (bool))
let runningAsASheet self = msg_send ~self ~cmd:(selector "runningAsASheet") ~typ:(returning (bool))
let serviceViewControllerInterface self = msg_send ~self ~cmd:(selector "serviceViewControllerInterface") ~typ:(returning (id))
let setAccessoryView x self = msg_send ~self ~cmd:(selector "setAccessoryView:") ~typ:(id @-> returning (void)) x
let setAccessoryViewDisclosed x self = msg_send ~self ~cmd:(selector "setAccessoryViewDisclosed:") ~typ:(bool @-> returning (void)) x
let setAdvanceToRunPhaseCompletionHandler x self = msg_send ~self ~cmd:(selector "setAdvanceToRunPhaseCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let setAdvanceToRunPhaseExceptionHandler x self = msg_send ~self ~cmd:(selector "setAdvanceToRunPhaseExceptionHandler:") ~typ:(ptr void @-> returning (void)) x
let setAdvanceToRunPhaseIfNeededSemaphore x self = msg_send ~self ~cmd:(selector "setAdvanceToRunPhaseIfNeededSemaphore:") ~typ:(id @-> returning (void)) x
let setAllowedContentTypes x self = msg_send ~self ~cmd:(selector "setAllowedContentTypes:") ~typ:(id @-> returning (void)) x
let setAllowedFileTypes x self = msg_send ~self ~cmd:(selector "setAllowedFileTypes:") ~typ:(id @-> returning (void)) x
let setAllowsMultipleSelection x self = msg_send ~self ~cmd:(selector "setAllowsMultipleSelection:") ~typ:(bool @-> returning (void)) x
let setAllowsOtherFileTypes x self = msg_send ~self ~cmd:(selector "setAllowsOtherFileTypes:") ~typ:(bool @-> returning (void)) x
let setAttachSandboxExtensionsToFinalURLDone x self = msg_send ~self ~cmd:(selector "setAttachSandboxExtensionsToFinalURLDone:") ~typ:(bool @-> returning (void)) x
let setAttachSandboxExtensionsToFinalURLsDone x self = msg_send ~self ~cmd:(selector "setAttachSandboxExtensionsToFinalURLsDone:") ~typ:(bool @-> returning (void)) x
let setBecameAppModalWindow x self = msg_send ~self ~cmd:(selector "setBecameAppModalWindow:") ~typ:(bool @-> returning (void)) x
let setCanChooseDirectories x self = msg_send ~self ~cmd:(selector "setCanChooseDirectories:") ~typ:(bool @-> returning (void)) x
let setCanChooseFiles x self = msg_send ~self ~cmd:(selector "setCanChooseFiles:") ~typ:(bool @-> returning (void)) x
let setCanCreateDirectories x self = msg_send ~self ~cmd:(selector "setCanCreateDirectories:") ~typ:(bool @-> returning (void)) x
let setCanDownloadUbiquitousContents x self = msg_send ~self ~cmd:(selector "setCanDownloadUbiquitousContents:") ~typ:(bool @-> returning (void)) x
let setCanResolveUbiquitousConflicts x self = msg_send ~self ~cmd:(selector "setCanResolveUbiquitousConflicts:") ~typ:(bool @-> returning (void)) x
let setCanSelectHiddenExtension x self = msg_send ~self ~cmd:(selector "setCanSelectHiddenExtension:") ~typ:(bool @-> returning (void)) x
let setCompletionHandler x self = msg_send ~self ~cmd:(selector "setCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let setCustomActions x self = msg_send ~self ~cmd:(selector "setCustomActions:") ~typ:(id @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDidBeginServicePanel x self = msg_send ~self ~cmd:(selector "setDidBeginServicePanel:") ~typ:(bool @-> returning (void)) x
let setDidPrepareToRun x self = msg_send ~self ~cmd:(selector "setDidPrepareToRun:") ~typ:(bool @-> returning (void)) x
let setDirectory x self = msg_send ~self ~cmd:(selector "setDirectory:") ~typ:(id @-> returning (void)) x
let setDirectoryURL x self = msg_send ~self ~cmd:(selector "setDirectoryURL:") ~typ:(id @-> returning (void)) x
let setExtensionHidden x self = msg_send ~self ~cmd:(selector "setExtensionHidden:") ~typ:(bool @-> returning (void)) x
let setFinalURL x self = msg_send ~self ~cmd:(selector "setFinalURL:") ~typ:(id @-> returning (void)) x
let setFinalURLs x self = msg_send ~self ~cmd:(selector "setFinalURLs:") ~typ:(id @-> returning (void)) x
let setHidesSharedSection x self = msg_send ~self ~cmd:(selector "setHidesSharedSection:") ~typ:(bool @-> returning (void)) x
let setLastReportedAccessorySize x self = msg_send ~self ~cmd:(selector "setLastReportedAccessorySize:") ~typ:(CGSize.t @-> returning (void)) x
let setMessage x self = msg_send ~self ~cmd:(selector "setMessage:") ~typ:(id @-> returning (void)) x
let setNameFieldLabel x self = msg_send ~self ~cmd:(selector "setNameFieldLabel:") ~typ:(id @-> returning (void)) x
let setNameFieldStringValue x self = msg_send ~self ~cmd:(selector "setNameFieldStringValue:") ~typ:(id @-> returning (void)) x
let setNsAppObservers x self = msg_send ~self ~cmd:(selector "setNsAppObservers:") ~typ:(bool @-> returning (void)) x
let setObservingBridge x self = msg_send ~self ~cmd:(selector "setObservingBridge:") ~typ:(bool @-> returning (void)) x
let setOpenSaveDelegate x self = msg_send ~self ~cmd:(selector "setOpenSaveDelegate:") ~typ:(id @-> returning (void)) x
let setPanelCompleted x self = msg_send ~self ~cmd:(selector "setPanelCompleted:") ~typ:(bool @-> returning (void)) x
let setPanelIsNowUseless x self = msg_send ~self ~cmd:(selector "setPanelIsNowUseless:") ~typ:(bool @-> returning (void)) x
let setPrompt x self = msg_send ~self ~cmd:(selector "setPrompt:") ~typ:(id @-> returning (void)) x
let setRequiredFileType x self = msg_send ~self ~cmd:(selector "setRequiredFileType:") ~typ:(id @-> returning (void)) x
let setResolvesAliases x self = msg_send ~self ~cmd:(selector "setResolvesAliases:") ~typ:(bool @-> returning (void)) x
let setRetained x self = msg_send ~self ~cmd:(selector "setRetained:") ~typ:(bool @-> returning (void)) x
let setRunningAppModalExplicitly x self = msg_send ~self ~cmd:(selector "setRunningAppModalExplicitly:") ~typ:(bool @-> returning (void)) x
let setRunningAsASheet x self = msg_send ~self ~cmd:(selector "setRunningAsASheet:") ~typ:(bool @-> returning (void)) x
let setShowsHiddenFiles x self = msg_send ~self ~cmd:(selector "setShowsHiddenFiles:") ~typ:(bool @-> returning (void)) x
let setShowsTagField x self = msg_send ~self ~cmd:(selector "setShowsTagField:") ~typ:(bool @-> returning (void)) x
let setTagNames x self = msg_send ~self ~cmd:(selector "setTagNames:") ~typ:(id @-> returning (void)) x
let setTitle x self = msg_send ~self ~cmd:(selector "setTitle:") ~typ:(id @-> returning (void)) x
let setTreatsFilePackagesAsDirectories x self = msg_send ~self ~cmd:(selector "setTreatsFilePackagesAsDirectories:") ~typ:(bool @-> returning (void)) x
let setURL x self = msg_send ~self ~cmd:(selector "setURL:") ~typ:(id @-> returning (void)) x
let setURL' x ~forKey self = msg_send ~self ~cmd:(selector "setURL:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let setValue x ~forUndefinedKey self = msg_send ~self ~cmd:(selector "setValue:forUndefinedKey:") ~typ:(id @-> id @-> returning (void)) x forUndefinedKey
let shouldRetainExportedObject self = msg_send ~self ~cmd:(selector "shouldRetainExportedObject") ~typ:(returning (bool))
let showsHiddenFiles self = msg_send ~self ~cmd:(selector "showsHiddenFiles") ~typ:(returning (bool))
let showsTagField self = msg_send ~self ~cmd:(selector "showsTagField") ~typ:(returning (bool))
let styleMaskForHostWindow self = msg_send ~self ~cmd:(selector "styleMaskForHostWindow") ~typ:(returning (ullong))
let tagNames self = msg_send ~self ~cmd:(selector "tagNames") ~typ:(returning (id))
let title self = msg_send ~self ~cmd:(selector "title") ~typ:(returning (id))
let treatsFilePackagesAsDirectories self = msg_send ~self ~cmd:(selector "treatsFilePackagesAsDirectories") ~typ:(returning (bool))
let urlForKey x self = msg_send ~self ~cmd:(selector "urlForKey:") ~typ:(id @-> returning (id)) x
let validateVisibleColumns self = msg_send ~self ~cmd:(selector "validateVisibleColumns") ~typ:(returning (void))
let valueforUndefinedKey x self = msg_send ~self ~cmd:(selector "valueforUndefinedKey:") ~typ:(id @-> returning (id)) x
let viewDidAdvanceToRunPhase x self = msg_send ~self ~cmd:(selector "viewDidAdvanceToRunPhase:") ~typ:(id @-> returning (void)) x
let viewDidInvalidate x self = msg_send ~self ~cmd:(selector "viewDidInvalidate:") ~typ:(id @-> returning (void)) x
let viewWillInvalidate x self = msg_send ~self ~cmd:(selector "viewWillInvalidate:") ~typ:(id @-> returning (void)) x