(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

include NSText

let _class_ = get_class "NSTextView"

module Class = struct
  let alwaysReferencesTextStorageStrongly self = msg_send ~self ~cmd:(selector "alwaysReferencesTextStorageStrongly") ~typ:(returning (bool))
  let defaultMenu self = msg_send ~self ~cmd:(selector "defaultMenu") ~typ:(returning (id))
  let fieldEditor self = msg_send ~self ~cmd:(selector "fieldEditor") ~typ:(returning (id))
  let initialize self = msg_send ~self ~cmd:(selector "initialize") ~typ:(returning (void))
  let keyPathsForValuesAffectingTouchBar self = msg_send ~self ~cmd:(selector "keyPathsForValuesAffectingTouchBar") ~typ:(returning (id))
  let mapsDocumentColorForColorPickers self = msg_send ~self ~cmd:(selector "mapsDocumentColorForColorPickers") ~typ:(returning (bool))
  let registerForServices self = msg_send ~self ~cmd:(selector "registerForServices") ~typ:(returning (void))
  let scrollableDocumentContentTextView self = msg_send ~self ~cmd:(selector "scrollableDocumentContentTextView") ~typ:(returning (id))
  let scrollablePlainDocumentContentTextView self = msg_send ~self ~cmd:(selector "scrollablePlainDocumentContentTextView") ~typ:(returning (id))
  let scrollableTextView self = msg_send ~self ~cmd:(selector "scrollableTextView") ~typ:(returning (id))
  let stronglyReferencesTextStorage self = msg_send ~self ~cmd:(selector "stronglyReferencesTextStorage") ~typ:(returning (bool))
end

let _RTFDFromRange x self = msg_send ~self ~cmd:(selector "RTFDFromRange:") ~typ:(NSRange.t @-> returning (id)) x
let _RTFFromRange x self = msg_send ~self ~cmd:(selector "RTFFromRange:") ~typ:(NSRange.t @-> returning (id)) x
let acceptableDragTypes self = msg_send ~self ~cmd:(selector "acceptableDragTypes") ~typ:(returning (id))
let acceptsFirstMouse x self = msg_send ~self ~cmd:(selector "acceptsFirstMouse:") ~typ:(id @-> returning (bool)) x
let acceptsFirstResponder self = msg_send ~self ~cmd:(selector "acceptsFirstResponder") ~typ:(returning (bool))
let acceptsGlyphInfo self = msg_send ~self ~cmd:(selector "acceptsGlyphInfo") ~typ:(returning (bool))
let acceptsPreviewPanelControl x self = msg_send ~self ~cmd:(selector "acceptsPreviewPanelControl:") ~typ:(id @-> returning (bool)) x
let accessibilityAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityAttributeNames") ~typ:(returning (id))
let accessibilityAttributeValue x self = msg_send ~self ~cmd:(selector "accessibilityAttributeValue:") ~typ:(id @-> returning (id)) x
let accessibilityAttributedStringForRangeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityAttributedStringForRangeAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityBoundsForRangeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityBoundsForRangeAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityChildrenAttribute self = msg_send ~self ~cmd:(selector "accessibilityChildrenAttribute") ~typ:(returning (id))
let accessibilityElementForAttachment x self = msg_send ~self ~cmd:(selector "accessibilityElementForAttachment:") ~typ:(id @-> returning (id)) x
let accessibilityFocusRingBoundsForBounds x self = msg_send ~self ~cmd:(selector "accessibilityFocusRingBoundsForBounds:") ~typ:(CGRect.t @-> returning (CGRect.t)) x
let accessibilityFrameForRange x self = msg_send ~self ~cmd:(selector "accessibilityFrameForRange:") ~typ:(NSRange.t @-> returning (CGRect.t)) x
let accessibilityHelpStringForChild x self = msg_send ~self ~cmd:(selector "accessibilityHelpStringForChild:") ~typ:(id @-> returning (id)) x
let accessibilityHitTest x self = msg_send ~self ~cmd:(selector "accessibilityHitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let accessibilityInsertionPointLineNumberAttribute self = msg_send ~self ~cmd:(selector "accessibilityInsertionPointLineNumberAttribute") ~typ:(returning (id))
let accessibilityIsAttributeSettable x self = msg_send ~self ~cmd:(selector "accessibilityIsAttributeSettable:") ~typ:(id @-> returning (bool)) x
let accessibilityIsChildFocusable x self = msg_send ~self ~cmd:(selector "accessibilityIsChildFocusable:") ~typ:(id @-> returning (bool)) x
let accessibilityIsIgnored self = msg_send ~self ~cmd:(selector "accessibilityIsIgnored") ~typ:(returning (bool))
let accessibilityIsInsertionPointLineNumberAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsInsertionPointLineNumberAttributeSettable") ~typ:(returning (bool))
let accessibilityIsNumberOfCharactersAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsNumberOfCharactersAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSelectedTextAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedTextAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSelectedTextRangeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedTextRangeAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSelectedTextRangesAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSelectedTextRangesAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSharedCharacterRangeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSharedCharacterRangeAttributeSettable") ~typ:(returning (bool))
let accessibilityIsSharedTextUIElementsAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsSharedTextUIElementsAttributeSettable") ~typ:(returning (bool))
let accessibilityIsTextInputMarkedRangeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsTextInputMarkedRangeAttributeSettable") ~typ:(returning (bool))
let accessibilityIsValueAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsValueAttributeSettable") ~typ:(returning (bool))
let accessibilityIsVisibleCharacterRangeAttributeSettable self = msg_send ~self ~cmd:(selector "accessibilityIsVisibleCharacterRangeAttributeSettable") ~typ:(returning (bool))
let accessibilityLineForIndex x self = msg_send ~self ~cmd:(selector "accessibilityLineForIndex:") ~typ:(llong @-> returning (llong)) x
let accessibilityLineForIndexAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityLineForIndexAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityNumberOfCharactersAttribute self = msg_send ~self ~cmd:(selector "accessibilityNumberOfCharactersAttribute") ~typ:(returning (id))
let accessibilityParameterizedAttributeNames self = msg_send ~self ~cmd:(selector "accessibilityParameterizedAttributeNames") ~typ:(returning (id))
let accessibilityPerformShowMenuOfChild x self = msg_send ~self ~cmd:(selector "accessibilityPerformShowMenuOfChild:") ~typ:(id @-> returning (bool)) x
let accessibilityPositionOfChild x self = msg_send ~self ~cmd:(selector "accessibilityPositionOfChild:") ~typ:(id @-> returning (id)) x
let accessibilityRTFForRangeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityRTFForRangeAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityRangeForIndexAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityRangeForIndexAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityRangeForLine x self = msg_send ~self ~cmd:(selector "accessibilityRangeForLine:") ~typ:(llong @-> returning (NSRange.t)) x
let accessibilityRangeForLineAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityRangeForLineAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityRangeForPositionAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityRangeForPositionAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityRoleAttribute self = msg_send ~self ~cmd:(selector "accessibilityRoleAttribute") ~typ:(returning (id))
let accessibilitySelectedTextAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextAttribute") ~typ:(returning (id))
let accessibilitySelectedTextRangeAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextRangeAttribute") ~typ:(returning (id))
let accessibilitySelectedTextRangesAttribute self = msg_send ~self ~cmd:(selector "accessibilitySelectedTextRangesAttribute") ~typ:(returning (id))
let accessibilitySetFocus x ~forChild self = msg_send ~self ~cmd:(selector "accessibilitySetFocus:forChild:") ~typ:(id @-> id @-> returning (void)) x forChild
let accessibilitySetSelectedTextAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedTextAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetSelectedTextRangeAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedTextRangeAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetSelectedTextRangesAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetSelectedTextRangesAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetValue x ~forAttribute self = msg_send ~self ~cmd:(selector "accessibilitySetValue:forAttribute:") ~typ:(id @-> id @-> returning (void)) x forAttribute
let accessibilitySetValueAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetValueAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySetVisibleCharacterRangeAttribute x self = msg_send ~self ~cmd:(selector "accessibilitySetVisibleCharacterRangeAttribute:") ~typ:(id @-> returning (void)) x
let accessibilitySharedCharacterRangeAttribute self = msg_send ~self ~cmd:(selector "accessibilitySharedCharacterRangeAttribute") ~typ:(returning (id))
let accessibilitySharedTextElementForIndexAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilitySharedTextElementForIndexAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilitySharedTextUIElementsAttribute self = msg_send ~self ~cmd:(selector "accessibilitySharedTextUIElementsAttribute") ~typ:(returning (id))
let accessibilitySizeOfChild x self = msg_send ~self ~cmd:(selector "accessibilitySizeOfChild:") ~typ:(id @-> returning (id)) x
let accessibilityStringForRange x self = msg_send ~self ~cmd:(selector "accessibilityStringForRange:") ~typ:(NSRange.t @-> returning (id)) x
let accessibilityStringForRangeAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityStringForRangeAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityStyleRangeForIndexAttributeForParameter x self = msg_send ~self ~cmd:(selector "accessibilityStyleRangeForIndexAttributeForParameter:") ~typ:(id @-> returning (id)) x
let accessibilityTextInputMarkedRangeAttribute self = msg_send ~self ~cmd:(selector "accessibilityTextInputMarkedRangeAttribute") ~typ:(returning (id))
let accessibilityValue self = msg_send ~self ~cmd:(selector "accessibilityValue") ~typ:(returning (id))
let accessibilityValueAttribute self = msg_send ~self ~cmd:(selector "accessibilityValueAttribute") ~typ:(returning (id))
let accessibilityVisibleCharacterRangeAttribute self = msg_send ~self ~cmd:(selector "accessibilityVisibleCharacterRangeAttribute") ~typ:(returning (id))
let accessibilityWindowPointForShowMenu self = msg_send ~self ~cmd:(selector "accessibilityWindowPointForShowMenu") ~typ:(returning (CGPoint.t))
let acquireKeyFocus self = msg_send ~self ~cmd:(selector "acquireKeyFocus") ~typ:(returning (void))
let addAnnotations x ~range self = msg_send ~self ~cmd:(selector "addAnnotations:range:") ~typ:(id @-> NSRange.t @-> returning (void)) x range
let addLinksInSelection x self = msg_send ~self ~cmd:(selector "addLinksInSelection:") ~typ:(id @-> returning (void)) x
let adjustPageHeightNew x ~top ~bottom ~limit self = msg_send ~self ~cmd:(selector "adjustPageHeightNew:top:bottom:limit:") ~typ:(ptr (double) @-> double @-> double @-> double @-> returning (void)) x top bottom limit
let alignCenter x self = msg_send ~self ~cmd:(selector "alignCenter:") ~typ:(id @-> returning (void)) x
let alignJustified x self = msg_send ~self ~cmd:(selector "alignJustified:") ~typ:(id @-> returning (void)) x
let alignLeft x self = msg_send ~self ~cmd:(selector "alignLeft:") ~typ:(id @-> returning (void)) x
let alignRight x self = msg_send ~self ~cmd:(selector "alignRight:") ~typ:(id @-> returning (void)) x
let alignment self = msg_send ~self ~cmd:(selector "alignment") ~typ:(returning (llong))
let allowedInputSourceLocales self = msg_send ~self ~cmd:(selector "allowedInputSourceLocales") ~typ:(returning (id))
let allowsCharacterPickerTouchBarItem self = msg_send ~self ~cmd:(selector "allowsCharacterPickerTouchBarItem") ~typ:(returning (bool))
let allowsDocumentBackgroundColorChange self = msg_send ~self ~cmd:(selector "allowsDocumentBackgroundColorChange") ~typ:(returning (bool))
let allowsImageEditing self = msg_send ~self ~cmd:(selector "allowsImageEditing") ~typ:(returning (bool))
let allowsMultipleSelection self = msg_send ~self ~cmd:(selector "allowsMultipleSelection") ~typ:(returning (bool))
let allowsUndo self = msg_send ~self ~cmd:(selector "allowsUndo") ~typ:(returning (bool))
let annotatedSubstringForProposedRange x ~actualRange self = msg_send ~self ~cmd:(selector "annotatedSubstringForProposedRange:actualRange:") ~typ:(NSRange.t @-> ptr (NSRange.t) @-> returning (id)) x actualRange
let applyActionForRanges x ~block self = msg_send ~self ~cmd:(selector "applyActionForRanges:block:") ~typ:(id @-> ptr void @-> returning (void)) x block
let attributedString self = msg_send ~self ~cmd:(selector "attributedString") ~typ:(returning (id))
let attributedSubstringForMarkedRange self = msg_send ~self ~cmd:(selector "attributedSubstringForMarkedRange") ~typ:(returning (id))
let attributedSubstringForProposedRange x ~actualRange self = msg_send ~self ~cmd:(selector "attributedSubstringForProposedRange:actualRange:") ~typ:(NSRange.t @-> ptr (NSRange.t) @-> returning (id)) x actualRange
let attributedSubstringFromRange x self = msg_send ~self ~cmd:(selector "attributedSubstringFromRange:") ~typ:(NSRange.t @-> returning (id)) x
let autocorrectionType self = msg_send ~self ~cmd:(selector "autocorrectionType") ~typ:(returning (llong))
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning (id))
let baseWritingDirection self = msg_send ~self ~cmd:(selector "baseWritingDirection") ~typ:(returning (llong))
let baselineDeltaForCharacterAtIndex x self = msg_send ~self ~cmd:(selector "baselineDeltaForCharacterAtIndex:") ~typ:(ullong @-> returning (double)) x
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning (bool))
let becomeKeyWindow self = msg_send ~self ~cmd:(selector "becomeKeyWindow") ~typ:(returning (void))
let becomeMainWindow self = msg_send ~self ~cmd:(selector "becomeMainWindow") ~typ:(returning (void))
let beginPreviewPanelControl x self = msg_send ~self ~cmd:(selector "beginPreviewPanelControl:") ~typ:(id @-> returning (void)) x
let breakUndoCoalescing self = msg_send ~self ~cmd:(selector "breakUndoCoalescing") ~typ:(returning (void))
let canReadSelectionFromItems self = msg_send ~self ~cmd:(selector "canReadSelectionFromItems") ~typ:(returning (bool))
let candidateListTouchBarItem self = msg_send ~self ~cmd:(selector "candidateListTouchBarItem") ~typ:(returning (id))
let candidateListTouchBarItem1 x ~changedCandidateListVisibility self = msg_send ~self ~cmd:(selector "candidateListTouchBarItem:changedCandidateListVisibility:") ~typ:(id @-> bool @-> returning (void)) x changedCandidateListVisibility
let candidateListTouchBarItem2 x ~endSelectingCandidateAtIndex self = msg_send ~self ~cmd:(selector "candidateListTouchBarItem:endSelectingCandidateAtIndex:") ~typ:(id @-> ullong @-> returning (void)) x endSelectingCandidateAtIndex
let capitalizeWord x self = msg_send ~self ~cmd:(selector "capitalizeWord:") ~typ:(id @-> returning (void)) x
let centerSelectionInVisibleArea x self = msg_send ~self ~cmd:(selector "centerSelectionInVisibleArea:") ~typ:(id @-> returning (void)) x
let centersOnScroll self = msg_send ~self ~cmd:(selector "centersOnScroll") ~typ:(returning (bool))
let changeAttributes x self = msg_send ~self ~cmd:(selector "changeAttributes:") ~typ:(id @-> returning (void)) x
let changeAttributesWithModifier x self = msg_send ~self ~cmd:(selector "changeAttributesWithModifier:") ~typ:(ptr void @-> returning (void)) x
let changeBaseWritingDirection x self = msg_send ~self ~cmd:(selector "changeBaseWritingDirection:") ~typ:(id @-> returning (void)) x
let changeColor x self = msg_send ~self ~cmd:(selector "changeColor:") ~typ:(id @-> returning (void)) x
let changeDocumentBackgroundColor x self = msg_send ~self ~cmd:(selector "changeDocumentBackgroundColor:") ~typ:(id @-> returning (void)) x
let changeFont x self = msg_send ~self ~cmd:(selector "changeFont:") ~typ:(id @-> returning (void)) x
let changeLayoutOrientation x self = msg_send ~self ~cmd:(selector "changeLayoutOrientation:") ~typ:(id @-> returning (void)) x
let changeSpelling x self = msg_send ~self ~cmd:(selector "changeSpelling:") ~typ:(id @-> returning (void)) x
let characterIndexForInsertionAtPoint x self = msg_send ~self ~cmd:(selector "characterIndexForInsertionAtPoint:") ~typ:(CGPoint.t @-> returning (ullong)) x
let characterIndexForPoint x self = msg_send ~self ~cmd:(selector "characterIndexForPoint:") ~typ:(CGPoint.t @-> returning (ullong)) x
let characterRangeForRect x self = msg_send ~self ~cmd:(selector "characterRangeForRect:") ~typ:(CGRect.t @-> returning (NSRange.t)) x
let checkSpelling x self = msg_send ~self ~cmd:(selector "checkSpelling:") ~typ:(id @-> returning (void)) x
let checkTextInDocument x self = msg_send ~self ~cmd:(selector "checkTextInDocument:") ~typ:(id @-> returning (void)) x
let checkTextInDocumentUsingTypes x ~options ~restrictToSelection self = msg_send ~self ~cmd:(selector "checkTextInDocumentUsingTypes:options:restrictToSelection:") ~typ:(ullong @-> id @-> bool @-> returning (void)) x options restrictToSelection
let checkTextInRange x ~types ~options self = msg_send ~self ~cmd:(selector "checkTextInRange:types:options:") ~typ:(NSRange.t @-> ullong @-> id @-> returning (void)) x types options
let checkTextInSelection x self = msg_send ~self ~cmd:(selector "checkTextInSelection:") ~typ:(id @-> returning (void)) x
let cleanUpAfterDragOperation self = msg_send ~self ~cmd:(selector "cleanUpAfterDragOperation") ~typ:(returning (void))
let clickedOnLink x ~atIndex self = msg_send ~self ~cmd:(selector "clickedOnLink:atIndex:") ~typ:(id @-> ullong @-> returning (void)) x atIndex
let complete x self = msg_send ~self ~cmd:(selector "complete:") ~typ:(id @-> returning (void)) x
let completionsForPartialWordRange x ~indexOfSelectedItem self = msg_send ~self ~cmd:(selector "completionsForPartialWordRange:indexOfSelectedItem:") ~typ:(NSRange.t @-> ptr (llong) @-> returning (id)) x indexOfSelectedItem
let concludeDragOperation x self = msg_send ~self ~cmd:(selector "concludeDragOperation:") ~typ:(id @-> returning (void)) x
let contentType self = msg_send ~self ~cmd:(selector "contentType") ~typ:(returning (id))
let contentViewAtIndex x ~effectiveCharacterRange self = msg_send ~self ~cmd:(selector "contentViewAtIndex:effectiveCharacterRange:") ~typ:(ullong @-> ptr (NSRange.t) @-> returning (id)) x effectiveCharacterRange
let conversationIdentifier self = msg_send ~self ~cmd:(selector "conversationIdentifier") ~typ:(returning (llong))
let convertToFullWidth x self = msg_send ~self ~cmd:(selector "convertToFullWidth:") ~typ:(id @-> returning (void)) x
let convertToHalfWidth x self = msg_send ~self ~cmd:(selector "convertToHalfWidth:") ~typ:(id @-> returning (void)) x
let convertToSimplifiedChinese x self = msg_send ~self ~cmd:(selector "convertToSimplifiedChinese:") ~typ:(id @-> returning (void)) x
let convertToTraditionalChinese x self = msg_send ~self ~cmd:(selector "convertToTraditionalChinese:") ~typ:(id @-> returning (void)) x
let copy x self = msg_send ~self ~cmd:(selector "copy:") ~typ:(id @-> returning (void)) x
let copyFont x self = msg_send ~self ~cmd:(selector "copyFont:") ~typ:(id @-> returning (void)) x
let copyLink x self = msg_send ~self ~cmd:(selector "copyLink:") ~typ:(id @-> returning (void)) x
let copyRuler x self = msg_send ~self ~cmd:(selector "copyRuler:") ~typ:(id @-> returning (void)) x
let cursorUpdate x self = msg_send ~self ~cmd:(selector "cursorUpdate:") ~typ:(id @-> returning (void)) x
let cut x self = msg_send ~self ~cmd:(selector "cut:") ~typ:(id @-> returning (void)) x
let dataDetectionType self = msg_send ~self ~cmd:(selector "dataDetectionType") ~typ:(returning (llong))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let defaultParagraphStyle self = msg_send ~self ~cmd:(selector "defaultParagraphStyle") ~typ:(returning (id))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let delete x self = msg_send ~self ~cmd:(selector "delete:") ~typ:(id @-> returning (void)) x
let deleteBackward x self = msg_send ~self ~cmd:(selector "deleteBackward:") ~typ:(id @-> returning (void)) x
let deleteBackwardByDecomposingPreviousCharacter x self = msg_send ~self ~cmd:(selector "deleteBackwardByDecomposingPreviousCharacter:") ~typ:(id @-> returning (void)) x
let deleteForward x self = msg_send ~self ~cmd:(selector "deleteForward:") ~typ:(id @-> returning (void)) x
let deleteToBeginningOfLine x self = msg_send ~self ~cmd:(selector "deleteToBeginningOfLine:") ~typ:(id @-> returning (void)) x
let deleteToBeginningOfParagraph x self = msg_send ~self ~cmd:(selector "deleteToBeginningOfParagraph:") ~typ:(id @-> returning (void)) x
let deleteToEndOfLine x self = msg_send ~self ~cmd:(selector "deleteToEndOfLine:") ~typ:(id @-> returning (void)) x
let deleteToEndOfParagraph x self = msg_send ~self ~cmd:(selector "deleteToEndOfParagraph:") ~typ:(id @-> returning (void)) x
let deleteToMark x self = msg_send ~self ~cmd:(selector "deleteToMark:") ~typ:(id @-> returning (void)) x
let deleteWordBackward x self = msg_send ~self ~cmd:(selector "deleteWordBackward:") ~typ:(id @-> returning (void)) x
let deleteWordForward x self = msg_send ~self ~cmd:(selector "deleteWordForward:") ~typ:(id @-> returning (void)) x
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let designatedFocusRingView self = msg_send ~self ~cmd:(selector "designatedFocusRingView") ~typ:(returning (id))
let didAddSubview x self = msg_send ~self ~cmd:(selector "didAddSubview:") ~typ:(id @-> returning (void)) x
let didChangeText self = msg_send ~self ~cmd:(selector "didChangeText") ~typ:(returning (void))
let didCloseMenu x ~withEvent self = msg_send ~self ~cmd:(selector "didCloseMenu:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let didReplaceCharacters self = msg_send ~self ~cmd:(selector "didReplaceCharacters") ~typ:(returning (void))
let displaysLinkToolTips self = msg_send ~self ~cmd:(selector "displaysLinkToolTips") ~typ:(returning (bool))
let doCommandBySelector x self = msg_send ~self ~cmd:(selector "doCommandBySelector:") ~typ:(_SEL @-> returning (void)) x
let documentColorForRenderingColor x self = msg_send ~self ~cmd:(selector "documentColorForRenderingColor:") ~typ:(id @-> returning (id)) x
let dragImageForSelectionWithEvent x ~origin self = msg_send ~self ~cmd:(selector "dragImageForSelectionWithEvent:origin:") ~typ:(id @-> ptr (CGPoint.t) @-> returning (id)) x origin
let dragOperationForDraggingInfo x ~type_ self = msg_send ~self ~cmd:(selector "dragOperationForDraggingInfo:type:") ~typ:(id @-> id @-> returning (ullong)) x type_
let dragSelectionWithEvent x ~offset ~slideBack self = msg_send ~self ~cmd:(selector "dragSelectionWithEvent:offset:slideBack:") ~typ:(id @-> CGSize.t @-> bool @-> returning (bool)) x offset slideBack
let draggedImage x ~endedAt ~operation self = msg_send ~self ~cmd:(selector "draggedImage:endedAt:operation:") ~typ:(id @-> CGPoint.t @-> ullong @-> returning (void)) x endedAt operation
let draggingEntered x self = msg_send ~self ~cmd:(selector "draggingEntered:") ~typ:(id @-> returning (ullong)) x
let draggingExited x self = msg_send ~self ~cmd:(selector "draggingExited:") ~typ:(id @-> returning (void)) x
let draggingSession x ~sourceOperationMaskForDraggingContext self = msg_send ~self ~cmd:(selector "draggingSession:sourceOperationMaskForDraggingContext:") ~typ:(id @-> llong @-> returning (ullong)) x sourceOperationMaskForDraggingContext
let draggingSession' x ~endedAtPoint ~operation self = msg_send ~self ~cmd:(selector "draggingSession:endedAtPoint:operation:") ~typ:(id @-> CGPoint.t @-> ullong @-> returning (void)) x endedAtPoint operation
let draggingSourceOperationMaskForLocal x self = msg_send ~self ~cmd:(selector "draggingSourceOperationMaskForLocal:") ~typ:(bool @-> returning (ullong)) x
let draggingUpdated x self = msg_send ~self ~cmd:(selector "draggingUpdated:") ~typ:(id @-> returning (ullong)) x
let drawBackgroundOverhangInRect x self = msg_send ~self ~cmd:(selector "drawBackgroundOverhangInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawCharactersInRange x ~forContentView self = msg_send ~self ~cmd:(selector "drawCharactersInRange:forContentView:") ~typ:(NSRange.t @-> id @-> returning (void)) x forContentView
let drawCharactersInTextRange x ~atPoint self = msg_send ~self ~cmd:(selector "drawCharactersInTextRange:atPoint:") ~typ:(id @-> CGPoint.t @-> returning (void)) x atPoint
let drawDragInsertionIndicatorWithRect x self = msg_send ~self ~cmd:(selector "drawDragInsertionIndicatorWithRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawInsertionPointInRect x ~color ~turnedOn self = msg_send ~self ~cmd:(selector "drawInsertionPointInRect:color:turnedOn:") ~typ:(CGRect.t @-> id @-> bool @-> returning (void)) x color turnedOn
let drawPlaceholderInRect x self = msg_send ~self ~cmd:(selector "drawPlaceholderInRect:") ~typ:(CGRect.t @-> returning (bool)) x
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawViewBackgroundInRect x self = msg_send ~self ~cmd:(selector "drawViewBackgroundInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawsBackground self = msg_send ~self ~cmd:(selector "drawsBackground") ~typ:(returning (bool))
let drawsVerticallyForCharacterAtIndex x self = msg_send ~self ~cmd:(selector "drawsVerticallyForCharacterAtIndex:") ~typ:(ullong @-> returning (bool)) x
let enabledTextCheckingTypes self = msg_send ~self ~cmd:(selector "enabledTextCheckingTypes") ~typ:(returning (ullong))
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning (void)) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let endPreviewPanelControl x self = msg_send ~self ~cmd:(selector "endPreviewPanelControl:") ~typ:(id @-> returning (void)) x
let firstRectForCharacterRange x self = msg_send ~self ~cmd:(selector "firstRectForCharacterRange:") ~typ:(NSRange.t @-> returning (CGRect.t)) x
let firstRectForCharacterRange' x ~actualRange self = msg_send ~self ~cmd:(selector "firstRectForCharacterRange:actualRange:") ~typ:(NSRange.t @-> ptr (NSRange.t) @-> returning (CGRect.t)) x actualRange
let firstSelectedRange self = msg_send ~self ~cmd:(selector "firstSelectedRange") ~typ:(returning (NSRange.t))
let flagsChanged x self = msg_send ~self ~cmd:(selector "flagsChanged:") ~typ:(id @-> returning (void)) x
let font self = msg_send ~self ~cmd:(selector "font") ~typ:(returning (id))
let fractionOfDistanceThroughGlyphForPoint x self = msg_send ~self ~cmd:(selector "fractionOfDistanceThroughGlyphForPoint:") ~typ:(CGPoint.t @-> returning (double)) x
let functionBar x ~makeItemForIdentifier self = msg_send ~self ~cmd:(selector "functionBar:makeItemForIdentifier:") ~typ:(id @-> id @-> returning (id)) x makeItemForIdentifier
let getMarkedText x ~selectedRange self = msg_send ~self ~cmd:(selector "getMarkedText:selectedRange:") ~typ:(ptr (id) @-> ptr (NSRange.t) @-> returning (void)) x selectedRange
let grammarCheckingType self = msg_send ~self ~cmd:(selector "grammarCheckingType") ~typ:(returning (llong))
let handleTextCheckingResults x ~forRange ~types ~options ~orthography ~wordCount self = msg_send ~self ~cmd:(selector "handleTextCheckingResults:forRange:types:options:orthography:wordCount:") ~typ:(id @-> NSRange.t @-> ullong @-> id @-> id @-> llong @-> returning (void)) x forRange types options orthography wordCount
let hasMarkedText self = msg_send ~self ~cmd:(selector "hasMarkedText") ~typ:(returning (bool))
let hideHighlight self = msg_send ~self ~cmd:(selector "hideHighlight") ~typ:(returning (void))
let highlightBoundingRectForCharacterRange x ~highlightStyle self = msg_send ~self ~cmd:(selector "highlightBoundingRectForCharacterRange:highlightStyle:") ~typ:(NSRange.t @-> ullong @-> returning (CGRect.t)) x highlightStyle
let highlightRectsForCharacterRange x ~highlightStyle self = msg_send ~self ~cmd:(selector "highlightRectsForCharacterRange:highlightStyle:") ~typ:(NSRange.t @-> ullong @-> returning (id)) x highlightStyle
let hitTest x self = msg_send ~self ~cmd:(selector "hitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let ignoreSpelling x self = msg_send ~self ~cmd:(selector "ignoreSpelling:") ~typ:(id @-> returning (void)) x
let immediateActionRecognizerDidCancelAnimation x self = msg_send ~self ~cmd:(selector "immediateActionRecognizerDidCancelAnimation:") ~typ:(id @-> returning (void)) x
let immediateActionRecognizerDidCompleteAnimation x self = msg_send ~self ~cmd:(selector "immediateActionRecognizerDidCompleteAnimation:") ~typ:(id @-> returning (void)) x
let immediateActionRecognizerDidUpdateAnimation x self = msg_send ~self ~cmd:(selector "immediateActionRecognizerDidUpdateAnimation:") ~typ:(id @-> returning (void)) x
let immediateActionRecognizerWillBeginAnimation x self = msg_send ~self ~cmd:(selector "immediateActionRecognizerWillBeginAnimation:") ~typ:(id @-> returning (void)) x
let immediateActionRecognizerWillPrepare x self = msg_send ~self ~cmd:(selector "immediateActionRecognizerWillPrepare:") ~typ:(id @-> returning (void)) x
let importsGraphics self = msg_send ~self ~cmd:(selector "importsGraphics") ~typ:(returning (bool))
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning (id)) x
let initWithFrame' x ~textContainer self = msg_send ~self ~cmd:(selector "initWithFrame:textContainer:") ~typ:(CGRect.t @-> id @-> returning (id)) x textContainer
let inputContext self = msg_send ~self ~cmd:(selector "inputContext") ~typ:(returning (id))
let inputContextAllowingInitialization x self = msg_send ~self ~cmd:(selector "inputContextAllowingInitialization:") ~typ:(bool @-> returning (id)) x
let insertBacktab x self = msg_send ~self ~cmd:(selector "insertBacktab:") ~typ:(id @-> returning (void)) x
let insertCandidateString x ~replacementRange ~fromTextCheckingResult self = msg_send ~self ~cmd:(selector "insertCandidateString:replacementRange:fromTextCheckingResult:") ~typ:(id @-> NSRange.t @-> bool @-> returning (void)) x replacementRange fromTextCheckingResult
let insertCandidateTextCheckingResult x self = msg_send ~self ~cmd:(selector "insertCandidateTextCheckingResult:") ~typ:(id @-> returning (void)) x
let insertCompletion x ~forPartialWordRange ~movement ~isFinal self = msg_send ~self ~cmd:(selector "insertCompletion:forPartialWordRange:movement:isFinal:") ~typ:(id @-> NSRange.t @-> llong @-> bool @-> returning (void)) x forPartialWordRange movement isFinal
let insertContainerBreak x self = msg_send ~self ~cmd:(selector "insertContainerBreak:") ~typ:(id @-> returning (void)) x
let insertDoubleQuoteIgnoringSubstitution x self = msg_send ~self ~cmd:(selector "insertDoubleQuoteIgnoringSubstitution:") ~typ:(id @-> returning (void)) x
let insertLineBreak x self = msg_send ~self ~cmd:(selector "insertLineBreak:") ~typ:(id @-> returning (void)) x
let insertLineSeparator x self = msg_send ~self ~cmd:(selector "insertLineSeparator:") ~typ:(id @-> returning (void)) x
let insertNewline x self = msg_send ~self ~cmd:(selector "insertNewline:") ~typ:(id @-> returning (void)) x
let insertNewlineIgnoringFieldEditor x self = msg_send ~self ~cmd:(selector "insertNewlineIgnoringFieldEditor:") ~typ:(id @-> returning (void)) x
let insertPageBreak x self = msg_send ~self ~cmd:(selector "insertPageBreak:") ~typ:(id @-> returning (void)) x
let insertParagraphSeparator x self = msg_send ~self ~cmd:(selector "insertParagraphSeparator:") ~typ:(id @-> returning (void)) x
let insertRightToLeftSlash x self = msg_send ~self ~cmd:(selector "insertRightToLeftSlash:") ~typ:(id @-> returning (void)) x
let insertSingleQuoteIgnoringSubstitution x self = msg_send ~self ~cmd:(selector "insertSingleQuoteIgnoringSubstitution:") ~typ:(id @-> returning (void)) x
let insertTab x self = msg_send ~self ~cmd:(selector "insertTab:") ~typ:(id @-> returning (void)) x
let insertTabIgnoringFieldEditor x self = msg_send ~self ~cmd:(selector "insertTabIgnoringFieldEditor:") ~typ:(id @-> returning (void)) x
let insertTable x self = msg_send ~self ~cmd:(selector "insertTable:") ~typ:(id @-> returning (void)) x
let insertText x self = msg_send ~self ~cmd:(selector "insertText:") ~typ:(id @-> returning (void)) x
let insertText' x ~replacementRange self = msg_send ~self ~cmd:(selector "insertText:replacementRange:") ~typ:(id @-> NSRange.t @-> returning (void)) x replacementRange
let insertionPointColor self = msg_send ~self ~cmd:(selector "insertionPointColor") ~typ:(returning (id))
let inspectorBarItemIdentifiers self = msg_send ~self ~cmd:(selector "inspectorBarItemIdentifiers") ~typ:(returning (id))
let invalidateTextContainerOrigin self = msg_send ~self ~cmd:(selector "invalidateTextContainerOrigin") ~typ:(returning (void))
let invokeExtensionService x self = msg_send ~self ~cmd:(selector "invokeExtensionService:") ~typ:(id @-> returning (void)) x
let invokeImmediateActionMenuItem x self = msg_send ~self ~cmd:(selector "invokeImmediateActionMenuItem:") ~typ:(id @-> returning (void)) x
let isAutomaticDashSubstitutionEnabled self = msg_send ~self ~cmd:(selector "isAutomaticDashSubstitutionEnabled") ~typ:(returning (bool))
let isAutomaticDataDetectionEnabled self = msg_send ~self ~cmd:(selector "isAutomaticDataDetectionEnabled") ~typ:(returning (bool))
let isAutomaticLanguageIdentificationEnabled self = msg_send ~self ~cmd:(selector "isAutomaticLanguageIdentificationEnabled") ~typ:(returning (bool))
let isAutomaticLinkDetectionEnabled self = msg_send ~self ~cmd:(selector "isAutomaticLinkDetectionEnabled") ~typ:(returning (bool))
let isAutomaticQuoteSubstitutionEnabled self = msg_send ~self ~cmd:(selector "isAutomaticQuoteSubstitutionEnabled") ~typ:(returning (bool))
let isAutomaticSpellingCorrectionEnabled self = msg_send ~self ~cmd:(selector "isAutomaticSpellingCorrectionEnabled") ~typ:(returning (bool))
let isAutomaticTextCompletionEnabled self = msg_send ~self ~cmd:(selector "isAutomaticTextCompletionEnabled") ~typ:(returning (bool))
let isAutomaticTextReplacementEnabled self = msg_send ~self ~cmd:(selector "isAutomaticTextReplacementEnabled") ~typ:(returning (bool))
let isCoalescingUndo self = msg_send ~self ~cmd:(selector "isCoalescingUndo") ~typ:(returning (bool))
let isCompatibleWithResponsiveScrolling self = msg_send ~self ~cmd:(selector "isCompatibleWithResponsiveScrolling") ~typ:(returning (bool))
let isContinuousSpellCheckingEnabled self = msg_send ~self ~cmd:(selector "isContinuousSpellCheckingEnabled") ~typ:(returning (bool))
let isEditable self = msg_send ~self ~cmd:(selector "isEditable") ~typ:(returning (bool))
let isFieldEditor self = msg_send ~self ~cmd:(selector "isFieldEditor") ~typ:(returning (bool))
let isFlipped self = msg_send ~self ~cmd:(selector "isFlipped") ~typ:(returning (bool))
let isGrammarCheckingEnabled self = msg_send ~self ~cmd:(selector "isGrammarCheckingEnabled") ~typ:(returning (bool))
let isHorizontallyResizable self = msg_send ~self ~cmd:(selector "isHorizontallyResizable") ~typ:(returning (bool))
let isIncrementalSearchingEnabled self = msg_send ~self ~cmd:(selector "isIncrementalSearchingEnabled") ~typ:(returning (bool))
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning (bool))
let isRichText self = msg_send ~self ~cmd:(selector "isRichText") ~typ:(returning (bool))
let isRulerVisible self = msg_send ~self ~cmd:(selector "isRulerVisible") ~typ:(returning (bool))
let isSelectable self = msg_send ~self ~cmd:(selector "isSelectable") ~typ:(returning (bool))
let isVerticallyResizable self = msg_send ~self ~cmd:(selector "isVerticallyResizable") ~typ:(returning (bool))
let itemsForSharingServiceInRanges x self = msg_send ~self ~cmd:(selector "itemsForSharingServiceInRanges:") ~typ:(id @-> returning (id)) x
let keyDown x self = msg_send ~self ~cmd:(selector "keyDown:") ~typ:(id @-> returning (void)) x
let keyUp x self = msg_send ~self ~cmd:(selector "keyUp:") ~typ:(id @-> returning (void)) x
let knowsPageRange x self = msg_send ~self ~cmd:(selector "knowsPageRange:") ~typ:(ptr (NSRange.t) @-> returning (bool)) x
let knowsPagesFirst x ~last self = msg_send ~self ~cmd:(selector "knowsPagesFirst:last:") ~typ:(ptr (llong) @-> ptr (llong) @-> returning (bool)) x last
let layout self = msg_send ~self ~cmd:(selector "layout") ~typ:(returning (void))
let layoutManager self = msg_send ~self ~cmd:(selector "layoutManager") ~typ:(returning (id))
let layoutManager' x ~effectiveCUICatalogForTextEffect self = msg_send ~self ~cmd:(selector "layoutManager:effectiveCUICatalogForTextEffect:") ~typ:(id @-> id @-> returning (id)) x effectiveCUICatalogForTextEffect
let layoutOrientation self = msg_send ~self ~cmd:(selector "layoutOrientation") ~typ:(returning (llong))
let layoutSublayersOfLayer x self = msg_send ~self ~cmd:(selector "layoutSublayersOfLayer:") ~typ:(id @-> returning (void)) x
let linkDetectionType self = msg_send ~self ~cmd:(selector "linkDetectionType") ~typ:(returning (llong))
let linkTextAttributes self = msg_send ~self ~cmd:(selector "linkTextAttributes") ~typ:(returning (id))
let locationForPositionInViewport x ~offset self = msg_send ~self ~cmd:(selector "locationForPositionInViewport:offset:") ~typ:(CGPoint.t @-> ptr (CGSize.t) @-> returning (id)) x offset
let locationOfPrintRect x self = msg_send ~self ~cmd:(selector "locationOfPrintRect:") ~typ:(CGRect.t @-> returning (CGPoint.t)) x
let lockDocument self = msg_send ~self ~cmd:(selector "lockDocument") ~typ:(returning (void))
let loosenKerning x self = msg_send ~self ~cmd:(selector "loosenKerning:") ~typ:(id @-> returning (void)) x
let lowerBaseline x self = msg_send ~self ~cmd:(selector "lowerBaseline:") ~typ:(id @-> returning (void)) x
let lowercaseWord x self = msg_send ~self ~cmd:(selector "lowercaseWord:") ~typ:(id @-> returning (void)) x
let makeBaseWritingDirectionLeftToRight x self = msg_send ~self ~cmd:(selector "makeBaseWritingDirectionLeftToRight:") ~typ:(id @-> returning (void)) x
let makeBaseWritingDirectionNatural x self = msg_send ~self ~cmd:(selector "makeBaseWritingDirectionNatural:") ~typ:(id @-> returning (void)) x
let makeBaseWritingDirectionRightToLeft x self = msg_send ~self ~cmd:(selector "makeBaseWritingDirectionRightToLeft:") ~typ:(id @-> returning (void)) x
let makeTextWritingDirectionLeftToRight x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionLeftToRight:") ~typ:(id @-> returning (void)) x
let makeTextWritingDirectionNatural x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionNatural:") ~typ:(id @-> returning (void)) x
let makeTextWritingDirectionRightToLeft x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionRightToLeft:") ~typ:(id @-> returning (void)) x
let makeTouchBar self = msg_send ~self ~cmd:(selector "makeTouchBar") ~typ:(returning (id))
let markedRange self = msg_send ~self ~cmd:(selector "markedRange") ~typ:(returning (NSRange.t))
let markedTextAttributes self = msg_send ~self ~cmd:(selector "markedTextAttributes") ~typ:(returning (id))
let maxSize self = msg_send ~self ~cmd:(selector "maxSize") ~typ:(returning (CGSize.t))
let menuForEvent x self = msg_send ~self ~cmd:(selector "menuForEvent:") ~typ:(id @-> returning (id)) x
let menuItemsForTextCheckingResult x ~range ~contextual ~event self = msg_send ~self ~cmd:(selector "menuItemsForTextCheckingResult:range:contextual:event:") ~typ:(id @-> NSRange.t @-> bool @-> id @-> returning (id)) x range contextual event
let minSize self = msg_send ~self ~cmd:(selector "minSize") ~typ:(returning (CGSize.t))
let mouseCancelled x self = msg_send ~self ~cmd:(selector "mouseCancelled:") ~typ:(id @-> returning (void)) x
let mouseDown x self = msg_send ~self ~cmd:(selector "mouseDown:") ~typ:(id @-> returning (void)) x
let mouseDownCanMoveWindow self = msg_send ~self ~cmd:(selector "mouseDownCanMoveWindow") ~typ:(returning (bool))
let mouseEntered x self = msg_send ~self ~cmd:(selector "mouseEntered:") ~typ:(id @-> returning (void)) x
let mouseExited x self = msg_send ~self ~cmd:(selector "mouseExited:") ~typ:(id @-> returning (void)) x
let mouseMoved x self = msg_send ~self ~cmd:(selector "mouseMoved:") ~typ:(id @-> returning (void)) x
let moveBackward x self = msg_send ~self ~cmd:(selector "moveBackward:") ~typ:(id @-> returning (void)) x
let moveBackwardAndModifySelection x self = msg_send ~self ~cmd:(selector "moveBackwardAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveDown x self = msg_send ~self ~cmd:(selector "moveDown:") ~typ:(id @-> returning (void)) x
let moveDownAndModifySelection x self = msg_send ~self ~cmd:(selector "moveDownAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveForward x self = msg_send ~self ~cmd:(selector "moveForward:") ~typ:(id @-> returning (void)) x
let moveForwardAndModifySelection x self = msg_send ~self ~cmd:(selector "moveForwardAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveLeft x self = msg_send ~self ~cmd:(selector "moveLeft:") ~typ:(id @-> returning (void)) x
let moveLeftAndModifySelection x self = msg_send ~self ~cmd:(selector "moveLeftAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveParagraphBackwardAndModifySelection x self = msg_send ~self ~cmd:(selector "moveParagraphBackwardAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveParagraphForwardAndModifySelection x self = msg_send ~self ~cmd:(selector "moveParagraphForwardAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveRight x self = msg_send ~self ~cmd:(selector "moveRight:") ~typ:(id @-> returning (void)) x
let moveRightAndModifySelection x self = msg_send ~self ~cmd:(selector "moveRightAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveToBeginningOfDocument x self = msg_send ~self ~cmd:(selector "moveToBeginningOfDocument:") ~typ:(id @-> returning (void)) x
let moveToBeginningOfDocumentAndModifySelection x self = msg_send ~self ~cmd:(selector "moveToBeginningOfDocumentAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveToBeginningOfLine x self = msg_send ~self ~cmd:(selector "moveToBeginningOfLine:") ~typ:(id @-> returning (void)) x
let moveToBeginningOfLineAndModifySelection x self = msg_send ~self ~cmd:(selector "moveToBeginningOfLineAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveToBeginningOfParagraph x self = msg_send ~self ~cmd:(selector "moveToBeginningOfParagraph:") ~typ:(id @-> returning (void)) x
let moveToBeginningOfParagraphAndModifySelection x self = msg_send ~self ~cmd:(selector "moveToBeginningOfParagraphAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveToEndOfDocument x self = msg_send ~self ~cmd:(selector "moveToEndOfDocument:") ~typ:(id @-> returning (void)) x
let moveToEndOfDocumentAndModifySelection x self = msg_send ~self ~cmd:(selector "moveToEndOfDocumentAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveToEndOfLine x self = msg_send ~self ~cmd:(selector "moveToEndOfLine:") ~typ:(id @-> returning (void)) x
let moveToEndOfLineAndModifySelection x self = msg_send ~self ~cmd:(selector "moveToEndOfLineAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveToEndOfParagraph x self = msg_send ~self ~cmd:(selector "moveToEndOfParagraph:") ~typ:(id @-> returning (void)) x
let moveToEndOfParagraphAndModifySelection x self = msg_send ~self ~cmd:(selector "moveToEndOfParagraphAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveToLeftEndOfLine x self = msg_send ~self ~cmd:(selector "moveToLeftEndOfLine:") ~typ:(id @-> returning (void)) x
let moveToLeftEndOfLineAndModifySelection x self = msg_send ~self ~cmd:(selector "moveToLeftEndOfLineAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveToRightEndOfLine x self = msg_send ~self ~cmd:(selector "moveToRightEndOfLine:") ~typ:(id @-> returning (void)) x
let moveToRightEndOfLineAndModifySelection x self = msg_send ~self ~cmd:(selector "moveToRightEndOfLineAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveUp x self = msg_send ~self ~cmd:(selector "moveUp:") ~typ:(id @-> returning (void)) x
let moveUpAndModifySelection x self = msg_send ~self ~cmd:(selector "moveUpAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveWordBackward x self = msg_send ~self ~cmd:(selector "moveWordBackward:") ~typ:(id @-> returning (void)) x
let moveWordBackwardAndModifySelection x self = msg_send ~self ~cmd:(selector "moveWordBackwardAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveWordForward x self = msg_send ~self ~cmd:(selector "moveWordForward:") ~typ:(id @-> returning (void)) x
let moveWordForwardAndModifySelection x self = msg_send ~self ~cmd:(selector "moveWordForwardAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveWordLeft x self = msg_send ~self ~cmd:(selector "moveWordLeft:") ~typ:(id @-> returning (void)) x
let moveWordLeftAndModifySelection x self = msg_send ~self ~cmd:(selector "moveWordLeftAndModifySelection:") ~typ:(id @-> returning (void)) x
let moveWordRight x self = msg_send ~self ~cmd:(selector "moveWordRight:") ~typ:(id @-> returning (void)) x
let moveWordRightAndModifySelection x self = msg_send ~self ~cmd:(selector "moveWordRightAndModifySelection:") ~typ:(id @-> returning (void)) x
let numberOfPreviewItemsInPreviewPanel x self = msg_send ~self ~cmd:(selector "numberOfPreviewItemsInPreviewPanel:") ~typ:(id @-> returning (ullong)) x
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let orderFrontLinkPanel x self = msg_send ~self ~cmd:(selector "orderFrontLinkPanel:") ~typ:(id @-> returning (void)) x
let orderFrontListPanel x self = msg_send ~self ~cmd:(selector "orderFrontListPanel:") ~typ:(id @-> returning (void)) x
let orderFrontSharingServicePicker x self = msg_send ~self ~cmd:(selector "orderFrontSharingServicePicker:") ~typ:(id @-> returning (void)) x
let orderFrontSpacingPanel x self = msg_send ~self ~cmd:(selector "orderFrontSpacingPanel:") ~typ:(id @-> returning (void)) x
let orderFrontSubstitutionsPanel x self = msg_send ~self ~cmd:(selector "orderFrontSubstitutionsPanel:") ~typ:(id @-> returning (void)) x
let orderFrontTablePanel x self = msg_send ~self ~cmd:(selector "orderFrontTablePanel:") ~typ:(id @-> returning (void)) x
let outline x self = msg_send ~self ~cmd:(selector "outline:") ~typ:(id @-> returning (void)) x
let pageDown x self = msg_send ~self ~cmd:(selector "pageDown:") ~typ:(id @-> returning (void)) x
let pageDownAndModifySelection x self = msg_send ~self ~cmd:(selector "pageDownAndModifySelection:") ~typ:(id @-> returning (void)) x
let pageUp x self = msg_send ~self ~cmd:(selector "pageUp:") ~typ:(id @-> returning (void)) x
let pageUpAndModifySelection x self = msg_send ~self ~cmd:(selector "pageUpAndModifySelection:") ~typ:(id @-> returning (void)) x
let paste x self = msg_send ~self ~cmd:(selector "paste:") ~typ:(id @-> returning (void)) x
let pasteAsPlainText x self = msg_send ~self ~cmd:(selector "pasteAsPlainText:") ~typ:(id @-> returning (void)) x
let pasteAsRichText x self = msg_send ~self ~cmd:(selector "pasteAsRichText:") ~typ:(id @-> returning (void)) x
let pasteFont x self = msg_send ~self ~cmd:(selector "pasteFont:") ~typ:(id @-> returning (void)) x
let pasteRuler x self = msg_send ~self ~cmd:(selector "pasteRuler:") ~typ:(id @-> returning (void)) x
let pendingCandidateUpdate self = msg_send ~self ~cmd:(selector "pendingCandidateUpdate") ~typ:(returning (bool))
let performDragOperation x self = msg_send ~self ~cmd:(selector "performDragOperation:") ~typ:(id @-> returning (bool)) x
let performFindPanelAction x self = msg_send ~self ~cmd:(selector "performFindPanelAction:") ~typ:(id @-> returning (void)) x
let performPendingTextChecking self = msg_send ~self ~cmd:(selector "performPendingTextChecking") ~typ:(returning (void))
let performTextFinderAction x self = msg_send ~self ~cmd:(selector "performTextFinderAction:") ~typ:(id @-> returning (void)) x
let performValidatedReplacementInRange x ~withAttributedString self = msg_send ~self ~cmd:(selector "performValidatedReplacementInRange:withAttributedString:") ~typ:(NSRange.t @-> id @-> returning (bool)) x withAttributedString
let placeholderAttributedString self = msg_send ~self ~cmd:(selector "placeholderAttributedString") ~typ:(returning (id))
let placeholderString self = msg_send ~self ~cmd:(selector "placeholderString") ~typ:(returning (id))
let preferredPasteboardTypeFromArray x ~restrictedToTypesFromArray self = msg_send ~self ~cmd:(selector "preferredPasteboardTypeFromArray:restrictedToTypesFromArray:") ~typ:(id @-> id @-> returning (id)) x restrictedToTypesFromArray
let preferredTextFinderStyle self = msg_send ~self ~cmd:(selector "preferredTextFinderStyle") ~typ:(returning (llong))
let prepareContentInRect x self = msg_send ~self ~cmd:(selector "prepareContentInRect:") ~typ:(CGRect.t @-> returning (void)) x
let prepareForDragOperation x self = msg_send ~self ~cmd:(selector "prepareForDragOperation:") ~typ:(id @-> returning (bool)) x
let previewPanel x ~previewItemAtIndex self = msg_send ~self ~cmd:(selector "previewPanel:previewItemAtIndex:") ~typ:(id @-> ullong @-> returning (id)) x previewItemAtIndex
let previewPanel1 x ~sourceFrameOnScreenForPreviewItem self = msg_send ~self ~cmd:(selector "previewPanel:sourceFrameOnScreenForPreviewItem:") ~typ:(id @-> id @-> returning (CGRect.t)) x sourceFrameOnScreenForPreviewItem
let previewPanel2 x ~transitionImageForPreviewItem ~contentRect self = msg_send ~self ~cmd:(selector "previewPanel:transitionImageForPreviewItem:contentRect:") ~typ:(id @-> id @-> ptr (CGRect.t) @-> returning (id)) x transitionImageForPreviewItem contentRect
let quickLookPreviewItems x self = msg_send ~self ~cmd:(selector "quickLookPreviewItems:") ~typ:(id @-> returning (void)) x
let quickLookPreviewableItemsInRanges x self = msg_send ~self ~cmd:(selector "quickLookPreviewableItemsInRanges:") ~typ:(id @-> returning (id)) x
let quickLookWithEvent x self = msg_send ~self ~cmd:(selector "quickLookWithEvent:") ~typ:(id @-> returning (void)) x
let raiseBaseline x self = msg_send ~self ~cmd:(selector "raiseBaseline:") ~typ:(id @-> returning (void)) x
let rangeForUserCharacterAttributeChange self = msg_send ~self ~cmd:(selector "rangeForUserCharacterAttributeChange") ~typ:(returning (NSRange.t))
let rangeForUserCompletion self = msg_send ~self ~cmd:(selector "rangeForUserCompletion") ~typ:(returning (NSRange.t))
let rangeForUserParagraphAttributeChange self = msg_send ~self ~cmd:(selector "rangeForUserParagraphAttributeChange") ~typ:(returning (NSRange.t))
let rangeForUserTextChange self = msg_send ~self ~cmd:(selector "rangeForUserTextChange") ~typ:(returning (NSRange.t))
let rangesForUserCharacterAttributeChange self = msg_send ~self ~cmd:(selector "rangesForUserCharacterAttributeChange") ~typ:(returning (id))
let rangesForUserParagraphAttributeChange self = msg_send ~self ~cmd:(selector "rangesForUserParagraphAttributeChange") ~typ:(returning (id))
let rangesForUserTextChange self = msg_send ~self ~cmd:(selector "rangesForUserTextChange") ~typ:(returning (id))
let readRTFDFromFile x self = msg_send ~self ~cmd:(selector "readRTFDFromFile:") ~typ:(id @-> returning (bool)) x
let readSelectionFromItems x self = msg_send ~self ~cmd:(selector "readSelectionFromItems:") ~typ:(id @-> returning (void)) x
let readSelectionFromPasteboard x self = msg_send ~self ~cmd:(selector "readSelectionFromPasteboard:") ~typ:(id @-> returning (bool)) x
let readSelectionFromPasteboard' x ~type_ self = msg_send ~self ~cmd:(selector "readSelectionFromPasteboard:type:") ~typ:(id @-> id @-> returning (bool)) x type_
let readablePasteboardTypes self = msg_send ~self ~cmd:(selector "readablePasteboardTypes") ~typ:(returning (id))
let rectForPage x self = msg_send ~self ~cmd:(selector "rectForPage:") ~typ:(llong @-> returning (CGRect.t)) x
let rectForSmartMagnificationAtPoint x ~inRect self = msg_send ~self ~cmd:(selector "rectForSmartMagnificationAtPoint:inRect:") ~typ:(CGPoint.t @-> CGRect.t @-> returning (CGRect.t)) x inRect
let rectsForCharacterRange x self = msg_send ~self ~cmd:(selector "rectsForCharacterRange:") ~typ:(NSRange.t @-> returning (id)) x
let release self = msg_send ~self ~cmd:(selector "release") ~typ:(returning (void))
let removeAccents x self = msg_send ~self ~cmd:(selector "removeAccents:") ~typ:(id @-> returning (void)) x
let removeAnnotation x ~range self = msg_send ~self ~cmd:(selector "removeAnnotation:range:") ~typ:(id @-> NSRange.t @-> returning (void)) x range
let removeFromSuperview self = msg_send ~self ~cmd:(selector "removeFromSuperview") ~typ:(returning (void))
let renderingColorForDocumentColor x self = msg_send ~self ~cmd:(selector "renderingColorForDocumentColor:") ~typ:(id @-> returning (id)) x
let replaceCharactersInRange x ~withAnnotatedString self = msg_send ~self ~cmd:(selector "replaceCharactersInRange:withAnnotatedString:") ~typ:(NSRange.t @-> id @-> returning (void)) x withAnnotatedString
let replaceCharactersInRange1 x ~withRTF self = msg_send ~self ~cmd:(selector "replaceCharactersInRange:withRTF:") ~typ:(NSRange.t @-> id @-> returning (void)) x withRTF
let replaceCharactersInRange2 x ~withRTFD self = msg_send ~self ~cmd:(selector "replaceCharactersInRange:withRTFD:") ~typ:(NSRange.t @-> id @-> returning (void)) x withRTFD
let replaceCharactersInRange3 x ~withString self = msg_send ~self ~cmd:(selector "replaceCharactersInRange:withString:") ~typ:(NSRange.t @-> id @-> returning (void)) x withString
let replaceDashesInSelection x self = msg_send ~self ~cmd:(selector "replaceDashesInSelection:") ~typ:(id @-> returning (void)) x
let replaceQuotesInSelection x self = msg_send ~self ~cmd:(selector "replaceQuotesInSelection:") ~typ:(id @-> returning (void)) x
let replaceTextContainer x self = msg_send ~self ~cmd:(selector "replaceTextContainer:") ~typ:(id @-> returning (void)) x
let replaceTextInSelection x self = msg_send ~self ~cmd:(selector "replaceTextInSelection:") ~typ:(id @-> returning (void)) x
let replacementObjectForArchiver x self = msg_send ~self ~cmd:(selector "replacementObjectForArchiver:") ~typ:(id @-> returning (id)) x
let replacementObjectForKeyedArchiver x self = msg_send ~self ~cmd:(selector "replacementObjectForKeyedArchiver:") ~typ:(id @-> returning (id)) x
let resetCursorRects self = msg_send ~self ~cmd:(selector "resetCursorRects") ~typ:(returning (void))
let resignFirstResponder self = msg_send ~self ~cmd:(selector "resignFirstResponder") ~typ:(returning (bool))
let resignKeyFocus self = msg_send ~self ~cmd:(selector "resignKeyFocus") ~typ:(returning (void))
let resignKeyWindow self = msg_send ~self ~cmd:(selector "resignKeyWindow") ~typ:(returning (void))
let restoreStateWithCoder x self = msg_send ~self ~cmd:(selector "restoreStateWithCoder:") ~typ:(id @-> returning (void)) x
let revealContext x ~drawRectsForItem self = msg_send ~self ~cmd:(selector "revealContext:drawRectsForItem:") ~typ:(id @-> id @-> returning (void)) x drawRectsForItem
let revealContext1 x ~rectsForItem self = msg_send ~self ~cmd:(selector "revealContext:rectsForItem:") ~typ:(id @-> id @-> returning (id)) x rectsForItem
let revealContext2 x ~shouldUseDefaultHighlightForItem self = msg_send ~self ~cmd:(selector "revealContext:shouldUseDefaultHighlightForItem:") ~typ:(id @-> id @-> returning (bool)) x shouldUseDefaultHighlightForItem
let revealContext3 x ~startHighlightingItem self = msg_send ~self ~cmd:(selector "revealContext:startHighlightingItem:") ~typ:(id @-> id @-> returning (void)) x startHighlightingItem
let revealContext4 x ~stopHighlightingItem self = msg_send ~self ~cmd:(selector "revealContext:stopHighlightingItem:") ~typ:(id @-> id @-> returning (void)) x stopHighlightingItem
let rightMouseDown x self = msg_send ~self ~cmd:(selector "rightMouseDown:") ~typ:(id @-> returning (void)) x
let rightMouseUp x self = msg_send ~self ~cmd:(selector "rightMouseUp:") ~typ:(id @-> returning (void)) x
let rulerView x ~didAddMarker self = msg_send ~self ~cmd:(selector "rulerView:didAddMarker:") ~typ:(id @-> id @-> returning (void)) x didAddMarker
let rulerView1 x ~didMoveMarker self = msg_send ~self ~cmd:(selector "rulerView:didMoveMarker:") ~typ:(id @-> id @-> returning (void)) x didMoveMarker
let rulerView2 x ~didRemoveMarker self = msg_send ~self ~cmd:(selector "rulerView:didRemoveMarker:") ~typ:(id @-> id @-> returning (void)) x didRemoveMarker
let rulerView3 x ~handleMouseDown self = msg_send ~self ~cmd:(selector "rulerView:handleMouseDown:") ~typ:(id @-> id @-> returning (void)) x handleMouseDown
let rulerView4 x ~locationForPoint self = msg_send ~self ~cmd:(selector "rulerView:locationForPoint:") ~typ:(id @-> CGPoint.t @-> returning (double)) x locationForPoint
let rulerView5 x ~pointForLocation self = msg_send ~self ~cmd:(selector "rulerView:pointForLocation:") ~typ:(id @-> double @-> returning (CGPoint.t)) x pointForLocation
let rulerView6 x ~shouldAddMarker self = msg_send ~self ~cmd:(selector "rulerView:shouldAddMarker:") ~typ:(id @-> id @-> returning (bool)) x shouldAddMarker
let rulerView7 x ~shouldMoveMarker self = msg_send ~self ~cmd:(selector "rulerView:shouldMoveMarker:") ~typ:(id @-> id @-> returning (bool)) x shouldMoveMarker
let rulerView8 x ~shouldRemoveMarker self = msg_send ~self ~cmd:(selector "rulerView:shouldRemoveMarker:") ~typ:(id @-> id @-> returning (bool)) x shouldRemoveMarker
let rulerView9 x ~willSetClientView self = msg_send ~self ~cmd:(selector "rulerView:willSetClientView:") ~typ:(id @-> id @-> returning (void)) x willSetClientView
let rulerView10 x ~handleMouseDown ~forMarker self = msg_send ~self ~cmd:(selector "rulerView:handleMouseDown:forMarker:") ~typ:(id @-> id @-> id @-> returning (bool)) x handleMouseDown forMarker
let rulerView11 x ~willAddMarker ~atLocation self = msg_send ~self ~cmd:(selector "rulerView:willAddMarker:atLocation:") ~typ:(id @-> id @-> double @-> returning (double)) x willAddMarker atLocation
let rulerView12 x ~willMoveMarker ~toLocation self = msg_send ~self ~cmd:(selector "rulerView:willMoveMarker:toLocation:") ~typ:(id @-> id @-> double @-> returning (double)) x willMoveMarker toLocation
let scaleUnitSquareToSize x self = msg_send ~self ~cmd:(selector "scaleUnitSquareToSize:") ~typ:(CGSize.t @-> returning (void)) x
let scrollLineDown x self = msg_send ~self ~cmd:(selector "scrollLineDown:") ~typ:(id @-> returning (void)) x
let scrollLineUp x self = msg_send ~self ~cmd:(selector "scrollLineUp:") ~typ:(id @-> returning (void)) x
let scrollPageDown x self = msg_send ~self ~cmd:(selector "scrollPageDown:") ~typ:(id @-> returning (void)) x
let scrollPageUp x self = msg_send ~self ~cmd:(selector "scrollPageUp:") ~typ:(id @-> returning (void)) x
let scrollRangeToVisible x self = msg_send ~self ~cmd:(selector "scrollRangeToVisible:") ~typ:(NSRange.t @-> returning (void)) x
let scrollToBeginningOfDocument x self = msg_send ~self ~cmd:(selector "scrollToBeginningOfDocument:") ~typ:(id @-> returning (void)) x
let scrollToEndOfDocument x self = msg_send ~self ~cmd:(selector "scrollToEndOfDocument:") ~typ:(id @-> returning (void)) x
let selectAll x self = msg_send ~self ~cmd:(selector "selectAll:") ~typ:(id @-> returning (void)) x
let selectAndShowRange x self = msg_send ~self ~cmd:(selector "selectAndShowRange:") ~typ:(NSRange.t @-> returning (void)) x
let selectLine x self = msg_send ~self ~cmd:(selector "selectLine:") ~typ:(id @-> returning (void)) x
let selectParagraph x self = msg_send ~self ~cmd:(selector "selectParagraph:") ~typ:(id @-> returning (void)) x
let selectToMark x self = msg_send ~self ~cmd:(selector "selectToMark:") ~typ:(id @-> returning (void)) x
let selectWord x self = msg_send ~self ~cmd:(selector "selectWord:") ~typ:(id @-> returning (void)) x
let selectedRange self = msg_send ~self ~cmd:(selector "selectedRange") ~typ:(returning (NSRange.t))
let selectedRanges self = msg_send ~self ~cmd:(selector "selectedRanges") ~typ:(returning (id))
let selectedTextAttributes self = msg_send ~self ~cmd:(selector "selectedTextAttributes") ~typ:(returning (id))
let selectionAffinity self = msg_send ~self ~cmd:(selector "selectionAffinity") ~typ:(returning (ullong))
let selectionGranularity self = msg_send ~self ~cmd:(selector "selectionGranularity") ~typ:(returning (ullong))
let selectionItems self = msg_send ~self ~cmd:(selector "selectionItems") ~typ:(returning (id))
let selectionRangeForProposedRange x ~granularity self = msg_send ~self ~cmd:(selector "selectionRangeForProposedRange:granularity:") ~typ:(NSRange.t @-> ullong @-> returning (NSRange.t)) x granularity
let setAcceptsGlyphInfo x self = msg_send ~self ~cmd:(selector "setAcceptsGlyphInfo:") ~typ:(bool @-> returning (void)) x
let setAlignment x self = msg_send ~self ~cmd:(selector "setAlignment:") ~typ:(llong @-> returning (void)) x
let setAlignment' x ~range self = msg_send ~self ~cmd:(selector "setAlignment:range:") ~typ:(llong @-> NSRange.t @-> returning (void)) x range
let setAllowedInputSourceLocales x self = msg_send ~self ~cmd:(selector "setAllowedInputSourceLocales:") ~typ:(id @-> returning (void)) x
let setAllowsCharacterPickerTouchBarItem x self = msg_send ~self ~cmd:(selector "setAllowsCharacterPickerTouchBarItem:") ~typ:(bool @-> returning (void)) x
let setAllowsDocumentBackgroundColorChange x self = msg_send ~self ~cmd:(selector "setAllowsDocumentBackgroundColorChange:") ~typ:(bool @-> returning (void)) x
let setAllowsImageEditing x self = msg_send ~self ~cmd:(selector "setAllowsImageEditing:") ~typ:(bool @-> returning (void)) x
let setAllowsUndo x self = msg_send ~self ~cmd:(selector "setAllowsUndo:") ~typ:(bool @-> returning (void)) x
let setAnnotations x ~range self = msg_send ~self ~cmd:(selector "setAnnotations:range:") ~typ:(id @-> NSRange.t @-> returning (void)) x range
let setAutocorrectionType x self = msg_send ~self ~cmd:(selector "setAutocorrectionType:") ~typ:(llong @-> returning (void)) x
let setAutomaticDashSubstitutionEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticDashSubstitutionEnabled:") ~typ:(bool @-> returning (void)) x
let setAutomaticDataDetectionEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticDataDetectionEnabled:") ~typ:(bool @-> returning (void)) x
let setAutomaticLanguageIdentificationEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticLanguageIdentificationEnabled:") ~typ:(bool @-> returning (void)) x
let setAutomaticLinkDetectionEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticLinkDetectionEnabled:") ~typ:(bool @-> returning (void)) x
let setAutomaticQuoteSubstitutionEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticQuoteSubstitutionEnabled:") ~typ:(bool @-> returning (void)) x
let setAutomaticSpellingCorrectionEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticSpellingCorrectionEnabled:") ~typ:(bool @-> returning (void)) x
let setAutomaticTextCompletionEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticTextCompletionEnabled:") ~typ:(bool @-> returning (void)) x
let setAutomaticTextReplacementEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticTextReplacementEnabled:") ~typ:(bool @-> returning (void)) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning (void)) x
let setBaseWritingDirection x self = msg_send ~self ~cmd:(selector "setBaseWritingDirection:") ~typ:(llong @-> returning (void)) x
let setBaseWritingDirection' x ~range self = msg_send ~self ~cmd:(selector "setBaseWritingDirection:range:") ~typ:(llong @-> NSRange.t @-> returning (void)) x range
let setBoundsSize x self = msg_send ~self ~cmd:(selector "setBoundsSize:") ~typ:(CGSize.t @-> returning (void)) x
let setCentersOnScroll x self = msg_send ~self ~cmd:(selector "setCentersOnScroll:") ~typ:(bool @-> returning (void)) x
let setConstrainedFrameSize x self = msg_send ~self ~cmd:(selector "setConstrainedFrameSize:") ~typ:(CGSize.t @-> returning (void)) x
let setContentType x self = msg_send ~self ~cmd:(selector "setContentType:") ~typ:(id @-> returning (void)) x
let setContinuousSpellCheckingEnabled x self = msg_send ~self ~cmd:(selector "setContinuousSpellCheckingEnabled:") ~typ:(bool @-> returning (void)) x
let setDataDetectionType x self = msg_send ~self ~cmd:(selector "setDataDetectionType:") ~typ:(llong @-> returning (void)) x
let setDefaultParagraphStyle x self = msg_send ~self ~cmd:(selector "setDefaultParagraphStyle:") ~typ:(id @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDisplaysLinkToolTips x self = msg_send ~self ~cmd:(selector "setDisplaysLinkToolTips:") ~typ:(bool @-> returning (void)) x
let setDrawsBackground x self = msg_send ~self ~cmd:(selector "setDrawsBackground:") ~typ:(bool @-> returning (void)) x
let setEditable x self = msg_send ~self ~cmd:(selector "setEditable:") ~typ:(bool @-> returning (void)) x
let setEnabledTextCheckingTypes x self = msg_send ~self ~cmd:(selector "setEnabledTextCheckingTypes:") ~typ:(ullong @-> returning (void)) x
let setFieldEditor x self = msg_send ~self ~cmd:(selector "setFieldEditor:") ~typ:(bool @-> returning (void)) x
let setFont x self = msg_send ~self ~cmd:(selector "setFont:") ~typ:(id @-> returning (void)) x
let setFont' x ~range self = msg_send ~self ~cmd:(selector "setFont:range:") ~typ:(id @-> NSRange.t @-> returning (void)) x range
let setFrameSize x self = msg_send ~self ~cmd:(selector "setFrameSize:") ~typ:(CGSize.t @-> returning (void)) x
let setGrammarCheckingEnabled x self = msg_send ~self ~cmd:(selector "setGrammarCheckingEnabled:") ~typ:(bool @-> returning (void)) x
let setGrammarCheckingType x self = msg_send ~self ~cmd:(selector "setGrammarCheckingType:") ~typ:(llong @-> returning (void)) x
let setHorizontallyResizable x self = msg_send ~self ~cmd:(selector "setHorizontallyResizable:") ~typ:(bool @-> returning (void)) x
let setImportsGraphics x self = msg_send ~self ~cmd:(selector "setImportsGraphics:") ~typ:(bool @-> returning (void)) x
let setIncrementalSearchingEnabled x self = msg_send ~self ~cmd:(selector "setIncrementalSearchingEnabled:") ~typ:(bool @-> returning (void)) x
let setInsertionPointColor x self = msg_send ~self ~cmd:(selector "setInsertionPointColor:") ~typ:(id @-> returning (void)) x
let setLayer x self = msg_send ~self ~cmd:(selector "setLayer:") ~typ:(id @-> returning (void)) x
let setLayoutOrientation x self = msg_send ~self ~cmd:(selector "setLayoutOrientation:") ~typ:(llong @-> returning (void)) x
let setLinkDetectionType x self = msg_send ~self ~cmd:(selector "setLinkDetectionType:") ~typ:(llong @-> returning (void)) x
let setLinkTextAttributes x self = msg_send ~self ~cmd:(selector "setLinkTextAttributes:") ~typ:(id @-> returning (void)) x
let setMark x self = msg_send ~self ~cmd:(selector "setMark:") ~typ:(id @-> returning (void)) x
let setMarkedText x ~selectedRange self = msg_send ~self ~cmd:(selector "setMarkedText:selectedRange:") ~typ:(id @-> NSRange.t @-> returning (void)) x selectedRange
let setMarkedText' x ~selectedRange ~replacementRange self = msg_send ~self ~cmd:(selector "setMarkedText:selectedRange:replacementRange:") ~typ:(id @-> NSRange.t @-> NSRange.t @-> returning (void)) x selectedRange replacementRange
let setMarkedTextAttributes x self = msg_send ~self ~cmd:(selector "setMarkedTextAttributes:") ~typ:(id @-> returning (void)) x
let setMaxSize x self = msg_send ~self ~cmd:(selector "setMaxSize:") ~typ:(CGSize.t @-> returning (void)) x
let setMinSize x self = msg_send ~self ~cmd:(selector "setMinSize:") ~typ:(CGSize.t @-> returning (void)) x
let setNeedsDisplayInRect x self = msg_send ~self ~cmd:(selector "setNeedsDisplayInRect:") ~typ:(CGRect.t @-> returning (void)) x
let setNeedsDisplayInRect' x ~avoidAdditionalLayout self = msg_send ~self ~cmd:(selector "setNeedsDisplayInRect:avoidAdditionalLayout:") ~typ:(CGRect.t @-> bool @-> returning (void)) x avoidAdditionalLayout
let setPlaceholderAttributedString x self = msg_send ~self ~cmd:(selector "setPlaceholderAttributedString:") ~typ:(id @-> returning (void)) x
let setPlaceholderString x self = msg_send ~self ~cmd:(selector "setPlaceholderString:") ~typ:(id @-> returning (void)) x
let setPreferredTextFinderStyle x self = msg_send ~self ~cmd:(selector "setPreferredTextFinderStyle:") ~typ:(llong @-> returning (void)) x
let setRichText x self = msg_send ~self ~cmd:(selector "setRichText:") ~typ:(bool @-> returning (void)) x
let setRulerVisible x self = msg_send ~self ~cmd:(selector "setRulerVisible:") ~typ:(bool @-> returning (void)) x
let setSelectable x self = msg_send ~self ~cmd:(selector "setSelectable:") ~typ:(bool @-> returning (void)) x
let setSelectedRange x self = msg_send ~self ~cmd:(selector "setSelectedRange:") ~typ:(NSRange.t @-> returning (void)) x
let setSelectedRange' x ~affinity ~stillSelecting self = msg_send ~self ~cmd:(selector "setSelectedRange:affinity:stillSelecting:") ~typ:(NSRange.t @-> ullong @-> bool @-> returning (void)) x affinity stillSelecting
let setSelectedRanges x self = msg_send ~self ~cmd:(selector "setSelectedRanges:") ~typ:(id @-> returning (void)) x
let setSelectedRanges' x ~affinity ~stillSelecting self = msg_send ~self ~cmd:(selector "setSelectedRanges:affinity:stillSelecting:") ~typ:(id @-> ullong @-> bool @-> returning (void)) x affinity stillSelecting
let setSelectedTextAttributes x self = msg_send ~self ~cmd:(selector "setSelectedTextAttributes:") ~typ:(id @-> returning (void)) x
let setSelectionGranularity x self = msg_send ~self ~cmd:(selector "setSelectionGranularity:") ~typ:(ullong @-> returning (void)) x
let setSmartDashesType x self = msg_send ~self ~cmd:(selector "setSmartDashesType:") ~typ:(llong @-> returning (void)) x
let setSmartInsertDeleteEnabled x self = msg_send ~self ~cmd:(selector "setSmartInsertDeleteEnabled:") ~typ:(bool @-> returning (void)) x
let setSmartInsertDeleteType x self = msg_send ~self ~cmd:(selector "setSmartInsertDeleteType:") ~typ:(llong @-> returning (void)) x
let setSmartQuotesType x self = msg_send ~self ~cmd:(selector "setSmartQuotesType:") ~typ:(llong @-> returning (void)) x
let setSpellCheckingType x self = msg_send ~self ~cmd:(selector "setSpellCheckingType:") ~typ:(llong @-> returning (void)) x
let setSpellingState x ~range self = msg_send ~self ~cmd:(selector "setSpellingState:range:") ~typ:(llong @-> NSRange.t @-> returning (void)) x range
let setString x self = msg_send ~self ~cmd:(selector "setString:") ~typ:(id @-> returning (void)) x
let setTextColor x self = msg_send ~self ~cmd:(selector "setTextColor:") ~typ:(id @-> returning (void)) x
let setTextColor' x ~range self = msg_send ~self ~cmd:(selector "setTextColor:range:") ~typ:(id @-> NSRange.t @-> returning (void)) x range
let setTextCompletionType x self = msg_send ~self ~cmd:(selector "setTextCompletionType:") ~typ:(llong @-> returning (void)) x
let setTextContainer x self = msg_send ~self ~cmd:(selector "setTextContainer:") ~typ:(id @-> returning (void)) x
let setTextContainerInset x self = msg_send ~self ~cmd:(selector "setTextContainerInset:") ~typ:(CGSize.t @-> returning (void)) x
let setTextReplacementType x self = msg_send ~self ~cmd:(selector "setTextReplacementType:") ~typ:(llong @-> returning (void)) x
let setTouchBar x self = msg_send ~self ~cmd:(selector "setTouchBar:") ~typ:(id @-> returning (void)) x
let setTypingAttributes x self = msg_send ~self ~cmd:(selector "setTypingAttributes:") ~typ:(id @-> returning (void)) x
let setUndoActionName x self = msg_send ~self ~cmd:(selector "setUndoActionName:") ~typ:(id @-> returning (void)) x
let setUsesAdaptiveColorMappingForDarkAppearance x self = msg_send ~self ~cmd:(selector "setUsesAdaptiveColorMappingForDarkAppearance:") ~typ:(bool @-> returning (void)) x
let setUsesColorsWithInvertedLightness x self = msg_send ~self ~cmd:(selector "setUsesColorsWithInvertedLightness:") ~typ:(bool @-> returning (void)) x
let setUsesFindBar x self = msg_send ~self ~cmd:(selector "setUsesFindBar:") ~typ:(bool @-> returning (void)) x
let setUsesFindPanel x self = msg_send ~self ~cmd:(selector "setUsesFindPanel:") ~typ:(bool @-> returning (void)) x
let setUsesFontPanel x self = msg_send ~self ~cmd:(selector "setUsesFontPanel:") ~typ:(bool @-> returning (void)) x
let setUsesInspectorBar x self = msg_send ~self ~cmd:(selector "setUsesInspectorBar:") ~typ:(bool @-> returning (void)) x
let setUsesRolloverButtonForSelection x self = msg_send ~self ~cmd:(selector "setUsesRolloverButtonForSelection:") ~typ:(bool @-> returning (void)) x
let setUsesRuler x self = msg_send ~self ~cmd:(selector "setUsesRuler:") ~typ:(bool @-> returning (void)) x
let setVerticallyResizable x self = msg_send ~self ~cmd:(selector "setVerticallyResizable:") ~typ:(bool @-> returning (void)) x
let setWantsNotificationForMarkedText x self = msg_send ~self ~cmd:(selector "setWantsNotificationForMarkedText:") ~typ:(bool @-> returning (void)) x
let sharingService x ~containerFrameOnScreenForShareItem self = msg_send ~self ~cmd:(selector "sharingService:containerFrameOnScreenForShareItem:") ~typ:(id @-> id @-> returning (CGRect.t)) x containerFrameOnScreenForShareItem
let sharingService1 x ~didShareItems self = msg_send ~self ~cmd:(selector "sharingService:didShareItems:") ~typ:(id @-> id @-> returning (void)) x didShareItems
let sharingService2 x ~sourceFrameOnScreenForShareItem self = msg_send ~self ~cmd:(selector "sharingService:sourceFrameOnScreenForShareItem:") ~typ:(id @-> id @-> returning (CGRect.t)) x sourceFrameOnScreenForShareItem
let sharingService3 x ~sourceWindowForShareItems ~sharingContentScope self = msg_send ~self ~cmd:(selector "sharingService:sourceWindowForShareItems:sharingContentScope:") ~typ:(id @-> id @-> ptr (llong) @-> returning (id)) x sourceWindowForShareItems sharingContentScope
let sharingService4 x ~transitionImageForShareItem ~contentRect self = msg_send ~self ~cmd:(selector "sharingService:transitionImageForShareItem:contentRect:") ~typ:(id @-> id @-> ptr (CGRect.t) @-> returning (id)) x transitionImageForShareItem contentRect
let sharingServicePicker x ~delegateForSharingService self = msg_send ~self ~cmd:(selector "sharingServicePicker:delegateForSharingService:") ~typ:(id @-> id @-> returning (id)) x delegateForSharingService
let sharingServicePicker' x ~sharingServicesForItems ~mask ~proposedSharingServices self = msg_send ~self ~cmd:(selector "sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:") ~typ:(id @-> id @-> ullong @-> id @-> returning (id)) x sharingServicesForItems mask proposedSharingServices
let shouldBeTreatedAsInkEvent x self = msg_send ~self ~cmd:(selector "shouldBeTreatedAsInkEvent:") ~typ:(id @-> returning (bool)) x
let shouldChangeTextInRange x ~replacementString self = msg_send ~self ~cmd:(selector "shouldChangeTextInRange:replacementString:") ~typ:(NSRange.t @-> id @-> returning (bool)) x replacementString
let shouldChangeTextInRanges x ~replacementStrings self = msg_send ~self ~cmd:(selector "shouldChangeTextInRanges:replacementStrings:") ~typ:(id @-> id @-> returning (bool)) x replacementStrings
let shouldDelayWindowOrderingForEvent x self = msg_send ~self ~cmd:(selector "shouldDelayWindowOrderingForEvent:") ~typ:(id @-> returning (bool)) x
let shouldDrawInsertionPoint self = msg_send ~self ~cmd:(selector "shouldDrawInsertionPoint") ~typ:(returning (bool))
let shouldRemoveCaseTransformations self = msg_send ~self ~cmd:(selector "shouldRemoveCaseTransformations") ~typ:(returning (bool))
let shouldRemoveTransformationAction x self = msg_send ~self ~cmd:(selector "shouldRemoveTransformationAction:") ~typ:(_SEL @-> returning (bool)) x
let shouldRenderPlaceholder self = msg_send ~self ~cmd:(selector "shouldRenderPlaceholder") ~typ:(returning (bool))
let shouldReplaceCharactersInRanges x ~withStrings self = msg_send ~self ~cmd:(selector "shouldReplaceCharactersInRanges:withStrings:") ~typ:(id @-> id @-> returning (bool)) x withStrings
let showDefinitionForAttributedString x ~range ~options ~baselineOriginProvider self = msg_send ~self ~cmd:(selector "showDefinitionForAttributedString:range:options:baselineOriginProvider:") ~typ:(id @-> NSRange.t @-> id @-> ptr void @-> returning (void)) x range options baselineOriginProvider
let showDefinitionFromMenu x self = msg_send ~self ~cmd:(selector "showDefinitionFromMenu:") ~typ:(id @-> returning (void)) x
let showFindIndicatorForRange x self = msg_send ~self ~cmd:(selector "showFindIndicatorForRange:") ~typ:(NSRange.t @-> returning (void)) x
let showFindIndicatorForRange' x ~fade self = msg_send ~self ~cmd:(selector "showFindIndicatorForRange:fade:") ~typ:(NSRange.t @-> bool @-> returning (void)) x fade
let showGuessPanel x self = msg_send ~self ~cmd:(selector "showGuessPanel:") ~typ:(id @-> returning (void)) x
let showHighlightWithCharacterRange x ~highlightStyle self = msg_send ~self ~cmd:(selector "showHighlightWithCharacterRange:highlightStyle:") ~typ:(NSRange.t @-> ullong @-> returning (void)) x highlightStyle
let sizeToFit self = msg_send ~self ~cmd:(selector "sizeToFit") ~typ:(returning (void))
let smartDashesType self = msg_send ~self ~cmd:(selector "smartDashesType") ~typ:(returning (llong))
let smartDeleteRangeForProposedRange x self = msg_send ~self ~cmd:(selector "smartDeleteRangeForProposedRange:") ~typ:(NSRange.t @-> returning (NSRange.t)) x
let smartInsertAfterStringForString x ~replacingRange self = msg_send ~self ~cmd:(selector "smartInsertAfterStringForString:replacingRange:") ~typ:(id @-> NSRange.t @-> returning (id)) x replacingRange
let smartInsertBeforeStringForString x ~replacingRange self = msg_send ~self ~cmd:(selector "smartInsertBeforeStringForString:replacingRange:") ~typ:(id @-> NSRange.t @-> returning (id)) x replacingRange
let smartInsertDeleteEnabled self = msg_send ~self ~cmd:(selector "smartInsertDeleteEnabled") ~typ:(returning (bool))
let smartInsertDeleteType self = msg_send ~self ~cmd:(selector "smartInsertDeleteType") ~typ:(returning (llong))
let smartInsertForString x ~replacingRange ~beforeString ~afterString self = msg_send ~self ~cmd:(selector "smartInsertForString:replacingRange:beforeString:afterString:") ~typ:(id @-> NSRange.t @-> ptr (id) @-> ptr (id) @-> returning (void)) x replacingRange beforeString afterString
let smartQuotesType self = msg_send ~self ~cmd:(selector "smartQuotesType") ~typ:(returning (llong))
let spellCheckerDidChangeCorrection x self = msg_send ~self ~cmd:(selector "spellCheckerDidChangeCorrection:") ~typ:(id @-> returning (void)) x
let spellCheckerDidChangeDashSubstitution x self = msg_send ~self ~cmd:(selector "spellCheckerDidChangeDashSubstitution:") ~typ:(id @-> returning (void)) x
let spellCheckerDidChangeLanguage x self = msg_send ~self ~cmd:(selector "spellCheckerDidChangeLanguage:") ~typ:(id @-> returning (void)) x
let spellCheckerDidChangeQuoteSubstitution x self = msg_send ~self ~cmd:(selector "spellCheckerDidChangeQuoteSubstitution:") ~typ:(id @-> returning (void)) x
let spellCheckerDidChangeReplacement x self = msg_send ~self ~cmd:(selector "spellCheckerDidChangeReplacement:") ~typ:(id @-> returning (void)) x
let spellCheckerDidLearnWord x self = msg_send ~self ~cmd:(selector "spellCheckerDidLearnWord:") ~typ:(id @-> returning (void)) x
let spellCheckerDidUnlearnWord x self = msg_send ~self ~cmd:(selector "spellCheckerDidUnlearnWord:") ~typ:(id @-> returning (void)) x
let spellCheckerDocumentTag self = msg_send ~self ~cmd:(selector "spellCheckerDocumentTag") ~typ:(returning (llong))
let spellCheckingType self = msg_send ~self ~cmd:(selector "spellCheckingType") ~typ:(returning (llong))
let spotlight x self = msg_send ~self ~cmd:(selector "spotlight:") ~typ:(id @-> returning (void)) x
let startSpeaking x self = msg_send ~self ~cmd:(selector "startSpeaking:") ~typ:(id @-> returning (void)) x
let stopSpeaking x self = msg_send ~self ~cmd:(selector "stopSpeaking:") ~typ:(id @-> returning (void)) x
let string_ self = msg_send ~self ~cmd:(selector "string") ~typ:(returning (id))
let subscript x self = msg_send ~self ~cmd:(selector "subscript:") ~typ:(id @-> returning (void)) x
let superscript x self = msg_send ~self ~cmd:(selector "superscript:") ~typ:(id @-> returning (void)) x
let swapWithMark x self = msg_send ~self ~cmd:(selector "swapWithMark:") ~typ:(id @-> returning (void)) x
let switchBlinkTimersIfNecessaryWithSharedData x self = msg_send ~self ~cmd:(selector "switchBlinkTimersIfNecessaryWithSharedData:") ~typ:(id @-> returning (bool)) x
let textCheckingController self = msg_send ~self ~cmd:(selector "textCheckingController") ~typ:(returning (id))
let textCheckingControllerUsesStringAnnotations self = msg_send ~self ~cmd:(selector "textCheckingControllerUsesStringAnnotations") ~typ:(returning (bool))
let textColor self = msg_send ~self ~cmd:(selector "textColor") ~typ:(returning (id))
let textCompletionType self = msg_send ~self ~cmd:(selector "textCompletionType") ~typ:(returning (llong))
let textContainer self = msg_send ~self ~cmd:(selector "textContainer") ~typ:(returning (id))
let textContainerInset self = msg_send ~self ~cmd:(selector "textContainerInset") ~typ:(returning (CGSize.t))
let textContainerOrigin self = msg_send ~self ~cmd:(selector "textContainerOrigin") ~typ:(returning (CGPoint.t))
let textContentStorage self = msg_send ~self ~cmd:(selector "textContentStorage") ~typ:(returning (id))
let textLayoutManager self = msg_send ~self ~cmd:(selector "textLayoutManager") ~typ:(returning (id))
let textReplacementType self = msg_send ~self ~cmd:(selector "textReplacementType") ~typ:(returning (llong))
let textStorage self = msg_send ~self ~cmd:(selector "textStorage") ~typ:(returning (id))
let textViewportLayoutController x ~configureRenderingSurfaceForTextLayoutFragment self = msg_send ~self ~cmd:(selector "textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:") ~typ:(id @-> id @-> returning (void)) x configureRenderingSurfaceForTextLayoutFragment
let textViewportLayoutControllerDidLayout x self = msg_send ~self ~cmd:(selector "textViewportLayoutControllerDidLayout:") ~typ:(id @-> returning (void)) x
let textViewportLayoutControllerWillLayout x self = msg_send ~self ~cmd:(selector "textViewportLayoutControllerWillLayout:") ~typ:(id @-> returning (void)) x
let tightenKerning x self = msg_send ~self ~cmd:(selector "tightenKerning:") ~typ:(id @-> returning (void)) x
let toggleAutomaticDashSubstitution x self = msg_send ~self ~cmd:(selector "toggleAutomaticDashSubstitution:") ~typ:(id @-> returning (void)) x
let toggleAutomaticDataDetection x self = msg_send ~self ~cmd:(selector "toggleAutomaticDataDetection:") ~typ:(id @-> returning (void)) x
let toggleAutomaticLanguageIdentification x self = msg_send ~self ~cmd:(selector "toggleAutomaticLanguageIdentification:") ~typ:(id @-> returning (void)) x
let toggleAutomaticLinkDetection x self = msg_send ~self ~cmd:(selector "toggleAutomaticLinkDetection:") ~typ:(id @-> returning (void)) x
let toggleAutomaticQuoteSubstitution x self = msg_send ~self ~cmd:(selector "toggleAutomaticQuoteSubstitution:") ~typ:(id @-> returning (void)) x
let toggleAutomaticSpellingCorrection x self = msg_send ~self ~cmd:(selector "toggleAutomaticSpellingCorrection:") ~typ:(id @-> returning (void)) x
let toggleAutomaticTextCompletion x self = msg_send ~self ~cmd:(selector "toggleAutomaticTextCompletion:") ~typ:(id @-> returning (void)) x
let toggleAutomaticTextReplacement x self = msg_send ~self ~cmd:(selector "toggleAutomaticTextReplacement:") ~typ:(id @-> returning (void)) x
let toggleBaseWritingDirection x self = msg_send ~self ~cmd:(selector "toggleBaseWritingDirection:") ~typ:(id @-> returning (void)) x
let toggleContinuousSpellChecking x self = msg_send ~self ~cmd:(selector "toggleContinuousSpellChecking:") ~typ:(id @-> returning (void)) x
let toggleGrammarChecking x self = msg_send ~self ~cmd:(selector "toggleGrammarChecking:") ~typ:(id @-> returning (void)) x
let toggleQuickLookPreviewPanel x self = msg_send ~self ~cmd:(selector "toggleQuickLookPreviewPanel:") ~typ:(id @-> returning (void)) x
let toggleRuler x self = msg_send ~self ~cmd:(selector "toggleRuler:") ~typ:(id @-> returning (void)) x
let toggleSmartInsertDelete x self = msg_send ~self ~cmd:(selector "toggleSmartInsertDelete:") ~typ:(id @-> returning (void)) x
let toggleTraditionalCharacterShape x self = msg_send ~self ~cmd:(selector "toggleTraditionalCharacterShape:") ~typ:(id @-> returning (void)) x
let toggleUsesAdaptiveColorMappingForDarkAppearance x self = msg_send ~self ~cmd:(selector "toggleUsesAdaptiveColorMappingForDarkAppearance:") ~typ:(id @-> returning (void)) x
let tokenizingCharacterSet self = msg_send ~self ~cmd:(selector "tokenizingCharacterSet") ~typ:(returning (id))
let touchBar x ~makeItemForIdentifier self = msg_send ~self ~cmd:(selector "touchBar:makeItemForIdentifier:") ~typ:(id @-> id @-> returning (id)) x makeItemForIdentifier
let touchBarItemController self = msg_send ~self ~cmd:(selector "touchBarItemController") ~typ:(returning (id))
let transliterateToLatin x self = msg_send ~self ~cmd:(selector "transliterateToLatin:") ~typ:(id @-> returning (void)) x
let transpose x self = msg_send ~self ~cmd:(selector "transpose:") ~typ:(id @-> returning (void)) x
let turnOffKerning x self = msg_send ~self ~cmd:(selector "turnOffKerning:") ~typ:(id @-> returning (void)) x
let turnOffLigatures x self = msg_send ~self ~cmd:(selector "turnOffLigatures:") ~typ:(id @-> returning (void)) x
let typingAttributes self = msg_send ~self ~cmd:(selector "typingAttributes") ~typ:(returning (id))
let underline x self = msg_send ~self ~cmd:(selector "underline:") ~typ:(id @-> returning (void)) x
let undoManager self = msg_send ~self ~cmd:(selector "undoManager") ~typ:(returning (id))
let unlockDocument self = msg_send ~self ~cmd:(selector "unlockDocument") ~typ:(returning (void))
let unmarkText self = msg_send ~self ~cmd:(selector "unmarkText") ~typ:(returning (void))
let unscript x self = msg_send ~self ~cmd:(selector "unscript:") ~typ:(id @-> returning (void)) x
let updateCandidates self = msg_send ~self ~cmd:(selector "updateCandidates") ~typ:(returning (void))
let updateConstraints self = msg_send ~self ~cmd:(selector "updateConstraints") ~typ:(returning (void))
let updateDragTypeRegistration self = msg_send ~self ~cmd:(selector "updateDragTypeRegistration") ~typ:(returning (void))
let updateDraggingItemsForDrag x self = msg_send ~self ~cmd:(selector "updateDraggingItemsForDrag:") ~typ:(id @-> returning (void)) x
let updateFontPanel self = msg_send ~self ~cmd:(selector "updateFontPanel") ~typ:(returning (void))
let updateInsertionPointStateAndRestartTimer x self = msg_send ~self ~cmd:(selector "updateInsertionPointStateAndRestartTimer:") ~typ:(bool @-> returning (void)) x
let updateInspectorBar self = msg_send ~self ~cmd:(selector "updateInspectorBar") ~typ:(returning (void))
let updateQuickLookPreviewPanel self = msg_send ~self ~cmd:(selector "updateQuickLookPreviewPanel") ~typ:(returning (void))
let updateRuler self = msg_send ~self ~cmd:(selector "updateRuler") ~typ:(returning (void))
let updateSpellingPanel self = msg_send ~self ~cmd:(selector "updateSpellingPanel") ~typ:(returning (void))
let updateTextTouchBarItems self = msg_send ~self ~cmd:(selector "updateTextTouchBarItems") ~typ:(returning (void))
let updateTouchBarItemIdentifiers self = msg_send ~self ~cmd:(selector "updateTouchBarItemIdentifiers") ~typ:(returning (void))
let updateTrackingAreas self = msg_send ~self ~cmd:(selector "updateTrackingAreas") ~typ:(returning (void))
let uppercaseWord x self = msg_send ~self ~cmd:(selector "uppercaseWord:") ~typ:(id @-> returning (void)) x
let useAllLigatures x self = msg_send ~self ~cmd:(selector "useAllLigatures:") ~typ:(id @-> returning (void)) x
let useStandardKerning x self = msg_send ~self ~cmd:(selector "useStandardKerning:") ~typ:(id @-> returning (void)) x
let useStandardLigatures x self = msg_send ~self ~cmd:(selector "useStandardLigatures:") ~typ:(id @-> returning (void)) x
let usesAdaptiveColorMappingForDarkAppearance self = msg_send ~self ~cmd:(selector "usesAdaptiveColorMappingForDarkAppearance") ~typ:(returning (bool))
let usesColorsWithInvertedLightness self = msg_send ~self ~cmd:(selector "usesColorsWithInvertedLightness") ~typ:(returning (bool))
let usesFindBar self = msg_send ~self ~cmd:(selector "usesFindBar") ~typ:(returning (bool))
let usesFindPanel self = msg_send ~self ~cmd:(selector "usesFindPanel") ~typ:(returning (bool))
let usesFontPanel self = msg_send ~self ~cmd:(selector "usesFontPanel") ~typ:(returning (bool))
let usesInspectorBar self = msg_send ~self ~cmd:(selector "usesInspectorBar") ~typ:(returning (bool))
let usesRolloverButtonForSelection self = msg_send ~self ~cmd:(selector "usesRolloverButtonForSelection") ~typ:(returning (bool))
let usesRuler self = msg_send ~self ~cmd:(selector "usesRuler") ~typ:(returning (bool))
let validAttributesForMarkedText self = msg_send ~self ~cmd:(selector "validAttributesForMarkedText") ~typ:(returning (id))
let validRequestorForSendType x ~returnType self = msg_send ~self ~cmd:(selector "validRequestorForSendType:returnType:") ~typ:(id @-> id @-> returning (id)) x returnType
let validateMenuItem x self = msg_send ~self ~cmd:(selector "validateMenuItem:") ~typ:(id @-> returning (bool)) x
let validateUserInterfaceItem x self = msg_send ~self ~cmd:(selector "validateUserInterfaceItem:") ~typ:(id @-> returning (bool)) x
let viewDidChangeEffectiveAppearance self = msg_send ~self ~cmd:(selector "viewDidChangeEffectiveAppearance") ~typ:(returning (void))
let viewDidEndLiveResize self = msg_send ~self ~cmd:(selector "viewDidEndLiveResize") ~typ:(returning (void))
let viewDidMoveToSuperview self = msg_send ~self ~cmd:(selector "viewDidMoveToSuperview") ~typ:(returning (void))
let viewDidMoveToWindow self = msg_send ~self ~cmd:(selector "viewDidMoveToWindow") ~typ:(returning (void))
let viewForRange x ~firstRect ~actualRange self = msg_send ~self ~cmd:(selector "viewForRange:firstRect:actualRange:") ~typ:(NSRange.t @-> ptr (CGRect.t) @-> ptr (NSRange.t) @-> returning (id)) x firstRect actualRange
let viewWillMoveToSuperview x self = msg_send ~self ~cmd:(selector "viewWillMoveToSuperview:") ~typ:(id @-> returning (void)) x
let viewWillMoveToWindow x self = msg_send ~self ~cmd:(selector "viewWillMoveToWindow:") ~typ:(id @-> returning (void)) x
let viewWillStartLiveResize self = msg_send ~self ~cmd:(selector "viewWillStartLiveResize") ~typ:(returning (void))
let viewportAnchor self = msg_send ~self ~cmd:(selector "viewportAnchor") ~typ:(returning (CGPoint.t))
let viewportBounds self = msg_send ~self ~cmd:(selector "viewportBounds") ~typ:(returning (CGRect.t))
let viewportBoundsForTextViewportLayoutController x self = msg_send ~self ~cmd:(selector "viewportBoundsForTextViewportLayoutController:") ~typ:(id @-> returning (CGRect.t)) x
let visibleCharacterRanges self = msg_send ~self ~cmd:(selector "visibleCharacterRanges") ~typ:(returning (id))
let wantsLayer self = msg_send ~self ~cmd:(selector "wantsLayer") ~typ:(returning (bool))
let wantsNotificationForMarkedText self = msg_send ~self ~cmd:(selector "wantsNotificationForMarkedText") ~typ:(returning (bool))
let willOpenMenu x ~withEvent self = msg_send ~self ~cmd:(selector "willOpenMenu:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let windowLevel self = msg_send ~self ~cmd:(selector "windowLevel") ~typ:(returning (llong))
let writablePasteboardTypes self = msg_send ~self ~cmd:(selector "writablePasteboardTypes") ~typ:(returning (id))
let writeRTFDToFile x ~atomically self = msg_send ~self ~cmd:(selector "writeRTFDToFile:atomically:") ~typ:(id @-> bool @-> returning (bool)) x atomically
let writeSelectionToPasteboard x ~type_ self = msg_send ~self ~cmd:(selector "writeSelectionToPasteboard:type:") ~typ:(id @-> id @-> returning (bool)) x type_
let writeSelectionToPasteboard' x ~types self = msg_send ~self ~cmd:(selector "writeSelectionToPasteboard:types:") ~typ:(id @-> id @-> returning (bool)) x types
let yank x self = msg_send ~self ~cmd:(selector "yank:") ~typ:(id @-> returning (void)) x
let yankAndSelect x self = msg_send ~self ~cmd:(selector "yankAndSelect:") ~typ:(id @-> returning (void)) x