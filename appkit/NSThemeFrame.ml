(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "NSThemeFrame"

module Class = struct
  let automaticallyNotifiesObserversOfTitlebarBlendingMode self = msg_send ~self ~cmd:(selector "automaticallyNotifiesObserversOfTitlebarBlendingMode") ~typ:(returning (bool))
  let containingThemeFrameFromView x self = msg_send ~self ~cmd:(selector "containingThemeFrameFromView:") ~typ:(id @-> returning (id)) x
  let minFrameWidthWithTitle x ~styleMask self = msg_send ~self ~cmd:(selector "minFrameWidthWithTitle:styleMask:") ~typ:(id @-> ullong @-> returning (double)) x styleMask
  let sizeOfTitlebarButtons x self = msg_send ~self ~cmd:(selector "sizeOfTitlebarButtons:") ~typ:(ullong @-> returning (CGSize.t)) x
end

let activationRect self = msg_send ~self ~cmd:(selector "activationRect") ~typ:(returning (CGRect.t))
let addFileButton x self = msg_send ~self ~cmd:(selector "addFileButton:") ~typ:(id @-> returning (void)) x
let addSubview x self = msg_send ~self ~cmd:(selector "addSubview:") ~typ:(id @-> returning (void)) x
let addSubview' x ~positioned ~relativeTo self = msg_send ~self ~cmd:(selector "addSubview:positioned:relativeTo:") ~typ:(id @-> llong @-> id @-> returning (void)) x positioned relativeTo
let addTitlebarSubview x self = msg_send ~self ~cmd:(selector "addTitlebarSubview:") ~typ:(id @-> returning (void)) x
let addUnderTitlebarView x ~withAssociatedWithView self = msg_send ~self ~cmd:(selector "addUnderTitlebarView:withAssociatedWithView:") ~typ:(id @-> id @-> returning (void)) x withAssociatedWithView
let allowTitleDrawing self = msg_send ~self ~cmd:(selector "allowTitleDrawing") ~typ:(returning (void))
let animationDidEnd x self = msg_send ~self ~cmd:(selector "animationDidEnd:") ~typ:(id @-> returning (void)) x
let animationDidStop x self = msg_send ~self ~cmd:(selector "animationDidStop:") ~typ:(id @-> returning (void)) x
let autosaveButton self = msg_send ~self ~cmd:(selector "autosaveButton") ~typ:(returning (id))
let backgroundColorChanged x self = msg_send ~self ~cmd:(selector "backgroundColorChanged:") ~typ:(id @-> returning (void)) x
let bottomCornerRounded self = msg_send ~self ~cmd:(selector "bottomCornerRounded") ~typ:(returning (bool))
let buttonRevealAmount self = msg_send ~self ~cmd:(selector "buttonRevealAmount") ~typ:(returning (double))
let canAddUnderTitlebarViews self = msg_send ~self ~cmd:(selector "canAddUnderTitlebarViews") ~typ:(returning (bool))
let closeButtonDidChangeGeometry self = msg_send ~self ~cmd:(selector "closeButtonDidChangeGeometry") ~typ:(returning (void))
let contentAlpha self = msg_send ~self ~cmd:(selector "contentAlpha") ~typ:(returning (double))
let contentBorderThicknessForEdge x self = msg_send ~self ~cmd:(selector "contentBorderThicknessForEdge:") ~typ:(ullong @-> returning (double)) x
let contentFill self = msg_send ~self ~cmd:(selector "contentFill") ~typ:(returning (id))
let contentLayoutGuide self = msg_send ~self ~cmd:(selector "contentLayoutGuide") ~typ:(returning (id))
let contentRect self = msg_send ~self ~cmd:(selector "contentRect") ~typ:(returning (CGRect.t))
let contentRectForFrameRect x ~styleMask self = msg_send ~self ~cmd:(selector "contentRectForFrameRect:styleMask:") ~typ:(CGRect.t @-> ullong @-> returning (CGRect.t)) x styleMask
let cursorUpdate x self = msg_send ~self ~cmd:(selector "cursorUpdate:") ~typ:(id @-> returning (void)) x
let customTitlebarHeight self = msg_send ~self ~cmd:(selector "customTitlebarHeight") ~typ:(returning (double))
let customTitlebarHeightPriorToFSMode self = msg_send ~self ~cmd:(selector "customTitlebarHeightPriorToFSMode") ~typ:(returning (double))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let drawFrame x self = msg_send ~self ~cmd:(selector "drawFrame:") ~typ:(CGRect.t @-> returning (void)) x
let drawOverlayRect x self = msg_send ~self ~cmd:(selector "drawOverlayRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawWindowBackgroundRect x self = msg_send ~self ~cmd:(selector "drawWindowBackgroundRect:") ~typ:(CGRect.t @-> returning (void)) x
let frameRectForContentRect x ~styleMask self = msg_send ~self ~cmd:(selector "frameRectForContentRect:styleMask:") ~typ:(CGRect.t @-> ullong @-> returning (CGRect.t)) x styleMask
let fullScreenButton self = msg_send ~self ~cmd:(selector "fullScreenButton") ~typ:(returning (id))
let fullScreenTitlebarMaxHeight self = msg_send ~self ~cmd:(selector "fullScreenTitlebarMaxHeight") ~typ:(returning (double))
let fullScreenTitlebarMinHeight self = msg_send ~self ~cmd:(selector "fullScreenTitlebarMinHeight") ~typ:(returning (double))
let handleMouseDown x self = msg_send ~self ~cmd:(selector "handleMouseDown:") ~typ:(id @-> returning (bool)) x
let handleRightMouseDown x self = msg_send ~self ~cmd:(selector "handleRightMouseDown:") ~typ:(id @-> returning (bool)) x
let handleSetFrameCommonRedisplay self = msg_send ~self ~cmd:(selector "handleSetFrameCommonRedisplay") ~typ:(returning (void))
let hitTest x self = msg_send ~self ~cmd:(selector "hitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let initWithFrame x ~styleMask ~owner self = msg_send ~self ~cmd:(selector "initWithFrame:styleMask:owner:") ~typ:(CGRect.t @-> ullong @-> id @-> returning (id)) x styleMask owner
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning (bool))
let layer x ~shouldInheritContentsScale ~fromWindow self = msg_send ~self ~cmd:(selector "layer:shouldInheritContentsScale:fromWindow:") ~typ:(id @-> double @-> id @-> returning (bool)) x shouldInheritContentsScale fromWindow
let layout self = msg_send ~self ~cmd:(selector "layout") ~typ:(returning (void))
let leftButtonGroupFrameInTitlebarView self = msg_send ~self ~cmd:(selector "leftButtonGroupFrameInTitlebarView") ~typ:(returning (CGRect.t))
let lockButton self = msg_send ~self ~cmd:(selector "lockButton") ~typ:(returning (id))
let makeRenameField self = msg_send ~self ~cmd:(selector "makeRenameField") ~typ:(returning (id))
let menu self = msg_send ~self ~cmd:(selector "menu") ~typ:(returning (id))
let menuForEvent x self = msg_send ~self ~cmd:(selector "menuForEvent:") ~typ:(id @-> returning (id)) x
let minFrameSize self = msg_send ~self ~cmd:(selector "minFrameSize") ~typ:(returning (CGSize.t))
let minFrameSizeForMinContentSize x ~styleMask self = msg_send ~self ~cmd:(selector "minFrameSizeForMinContentSize:styleMask:") ~typ:(CGSize.t @-> ullong @-> returning (CGSize.t)) x styleMask
let miniaturizedSize self = msg_send ~self ~cmd:(selector "miniaturizedSize") ~typ:(returning (CGSize.t))
let mouseDown x self = msg_send ~self ~cmd:(selector "mouseDown:") ~typ:(id @-> returning (void)) x
let mouseEntered x self = msg_send ~self ~cmd:(selector "mouseEntered:") ~typ:(id @-> returning (void)) x
let mouseEnteredLeftButtonGroup self = msg_send ~self ~cmd:(selector "mouseEnteredLeftButtonGroup") ~typ:(returning (void))
let mouseExited x self = msg_send ~self ~cmd:(selector "mouseExited:") ~typ:(id @-> returning (void)) x
let mouseExitedLeftButtonGroup self = msg_send ~self ~cmd:(selector "mouseExitedLeftButtonGroup") ~typ:(returning (void))
let mouseUp x self = msg_send ~self ~cmd:(selector "mouseUp:") ~typ:(id @-> returning (void)) x
let newAutosaveButton self = msg_send ~self ~cmd:(selector "newAutosaveButton") ~typ:(returning (id))
let newCloseButton self = msg_send ~self ~cmd:(selector "newCloseButton") ~typ:(returning (id))
let newFileButton self = msg_send ~self ~cmd:(selector "newFileButton") ~typ:(returning (id))
let newFullScreenButton self = msg_send ~self ~cmd:(selector "newFullScreenButton") ~typ:(returning (id))
let newLockButton self = msg_send ~self ~cmd:(selector "newLockButton") ~typ:(returning (id))
let newMiniaturizeButton self = msg_send ~self ~cmd:(selector "newMiniaturizeButton") ~typ:(returning (id))
let newSharingIndicator self = msg_send ~self ~cmd:(selector "newSharingIndicator") ~typ:(returning (id))
let newToolbarButton self = msg_send ~self ~cmd:(selector "newToolbarButton") ~typ:(returning (id))
let newZoomButton self = msg_send ~self ~cmd:(selector "newZoomButton") ~typ:(returning (id))
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let opaqueAncestor self = msg_send ~self ~cmd:(selector "opaqueAncestor") ~typ:(returning (id))
let overlayBounds self = msg_send ~self ~cmd:(selector "overlayBounds") ~typ:(returning (CGRect.t))
let prefersFullWidthTitlebarWhenAccessoriesVisible self = msg_send ~self ~cmd:(selector "prefersFullWidthTitlebarWhenAccessoriesVisible") ~typ:(returning (bool))
let preservesContentDuringLiveResize self = msg_send ~self ~cmd:(selector "preservesContentDuringLiveResize") ~typ:(returning (bool))
let relayoutAuxiliaryViewsOfType x self = msg_send ~self ~cmd:(selector "relayoutAuxiliaryViewsOfType:") ~typ:(ullong @-> returning (void)) x
let removeFromSuperview self = msg_send ~self ~cmd:(selector "removeFromSuperview") ~typ:(returning (void))
let removeUnderTitlebarView x ~withAssociatedWithView self = msg_send ~self ~cmd:(selector "removeUnderTitlebarView:withAssociatedWithView:") ~typ:(id @-> id @-> returning (void)) x withAssociatedWithView
let renameField self = msg_send ~self ~cmd:(selector "renameField") ~typ:(returning (id))
let rightMouseDown x self = msg_send ~self ~cmd:(selector "rightMouseDown:") ~typ:(id @-> returning (void)) x
let roundedCornerRadius self = msg_send ~self ~cmd:(selector "roundedCornerRadius") ~typ:(returning (float))
let setBottomCornerRounded x self = msg_send ~self ~cmd:(selector "setBottomCornerRounded:") ~typ:(bool @-> returning (void)) x
let setBoundsSize x self = msg_send ~self ~cmd:(selector "setBoundsSize:") ~typ:(CGSize.t @-> returning (void)) x
let setButtonRevealAmount x self = msg_send ~self ~cmd:(selector "setButtonRevealAmount:") ~typ:(double @-> returning (void)) x
let setContentBorderThickness x ~forEdge self = msg_send ~self ~cmd:(selector "setContentBorderThickness:forEdge:") ~typ:(double @-> ullong @-> returning (void)) x forEdge
let setCustomTitlebarHeight x self = msg_send ~self ~cmd:(selector "setCustomTitlebarHeight:") ~typ:(double @-> returning (void)) x
let setCustomTitlebarHeightPriorToFSMode x self = msg_send ~self ~cmd:(selector "setCustomTitlebarHeightPriorToFSMode:") ~typ:(double @-> returning (void)) x
let setDocumentEdited x self = msg_send ~self ~cmd:(selector "setDocumentEdited:") ~typ:(bool @-> returning (void)) x
let setFrameSize x self = msg_send ~self ~cmd:(selector "setFrameSize:") ~typ:(CGSize.t @-> returning (void)) x
let setNeedsDisplay x self = msg_send ~self ~cmd:(selector "setNeedsDisplay:") ~typ:(bool @-> returning (void)) x
let setPrefersFullWidthTitlebarWhenAccessoriesVisible x self = msg_send ~self ~cmd:(selector "setPrefersFullWidthTitlebarWhenAccessoriesVisible:") ~typ:(bool @-> returning (void)) x
let setRepresentedFilename x self = msg_send ~self ~cmd:(selector "setRepresentedFilename:") ~typ:(id @-> returning (void)) x
let setRepresentedURL x self = msg_send ~self ~cmd:(selector "setRepresentedURL:") ~typ:(id @-> returning (void)) x
let setSidebarTrackingAdapter x self = msg_send ~self ~cmd:(selector "setSidebarTrackingAdapter:") ~typ:(id @-> returning (void)) x
let setStoplightOffset x self = msg_send ~self ~cmd:(selector "setStoplightOffset:") ~typ:(CGSize.t @-> returning (void)) x
let setStyleMask x self = msg_send ~self ~cmd:(selector "setStyleMask:") ~typ:(ullong @-> returning (void)) x
let setTemporaryContentView x self = msg_send ~self ~cmd:(selector "setTemporaryContentView:") ~typ:(id @-> returning (void)) x
let setThemeFrameWidgetState x self = msg_send ~self ~cmd:(selector "setThemeFrameWidgetState:") ~typ:(int @-> returning (void)) x
let setTitle x self = msg_send ~self ~cmd:(selector "setTitle:") ~typ:(id @-> returning (void)) x
let setTitlebarAlphaValue x self = msg_send ~self ~cmd:(selector "setTitlebarAlphaValue:") ~typ:(double @-> returning (void)) x
let setTitlebarContainerView x self = msg_send ~self ~cmd:(selector "setTitlebarContainerView:") ~typ:(id @-> returning (void)) x
let setTitlebarView x self = msg_send ~self ~cmd:(selector "setTitlebarView:") ~typ:(id @-> returning (void)) x
let setTrailingSidebarTrackingAdapter x self = msg_send ~self ~cmd:(selector "setTrailingSidebarTrackingAdapter:") ~typ:(id @-> returning (void)) x
let shapeWindow self = msg_send ~self ~cmd:(selector "shapeWindow") ~typ:(returning (void))
let sharingIndicator self = msg_send ~self ~cmd:(selector "sharingIndicator") ~typ:(returning (id))
let shouldAttemptResize self = msg_send ~self ~cmd:(selector "shouldAttemptResize") ~typ:(returning (bool))
let shouldBeTreatedAsInkEvent x self = msg_send ~self ~cmd:(selector "shouldBeTreatedAsInkEvent:") ~typ:(id @-> returning (bool)) x
let shouldStartWindowDragForEvent x self = msg_send ~self ~cmd:(selector "shouldStartWindowDragForEvent:") ~typ:(id @-> returning (bool)) x
let sidebarTrackingAdapter self = msg_send ~self ~cmd:(selector "sidebarTrackingAdapter") ~typ:(returning (id))
let sizeOfTitlebarToolbarButton self = msg_send ~self ~cmd:(selector "sizeOfTitlebarToolbarButton") ~typ:(returning (CGSize.t))
let startingYLocationForSheets self = msg_send ~self ~cmd:(selector "startingYLocationForSheets") ~typ:(returning (double))
let stoplightOffset self = msg_send ~self ~cmd:(selector "stoplightOffset") ~typ:(returning (CGSize.t))
let temporaryContentView self = msg_send ~self ~cmd:(selector "temporaryContentView") ~typ:(returning (id))
let titleBarViewsForMouseHitTest self = msg_send ~self ~cmd:(selector "titleBarViewsForMouseHitTest") ~typ:(returning (id))
let titleHeightToHideInFullScreen self = msg_send ~self ~cmd:(selector "titleHeightToHideInFullScreen") ~typ:(returning (double))
let titlebarAccessoryViewControllers self = msg_send ~self ~cmd:(selector "titlebarAccessoryViewControllers") ~typ:(returning (id))
let titlebarAlphaValue self = msg_send ~self ~cmd:(selector "titlebarAlphaValue") ~typ:(returning (double))
let titlebarAppearsTransparentChanged self = msg_send ~self ~cmd:(selector "titlebarAppearsTransparentChanged") ~typ:(returning (void))
let titlebarBlendingMode self = msg_send ~self ~cmd:(selector "titlebarBlendingMode") ~typ:(returning (llong))
let titlebarContainerView self = msg_send ~self ~cmd:(selector "titlebarContainerView") ~typ:(returning (id))
let titlebarRect self = msg_send ~self ~cmd:(selector "titlebarRect") ~typ:(returning (CGRect.t))
let titlebarRectIncludingToolbar self = msg_send ~self ~cmd:(selector "titlebarRectIncludingToolbar") ~typ:(returning (CGRect.t))
let titlebarView self = msg_send ~self ~cmd:(selector "titlebarView") ~typ:(returning (id))
let titlebarViewController self = msg_send ~self ~cmd:(selector "titlebarViewController") ~typ:(returning (id))
let toolbarButton self = msg_send ~self ~cmd:(selector "toolbarButton") ~typ:(returning (id))
let topCornerRounded self = msg_send ~self ~cmd:(selector "topCornerRounded") ~typ:(returning (bool))
let trailingSidebarTrackingAdapter self = msg_send ~self ~cmd:(selector "trailingSidebarTrackingAdapter") ~typ:(returning (id))
let updateLayer self = msg_send ~self ~cmd:(selector "updateLayer") ~typ:(returning (void))
let updateTitleTextField self = msg_send ~self ~cmd:(selector "updateTitleTextField") ~typ:(returning (void))
let updateTitlebarViewBlendingMode self = msg_send ~self ~cmd:(selector "updateTitlebarViewBlendingMode") ~typ:(returning (void))
let viewDidChangeEffectiveAppearance self = msg_send ~self ~cmd:(selector "viewDidChangeEffectiveAppearance") ~typ:(returning (void))
let viewDidEndLiveResize self = msg_send ~self ~cmd:(selector "viewDidEndLiveResize") ~typ:(returning (void))
let viewDidMoveToWindow self = msg_send ~self ~cmd:(selector "viewDidMoveToWindow") ~typ:(returning (void))
let viewWillMoveToWindow x self = msg_send ~self ~cmd:(selector "viewWillMoveToWindow:") ~typ:(id @-> returning (void)) x
let wantsUpdateLayer self = msg_send ~self ~cmd:(selector "wantsUpdateLayer") ~typ:(returning (bool))
let windowCornerMaskChanged self = msg_send ~self ~cmd:(selector "windowCornerMaskChanged") ~typ:(returning (void))
let windowTitleModeChanged self = msg_send ~self ~cmd:(selector "windowTitleModeChanged") ~typ:(returning (void))
let windowTitlePositionChanged self = msg_send ~self ~cmd:(selector "windowTitlePositionChanged") ~typ:(returning (void))
let windowToolbarStyleChanged self = msg_send ~self ~cmd:(selector "windowToolbarStyleChanged") ~typ:(returning (void))