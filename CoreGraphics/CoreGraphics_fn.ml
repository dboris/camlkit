(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open CoreFoundation

open CoreGraphics_globals

let _CGAcquireDisplayFadeReservation = Foreign.foreign "CGAcquireDisplayFadeReservation" (float @-> (ptr uint) @-> returning int)
let _CGAffineTransformConcat = Foreign.foreign "CGAffineTransformConcat" (CGAffineTransform.t @-> CGAffineTransform.t @-> returning CGAffineTransform.t)
let _CGAffineTransformEqualToTransform = Foreign.foreign "CGAffineTransformEqualToTransform" (CGAffineTransform.t @-> CGAffineTransform.t @-> returning bool)
let _CGAffineTransformInvert = Foreign.foreign "CGAffineTransformInvert" (CGAffineTransform.t @-> returning CGAffineTransform.t)
let _CGAffineTransformIsIdentity = Foreign.foreign "CGAffineTransformIsIdentity" (CGAffineTransform.t @-> returning bool)
let _CGAffineTransformMake = Foreign.foreign "CGAffineTransformMake" (double @-> double @-> double @-> double @-> double @-> double @-> returning CGAffineTransform.t)
let _CGAffineTransformMakeRotation = Foreign.foreign "CGAffineTransformMakeRotation" (double @-> returning CGAffineTransform.t)
let _CGAffineTransformMakeScale = Foreign.foreign "CGAffineTransformMakeScale" (double @-> double @-> returning CGAffineTransform.t)
let _CGAffineTransformMakeTranslation = Foreign.foreign "CGAffineTransformMakeTranslation" (double @-> double @-> returning CGAffineTransform.t)
let _CGAffineTransformRotate = Foreign.foreign "CGAffineTransformRotate" (CGAffineTransform.t @-> double @-> returning CGAffineTransform.t)
let _CGAffineTransformScale = Foreign.foreign "CGAffineTransformScale" (CGAffineTransform.t @-> double @-> double @-> returning CGAffineTransform.t)
let _CGAffineTransformTranslate = Foreign.foreign "CGAffineTransformTranslate" (CGAffineTransform.t @-> double @-> double @-> returning CGAffineTransform.t)
let _CGAssociateMouseAndMouseCursorPosition = Foreign.foreign "CGAssociateMouseAndMouseCursorPosition" (uint @-> returning int)
let _CGBeginDisplayConfiguration = Foreign.foreign "CGBeginDisplayConfiguration" ((ptr (ptr CGDisplayConfigRef.t)) @-> returning int)
let _CGBitmapContextCreate = Foreign.foreign "CGBitmapContextCreate" ((ptr void) @-> ullong @-> ullong @-> ullong @-> ullong @-> (ptr CGColorSpace.t) @-> uint @-> returning (ptr CGContext.t))
let _CGBitmapContextCreateImage = Foreign.foreign "CGBitmapContextCreateImage" ((ptr CGContext.t) @-> returning (ptr CGImage.t))
let _CGBitmapContextCreateWithData = Foreign.foreign "CGBitmapContextCreateWithData" ((ptr void) @-> ullong @-> ullong @-> ullong @-> ullong @-> (ptr CGColorSpace.t) @-> uint @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning (ptr CGContext.t))
let _CGBitmapContextGetAlphaInfo = Foreign.foreign "CGBitmapContextGetAlphaInfo" ((ptr CGContext.t) @-> returning uint)
let _CGBitmapContextGetBitmapInfo = Foreign.foreign "CGBitmapContextGetBitmapInfo" ((ptr CGContext.t) @-> returning uint)
let _CGBitmapContextGetBitsPerComponent = Foreign.foreign "CGBitmapContextGetBitsPerComponent" ((ptr CGContext.t) @-> returning ullong)
let _CGBitmapContextGetBitsPerPixel = Foreign.foreign "CGBitmapContextGetBitsPerPixel" ((ptr CGContext.t) @-> returning ullong)
let _CGBitmapContextGetBytesPerRow = Foreign.foreign "CGBitmapContextGetBytesPerRow" ((ptr CGContext.t) @-> returning ullong)
let _CGBitmapContextGetColorSpace = Foreign.foreign "CGBitmapContextGetColorSpace" ((ptr CGContext.t) @-> returning (ptr CGColorSpace.t))
let _CGBitmapContextGetData = Foreign.foreign "CGBitmapContextGetData" ((ptr CGContext.t) @-> returning (ptr void))
let _CGBitmapContextGetHeight = Foreign.foreign "CGBitmapContextGetHeight" ((ptr CGContext.t) @-> returning ullong)
let _CGBitmapContextGetWidth = Foreign.foreign "CGBitmapContextGetWidth" ((ptr CGContext.t) @-> returning ullong)
let _CGCancelDisplayConfiguration = Foreign.foreign "CGCancelDisplayConfiguration" ((ptr CGDisplayConfigRef.t) @-> returning int)
let _CGCaptureAllDisplays = Foreign.foreign "CGCaptureAllDisplays" (void @-> returning int)
let _CGCaptureAllDisplaysWithOptions = Foreign.foreign "CGCaptureAllDisplaysWithOptions" (uint @-> returning int)
let _CGColorConversionInfoCreate = Foreign.foreign "CGColorConversionInfoCreate" ((ptr CGColorSpace.t) @-> (ptr CGColorSpace.t) @-> returning (ptr CGColorConversionInfo.t))
let _CGColorConversionInfoCreateFromList = Foreign.foreign "CGColorConversionInfoCreateFromList" ((ptr CFDictionary.t) @-> (ptr CGColorSpace.t) @-> uint @-> int @-> returning (ptr CGColorConversionInfo.t))
let _CGColorConversionInfoCreateFromListWithArguments = Foreign.foreign "CGColorConversionInfoCreateFromListWithArguments" ((ptr CFDictionary.t) @-> (ptr CGColorSpace.t) @-> uint @-> int @-> (ptr void) @-> returning (ptr CGColorConversionInfo.t))
let _CGColorConversionInfoCreateWithOptions = Foreign.foreign "CGColorConversionInfoCreateWithOptions" ((ptr CGColorSpace.t) @-> (ptr CGColorSpace.t) @-> (ptr CFDictionary.t) @-> returning (ptr CGColorConversionInfo.t))
let _CGColorConversionInfoGetTypeID = Foreign.foreign "CGColorConversionInfoGetTypeID" (void @-> returning ullong)
let _CGColorCreate = Foreign.foreign "CGColorCreate" ((ptr CGColorSpace.t) @-> (ptr double) @-> returning (ptr CGColor.t))
let _CGColorCreateCopy = Foreign.foreign "CGColorCreateCopy" ((ptr CGColor.t) @-> returning (ptr CGColor.t))
let _CGColorCreateCopyByMatchingToColorSpace = Foreign.foreign "CGColorCreateCopyByMatchingToColorSpace" ((ptr CGColorSpace.t) @-> int @-> (ptr CGColor.t) @-> (ptr CFDictionary.t) @-> returning (ptr CGColor.t))
let _CGColorCreateCopyWithAlpha = Foreign.foreign "CGColorCreateCopyWithAlpha" ((ptr CGColor.t) @-> double @-> returning (ptr CGColor.t))
let _CGColorCreateGenericCMYK = Foreign.foreign "CGColorCreateGenericCMYK" (double @-> double @-> double @-> double @-> double @-> returning (ptr CGColor.t))
let _CGColorCreateGenericGray = Foreign.foreign "CGColorCreateGenericGray" (double @-> double @-> returning (ptr CGColor.t))
let _CGColorCreateGenericGrayGamma2_2 = Foreign.foreign "CGColorCreateGenericGrayGamma2_2" (double @-> double @-> returning (ptr CGColor.t))
let _CGColorCreateGenericRGB = Foreign.foreign "CGColorCreateGenericRGB" (double @-> double @-> double @-> double @-> returning (ptr CGColor.t))
let _CGColorCreateSRGB = Foreign.foreign "CGColorCreateSRGB" (double @-> double @-> double @-> double @-> returning (ptr CGColor.t))
let _CGColorCreateWithPattern = Foreign.foreign "CGColorCreateWithPattern" ((ptr CGColorSpace.t) @-> (ptr CGPattern.t) @-> (ptr double) @-> returning (ptr CGColor.t))
let _CGColorEqualToColor = Foreign.foreign "CGColorEqualToColor" ((ptr CGColor.t) @-> (ptr CGColor.t) @-> returning bool)
let _CGColorGetAlpha = Foreign.foreign "CGColorGetAlpha" ((ptr CGColor.t) @-> returning double)
let _CGColorGetColorSpace = Foreign.foreign "CGColorGetColorSpace" ((ptr CGColor.t) @-> returning (ptr CGColorSpace.t))
let _CGColorGetComponents = Foreign.foreign "CGColorGetComponents" ((ptr CGColor.t) @-> returning (ptr double))
let _CGColorGetConstantColor = Foreign.foreign "CGColorGetConstantColor" ((ptr CFString.t) @-> returning (ptr CGColor.t))
let _CGColorGetNumberOfComponents = Foreign.foreign "CGColorGetNumberOfComponents" ((ptr CGColor.t) @-> returning ullong)
let _CGColorGetPattern = Foreign.foreign "CGColorGetPattern" ((ptr CGColor.t) @-> returning (ptr CGPattern.t))
let _CGColorGetTypeID = Foreign.foreign "CGColorGetTypeID" (void @-> returning ullong)
let _CGColorRelease = Foreign.foreign "CGColorRelease" ((ptr CGColor.t) @-> returning void)
let _CGColorRetain = Foreign.foreign "CGColorRetain" ((ptr CGColor.t) @-> returning (ptr CGColor.t))
let _CGColorSpaceCopyICCData = Foreign.foreign "CGColorSpaceCopyICCData" ((ptr CGColorSpace.t) @-> returning (ptr CFData.t))
let _CGColorSpaceCopyICCProfile = Foreign.foreign "CGColorSpaceCopyICCProfile" ((ptr CGColorSpace.t) @-> returning (ptr CFData.t))
let _CGColorSpaceCopyName = Foreign.foreign "CGColorSpaceCopyName" ((ptr CGColorSpace.t) @-> returning (ptr CFString.t))
let _CGColorSpaceCopyPropertyList = Foreign.foreign "CGColorSpaceCopyPropertyList" ((ptr CGColorSpace.t) @-> returning (ptr void))
let _CGColorSpaceCreateCalibratedGray = Foreign.foreign "CGColorSpaceCreateCalibratedGray" ((ptr double) @-> (ptr double) @-> double @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateCalibratedRGB = Foreign.foreign "CGColorSpaceCreateCalibratedRGB" ((ptr double) @-> (ptr double) @-> (ptr double) @-> (ptr double) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateDeviceCMYK = Foreign.foreign "CGColorSpaceCreateDeviceCMYK" (void @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateDeviceGray = Foreign.foreign "CGColorSpaceCreateDeviceGray" (void @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateDeviceRGB = Foreign.foreign "CGColorSpaceCreateDeviceRGB" (void @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateExtended = Foreign.foreign "CGColorSpaceCreateExtended" ((ptr CGColorSpace.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateExtendedLinearized = Foreign.foreign "CGColorSpaceCreateExtendedLinearized" ((ptr CGColorSpace.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateICCBased = Foreign.foreign "CGColorSpaceCreateICCBased" (ullong @-> (ptr double) @-> (ptr CGDataProvider.t) @-> (ptr CGColorSpace.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateIndexed = Foreign.foreign "CGColorSpaceCreateIndexed" ((ptr CGColorSpace.t) @-> ullong @-> string @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateLab = Foreign.foreign "CGColorSpaceCreateLab" ((ptr double) @-> (ptr double) @-> (ptr double) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateLinearized = Foreign.foreign "CGColorSpaceCreateLinearized" ((ptr CGColorSpace.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreatePattern = Foreign.foreign "CGColorSpaceCreatePattern" ((ptr CGColorSpace.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateWithColorSyncProfile = Foreign.foreign "CGColorSpaceCreateWithColorSyncProfile" ((ptr ColorSyncProfile.t) @-> (ptr CFDictionary.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateWithICCData = Foreign.foreign "CGColorSpaceCreateWithICCData" (id @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateWithICCProfile = Foreign.foreign "CGColorSpaceCreateWithICCProfile" ((ptr CFData.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateWithName = Foreign.foreign "CGColorSpaceCreateWithName" ((ptr CFString.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateWithPlatformColorSpace = Foreign.foreign "CGColorSpaceCreateWithPlatformColorSpace" (int @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceCreateWithPropertyList = Foreign.foreign "CGColorSpaceCreateWithPropertyList" ((ptr void) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceGetBaseColorSpace = Foreign.foreign "CGColorSpaceGetBaseColorSpace" ((ptr CGColorSpace.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceGetColorTable = Foreign.foreign "CGColorSpaceGetColorTable" ((ptr CGColorSpace.t) @-> string @-> returning void)
let _CGColorSpaceGetColorTableCount = Foreign.foreign "CGColorSpaceGetColorTableCount" ((ptr CGColorSpace.t) @-> returning ullong)
let _CGColorSpaceGetModel = Foreign.foreign "CGColorSpaceGetModel" ((ptr CGColorSpace.t) @-> returning int)
let _CGColorSpaceGetName = Foreign.foreign "CGColorSpaceGetName" ((ptr CGColorSpace.t) @-> returning (ptr CFString.t))
let _CGColorSpaceGetNumberOfComponents = Foreign.foreign "CGColorSpaceGetNumberOfComponents" ((ptr CGColorSpace.t) @-> returning ullong)
let _CGColorSpaceGetTypeID = Foreign.foreign "CGColorSpaceGetTypeID" (void @-> returning ullong)
let _CGColorSpaceIsHDR = Foreign.foreign "CGColorSpaceIsHDR" ((ptr CGColorSpace.t) @-> returning bool)
let _CGColorSpaceIsHLGBased = Foreign.foreign "CGColorSpaceIsHLGBased" ((ptr CGColorSpace.t) @-> returning bool)
let _CGColorSpaceIsPQBased = Foreign.foreign "CGColorSpaceIsPQBased" ((ptr CGColorSpace.t) @-> returning bool)
let _CGColorSpaceIsWideGamutRGB = Foreign.foreign "CGColorSpaceIsWideGamutRGB" ((ptr CGColorSpace.t) @-> returning bool)
let _CGColorSpaceRelease = Foreign.foreign "CGColorSpaceRelease" ((ptr CGColorSpace.t) @-> returning void)
let _CGColorSpaceRetain = Foreign.foreign "CGColorSpaceRetain" ((ptr CGColorSpace.t) @-> returning (ptr CGColorSpace.t))
let _CGColorSpaceSupportsOutput = Foreign.foreign "CGColorSpaceSupportsOutput" ((ptr CGColorSpace.t) @-> returning bool)
let _CGColorSpaceUsesExtendedRange = Foreign.foreign "CGColorSpaceUsesExtendedRange" ((ptr CGColorSpace.t) @-> returning bool)
let _CGColorSpaceUsesITUR_2100TF = Foreign.foreign "CGColorSpaceUsesITUR_2100TF" ((ptr CGColorSpace.t) @-> returning bool)
let _CGCompleteDisplayConfiguration = Foreign.foreign "CGCompleteDisplayConfiguration" ((ptr CGDisplayConfigRef.t) @-> uint @-> returning int)
let _CGConfigureDisplayFadeEffect = Foreign.foreign "CGConfigureDisplayFadeEffect" ((ptr CGDisplayConfigRef.t) @-> float @-> float @-> float @-> float @-> float @-> returning int)
let _CGConfigureDisplayMirrorOfDisplay = Foreign.foreign "CGConfigureDisplayMirrorOfDisplay" ((ptr CGDisplayConfigRef.t) @-> uint @-> uint @-> returning int)
let _CGConfigureDisplayMode = Foreign.foreign "CGConfigureDisplayMode" ((ptr CGDisplayConfigRef.t) @-> uint @-> (ptr CFDictionary.t) @-> returning int)
let _CGConfigureDisplayOrigin = Foreign.foreign "CGConfigureDisplayOrigin" ((ptr CGDisplayConfigRef.t) @-> uint @-> int @-> int @-> returning int)
let _CGConfigureDisplayStereoOperation = Foreign.foreign "CGConfigureDisplayStereoOperation" ((ptr CGDisplayConfigRef.t) @-> uint @-> uint @-> uint @-> returning int)
let _CGConfigureDisplayWithDisplayMode = Foreign.foreign "CGConfigureDisplayWithDisplayMode" ((ptr CGDisplayConfigRef.t) @-> uint @-> (ptr CGDisplayMode.t) @-> (ptr CFDictionary.t) @-> returning int)
let _CGContextAddArc = Foreign.foreign "CGContextAddArc" ((ptr CGContext.t) @-> double @-> double @-> double @-> double @-> double @-> int @-> returning void)
let _CGContextAddArcToPoint = Foreign.foreign "CGContextAddArcToPoint" ((ptr CGContext.t) @-> double @-> double @-> double @-> double @-> double @-> returning void)
let _CGContextAddCurveToPoint = Foreign.foreign "CGContextAddCurveToPoint" ((ptr CGContext.t) @-> double @-> double @-> double @-> double @-> double @-> double @-> returning void)
let _CGContextAddEllipseInRect = Foreign.foreign "CGContextAddEllipseInRect" ((ptr CGContext.t) @-> CGRect.t @-> returning void)
let _CGContextAddLineToPoint = Foreign.foreign "CGContextAddLineToPoint" ((ptr CGContext.t) @-> double @-> double @-> returning void)
let _CGContextAddLines = Foreign.foreign "CGContextAddLines" ((ptr CGContext.t) @-> (ptr CGPoint.t) @-> ullong @-> returning void)
let _CGContextAddPath = Foreign.foreign "CGContextAddPath" ((ptr CGContext.t) @-> (ptr CGPath.t) @-> returning void)
let _CGContextAddQuadCurveToPoint = Foreign.foreign "CGContextAddQuadCurveToPoint" ((ptr CGContext.t) @-> double @-> double @-> double @-> double @-> returning void)
let _CGContextAddRect = Foreign.foreign "CGContextAddRect" ((ptr CGContext.t) @-> CGRect.t @-> returning void)
let _CGContextAddRects = Foreign.foreign "CGContextAddRects" ((ptr CGContext.t) @-> (ptr CGRect.t) @-> ullong @-> returning void)
let _CGContextBeginPage = Foreign.foreign "CGContextBeginPage" ((ptr CGContext.t) @-> (ptr CGRect.t) @-> returning void)
let _CGContextBeginPath = Foreign.foreign "CGContextBeginPath" ((ptr CGContext.t) @-> returning void)
let _CGContextBeginTransparencyLayer = Foreign.foreign "CGContextBeginTransparencyLayer" ((ptr CGContext.t) @-> (ptr CFDictionary.t) @-> returning void)
let _CGContextBeginTransparencyLayerWithRect = Foreign.foreign "CGContextBeginTransparencyLayerWithRect" ((ptr CGContext.t) @-> CGRect.t @-> (ptr CFDictionary.t) @-> returning void)
let _CGContextClearRect = Foreign.foreign "CGContextClearRect" ((ptr CGContext.t) @-> CGRect.t @-> returning void)
let _CGContextClip = Foreign.foreign "CGContextClip" ((ptr CGContext.t) @-> returning void)
let _CGContextClipToMask = Foreign.foreign "CGContextClipToMask" ((ptr CGContext.t) @-> CGRect.t @-> (ptr CGImage.t) @-> returning void)
let _CGContextClipToRect = Foreign.foreign "CGContextClipToRect" ((ptr CGContext.t) @-> CGRect.t @-> returning void)
let _CGContextClipToRects = Foreign.foreign "CGContextClipToRects" ((ptr CGContext.t) @-> (ptr CGRect.t) @-> ullong @-> returning void)
let _CGContextClosePath = Foreign.foreign "CGContextClosePath" ((ptr CGContext.t) @-> returning void)
let _CGContextConcatCTM = Foreign.foreign "CGContextConcatCTM" ((ptr CGContext.t) @-> CGAffineTransform.t @-> returning void)
let _CGContextConvertPointToDeviceSpace = Foreign.foreign "CGContextConvertPointToDeviceSpace" ((ptr CGContext.t) @-> CGPoint.t @-> returning CGPoint.t)
let _CGContextConvertPointToUserSpace = Foreign.foreign "CGContextConvertPointToUserSpace" ((ptr CGContext.t) @-> CGPoint.t @-> returning CGPoint.t)
let _CGContextConvertRectToDeviceSpace = Foreign.foreign "CGContextConvertRectToDeviceSpace" ((ptr CGContext.t) @-> CGRect.t @-> returning CGRect.t)
let _CGContextConvertRectToUserSpace = Foreign.foreign "CGContextConvertRectToUserSpace" ((ptr CGContext.t) @-> CGRect.t @-> returning CGRect.t)
let _CGContextConvertSizeToDeviceSpace = Foreign.foreign "CGContextConvertSizeToDeviceSpace" ((ptr CGContext.t) @-> CGSize.t @-> returning CGSize.t)
let _CGContextConvertSizeToUserSpace = Foreign.foreign "CGContextConvertSizeToUserSpace" ((ptr CGContext.t) @-> CGSize.t @-> returning CGSize.t)
let _CGContextCopyPath = Foreign.foreign "CGContextCopyPath" ((ptr CGContext.t) @-> returning (ptr CGPath.t))
let _CGContextDrawImage = Foreign.foreign "CGContextDrawImage" ((ptr CGContext.t) @-> CGRect.t @-> (ptr CGImage.t) @-> returning void)
let _CGContextDrawLayerAtPoint = Foreign.foreign "CGContextDrawLayerAtPoint" ((ptr CGContext.t) @-> CGPoint.t @-> (ptr CGLayer.t) @-> returning void)
let _CGContextDrawLayerInRect = Foreign.foreign "CGContextDrawLayerInRect" ((ptr CGContext.t) @-> CGRect.t @-> (ptr CGLayer.t) @-> returning void)
let _CGContextDrawLinearGradient = Foreign.foreign "CGContextDrawLinearGradient" ((ptr CGContext.t) @-> (ptr CGGradient.t) @-> CGPoint.t @-> CGPoint.t @-> uint @-> returning void)
let _CGContextDrawPDFDocument = Foreign.foreign "CGContextDrawPDFDocument" ((ptr CGContext.t) @-> CGRect.t @-> (ptr CGPDFDocument.t) @-> int @-> returning void)
let _CGContextDrawPDFPage = Foreign.foreign "CGContextDrawPDFPage" ((ptr CGContext.t) @-> (ptr CGPDFPage.t) @-> returning void)
let _CGContextDrawPath = Foreign.foreign "CGContextDrawPath" ((ptr CGContext.t) @-> int @-> returning void)
let _CGContextDrawRadialGradient = Foreign.foreign "CGContextDrawRadialGradient" ((ptr CGContext.t) @-> (ptr CGGradient.t) @-> CGPoint.t @-> double @-> CGPoint.t @-> double @-> uint @-> returning void)
let _CGContextDrawShading = Foreign.foreign "CGContextDrawShading" ((ptr CGContext.t) @-> (ptr CGShading.t) @-> returning void)
let _CGContextDrawTiledImage = Foreign.foreign "CGContextDrawTiledImage" ((ptr CGContext.t) @-> CGRect.t @-> (ptr CGImage.t) @-> returning void)
let _CGContextEOClip = Foreign.foreign "CGContextEOClip" ((ptr CGContext.t) @-> returning void)
let _CGContextEOFillPath = Foreign.foreign "CGContextEOFillPath" ((ptr CGContext.t) @-> returning void)
let _CGContextEndPage = Foreign.foreign "CGContextEndPage" ((ptr CGContext.t) @-> returning void)
let _CGContextEndTransparencyLayer = Foreign.foreign "CGContextEndTransparencyLayer" ((ptr CGContext.t) @-> returning void)
let _CGContextFillEllipseInRect = Foreign.foreign "CGContextFillEllipseInRect" ((ptr CGContext.t) @-> CGRect.t @-> returning void)
let _CGContextFillPath = Foreign.foreign "CGContextFillPath" ((ptr CGContext.t) @-> returning void)
let _CGContextFillRect = Foreign.foreign "CGContextFillRect" ((ptr CGContext.t) @-> CGRect.t @-> returning void)
let _CGContextFillRects = Foreign.foreign "CGContextFillRects" ((ptr CGContext.t) @-> (ptr CGRect.t) @-> ullong @-> returning void)
let _CGContextFlush = Foreign.foreign "CGContextFlush" ((ptr CGContext.t) @-> returning void)
let _CGContextGetCTM = Foreign.foreign "CGContextGetCTM" ((ptr CGContext.t) @-> returning CGAffineTransform.t)
let _CGContextGetClipBoundingBox = Foreign.foreign "CGContextGetClipBoundingBox" ((ptr CGContext.t) @-> returning CGRect.t)
let _CGContextGetInterpolationQuality = Foreign.foreign "CGContextGetInterpolationQuality" ((ptr CGContext.t) @-> returning int)
let _CGContextGetPathBoundingBox = Foreign.foreign "CGContextGetPathBoundingBox" ((ptr CGContext.t) @-> returning CGRect.t)
let _CGContextGetPathCurrentPoint = Foreign.foreign "CGContextGetPathCurrentPoint" ((ptr CGContext.t) @-> returning CGPoint.t)
let _CGContextGetTextMatrix = Foreign.foreign "CGContextGetTextMatrix" ((ptr CGContext.t) @-> returning CGAffineTransform.t)
let _CGContextGetTextPosition = Foreign.foreign "CGContextGetTextPosition" ((ptr CGContext.t) @-> returning CGPoint.t)
let _CGContextGetTypeID = Foreign.foreign "CGContextGetTypeID" (void @-> returning ullong)
let _CGContextGetUserSpaceToDeviceSpaceTransform = Foreign.foreign "CGContextGetUserSpaceToDeviceSpaceTransform" ((ptr CGContext.t) @-> returning CGAffineTransform.t)
let _CGContextIsPathEmpty = Foreign.foreign "CGContextIsPathEmpty" ((ptr CGContext.t) @-> returning bool)
let _CGContextMoveToPoint = Foreign.foreign "CGContextMoveToPoint" ((ptr CGContext.t) @-> double @-> double @-> returning void)
let _CGContextPathContainsPoint = Foreign.foreign "CGContextPathContainsPoint" ((ptr CGContext.t) @-> CGPoint.t @-> int @-> returning bool)
let _CGContextRelease = Foreign.foreign "CGContextRelease" ((ptr CGContext.t) @-> returning void)
let _CGContextReplacePathWithStrokedPath = Foreign.foreign "CGContextReplacePathWithStrokedPath" ((ptr CGContext.t) @-> returning void)
let _CGContextResetClip = Foreign.foreign "CGContextResetClip" ((ptr CGContext.t) @-> returning void)
let _CGContextRestoreGState = Foreign.foreign "CGContextRestoreGState" ((ptr CGContext.t) @-> returning void)
let _CGContextRetain = Foreign.foreign "CGContextRetain" ((ptr CGContext.t) @-> returning (ptr CGContext.t))
let _CGContextRotateCTM = Foreign.foreign "CGContextRotateCTM" ((ptr CGContext.t) @-> double @-> returning void)
let _CGContextSaveGState = Foreign.foreign "CGContextSaveGState" ((ptr CGContext.t) @-> returning void)
let _CGContextScaleCTM = Foreign.foreign "CGContextScaleCTM" ((ptr CGContext.t) @-> double @-> double @-> returning void)
let _CGContextSelectFont = Foreign.foreign "CGContextSelectFont" ((ptr CGContext.t) @-> string @-> double @-> int @-> returning void)
let _CGContextSetAllowsAntialiasing = Foreign.foreign "CGContextSetAllowsAntialiasing" ((ptr CGContext.t) @-> bool @-> returning void)
let _CGContextSetAllowsFontSmoothing = Foreign.foreign "CGContextSetAllowsFontSmoothing" ((ptr CGContext.t) @-> bool @-> returning void)
let _CGContextSetAllowsFontSubpixelPositioning = Foreign.foreign "CGContextSetAllowsFontSubpixelPositioning" ((ptr CGContext.t) @-> bool @-> returning void)
let _CGContextSetAllowsFontSubpixelQuantization = Foreign.foreign "CGContextSetAllowsFontSubpixelQuantization" ((ptr CGContext.t) @-> bool @-> returning void)
let _CGContextSetAlpha = Foreign.foreign "CGContextSetAlpha" ((ptr CGContext.t) @-> double @-> returning void)
let _CGContextSetBlendMode = Foreign.foreign "CGContextSetBlendMode" ((ptr CGContext.t) @-> int @-> returning void)
let _CGContextSetCMYKFillColor = Foreign.foreign "CGContextSetCMYKFillColor" ((ptr CGContext.t) @-> double @-> double @-> double @-> double @-> double @-> returning void)
let _CGContextSetCMYKStrokeColor = Foreign.foreign "CGContextSetCMYKStrokeColor" ((ptr CGContext.t) @-> double @-> double @-> double @-> double @-> double @-> returning void)
let _CGContextSetCharacterSpacing = Foreign.foreign "CGContextSetCharacterSpacing" ((ptr CGContext.t) @-> double @-> returning void)
let _CGContextSetFillColor = Foreign.foreign "CGContextSetFillColor" ((ptr CGContext.t) @-> (ptr double) @-> returning void)
let _CGContextSetFillColorSpace = Foreign.foreign "CGContextSetFillColorSpace" ((ptr CGContext.t) @-> (ptr CGColorSpace.t) @-> returning void)
let _CGContextSetFillColorWithColor = Foreign.foreign "CGContextSetFillColorWithColor" ((ptr CGContext.t) @-> (ptr CGColor.t) @-> returning void)
let _CGContextSetFillPattern = Foreign.foreign "CGContextSetFillPattern" ((ptr CGContext.t) @-> (ptr CGPattern.t) @-> (ptr double) @-> returning void)
let _CGContextSetFlatness = Foreign.foreign "CGContextSetFlatness" ((ptr CGContext.t) @-> double @-> returning void)
let _CGContextSetFont = Foreign.foreign "CGContextSetFont" ((ptr CGContext.t) @-> (ptr CGFont.t) @-> returning void)
let _CGContextSetFontSize = Foreign.foreign "CGContextSetFontSize" ((ptr CGContext.t) @-> double @-> returning void)
let _CGContextSetGrayFillColor = Foreign.foreign "CGContextSetGrayFillColor" ((ptr CGContext.t) @-> double @-> double @-> returning void)
let _CGContextSetGrayStrokeColor = Foreign.foreign "CGContextSetGrayStrokeColor" ((ptr CGContext.t) @-> double @-> double @-> returning void)
let _CGContextSetInterpolationQuality = Foreign.foreign "CGContextSetInterpolationQuality" ((ptr CGContext.t) @-> int @-> returning void)
let _CGContextSetLineCap = Foreign.foreign "CGContextSetLineCap" ((ptr CGContext.t) @-> int @-> returning void)
let _CGContextSetLineDash = Foreign.foreign "CGContextSetLineDash" ((ptr CGContext.t) @-> double @-> (ptr double) @-> ullong @-> returning void)
let _CGContextSetLineJoin = Foreign.foreign "CGContextSetLineJoin" ((ptr CGContext.t) @-> int @-> returning void)
let _CGContextSetLineWidth = Foreign.foreign "CGContextSetLineWidth" ((ptr CGContext.t) @-> double @-> returning void)
let _CGContextSetMiterLimit = Foreign.foreign "CGContextSetMiterLimit" ((ptr CGContext.t) @-> double @-> returning void)
let _CGContextSetPatternPhase = Foreign.foreign "CGContextSetPatternPhase" ((ptr CGContext.t) @-> CGSize.t @-> returning void)
let _CGContextSetRGBFillColor = Foreign.foreign "CGContextSetRGBFillColor" ((ptr CGContext.t) @-> double @-> double @-> double @-> double @-> returning void)
let _CGContextSetRGBStrokeColor = Foreign.foreign "CGContextSetRGBStrokeColor" ((ptr CGContext.t) @-> double @-> double @-> double @-> double @-> returning void)
let _CGContextSetRenderingIntent = Foreign.foreign "CGContextSetRenderingIntent" ((ptr CGContext.t) @-> int @-> returning void)
let _CGContextSetShadow = Foreign.foreign "CGContextSetShadow" ((ptr CGContext.t) @-> CGSize.t @-> double @-> returning void)
let _CGContextSetShadowWithColor = Foreign.foreign "CGContextSetShadowWithColor" ((ptr CGContext.t) @-> CGSize.t @-> double @-> (ptr CGColor.t) @-> returning void)
let _CGContextSetShouldAntialias = Foreign.foreign "CGContextSetShouldAntialias" ((ptr CGContext.t) @-> bool @-> returning void)
let _CGContextSetShouldSmoothFonts = Foreign.foreign "CGContextSetShouldSmoothFonts" ((ptr CGContext.t) @-> bool @-> returning void)
let _CGContextSetShouldSubpixelPositionFonts = Foreign.foreign "CGContextSetShouldSubpixelPositionFonts" ((ptr CGContext.t) @-> bool @-> returning void)
let _CGContextSetShouldSubpixelQuantizeFonts = Foreign.foreign "CGContextSetShouldSubpixelQuantizeFonts" ((ptr CGContext.t) @-> bool @-> returning void)
let _CGContextSetStrokeColor = Foreign.foreign "CGContextSetStrokeColor" ((ptr CGContext.t) @-> (ptr double) @-> returning void)
let _CGContextSetStrokeColorSpace = Foreign.foreign "CGContextSetStrokeColorSpace" ((ptr CGContext.t) @-> (ptr CGColorSpace.t) @-> returning void)
let _CGContextSetStrokeColorWithColor = Foreign.foreign "CGContextSetStrokeColorWithColor" ((ptr CGContext.t) @-> (ptr CGColor.t) @-> returning void)
let _CGContextSetStrokePattern = Foreign.foreign "CGContextSetStrokePattern" ((ptr CGContext.t) @-> (ptr CGPattern.t) @-> (ptr double) @-> returning void)
let _CGContextSetTextDrawingMode = Foreign.foreign "CGContextSetTextDrawingMode" ((ptr CGContext.t) @-> int @-> returning void)
let _CGContextSetTextMatrix = Foreign.foreign "CGContextSetTextMatrix" ((ptr CGContext.t) @-> CGAffineTransform.t @-> returning void)
let _CGContextSetTextPosition = Foreign.foreign "CGContextSetTextPosition" ((ptr CGContext.t) @-> double @-> double @-> returning void)
let _CGContextShowGlyphs = Foreign.foreign "CGContextShowGlyphs" ((ptr CGContext.t) @-> (ptr ushort) @-> ullong @-> returning void)
let _CGContextShowGlyphsAtPoint = Foreign.foreign "CGContextShowGlyphsAtPoint" ((ptr CGContext.t) @-> double @-> double @-> (ptr ushort) @-> ullong @-> returning void)
let _CGContextShowGlyphsAtPositions = Foreign.foreign "CGContextShowGlyphsAtPositions" ((ptr CGContext.t) @-> (ptr ushort) @-> (ptr CGPoint.t) @-> ullong @-> returning void)
let _CGContextShowGlyphsWithAdvances = Foreign.foreign "CGContextShowGlyphsWithAdvances" ((ptr CGContext.t) @-> (ptr ushort) @-> (ptr CGSize.t) @-> ullong @-> returning void)
let _CGContextShowText = Foreign.foreign "CGContextShowText" ((ptr CGContext.t) @-> string @-> ullong @-> returning void)
let _CGContextShowTextAtPoint = Foreign.foreign "CGContextShowTextAtPoint" ((ptr CGContext.t) @-> double @-> double @-> string @-> ullong @-> returning void)
let _CGContextStrokeEllipseInRect = Foreign.foreign "CGContextStrokeEllipseInRect" ((ptr CGContext.t) @-> CGRect.t @-> returning void)
let _CGContextStrokeLineSegments = Foreign.foreign "CGContextStrokeLineSegments" ((ptr CGContext.t) @-> (ptr CGPoint.t) @-> ullong @-> returning void)
let _CGContextStrokePath = Foreign.foreign "CGContextStrokePath" ((ptr CGContext.t) @-> returning void)
let _CGContextStrokeRect = Foreign.foreign "CGContextStrokeRect" ((ptr CGContext.t) @-> CGRect.t @-> returning void)
let _CGContextStrokeRectWithWidth = Foreign.foreign "CGContextStrokeRectWithWidth" ((ptr CGContext.t) @-> CGRect.t @-> double @-> returning void)
let _CGContextSynchronize = Foreign.foreign "CGContextSynchronize" ((ptr CGContext.t) @-> returning void)
let _CGContextTranslateCTM = Foreign.foreign "CGContextTranslateCTM" ((ptr CGContext.t) @-> double @-> double @-> returning void)
let _CGConvertColorDataWithFormat = Foreign.foreign "CGConvertColorDataWithFormat" (ullong @-> ullong @-> (ptr void) @-> CGColorDataFormat.t @-> (ptr void) @-> CGColorDataFormat.t @-> (ptr CFDictionary.t) @-> returning bool)
let _CGCursorIsDrawnInFramebuffer = Foreign.foreign "CGCursorIsDrawnInFramebuffer" (void @-> returning uint)
let _CGCursorIsVisible = Foreign.foreign "CGCursorIsVisible" (void @-> returning uint)
let _CGDataConsumerCreate = Foreign.foreign "CGDataConsumerCreate" ((ptr void) @-> (ptr CGDataConsumerCallbacks.t) @-> returning (ptr CGDataConsumer.t))
let _CGDataConsumerCreateWithCFData = Foreign.foreign "CGDataConsumerCreateWithCFData" ((ptr CFData.t) @-> returning (ptr CGDataConsumer.t))
let _CGDataConsumerCreateWithURL = Foreign.foreign "CGDataConsumerCreateWithURL" ((ptr CFURL.t) @-> returning (ptr CGDataConsumer.t))
let _CGDataConsumerGetTypeID = Foreign.foreign "CGDataConsumerGetTypeID" (void @-> returning ullong)
let _CGDataConsumerRelease = Foreign.foreign "CGDataConsumerRelease" ((ptr CGDataConsumer.t) @-> returning void)
let _CGDataConsumerRetain = Foreign.foreign "CGDataConsumerRetain" ((ptr CGDataConsumer.t) @-> returning (ptr CGDataConsumer.t))
let _CGDataProviderCopyData = Foreign.foreign "CGDataProviderCopyData" ((ptr CGDataProvider.t) @-> returning (ptr CFData.t))
let _CGDataProviderCreateDirect = Foreign.foreign "CGDataProviderCreateDirect" ((ptr void) @-> llong @-> (ptr CGDataProviderDirectCallbacks.t) @-> returning (ptr CGDataProvider.t))
let _CGDataProviderCreateSequential = Foreign.foreign "CGDataProviderCreateSequential" ((ptr void) @-> (ptr CGDataProviderSequentialCallbacks.t) @-> returning (ptr CGDataProvider.t))
let _CGDataProviderCreateWithCFData = Foreign.foreign "CGDataProviderCreateWithCFData" ((ptr CFData.t) @-> returning (ptr CGDataProvider.t))
let _CGDataProviderCreateWithData = Foreign.foreign "CGDataProviderCreateWithData" ((ptr void) @-> (ptr void) @-> ullong @-> Foreign.funptr ((ptr void) @-> (ptr void) @-> ullong @-> returning void) @-> returning (ptr CGDataProvider.t))
let _CGDataProviderCreateWithFilename = Foreign.foreign "CGDataProviderCreateWithFilename" (string @-> returning (ptr CGDataProvider.t))
let _CGDataProviderCreateWithURL = Foreign.foreign "CGDataProviderCreateWithURL" ((ptr CFURL.t) @-> returning (ptr CGDataProvider.t))
let _CGDataProviderGetInfo = Foreign.foreign "CGDataProviderGetInfo" ((ptr CGDataProvider.t) @-> returning (ptr void))
let _CGDataProviderGetTypeID = Foreign.foreign "CGDataProviderGetTypeID" (void @-> returning ullong)
let _CGDataProviderRelease = Foreign.foreign "CGDataProviderRelease" ((ptr CGDataProvider.t) @-> returning void)
let _CGDataProviderRetain = Foreign.foreign "CGDataProviderRetain" ((ptr CGDataProvider.t) @-> returning (ptr CGDataProvider.t))
let _CGDirectDisplayCopyCurrentMetalDevice = Foreign.foreign "CGDirectDisplayCopyCurrentMetalDevice" (uint @-> returning id)
let _CGDisplayAvailableModes = Foreign.foreign "CGDisplayAvailableModes" (uint @-> returning (ptr CFArray.t))
let _CGDisplayBestModeForParameters = Foreign.foreign "CGDisplayBestModeForParameters" (uint @-> ullong @-> ullong @-> ullong @-> (ptr uint) @-> returning (ptr CFDictionary.t))
let _CGDisplayBestModeForParametersAndRefreshRate = Foreign.foreign "CGDisplayBestModeForParametersAndRefreshRate" (uint @-> ullong @-> ullong @-> ullong @-> double @-> (ptr uint) @-> returning (ptr CFDictionary.t))
let _CGDisplayBounds = Foreign.foreign "CGDisplayBounds" (uint @-> returning CGRect.t)
let _CGDisplayCapture = Foreign.foreign "CGDisplayCapture" (uint @-> returning int)
let _CGDisplayCaptureWithOptions = Foreign.foreign "CGDisplayCaptureWithOptions" (uint @-> uint @-> returning int)
let _CGDisplayCopyAllDisplayModes = Foreign.foreign "CGDisplayCopyAllDisplayModes" (uint @-> (ptr CFDictionary.t) @-> returning (ptr CFArray.t))
let _CGDisplayCopyColorSpace = Foreign.foreign "CGDisplayCopyColorSpace" (uint @-> returning (ptr CGColorSpace.t))
let _CGDisplayCopyDisplayMode = Foreign.foreign "CGDisplayCopyDisplayMode" (uint @-> returning (ptr CGDisplayMode.t))
let _CGDisplayCreateImage = Foreign.foreign "CGDisplayCreateImage" (uint @-> returning (ptr CGImage.t))
let _CGDisplayCreateImageForRect = Foreign.foreign "CGDisplayCreateImageForRect" (uint @-> CGRect.t @-> returning (ptr CGImage.t))
let _CGDisplayCurrentMode = Foreign.foreign "CGDisplayCurrentMode" (uint @-> returning (ptr CFDictionary.t))
let _CGDisplayFade = Foreign.foreign "CGDisplayFade" (uint @-> float @-> float @-> float @-> float @-> float @-> float @-> uint @-> returning int)
let _CGDisplayFadeOperationInProgress = Foreign.foreign "CGDisplayFadeOperationInProgress" (void @-> returning uint)
let _CGDisplayGammaTableCapacity = Foreign.foreign "CGDisplayGammaTableCapacity" (uint @-> returning uint)
let _CGDisplayGetDrawingContext = Foreign.foreign "CGDisplayGetDrawingContext" (uint @-> returning (ptr CGContext.t))
let _CGDisplayHideCursor = Foreign.foreign "CGDisplayHideCursor" (uint @-> returning int)
let _CGDisplayIDToOpenGLDisplayMask = Foreign.foreign "CGDisplayIDToOpenGLDisplayMask" (uint @-> returning uint)
let _CGDisplayIOServicePort = Foreign.foreign "CGDisplayIOServicePort" (uint @-> returning uint)
let _CGDisplayIsActive = Foreign.foreign "CGDisplayIsActive" (uint @-> returning uint)
let _CGDisplayIsAlwaysInMirrorSet = Foreign.foreign "CGDisplayIsAlwaysInMirrorSet" (uint @-> returning uint)
let _CGDisplayIsAsleep = Foreign.foreign "CGDisplayIsAsleep" (uint @-> returning uint)
let _CGDisplayIsBuiltin = Foreign.foreign "CGDisplayIsBuiltin" (uint @-> returning uint)
let _CGDisplayIsCaptured = Foreign.foreign "CGDisplayIsCaptured" (uint @-> returning uint)
let _CGDisplayIsInHWMirrorSet = Foreign.foreign "CGDisplayIsInHWMirrorSet" (uint @-> returning uint)
let _CGDisplayIsInMirrorSet = Foreign.foreign "CGDisplayIsInMirrorSet" (uint @-> returning uint)
let _CGDisplayIsMain = Foreign.foreign "CGDisplayIsMain" (uint @-> returning uint)
let _CGDisplayIsOnline = Foreign.foreign "CGDisplayIsOnline" (uint @-> returning uint)
let _CGDisplayIsStereo = Foreign.foreign "CGDisplayIsStereo" (uint @-> returning uint)
let _CGDisplayMirrorsDisplay = Foreign.foreign "CGDisplayMirrorsDisplay" (uint @-> returning uint)
let _CGDisplayModeCopyPixelEncoding = Foreign.foreign "CGDisplayModeCopyPixelEncoding" ((ptr CGDisplayMode.t) @-> returning (ptr CFString.t))
let _CGDisplayModeGetHeight = Foreign.foreign "CGDisplayModeGetHeight" ((ptr CGDisplayMode.t) @-> returning ullong)
let _CGDisplayModeGetIODisplayModeID = Foreign.foreign "CGDisplayModeGetIODisplayModeID" ((ptr CGDisplayMode.t) @-> returning int)
let _CGDisplayModeGetIOFlags = Foreign.foreign "CGDisplayModeGetIOFlags" ((ptr CGDisplayMode.t) @-> returning uint)
let _CGDisplayModeGetPixelHeight = Foreign.foreign "CGDisplayModeGetPixelHeight" ((ptr CGDisplayMode.t) @-> returning ullong)
let _CGDisplayModeGetPixelWidth = Foreign.foreign "CGDisplayModeGetPixelWidth" ((ptr CGDisplayMode.t) @-> returning ullong)
let _CGDisplayModeGetRefreshRate = Foreign.foreign "CGDisplayModeGetRefreshRate" ((ptr CGDisplayMode.t) @-> returning double)
let _CGDisplayModeGetTypeID = Foreign.foreign "CGDisplayModeGetTypeID" (void @-> returning ullong)
let _CGDisplayModeGetWidth = Foreign.foreign "CGDisplayModeGetWidth" ((ptr CGDisplayMode.t) @-> returning ullong)
let _CGDisplayModeIsUsableForDesktopGUI = Foreign.foreign "CGDisplayModeIsUsableForDesktopGUI" ((ptr CGDisplayMode.t) @-> returning bool)
let _CGDisplayModeRelease = Foreign.foreign "CGDisplayModeRelease" ((ptr CGDisplayMode.t) @-> returning void)
let _CGDisplayModeRetain = Foreign.foreign "CGDisplayModeRetain" ((ptr CGDisplayMode.t) @-> returning (ptr CGDisplayMode.t))
let _CGDisplayModelNumber = Foreign.foreign "CGDisplayModelNumber" (uint @-> returning uint)
let _CGDisplayMoveCursorToPoint = Foreign.foreign "CGDisplayMoveCursorToPoint" (uint @-> CGPoint.t @-> returning int)
let _CGDisplayPixelsHigh = Foreign.foreign "CGDisplayPixelsHigh" (uint @-> returning ullong)
let _CGDisplayPixelsWide = Foreign.foreign "CGDisplayPixelsWide" (uint @-> returning ullong)
let _CGDisplayPrimaryDisplay = Foreign.foreign "CGDisplayPrimaryDisplay" (uint @-> returning uint)
let _CGDisplayRegisterReconfigurationCallback = Foreign.foreign "CGDisplayRegisterReconfigurationCallback" (Foreign.funptr (uint @-> uint @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning int)
let _CGDisplayRelease = Foreign.foreign "CGDisplayRelease" (uint @-> returning int)
let _CGDisplayRemoveReconfigurationCallback = Foreign.foreign "CGDisplayRemoveReconfigurationCallback" (Foreign.funptr (uint @-> uint @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning int)
let _CGDisplayRestoreColorSyncSettings = Foreign.foreign "CGDisplayRestoreColorSyncSettings" (void @-> returning void)
let _CGDisplayRotation = Foreign.foreign "CGDisplayRotation" (uint @-> returning double)
let _CGDisplayScreenSize = Foreign.foreign "CGDisplayScreenSize" (uint @-> returning CGSize.t)
let _CGDisplaySerialNumber = Foreign.foreign "CGDisplaySerialNumber" (uint @-> returning uint)
let _CGDisplaySetDisplayMode = Foreign.foreign "CGDisplaySetDisplayMode" (uint @-> (ptr CGDisplayMode.t) @-> (ptr CFDictionary.t) @-> returning int)
let _CGDisplaySetStereoOperation = Foreign.foreign "CGDisplaySetStereoOperation" (uint @-> uint @-> uint @-> uint @-> returning int)
let _CGDisplayShowCursor = Foreign.foreign "CGDisplayShowCursor" (uint @-> returning int)
let _CGDisplayStreamCreate = Foreign.foreign "CGDisplayStreamCreate" (uint @-> ullong @-> ullong @-> int @-> (ptr CFDictionary.t) @-> Foreign.funptr (int @-> ullong @-> (ptr IOSurface.t) @-> (ptr CGDisplayStreamUpdate.t) @-> returning void) @-> returning (ptr CGDisplayStream.t))
let _CGDisplayStreamCreateWithDispatchQueue = Foreign.foreign "CGDisplayStreamCreateWithDispatchQueue" (uint @-> ullong @-> ullong @-> int @-> (ptr CFDictionary.t) @-> id @-> Foreign.funptr (int @-> ullong @-> (ptr IOSurface.t) @-> (ptr CGDisplayStreamUpdate.t) @-> returning void) @-> returning (ptr CGDisplayStream.t))
let _CGDisplayStreamGetRunLoopSource = Foreign.foreign "CGDisplayStreamGetRunLoopSource" ((ptr CGDisplayStream.t) @-> returning (ptr CFRunLoopSource.t))
let _CGDisplayStreamGetTypeID = Foreign.foreign "CGDisplayStreamGetTypeID" (void @-> returning ullong)
let _CGDisplayStreamStart = Foreign.foreign "CGDisplayStreamStart" ((ptr CGDisplayStream.t) @-> returning int)
let _CGDisplayStreamStop = Foreign.foreign "CGDisplayStreamStop" ((ptr CGDisplayStream.t) @-> returning int)
let _CGDisplayStreamUpdateCreateMergedUpdate = Foreign.foreign "CGDisplayStreamUpdateCreateMergedUpdate" ((ptr CGDisplayStreamUpdate.t) @-> (ptr CGDisplayStreamUpdate.t) @-> returning (ptr CGDisplayStreamUpdate.t))
let _CGDisplayStreamUpdateGetDropCount = Foreign.foreign "CGDisplayStreamUpdateGetDropCount" ((ptr CGDisplayStreamUpdate.t) @-> returning ullong)
let _CGDisplayStreamUpdateGetMovedRectsDelta = Foreign.foreign "CGDisplayStreamUpdateGetMovedRectsDelta" ((ptr CGDisplayStreamUpdate.t) @-> (ptr double) @-> (ptr double) @-> returning void)
let _CGDisplayStreamUpdateGetRects = Foreign.foreign "CGDisplayStreamUpdateGetRects" ((ptr CGDisplayStreamUpdate.t) @-> int @-> (ptr ullong) @-> returning (ptr CGRect.t))
let _CGDisplayStreamUpdateGetTypeID = Foreign.foreign "CGDisplayStreamUpdateGetTypeID" (void @-> returning ullong)
let _CGDisplaySwitchToMode = Foreign.foreign "CGDisplaySwitchToMode" (uint @-> (ptr CFDictionary.t) @-> returning int)
let _CGDisplayUnitNumber = Foreign.foreign "CGDisplayUnitNumber" (uint @-> returning uint)
let _CGDisplayUsesOpenGLAcceleration = Foreign.foreign "CGDisplayUsesOpenGLAcceleration" (uint @-> returning uint)
let _CGDisplayVendorNumber = Foreign.foreign "CGDisplayVendorNumber" (uint @-> returning uint)
let _CGEnableEventStateCombining = Foreign.foreign "CGEnableEventStateCombining" (uint @-> returning int)
let _CGErrorSetCallback = Foreign.foreign "CGErrorSetCallback" (Foreign.funptr (void @-> returning void) @-> returning void)
let _CGEventCreate = Foreign.foreign "CGEventCreate" ((ptr CGEventSource.t) @-> returning (ptr CGEvent.t))
let _CGEventCreateCopy = Foreign.foreign "CGEventCreateCopy" ((ptr CGEvent.t) @-> returning (ptr CGEvent.t))
let _CGEventCreateData = Foreign.foreign "CGEventCreateData" ((ptr CFAllocator.t) @-> (ptr CGEvent.t) @-> returning (ptr CFData.t))
let _CGEventCreateFromData = Foreign.foreign "CGEventCreateFromData" ((ptr CFAllocator.t) @-> (ptr CFData.t) @-> returning (ptr CGEvent.t))
let _CGEventCreateKeyboardEvent = Foreign.foreign "CGEventCreateKeyboardEvent" ((ptr CGEventSource.t) @-> ushort @-> bool @-> returning (ptr CGEvent.t))
let _CGEventCreateMouseEvent = Foreign.foreign "CGEventCreateMouseEvent" ((ptr CGEventSource.t) @-> uint @-> CGPoint.t @-> uint @-> returning (ptr CGEvent.t))
let _CGEventCreateScrollWheelEvent = Foreign.foreign "CGEventCreateScrollWheelEvent" ((ptr CGEventSource.t) @-> uint @-> uint @-> int @-> returning (ptr CGEvent.t))
let _CGEventCreateScrollWheelEvent2 = Foreign.foreign "CGEventCreateScrollWheelEvent2" ((ptr CGEventSource.t) @-> uint @-> uint @-> int @-> int @-> int @-> returning (ptr CGEvent.t))
let _CGEventCreateSourceFromEvent = Foreign.foreign "CGEventCreateSourceFromEvent" ((ptr CGEvent.t) @-> returning (ptr CGEventSource.t))
let _CGEventGetDoubleValueField = Foreign.foreign "CGEventGetDoubleValueField" ((ptr CGEvent.t) @-> uint @-> returning double)
let _CGEventGetFlags = Foreign.foreign "CGEventGetFlags" ((ptr CGEvent.t) @-> returning ullong)
let _CGEventGetIntegerValueField = Foreign.foreign "CGEventGetIntegerValueField" ((ptr CGEvent.t) @-> uint @-> returning llong)
let _CGEventGetLocation = Foreign.foreign "CGEventGetLocation" ((ptr CGEvent.t) @-> returning CGPoint.t)
let _CGEventGetTimestamp = Foreign.foreign "CGEventGetTimestamp" ((ptr CGEvent.t) @-> returning ullong)
let _CGEventGetType = Foreign.foreign "CGEventGetType" ((ptr CGEvent.t) @-> returning uint)
let _CGEventGetTypeID = Foreign.foreign "CGEventGetTypeID" (void @-> returning ullong)
let _CGEventGetUnflippedLocation = Foreign.foreign "CGEventGetUnflippedLocation" ((ptr CGEvent.t) @-> returning CGPoint.t)
let _CGEventKeyboardGetUnicodeString = Foreign.foreign "CGEventKeyboardGetUnicodeString" ((ptr CGEvent.t) @-> ullong @-> (ptr ullong) @-> (ptr ushort) @-> returning void)
let _CGEventKeyboardSetUnicodeString = Foreign.foreign "CGEventKeyboardSetUnicodeString" ((ptr CGEvent.t) @-> ullong @-> (ptr ushort) @-> returning void)
let _CGEventPost = Foreign.foreign "CGEventPost" (uint @-> (ptr CGEvent.t) @-> returning void)
let _CGEventPostToPSN = Foreign.foreign "CGEventPostToPSN" ((ptr void) @-> (ptr CGEvent.t) @-> returning void)
let _CGEventPostToPid = Foreign.foreign "CGEventPostToPid" (int @-> (ptr CGEvent.t) @-> returning void)
let _CGEventSetDoubleValueField = Foreign.foreign "CGEventSetDoubleValueField" ((ptr CGEvent.t) @-> uint @-> double @-> returning void)
let _CGEventSetFlags = Foreign.foreign "CGEventSetFlags" ((ptr CGEvent.t) @-> ullong @-> returning void)
let _CGEventSetIntegerValueField = Foreign.foreign "CGEventSetIntegerValueField" ((ptr CGEvent.t) @-> uint @-> llong @-> returning void)
let _CGEventSetLocation = Foreign.foreign "CGEventSetLocation" ((ptr CGEvent.t) @-> CGPoint.t @-> returning void)
let _CGEventSetSource = Foreign.foreign "CGEventSetSource" ((ptr CGEvent.t) @-> (ptr CGEventSource.t) @-> returning void)
let _CGEventSetTimestamp = Foreign.foreign "CGEventSetTimestamp" ((ptr CGEvent.t) @-> ullong @-> returning void)
let _CGEventSetType = Foreign.foreign "CGEventSetType" ((ptr CGEvent.t) @-> uint @-> returning void)
let _CGEventSourceButtonState = Foreign.foreign "CGEventSourceButtonState" (int @-> uint @-> returning bool)
let _CGEventSourceCounterForEventType = Foreign.foreign "CGEventSourceCounterForEventType" (int @-> uint @-> returning uint)
let _CGEventSourceCreate = Foreign.foreign "CGEventSourceCreate" (int @-> returning (ptr CGEventSource.t))
let _CGEventSourceFlagsState = Foreign.foreign "CGEventSourceFlagsState" (int @-> returning ullong)
let _CGEventSourceGetKeyboardType = Foreign.foreign "CGEventSourceGetKeyboardType" ((ptr CGEventSource.t) @-> returning uint)
let _CGEventSourceGetLocalEventsFilterDuringSuppressionState = Foreign.foreign "CGEventSourceGetLocalEventsFilterDuringSuppressionState" ((ptr CGEventSource.t) @-> uint @-> returning uint)
let _CGEventSourceGetLocalEventsSuppressionInterval = Foreign.foreign "CGEventSourceGetLocalEventsSuppressionInterval" ((ptr CGEventSource.t) @-> returning double)
let _CGEventSourceGetPixelsPerLine = Foreign.foreign "CGEventSourceGetPixelsPerLine" ((ptr CGEventSource.t) @-> returning double)
let _CGEventSourceGetSourceStateID = Foreign.foreign "CGEventSourceGetSourceStateID" ((ptr CGEventSource.t) @-> returning int)
let _CGEventSourceGetTypeID = Foreign.foreign "CGEventSourceGetTypeID" (void @-> returning ullong)
let _CGEventSourceGetUserData = Foreign.foreign "CGEventSourceGetUserData" ((ptr CGEventSource.t) @-> returning llong)
let _CGEventSourceKeyState = Foreign.foreign "CGEventSourceKeyState" (int @-> ushort @-> returning bool)
let _CGEventSourceSecondsSinceLastEventType = Foreign.foreign "CGEventSourceSecondsSinceLastEventType" (int @-> uint @-> returning double)
let _CGEventSourceSetKeyboardType = Foreign.foreign "CGEventSourceSetKeyboardType" ((ptr CGEventSource.t) @-> uint @-> returning void)
let _CGEventSourceSetLocalEventsFilterDuringSuppressionState = Foreign.foreign "CGEventSourceSetLocalEventsFilterDuringSuppressionState" ((ptr CGEventSource.t) @-> uint @-> uint @-> returning void)
let _CGEventSourceSetLocalEventsSuppressionInterval = Foreign.foreign "CGEventSourceSetLocalEventsSuppressionInterval" ((ptr CGEventSource.t) @-> double @-> returning void)
let _CGEventSourceSetPixelsPerLine = Foreign.foreign "CGEventSourceSetPixelsPerLine" ((ptr CGEventSource.t) @-> double @-> returning void)
let _CGEventSourceSetUserData = Foreign.foreign "CGEventSourceSetUserData" ((ptr CGEventSource.t) @-> llong @-> returning void)
let _CGEventTapCreate = Foreign.foreign "CGEventTapCreate" (uint @-> uint @-> uint @-> ullong @-> Foreign.funptr ((ptr CGEventTapProxy.t) @-> uint @-> (ptr CGEvent.t) @-> (ptr void) @-> returning (ptr CGEvent.t)) @-> (ptr void) @-> returning (ptr CFMachPort.t))
let _CGEventTapCreateForPSN = Foreign.foreign "CGEventTapCreateForPSN" ((ptr void) @-> uint @-> uint @-> ullong @-> Foreign.funptr ((ptr CGEventTapProxy.t) @-> uint @-> (ptr CGEvent.t) @-> (ptr void) @-> returning (ptr CGEvent.t)) @-> (ptr void) @-> returning (ptr CFMachPort.t))
let _CGEventTapCreateForPid = Foreign.foreign "CGEventTapCreateForPid" (int @-> uint @-> uint @-> ullong @-> Foreign.funptr ((ptr CGEventTapProxy.t) @-> uint @-> (ptr CGEvent.t) @-> (ptr void) @-> returning (ptr CGEvent.t)) @-> (ptr void) @-> returning (ptr CFMachPort.t))
let _CGEventTapEnable = Foreign.foreign "CGEventTapEnable" ((ptr CFMachPort.t) @-> bool @-> returning void)
let _CGEventTapIsEnabled = Foreign.foreign "CGEventTapIsEnabled" ((ptr CFMachPort.t) @-> returning bool)
let _CGEventTapPostEvent = Foreign.foreign "CGEventTapPostEvent" ((ptr CGEventTapProxy.t) @-> (ptr CGEvent.t) @-> returning void)
let _CGFontCanCreatePostScriptSubset = Foreign.foreign "CGFontCanCreatePostScriptSubset" ((ptr CGFont.t) @-> int @-> returning bool)
let _CGFontCopyFullName = Foreign.foreign "CGFontCopyFullName" ((ptr CGFont.t) @-> returning (ptr CFString.t))
let _CGFontCopyGlyphNameForGlyph = Foreign.foreign "CGFontCopyGlyphNameForGlyph" ((ptr CGFont.t) @-> ushort @-> returning (ptr CFString.t))
let _CGFontCopyPostScriptName = Foreign.foreign "CGFontCopyPostScriptName" ((ptr CGFont.t) @-> returning (ptr CFString.t))
let _CGFontCopyTableForTag = Foreign.foreign "CGFontCopyTableForTag" ((ptr CGFont.t) @-> uint @-> returning (ptr CFData.t))
let _CGFontCopyTableTags = Foreign.foreign "CGFontCopyTableTags" ((ptr CGFont.t) @-> returning (ptr CFArray.t))
let _CGFontCopyVariationAxes = Foreign.foreign "CGFontCopyVariationAxes" ((ptr CGFont.t) @-> returning (ptr CFArray.t))
let _CGFontCopyVariations = Foreign.foreign "CGFontCopyVariations" ((ptr CGFont.t) @-> returning (ptr CFDictionary.t))
let _CGFontCreateCopyWithVariations = Foreign.foreign "CGFontCreateCopyWithVariations" ((ptr CGFont.t) @-> (ptr CFDictionary.t) @-> returning (ptr CGFont.t))
let _CGFontCreatePostScriptEncoding = Foreign.foreign "CGFontCreatePostScriptEncoding" ((ptr CGFont.t) @-> (ptr ushort) @-> returning (ptr CFData.t))
let _CGFontCreatePostScriptSubset = Foreign.foreign "CGFontCreatePostScriptSubset" ((ptr CGFont.t) @-> (ptr CFString.t) @-> int @-> (ptr ushort) @-> ullong @-> (ptr ushort) @-> returning (ptr CFData.t))
let _CGFontCreateWithDataProvider = Foreign.foreign "CGFontCreateWithDataProvider" ((ptr CGDataProvider.t) @-> returning (ptr CGFont.t))
let _CGFontCreateWithFontName = Foreign.foreign "CGFontCreateWithFontName" ((ptr CFString.t) @-> returning (ptr CGFont.t))
let _CGFontCreateWithPlatformFont = Foreign.foreign "CGFontCreateWithPlatformFont" (int @-> returning (ptr CGFont.t))
let _CGFontGetAscent = Foreign.foreign "CGFontGetAscent" ((ptr CGFont.t) @-> returning int)
let _CGFontGetCapHeight = Foreign.foreign "CGFontGetCapHeight" ((ptr CGFont.t) @-> returning int)
let _CGFontGetDescent = Foreign.foreign "CGFontGetDescent" ((ptr CGFont.t) @-> returning int)
let _CGFontGetFontBBox = Foreign.foreign "CGFontGetFontBBox" ((ptr CGFont.t) @-> returning CGRect.t)
let _CGFontGetGlyphAdvances = Foreign.foreign "CGFontGetGlyphAdvances" ((ptr CGFont.t) @-> (ptr ushort) @-> ullong @-> (ptr int) @-> returning bool)
let _CGFontGetGlyphBBoxes = Foreign.foreign "CGFontGetGlyphBBoxes" ((ptr CGFont.t) @-> (ptr ushort) @-> ullong @-> (ptr CGRect.t) @-> returning bool)
let _CGFontGetGlyphWithGlyphName = Foreign.foreign "CGFontGetGlyphWithGlyphName" ((ptr CGFont.t) @-> (ptr CFString.t) @-> returning ushort)
let _CGFontGetItalicAngle = Foreign.foreign "CGFontGetItalicAngle" ((ptr CGFont.t) @-> returning double)
let _CGFontGetLeading = Foreign.foreign "CGFontGetLeading" ((ptr CGFont.t) @-> returning int)
let _CGFontGetNumberOfGlyphs = Foreign.foreign "CGFontGetNumberOfGlyphs" ((ptr CGFont.t) @-> returning ullong)
let _CGFontGetStemV = Foreign.foreign "CGFontGetStemV" ((ptr CGFont.t) @-> returning double)
let _CGFontGetTypeID = Foreign.foreign "CGFontGetTypeID" (void @-> returning ullong)
let _CGFontGetUnitsPerEm = Foreign.foreign "CGFontGetUnitsPerEm" ((ptr CGFont.t) @-> returning int)
let _CGFontGetXHeight = Foreign.foreign "CGFontGetXHeight" ((ptr CGFont.t) @-> returning int)
let _CGFontRelease = Foreign.foreign "CGFontRelease" ((ptr CGFont.t) @-> returning void)
let _CGFontRetain = Foreign.foreign "CGFontRetain" ((ptr CGFont.t) @-> returning (ptr CGFont.t))
let _CGFunctionCreate = Foreign.foreign "CGFunctionCreate" ((ptr void) @-> ullong @-> (ptr double) @-> ullong @-> (ptr double) @-> (ptr CGFunctionCallbacks.t) @-> returning (ptr CGFunction.t))
let _CGFunctionGetTypeID = Foreign.foreign "CGFunctionGetTypeID" (void @-> returning ullong)
let _CGFunctionRelease = Foreign.foreign "CGFunctionRelease" ((ptr CGFunction.t) @-> returning void)
let _CGFunctionRetain = Foreign.foreign "CGFunctionRetain" ((ptr CGFunction.t) @-> returning (ptr CGFunction.t))
let _CGGetActiveDisplayList = Foreign.foreign "CGGetActiveDisplayList" (uint @-> (ptr uint) @-> (ptr uint) @-> returning int)
let _CGGetDisplayTransferByFormula = Foreign.foreign "CGGetDisplayTransferByFormula" (uint @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> returning int)
let _CGGetDisplayTransferByTable = Foreign.foreign "CGGetDisplayTransferByTable" (uint @-> uint @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> (ptr uint) @-> returning int)
let _CGGetDisplaysWithOpenGLDisplayMask = Foreign.foreign "CGGetDisplaysWithOpenGLDisplayMask" (uint @-> uint @-> (ptr uint) @-> (ptr uint) @-> returning int)
let _CGGetDisplaysWithPoint = Foreign.foreign "CGGetDisplaysWithPoint" (CGPoint.t @-> uint @-> (ptr uint) @-> (ptr uint) @-> returning int)
let _CGGetDisplaysWithRect = Foreign.foreign "CGGetDisplaysWithRect" (CGRect.t @-> uint @-> (ptr uint) @-> (ptr uint) @-> returning int)
let _CGGetEventTapList = Foreign.foreign "CGGetEventTapList" (uint @-> (ptr CGEventTapInformation.t) @-> (ptr uint) @-> returning int)
let _CGGetLastMouseDelta = Foreign.foreign "CGGetLastMouseDelta" ((ptr int) @-> (ptr int) @-> returning void)
let _CGGetOnlineDisplayList = Foreign.foreign "CGGetOnlineDisplayList" (uint @-> (ptr uint) @-> (ptr uint) @-> returning int)
let _CGGradientCreateWithColorComponents = Foreign.foreign "CGGradientCreateWithColorComponents" ((ptr CGColorSpace.t) @-> (ptr double) @-> (ptr double) @-> ullong @-> returning (ptr CGGradient.t))
let _CGGradientCreateWithColors = Foreign.foreign "CGGradientCreateWithColors" ((ptr CGColorSpace.t) @-> (ptr CFArray.t) @-> (ptr double) @-> returning (ptr CGGradient.t))
let _CGGradientGetTypeID = Foreign.foreign "CGGradientGetTypeID" (void @-> returning ullong)
let _CGGradientRelease = Foreign.foreign "CGGradientRelease" ((ptr CGGradient.t) @-> returning void)
let _CGGradientRetain = Foreign.foreign "CGGradientRetain" ((ptr CGGradient.t) @-> returning (ptr CGGradient.t))
let _CGImageCreate = Foreign.foreign "CGImageCreate" (ullong @-> ullong @-> ullong @-> ullong @-> ullong @-> (ptr CGColorSpace.t) @-> uint @-> (ptr CGDataProvider.t) @-> (ptr double) @-> bool @-> int @-> returning (ptr CGImage.t))
let _CGImageCreateCopy = Foreign.foreign "CGImageCreateCopy" ((ptr CGImage.t) @-> returning (ptr CGImage.t))
let _CGImageCreateCopyWithColorSpace = Foreign.foreign "CGImageCreateCopyWithColorSpace" ((ptr CGImage.t) @-> (ptr CGColorSpace.t) @-> returning (ptr CGImage.t))
let _CGImageCreateWithImageInRect = Foreign.foreign "CGImageCreateWithImageInRect" ((ptr CGImage.t) @-> CGRect.t @-> returning (ptr CGImage.t))
let _CGImageCreateWithJPEGDataProvider = Foreign.foreign "CGImageCreateWithJPEGDataProvider" ((ptr CGDataProvider.t) @-> (ptr double) @-> bool @-> int @-> returning (ptr CGImage.t))
let _CGImageCreateWithMask = Foreign.foreign "CGImageCreateWithMask" ((ptr CGImage.t) @-> (ptr CGImage.t) @-> returning (ptr CGImage.t))
let _CGImageCreateWithMaskingColors = Foreign.foreign "CGImageCreateWithMaskingColors" ((ptr CGImage.t) @-> (ptr double) @-> returning (ptr CGImage.t))
let _CGImageCreateWithPNGDataProvider = Foreign.foreign "CGImageCreateWithPNGDataProvider" ((ptr CGDataProvider.t) @-> (ptr double) @-> bool @-> int @-> returning (ptr CGImage.t))
let _CGImageGetAlphaInfo = Foreign.foreign "CGImageGetAlphaInfo" ((ptr CGImage.t) @-> returning uint)
let _CGImageGetBitmapInfo = Foreign.foreign "CGImageGetBitmapInfo" ((ptr CGImage.t) @-> returning uint)
let _CGImageGetBitsPerComponent = Foreign.foreign "CGImageGetBitsPerComponent" ((ptr CGImage.t) @-> returning ullong)
let _CGImageGetBitsPerPixel = Foreign.foreign "CGImageGetBitsPerPixel" ((ptr CGImage.t) @-> returning ullong)
let _CGImageGetByteOrderInfo = Foreign.foreign "CGImageGetByteOrderInfo" ((ptr CGImage.t) @-> returning uint)
let _CGImageGetBytesPerRow = Foreign.foreign "CGImageGetBytesPerRow" ((ptr CGImage.t) @-> returning ullong)
let _CGImageGetColorSpace = Foreign.foreign "CGImageGetColorSpace" ((ptr CGImage.t) @-> returning (ptr CGColorSpace.t))
let _CGImageGetDataProvider = Foreign.foreign "CGImageGetDataProvider" ((ptr CGImage.t) @-> returning (ptr CGDataProvider.t))
let _CGImageGetDecode = Foreign.foreign "CGImageGetDecode" ((ptr CGImage.t) @-> returning (ptr double))
let _CGImageGetHeight = Foreign.foreign "CGImageGetHeight" ((ptr CGImage.t) @-> returning ullong)
let _CGImageGetPixelFormatInfo = Foreign.foreign "CGImageGetPixelFormatInfo" ((ptr CGImage.t) @-> returning uint)
let _CGImageGetRenderingIntent = Foreign.foreign "CGImageGetRenderingIntent" ((ptr CGImage.t) @-> returning int)
let _CGImageGetShouldInterpolate = Foreign.foreign "CGImageGetShouldInterpolate" ((ptr CGImage.t) @-> returning bool)
let _CGImageGetTypeID = Foreign.foreign "CGImageGetTypeID" (void @-> returning ullong)
let _CGImageGetUTType = Foreign.foreign "CGImageGetUTType" ((ptr CGImage.t) @-> returning (ptr CFString.t))
let _CGImageGetWidth = Foreign.foreign "CGImageGetWidth" ((ptr CGImage.t) @-> returning ullong)
let _CGImageIsMask = Foreign.foreign "CGImageIsMask" ((ptr CGImage.t) @-> returning bool)
let _CGImageMaskCreate = Foreign.foreign "CGImageMaskCreate" (ullong @-> ullong @-> ullong @-> ullong @-> ullong @-> (ptr CGDataProvider.t) @-> (ptr double) @-> bool @-> returning (ptr CGImage.t))
let _CGImageRelease = Foreign.foreign "CGImageRelease" ((ptr CGImage.t) @-> returning void)
let _CGImageRetain = Foreign.foreign "CGImageRetain" ((ptr CGImage.t) @-> returning (ptr CGImage.t))
let _CGInhibitLocalEvents = Foreign.foreign "CGInhibitLocalEvents" (uint @-> returning int)
let _CGLayerCreateWithContext = Foreign.foreign "CGLayerCreateWithContext" ((ptr CGContext.t) @-> CGSize.t @-> (ptr CFDictionary.t) @-> returning (ptr CGLayer.t))
let _CGLayerGetContext = Foreign.foreign "CGLayerGetContext" ((ptr CGLayer.t) @-> returning (ptr CGContext.t))
let _CGLayerGetSize = Foreign.foreign "CGLayerGetSize" ((ptr CGLayer.t) @-> returning CGSize.t)
let _CGLayerGetTypeID = Foreign.foreign "CGLayerGetTypeID" (void @-> returning ullong)
let _CGLayerRelease = Foreign.foreign "CGLayerRelease" ((ptr CGLayer.t) @-> returning void)
let _CGLayerRetain = Foreign.foreign "CGLayerRetain" ((ptr CGLayer.t) @-> returning (ptr CGLayer.t))
let _CGMainDisplayID = Foreign.foreign "CGMainDisplayID" (void @-> returning uint)
let _CGOpenGLDisplayMaskToDisplayID = Foreign.foreign "CGOpenGLDisplayMaskToDisplayID" (uint @-> returning uint)
let _CGPDFArrayApplyBlock = Foreign.foreign "CGPDFArrayApplyBlock" ((ptr CGPDFArray.t) @-> Foreign.funptr (ullong @-> (ptr CGPDFObject.t) @-> (ptr void) @-> returning bool) @-> (ptr void) @-> returning void)
let _CGPDFArrayGetArray = Foreign.foreign "CGPDFArrayGetArray" ((ptr CGPDFArray.t) @-> ullong @-> (ptr (ptr CGPDFArray.t)) @-> returning bool)
let _CGPDFArrayGetBoolean = Foreign.foreign "CGPDFArrayGetBoolean" ((ptr CGPDFArray.t) @-> ullong @-> string @-> returning bool)
let _CGPDFArrayGetCount = Foreign.foreign "CGPDFArrayGetCount" ((ptr CGPDFArray.t) @-> returning ullong)
let _CGPDFArrayGetDictionary = Foreign.foreign "CGPDFArrayGetDictionary" ((ptr CGPDFArray.t) @-> ullong @-> (ptr (ptr CGPDFDictionary.t)) @-> returning bool)
let _CGPDFArrayGetInteger = Foreign.foreign "CGPDFArrayGetInteger" ((ptr CGPDFArray.t) @-> ullong @-> (ptr llong) @-> returning bool)
let _CGPDFArrayGetName = Foreign.foreign "CGPDFArrayGetName" ((ptr CGPDFArray.t) @-> ullong @-> (ptr string) @-> returning bool)
let _CGPDFArrayGetNull = Foreign.foreign "CGPDFArrayGetNull" ((ptr CGPDFArray.t) @-> ullong @-> returning bool)
let _CGPDFArrayGetNumber = Foreign.foreign "CGPDFArrayGetNumber" ((ptr CGPDFArray.t) @-> ullong @-> (ptr double) @-> returning bool)
let _CGPDFArrayGetObject = Foreign.foreign "CGPDFArrayGetObject" ((ptr CGPDFArray.t) @-> ullong @-> (ptr (ptr CGPDFObject.t)) @-> returning bool)
let _CGPDFArrayGetStream = Foreign.foreign "CGPDFArrayGetStream" ((ptr CGPDFArray.t) @-> ullong @-> (ptr (ptr CGPDFStream.t)) @-> returning bool)
let _CGPDFArrayGetString = Foreign.foreign "CGPDFArrayGetString" ((ptr CGPDFArray.t) @-> ullong @-> (ptr (ptr CGPDFString.t)) @-> returning bool)
let _CGPDFContentStreamCreateWithPage = Foreign.foreign "CGPDFContentStreamCreateWithPage" ((ptr CGPDFPage.t) @-> returning (ptr CGPDFContentStream.t))
let _CGPDFContentStreamCreateWithStream = Foreign.foreign "CGPDFContentStreamCreateWithStream" ((ptr CGPDFStream.t) @-> (ptr CGPDFDictionary.t) @-> (ptr CGPDFContentStream.t) @-> returning (ptr CGPDFContentStream.t))
let _CGPDFContentStreamGetResource = Foreign.foreign "CGPDFContentStreamGetResource" ((ptr CGPDFContentStream.t) @-> string @-> string @-> returning (ptr CGPDFObject.t))
let _CGPDFContentStreamGetStreams = Foreign.foreign "CGPDFContentStreamGetStreams" ((ptr CGPDFContentStream.t) @-> returning (ptr CFArray.t))
let _CGPDFContentStreamRelease = Foreign.foreign "CGPDFContentStreamRelease" ((ptr CGPDFContentStream.t) @-> returning void)
let _CGPDFContentStreamRetain = Foreign.foreign "CGPDFContentStreamRetain" ((ptr CGPDFContentStream.t) @-> returning (ptr CGPDFContentStream.t))
let _CGPDFContextAddDestinationAtPoint = Foreign.foreign "CGPDFContextAddDestinationAtPoint" ((ptr CGContext.t) @-> (ptr CFString.t) @-> CGPoint.t @-> returning void)
let _CGPDFContextAddDocumentMetadata = Foreign.foreign "CGPDFContextAddDocumentMetadata" ((ptr CGContext.t) @-> (ptr CFData.t) @-> returning void)
let _CGPDFContextBeginPage = Foreign.foreign "CGPDFContextBeginPage" ((ptr CGContext.t) @-> (ptr CFDictionary.t) @-> returning void)
let _CGPDFContextBeginTag = Foreign.foreign "CGPDFContextBeginTag" ((ptr CGContext.t) @-> int @-> (ptr CFDictionary.t) @-> returning void)
let _CGPDFContextClose = Foreign.foreign "CGPDFContextClose" ((ptr CGContext.t) @-> returning void)
let _CGPDFContextCreate = Foreign.foreign "CGPDFContextCreate" ((ptr CGDataConsumer.t) @-> (ptr CGRect.t) @-> (ptr CFDictionary.t) @-> returning (ptr CGContext.t))
let _CGPDFContextCreateWithURL = Foreign.foreign "CGPDFContextCreateWithURL" ((ptr CFURL.t) @-> (ptr CGRect.t) @-> (ptr CFDictionary.t) @-> returning (ptr CGContext.t))
let _CGPDFContextEndPage = Foreign.foreign "CGPDFContextEndPage" ((ptr CGContext.t) @-> returning void)
let _CGPDFContextEndTag = Foreign.foreign "CGPDFContextEndTag" ((ptr CGContext.t) @-> returning void)
let _CGPDFContextSetDestinationForRect = Foreign.foreign "CGPDFContextSetDestinationForRect" ((ptr CGContext.t) @-> (ptr CFString.t) @-> CGRect.t @-> returning void)
let _CGPDFContextSetOutline = Foreign.foreign "CGPDFContextSetOutline" ((ptr CGContext.t) @-> (ptr CFDictionary.t) @-> returning void)
let _CGPDFContextSetURLForRect = Foreign.foreign "CGPDFContextSetURLForRect" ((ptr CGContext.t) @-> (ptr CFURL.t) @-> CGRect.t @-> returning void)
let _CGPDFDictionaryApplyBlock = Foreign.foreign "CGPDFDictionaryApplyBlock" ((ptr CGPDFDictionary.t) @-> Foreign.funptr (string @-> (ptr CGPDFObject.t) @-> (ptr void) @-> returning bool) @-> (ptr void) @-> returning void)
let _CGPDFDictionaryApplyFunction = Foreign.foreign "CGPDFDictionaryApplyFunction" ((ptr CGPDFDictionary.t) @-> Foreign.funptr (string @-> (ptr CGPDFObject.t) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CGPDFDictionaryGetArray = Foreign.foreign "CGPDFDictionaryGetArray" ((ptr CGPDFDictionary.t) @-> string @-> (ptr (ptr CGPDFArray.t)) @-> returning bool)
let _CGPDFDictionaryGetBoolean = Foreign.foreign "CGPDFDictionaryGetBoolean" ((ptr CGPDFDictionary.t) @-> string @-> string @-> returning bool)
let _CGPDFDictionaryGetCount = Foreign.foreign "CGPDFDictionaryGetCount" ((ptr CGPDFDictionary.t) @-> returning ullong)
let _CGPDFDictionaryGetDictionary = Foreign.foreign "CGPDFDictionaryGetDictionary" ((ptr CGPDFDictionary.t) @-> string @-> (ptr (ptr CGPDFDictionary.t)) @-> returning bool)
let _CGPDFDictionaryGetInteger = Foreign.foreign "CGPDFDictionaryGetInteger" ((ptr CGPDFDictionary.t) @-> string @-> (ptr llong) @-> returning bool)
let _CGPDFDictionaryGetName = Foreign.foreign "CGPDFDictionaryGetName" ((ptr CGPDFDictionary.t) @-> string @-> (ptr string) @-> returning bool)
let _CGPDFDictionaryGetNumber = Foreign.foreign "CGPDFDictionaryGetNumber" ((ptr CGPDFDictionary.t) @-> string @-> (ptr double) @-> returning bool)
let _CGPDFDictionaryGetObject = Foreign.foreign "CGPDFDictionaryGetObject" ((ptr CGPDFDictionary.t) @-> string @-> (ptr (ptr CGPDFObject.t)) @-> returning bool)
let _CGPDFDictionaryGetStream = Foreign.foreign "CGPDFDictionaryGetStream" ((ptr CGPDFDictionary.t) @-> string @-> (ptr (ptr CGPDFStream.t)) @-> returning bool)
let _CGPDFDictionaryGetString = Foreign.foreign "CGPDFDictionaryGetString" ((ptr CGPDFDictionary.t) @-> string @-> (ptr (ptr CGPDFString.t)) @-> returning bool)
let _CGPDFDocumentAllowsCopying = Foreign.foreign "CGPDFDocumentAllowsCopying" ((ptr CGPDFDocument.t) @-> returning bool)
let _CGPDFDocumentAllowsPrinting = Foreign.foreign "CGPDFDocumentAllowsPrinting" ((ptr CGPDFDocument.t) @-> returning bool)
let _CGPDFDocumentCreateWithProvider = Foreign.foreign "CGPDFDocumentCreateWithProvider" ((ptr CGDataProvider.t) @-> returning (ptr CGPDFDocument.t))
let _CGPDFDocumentCreateWithURL = Foreign.foreign "CGPDFDocumentCreateWithURL" ((ptr CFURL.t) @-> returning (ptr CGPDFDocument.t))
let _CGPDFDocumentGetAccessPermissions = Foreign.foreign "CGPDFDocumentGetAccessPermissions" ((ptr CGPDFDocument.t) @-> returning uint)
let _CGPDFDocumentGetArtBox = Foreign.foreign "CGPDFDocumentGetArtBox" ((ptr CGPDFDocument.t) @-> int @-> returning CGRect.t)
let _CGPDFDocumentGetBleedBox = Foreign.foreign "CGPDFDocumentGetBleedBox" ((ptr CGPDFDocument.t) @-> int @-> returning CGRect.t)
let _CGPDFDocumentGetCatalog = Foreign.foreign "CGPDFDocumentGetCatalog" ((ptr CGPDFDocument.t) @-> returning (ptr CGPDFDictionary.t))
let _CGPDFDocumentGetCropBox = Foreign.foreign "CGPDFDocumentGetCropBox" ((ptr CGPDFDocument.t) @-> int @-> returning CGRect.t)
let _CGPDFDocumentGetID = Foreign.foreign "CGPDFDocumentGetID" ((ptr CGPDFDocument.t) @-> returning (ptr CGPDFArray.t))
let _CGPDFDocumentGetInfo = Foreign.foreign "CGPDFDocumentGetInfo" ((ptr CGPDFDocument.t) @-> returning (ptr CGPDFDictionary.t))
let _CGPDFDocumentGetMediaBox = Foreign.foreign "CGPDFDocumentGetMediaBox" ((ptr CGPDFDocument.t) @-> int @-> returning CGRect.t)
let _CGPDFDocumentGetNumberOfPages = Foreign.foreign "CGPDFDocumentGetNumberOfPages" ((ptr CGPDFDocument.t) @-> returning ullong)
let _CGPDFDocumentGetOutline = Foreign.foreign "CGPDFDocumentGetOutline" ((ptr CGPDFDocument.t) @-> returning (ptr CFDictionary.t))
let _CGPDFDocumentGetPage = Foreign.foreign "CGPDFDocumentGetPage" ((ptr CGPDFDocument.t) @-> ullong @-> returning (ptr CGPDFPage.t))
let _CGPDFDocumentGetRotationAngle = Foreign.foreign "CGPDFDocumentGetRotationAngle" ((ptr CGPDFDocument.t) @-> int @-> returning int)
let _CGPDFDocumentGetTrimBox = Foreign.foreign "CGPDFDocumentGetTrimBox" ((ptr CGPDFDocument.t) @-> int @-> returning CGRect.t)
let _CGPDFDocumentGetTypeID = Foreign.foreign "CGPDFDocumentGetTypeID" (void @-> returning ullong)
let _CGPDFDocumentGetVersion = Foreign.foreign "CGPDFDocumentGetVersion" ((ptr CGPDFDocument.t) @-> (ptr int) @-> (ptr int) @-> returning void)
let _CGPDFDocumentIsEncrypted = Foreign.foreign "CGPDFDocumentIsEncrypted" ((ptr CGPDFDocument.t) @-> returning bool)
let _CGPDFDocumentIsUnlocked = Foreign.foreign "CGPDFDocumentIsUnlocked" ((ptr CGPDFDocument.t) @-> returning bool)
let _CGPDFDocumentRelease = Foreign.foreign "CGPDFDocumentRelease" ((ptr CGPDFDocument.t) @-> returning void)
let _CGPDFDocumentRetain = Foreign.foreign "CGPDFDocumentRetain" ((ptr CGPDFDocument.t) @-> returning (ptr CGPDFDocument.t))
let _CGPDFDocumentUnlockWithPassword = Foreign.foreign "CGPDFDocumentUnlockWithPassword" ((ptr CGPDFDocument.t) @-> string @-> returning bool)
let _CGPDFObjectGetType = Foreign.foreign "CGPDFObjectGetType" ((ptr CGPDFObject.t) @-> returning int)
let _CGPDFObjectGetValue = Foreign.foreign "CGPDFObjectGetValue" ((ptr CGPDFObject.t) @-> int @-> (ptr void) @-> returning bool)
let _CGPDFOperatorTableCreate = Foreign.foreign "CGPDFOperatorTableCreate" (void @-> returning (ptr CGPDFOperatorTable.t))
let _CGPDFOperatorTableRelease = Foreign.foreign "CGPDFOperatorTableRelease" ((ptr CGPDFOperatorTable.t) @-> returning void)
let _CGPDFOperatorTableRetain = Foreign.foreign "CGPDFOperatorTableRetain" ((ptr CGPDFOperatorTable.t) @-> returning (ptr CGPDFOperatorTable.t))
let _CGPDFOperatorTableSetCallback = Foreign.foreign "CGPDFOperatorTableSetCallback" ((ptr CGPDFOperatorTable.t) @-> string @-> Foreign.funptr ((ptr CGPDFScanner.t) @-> (ptr void) @-> returning void) @-> returning void)
let _CGPDFPageGetBoxRect = Foreign.foreign "CGPDFPageGetBoxRect" ((ptr CGPDFPage.t) @-> int @-> returning CGRect.t)
let _CGPDFPageGetDictionary = Foreign.foreign "CGPDFPageGetDictionary" ((ptr CGPDFPage.t) @-> returning (ptr CGPDFDictionary.t))
let _CGPDFPageGetDocument = Foreign.foreign "CGPDFPageGetDocument" ((ptr CGPDFPage.t) @-> returning (ptr CGPDFDocument.t))
let _CGPDFPageGetDrawingTransform = Foreign.foreign "CGPDFPageGetDrawingTransform" ((ptr CGPDFPage.t) @-> int @-> CGRect.t @-> int @-> bool @-> returning CGAffineTransform.t)
let _CGPDFPageGetPageNumber = Foreign.foreign "CGPDFPageGetPageNumber" ((ptr CGPDFPage.t) @-> returning ullong)
let _CGPDFPageGetRotationAngle = Foreign.foreign "CGPDFPageGetRotationAngle" ((ptr CGPDFPage.t) @-> returning int)
let _CGPDFPageGetTypeID = Foreign.foreign "CGPDFPageGetTypeID" (void @-> returning ullong)
let _CGPDFPageRelease = Foreign.foreign "CGPDFPageRelease" ((ptr CGPDFPage.t) @-> returning void)
let _CGPDFPageRetain = Foreign.foreign "CGPDFPageRetain" ((ptr CGPDFPage.t) @-> returning (ptr CGPDFPage.t))
let _CGPDFScannerCreate = Foreign.foreign "CGPDFScannerCreate" ((ptr CGPDFContentStream.t) @-> (ptr CGPDFOperatorTable.t) @-> (ptr void) @-> returning (ptr CGPDFScanner.t))
let _CGPDFScannerGetContentStream = Foreign.foreign "CGPDFScannerGetContentStream" ((ptr CGPDFScanner.t) @-> returning (ptr CGPDFContentStream.t))
let _CGPDFScannerPopArray = Foreign.foreign "CGPDFScannerPopArray" ((ptr CGPDFScanner.t) @-> (ptr (ptr CGPDFArray.t)) @-> returning bool)
let _CGPDFScannerPopBoolean = Foreign.foreign "CGPDFScannerPopBoolean" ((ptr CGPDFScanner.t) @-> string @-> returning bool)
let _CGPDFScannerPopDictionary = Foreign.foreign "CGPDFScannerPopDictionary" ((ptr CGPDFScanner.t) @-> (ptr (ptr CGPDFDictionary.t)) @-> returning bool)
let _CGPDFScannerPopInteger = Foreign.foreign "CGPDFScannerPopInteger" ((ptr CGPDFScanner.t) @-> (ptr llong) @-> returning bool)
let _CGPDFScannerPopName = Foreign.foreign "CGPDFScannerPopName" ((ptr CGPDFScanner.t) @-> (ptr string) @-> returning bool)
let _CGPDFScannerPopNumber = Foreign.foreign "CGPDFScannerPopNumber" ((ptr CGPDFScanner.t) @-> (ptr double) @-> returning bool)
let _CGPDFScannerPopObject = Foreign.foreign "CGPDFScannerPopObject" ((ptr CGPDFScanner.t) @-> (ptr (ptr CGPDFObject.t)) @-> returning bool)
let _CGPDFScannerPopStream = Foreign.foreign "CGPDFScannerPopStream" ((ptr CGPDFScanner.t) @-> (ptr (ptr CGPDFStream.t)) @-> returning bool)
let _CGPDFScannerPopString = Foreign.foreign "CGPDFScannerPopString" ((ptr CGPDFScanner.t) @-> (ptr (ptr CGPDFString.t)) @-> returning bool)
let _CGPDFScannerRelease = Foreign.foreign "CGPDFScannerRelease" ((ptr CGPDFScanner.t) @-> returning void)
let _CGPDFScannerRetain = Foreign.foreign "CGPDFScannerRetain" ((ptr CGPDFScanner.t) @-> returning (ptr CGPDFScanner.t))
let _CGPDFScannerScan = Foreign.foreign "CGPDFScannerScan" ((ptr CGPDFScanner.t) @-> returning bool)
let _CGPDFStreamCopyData = Foreign.foreign "CGPDFStreamCopyData" ((ptr CGPDFStream.t) @-> (ptr int) @-> returning (ptr CFData.t))
let _CGPDFStreamGetDictionary = Foreign.foreign "CGPDFStreamGetDictionary" ((ptr CGPDFStream.t) @-> returning (ptr CGPDFDictionary.t))
let _CGPDFStringCopyDate = Foreign.foreign "CGPDFStringCopyDate" ((ptr CGPDFString.t) @-> returning (ptr CFDate.t))
let _CGPDFStringCopyTextString = Foreign.foreign "CGPDFStringCopyTextString" ((ptr CGPDFString.t) @-> returning (ptr CFString.t))
let _CGPDFStringGetBytePtr = Foreign.foreign "CGPDFStringGetBytePtr" ((ptr CGPDFString.t) @-> returning string)
let _CGPDFStringGetLength = Foreign.foreign "CGPDFStringGetLength" ((ptr CGPDFString.t) @-> returning ullong)
let _CGPDFTagTypeGetName = Foreign.foreign "CGPDFTagTypeGetName" (int @-> returning string)
let _CGPSConverterAbort = Foreign.foreign "CGPSConverterAbort" ((ptr CGPSConverter.t) @-> returning bool)
let _CGPSConverterConvert = Foreign.foreign "CGPSConverterConvert" ((ptr CGPSConverter.t) @-> (ptr CGDataProvider.t) @-> (ptr CGDataConsumer.t) @-> (ptr CFDictionary.t) @-> returning bool)
let _CGPSConverterCreate = Foreign.foreign "CGPSConverterCreate" ((ptr void) @-> (ptr CGPSConverterCallbacks.t) @-> (ptr CFDictionary.t) @-> returning (ptr CGPSConverter.t))
let _CGPSConverterGetTypeID = Foreign.foreign "CGPSConverterGetTypeID" (void @-> returning ullong)
let _CGPSConverterIsConverting = Foreign.foreign "CGPSConverterIsConverting" ((ptr CGPSConverter.t) @-> returning bool)
let _CGPathAddArc = Foreign.foreign "CGPathAddArc" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> double @-> double @-> double @-> double @-> bool @-> returning void)
let _CGPathAddArcToPoint = Foreign.foreign "CGPathAddArcToPoint" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> double @-> double @-> double @-> double @-> returning void)
let _CGPathAddCurveToPoint = Foreign.foreign "CGPathAddCurveToPoint" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> double @-> double @-> double @-> double @-> double @-> returning void)
let _CGPathAddEllipseInRect = Foreign.foreign "CGPathAddEllipseInRect" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> CGRect.t @-> returning void)
let _CGPathAddLineToPoint = Foreign.foreign "CGPathAddLineToPoint" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> double @-> returning void)
let _CGPathAddLines = Foreign.foreign "CGPathAddLines" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> (ptr CGPoint.t) @-> ullong @-> returning void)
let _CGPathAddPath = Foreign.foreign "CGPathAddPath" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> (ptr CGPath.t) @-> returning void)
let _CGPathAddQuadCurveToPoint = Foreign.foreign "CGPathAddQuadCurveToPoint" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> double @-> double @-> double @-> returning void)
let _CGPathAddRect = Foreign.foreign "CGPathAddRect" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> CGRect.t @-> returning void)
let _CGPathAddRects = Foreign.foreign "CGPathAddRects" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> (ptr CGRect.t) @-> ullong @-> returning void)
let _CGPathAddRelativeArc = Foreign.foreign "CGPathAddRelativeArc" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> double @-> double @-> double @-> double @-> returning void)
let _CGPathAddRoundedRect = Foreign.foreign "CGPathAddRoundedRect" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> CGRect.t @-> double @-> double @-> returning void)
let _CGPathApply = Foreign.foreign "CGPathApply" ((ptr CGPath.t) @-> (ptr void) @-> Foreign.funptr ((ptr void) @-> (ptr CGPathElement.t) @-> returning void) @-> returning void)
let _CGPathApplyWithBlock = Foreign.foreign "CGPathApplyWithBlock" ((ptr CGPath.t) @-> Foreign.funptr ((ptr CGPathElement.t) @-> returning void) @-> returning void)
let _CGPathCloseSubpath = Foreign.foreign "CGPathCloseSubpath" ((ptr CGPath.t) @-> returning void)
let _CGPathContainsPoint = Foreign.foreign "CGPathContainsPoint" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> CGPoint.t @-> bool @-> returning bool)
let _CGPathCreateCopy = Foreign.foreign "CGPathCreateCopy" ((ptr CGPath.t) @-> returning (ptr CGPath.t))
let _CGPathCreateCopyByDashingPath = Foreign.foreign "CGPathCreateCopyByDashingPath" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> (ptr double) @-> ullong @-> returning (ptr CGPath.t))
let _CGPathCreateCopyByStrokingPath = Foreign.foreign "CGPathCreateCopyByStrokingPath" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> int @-> int @-> double @-> returning (ptr CGPath.t))
let _CGPathCreateCopyByTransformingPath = Foreign.foreign "CGPathCreateCopyByTransformingPath" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> returning (ptr CGPath.t))
let _CGPathCreateMutable = Foreign.foreign "CGPathCreateMutable" (void @-> returning (ptr CGPath.t))
let _CGPathCreateMutableCopy = Foreign.foreign "CGPathCreateMutableCopy" ((ptr CGPath.t) @-> returning (ptr CGPath.t))
let _CGPathCreateMutableCopyByTransformingPath = Foreign.foreign "CGPathCreateMutableCopyByTransformingPath" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> returning (ptr CGPath.t))
let _CGPathCreateWithEllipseInRect = Foreign.foreign "CGPathCreateWithEllipseInRect" (CGRect.t @-> (ptr CGAffineTransform.t) @-> returning (ptr CGPath.t))
let _CGPathCreateWithRect = Foreign.foreign "CGPathCreateWithRect" (CGRect.t @-> (ptr CGAffineTransform.t) @-> returning (ptr CGPath.t))
let _CGPathCreateWithRoundedRect = Foreign.foreign "CGPathCreateWithRoundedRect" (CGRect.t @-> double @-> double @-> (ptr CGAffineTransform.t) @-> returning (ptr CGPath.t))
let _CGPathEqualToPath = Foreign.foreign "CGPathEqualToPath" ((ptr CGPath.t) @-> (ptr CGPath.t) @-> returning bool)
let _CGPathGetBoundingBox = Foreign.foreign "CGPathGetBoundingBox" ((ptr CGPath.t) @-> returning CGRect.t)
let _CGPathGetCurrentPoint = Foreign.foreign "CGPathGetCurrentPoint" ((ptr CGPath.t) @-> returning CGPoint.t)
let _CGPathGetPathBoundingBox = Foreign.foreign "CGPathGetPathBoundingBox" ((ptr CGPath.t) @-> returning CGRect.t)
let _CGPathGetTypeID = Foreign.foreign "CGPathGetTypeID" (void @-> returning ullong)
let _CGPathIsEmpty = Foreign.foreign "CGPathIsEmpty" ((ptr CGPath.t) @-> returning bool)
let _CGPathIsRect = Foreign.foreign "CGPathIsRect" ((ptr CGPath.t) @-> (ptr CGRect.t) @-> returning bool)
let _CGPathMoveToPoint = Foreign.foreign "CGPathMoveToPoint" ((ptr CGPath.t) @-> (ptr CGAffineTransform.t) @-> double @-> double @-> returning void)
let _CGPathRelease = Foreign.foreign "CGPathRelease" ((ptr CGPath.t) @-> returning void)
let _CGPathRetain = Foreign.foreign "CGPathRetain" ((ptr CGPath.t) @-> returning (ptr CGPath.t))
let _CGPatternCreate = Foreign.foreign "CGPatternCreate" ((ptr void) @-> CGRect.t @-> CGAffineTransform.t @-> double @-> double @-> int @-> bool @-> (ptr CGPatternCallbacks.t) @-> returning (ptr CGPattern.t))
let _CGPatternGetTypeID = Foreign.foreign "CGPatternGetTypeID" (void @-> returning ullong)
let _CGPatternRelease = Foreign.foreign "CGPatternRelease" ((ptr CGPattern.t) @-> returning void)
let _CGPatternRetain = Foreign.foreign "CGPatternRetain" ((ptr CGPattern.t) @-> returning (ptr CGPattern.t))
let _CGPointApplyAffineTransform = Foreign.foreign "CGPointApplyAffineTransform" (CGPoint.t @-> CGAffineTransform.t @-> returning CGPoint.t)
let _CGPointCreateDictionaryRepresentation = Foreign.foreign "CGPointCreateDictionaryRepresentation" (CGPoint.t @-> returning (ptr CFDictionary.t))
let _CGPointEqualToPoint = Foreign.foreign "CGPointEqualToPoint" (CGPoint.t @-> CGPoint.t @-> returning bool)
(* let _CGPointMake = Foreign.foreign "Camlkit_CGPointMake" (double @-> double @-> returning CGPoint.t) *)
let _CGPointMakeWithDictionaryRepresentation = Foreign.foreign "CGPointMakeWithDictionaryRepresentation" ((ptr CFDictionary.t) @-> (ptr CGPoint.t) @-> returning bool)
let _CGPostKeyboardEvent = Foreign.foreign "CGPostKeyboardEvent" (ushort @-> ushort @-> uint @-> returning int)
let _CGPostMouseEvent = Foreign.foreign "CGPostMouseEvent" (CGPoint.t @-> uint @-> uint @-> uint @-> returning int)
let _CGPostScrollWheelEvent = Foreign.foreign "CGPostScrollWheelEvent" (uint @-> int @-> returning int)
let _CGPreflightListenEventAccess = Foreign.foreign "CGPreflightListenEventAccess" (void @-> returning bool)
let _CGPreflightPostEventAccess = Foreign.foreign "CGPreflightPostEventAccess" (void @-> returning bool)
let _CGPreflightScreenCaptureAccess = Foreign.foreign "CGPreflightScreenCaptureAccess" (void @-> returning bool)
let _CGRectApplyAffineTransform = Foreign.foreign "CGRectApplyAffineTransform" (CGRect.t @-> CGAffineTransform.t @-> returning CGRect.t)
let _CGRectContainsPoint = Foreign.foreign "CGRectContainsPoint" (CGRect.t @-> CGPoint.t @-> returning bool)
let _CGRectContainsRect = Foreign.foreign "CGRectContainsRect" (CGRect.t @-> CGRect.t @-> returning bool)
let _CGRectCreateDictionaryRepresentation = Foreign.foreign "CGRectCreateDictionaryRepresentation" (CGRect.t @-> returning (ptr CFDictionary.t))
let _CGRectDivide = Foreign.foreign "CGRectDivide" (CGRect.t @-> (ptr CGRect.t) @-> (ptr CGRect.t) @-> double @-> uint @-> returning void)
let _CGRectEqualToRect = Foreign.foreign "CGRectEqualToRect" (CGRect.t @-> CGRect.t @-> returning bool)
let _CGRectGetHeight = Foreign.foreign "CGRectGetHeight" (CGRect.t @-> returning double)
let _CGRectGetMaxX = Foreign.foreign "CGRectGetMaxX" (CGRect.t @-> returning double)
let _CGRectGetMaxY = Foreign.foreign "CGRectGetMaxY" (CGRect.t @-> returning double)
let _CGRectGetMidX = Foreign.foreign "CGRectGetMidX" (CGRect.t @-> returning double)
let _CGRectGetMidY = Foreign.foreign "CGRectGetMidY" (CGRect.t @-> returning double)
let _CGRectGetMinX = Foreign.foreign "CGRectGetMinX" (CGRect.t @-> returning double)
let _CGRectGetMinY = Foreign.foreign "CGRectGetMinY" (CGRect.t @-> returning double)
let _CGRectGetWidth = Foreign.foreign "CGRectGetWidth" (CGRect.t @-> returning double)
let _CGRectInset = Foreign.foreign "CGRectInset" (CGRect.t @-> double @-> double @-> returning CGRect.t)
let _CGRectIntegral = Foreign.foreign "CGRectIntegral" (CGRect.t @-> returning CGRect.t)
let _CGRectIntersection = Foreign.foreign "CGRectIntersection" (CGRect.t @-> CGRect.t @-> returning CGRect.t)
let _CGRectIntersectsRect = Foreign.foreign "CGRectIntersectsRect" (CGRect.t @-> CGRect.t @-> returning bool)
let _CGRectIsEmpty = Foreign.foreign "CGRectIsEmpty" (CGRect.t @-> returning bool)
let _CGRectIsInfinite = Foreign.foreign "CGRectIsInfinite" (CGRect.t @-> returning bool)
let _CGRectIsNull = Foreign.foreign "CGRectIsNull" (CGRect.t @-> returning bool)
(* let _CGRectMake = Foreign.foreign "Camlkit_CGRectMake" (double @-> double @-> double @-> double @-> returning CGRect.t) *)
let _CGRectMakeWithDictionaryRepresentation = Foreign.foreign "CGRectMakeWithDictionaryRepresentation" ((ptr CFDictionary.t) @-> (ptr CGRect.t) @-> returning bool)
let _CGRectOffset = Foreign.foreign "CGRectOffset" (CGRect.t @-> double @-> double @-> returning CGRect.t)
let _CGRectStandardize = Foreign.foreign "CGRectStandardize" (CGRect.t @-> returning CGRect.t)
let _CGRectUnion = Foreign.foreign "CGRectUnion" (CGRect.t @-> CGRect.t @-> returning CGRect.t)
let _CGRegisterScreenRefreshCallback = Foreign.foreign "CGRegisterScreenRefreshCallback" (Foreign.funptr (uint @-> (ptr CGRect.t) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning int)
let _CGReleaseAllDisplays = Foreign.foreign "CGReleaseAllDisplays" (void @-> returning int)
let _CGReleaseDisplayFadeReservation = Foreign.foreign "CGReleaseDisplayFadeReservation" (uint @-> returning int)
let _CGReleaseScreenRefreshRects = Foreign.foreign "CGReleaseScreenRefreshRects" ((ptr CGRect.t) @-> returning void)
let _CGRequestListenEventAccess = Foreign.foreign "CGRequestListenEventAccess" (void @-> returning bool)
let _CGRequestPostEventAccess = Foreign.foreign "CGRequestPostEventAccess" (void @-> returning bool)
let _CGRequestScreenCaptureAccess = Foreign.foreign "CGRequestScreenCaptureAccess" (void @-> returning bool)
let _CGRestorePermanentDisplayConfiguration = Foreign.foreign "CGRestorePermanentDisplayConfiguration" (void @-> returning void)
let _CGScreenRegisterMoveCallback = Foreign.foreign "CGScreenRegisterMoveCallback" (Foreign.funptr (CGScreenUpdateMoveDelta.t @-> ullong @-> (ptr CGRect.t) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning int)
let _CGScreenUnregisterMoveCallback = Foreign.foreign "CGScreenUnregisterMoveCallback" (Foreign.funptr (CGScreenUpdateMoveDelta.t @-> ullong @-> (ptr CGRect.t) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
let _CGSessionCopyCurrentDictionary = Foreign.foreign "CGSessionCopyCurrentDictionary" (void @-> returning (ptr CFDictionary.t))
let _CGSetDisplayTransferByByteTable = Foreign.foreign "CGSetDisplayTransferByByteTable" (uint @-> uint @-> string @-> string @-> string @-> returning int)
let _CGSetDisplayTransferByFormula = Foreign.foreign "CGSetDisplayTransferByFormula" (uint @-> float @-> float @-> float @-> float @-> float @-> float @-> float @-> float @-> float @-> returning int)
let _CGSetDisplayTransferByTable = Foreign.foreign "CGSetDisplayTransferByTable" (uint @-> uint @-> (ptr float) @-> (ptr float) @-> (ptr float) @-> returning int)
let _CGSetLocalEventsFilterDuringSuppressionState = Foreign.foreign "CGSetLocalEventsFilterDuringSuppressionState" (uint @-> uint @-> returning int)
let _CGSetLocalEventsSuppressionInterval = Foreign.foreign "CGSetLocalEventsSuppressionInterval" (double @-> returning int)
let _CGShadingCreateAxial = Foreign.foreign "CGShadingCreateAxial" ((ptr CGColorSpace.t) @-> CGPoint.t @-> CGPoint.t @-> (ptr CGFunction.t) @-> bool @-> bool @-> returning (ptr CGShading.t))
let _CGShadingCreateRadial = Foreign.foreign "CGShadingCreateRadial" ((ptr CGColorSpace.t) @-> CGPoint.t @-> double @-> CGPoint.t @-> double @-> (ptr CGFunction.t) @-> bool @-> bool @-> returning (ptr CGShading.t))
let _CGShadingGetTypeID = Foreign.foreign "CGShadingGetTypeID" (void @-> returning ullong)
let _CGShadingRelease = Foreign.foreign "CGShadingRelease" ((ptr CGShading.t) @-> returning void)
let _CGShadingRetain = Foreign.foreign "CGShadingRetain" ((ptr CGShading.t) @-> returning (ptr CGShading.t))
let _CGShieldingWindowID = Foreign.foreign "CGShieldingWindowID" (uint @-> returning uint)
let _CGShieldingWindowLevel = Foreign.foreign "CGShieldingWindowLevel" (void @-> returning int)
let _CGSizeApplyAffineTransform = Foreign.foreign "CGSizeApplyAffineTransform" (CGSize.t @-> CGAffineTransform.t @-> returning CGSize.t)
let _CGSizeCreateDictionaryRepresentation = Foreign.foreign "CGSizeCreateDictionaryRepresentation" (CGSize.t @-> returning (ptr CFDictionary.t))
let _CGSizeEqualToSize = Foreign.foreign "CGSizeEqualToSize" (CGSize.t @-> CGSize.t @-> returning bool)
(* let _CGSizeMake = Foreign.foreign "Camlkit_CGSizeMake" (double @-> double @-> returning CGSize.t) *)
let _CGSizeMakeWithDictionaryRepresentation = Foreign.foreign "CGSizeMakeWithDictionaryRepresentation" ((ptr CFDictionary.t) @-> (ptr CGSize.t) @-> returning bool)
let _CGUnregisterScreenRefreshCallback = Foreign.foreign "CGUnregisterScreenRefreshCallback" (Foreign.funptr (uint @-> (ptr CGRect.t) @-> (ptr void) @-> returning void) @-> (ptr void) @-> returning void)
(* let _CGVectorMake = Foreign.foreign "Camlkit_CGVectorMake" (double @-> double @-> returning CGVector.t) *)
let _CGWaitForScreenRefreshRects = Foreign.foreign "CGWaitForScreenRefreshRects" ((ptr (ptr CGRect.t)) @-> (ptr uint) @-> returning int)
let _CGWaitForScreenUpdateRects = Foreign.foreign "CGWaitForScreenUpdateRects" (uint @-> (ptr uint) @-> (ptr (ptr CGRect.t)) @-> (ptr ullong) @-> (ptr CGScreenUpdateMoveDelta.t) @-> returning int)
let _CGWarpMouseCursorPosition = Foreign.foreign "CGWarpMouseCursorPosition" (CGPoint.t @-> returning int)
let _CGWindowLevelForKey = Foreign.foreign "CGWindowLevelForKey" (int @-> returning int)
let _CGWindowListCopyWindowInfo = Foreign.foreign "CGWindowListCopyWindowInfo" (uint @-> uint @-> returning (ptr CFArray.t))
let _CGWindowListCreate = Foreign.foreign "CGWindowListCreate" (uint @-> uint @-> returning (ptr CFArray.t))
let _CGWindowListCreateDescriptionFromArray = Foreign.foreign "CGWindowListCreateDescriptionFromArray" ((ptr CFArray.t) @-> returning (ptr CFArray.t))
let _CGWindowListCreateImage = Foreign.foreign "CGWindowListCreateImage" (CGRect.t @-> uint @-> uint @-> uint @-> returning (ptr CGImage.t))
let _CGWindowListCreateImageFromArray = Foreign.foreign "CGWindowListCreateImageFromArray" (CGRect.t @-> (ptr CFArray.t) @-> uint @-> returning (ptr CGImage.t))
let _CGWindowServerCFMachPort = Foreign.foreign "CGWindowServerCFMachPort" (void @-> returning (ptr CFMachPort.t))
let _CGWindowServerCreateServerPort = Foreign.foreign "CGWindowServerCreateServerPort" (void @-> returning (ptr CFMachPort.t))
