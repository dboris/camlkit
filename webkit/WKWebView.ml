(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "WKWebView"

module Class = struct
  let automaticallyNotifiesObserversOfUnderPageBackgroundColor self = msg_send ~self ~cmd:(selector "automaticallyNotifiesObserversOfUnderPageBackgroundColor") ~typ:(returning (bool))
  let handlesURLScheme x self = msg_send ~self ~cmd:(selector "handlesURLScheme:") ~typ:(id @-> returning (bool)) x
end

let _UIDelegate self = msg_send ~self ~cmd:(selector "UIDelegate") ~typ:(returning (id))
let _URL self = msg_send ~self ~cmd:(selector "URL") ~typ:(returning (id))
let allowsBackForwardNavigationGestures self = msg_send ~self ~cmd:(selector "allowsBackForwardNavigationGestures") ~typ:(returning (bool))
let allowsLinkPreview self = msg_send ~self ~cmd:(selector "allowsLinkPreview") ~typ:(returning (bool))
let applyAutocorrection x ~toString ~withCompletionHandler self = msg_send ~self ~cmd:(selector "applyAutocorrection:toString:withCompletionHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x toString withCompletionHandler
let backForwardList self = msg_send ~self ~cmd:(selector "backForwardList") ~typ:(returning (id))
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning (bool))
let browsingContextController self = msg_send ~self ~cmd:(selector "browsingContextController") ~typ:(returning (id))
let callAsyncJavaScript x ~arguments ~inFrame ~inContentWorld ~completionHandler self = msg_send ~self ~cmd:(selector "callAsyncJavaScript:arguments:inFrame:inContentWorld:completionHandler:") ~typ:(id @-> id @-> id @-> id @-> ptr void @-> returning (void)) x arguments inFrame inContentWorld completionHandler
let cameraCaptureState self = msg_send ~self ~cmd:(selector "cameraCaptureState") ~typ:(returning (llong))
let canBecomeFirstResponder self = msg_send ~self ~cmd:(selector "canBecomeFirstResponder") ~typ:(returning (bool))
let canGoBack self = msg_send ~self ~cmd:(selector "canGoBack") ~typ:(returning (bool))
let canGoForward self = msg_send ~self ~cmd:(selector "canGoForward") ~typ:(returning (bool))
let canPerformAction x ~withSender self = msg_send ~self ~cmd:(selector "canPerformAction:withSender:") ~typ:(_SEL @-> id @-> returning (bool)) x withSender
let captureTextFromCamera x self = msg_send ~self ~cmd:(selector "captureTextFromCamera:") ~typ:(id @-> returning (void)) x
let certificateChain self = msg_send ~self ~cmd:(selector "certificateChain") ~typ:(returning (id))
let closeAllMediaPresentations self = msg_send ~self ~cmd:(selector "closeAllMediaPresentations") ~typ:(returning (void))
let closeAllMediaPresentations' x self = msg_send ~self ~cmd:(selector "closeAllMediaPresentations:") ~typ:(ptr void @-> returning (void)) x
let closeAllMediaPresentationsWithCompletionHandler x self = msg_send ~self ~cmd:(selector "closeAllMediaPresentationsWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let configuration self = msg_send ~self ~cmd:(selector "configuration") ~typ:(returning (id))
let copy x self = msg_send ~self ~cmd:(selector "copy:") ~typ:(id @-> returning (void)) x
let createPDFWithConfiguration x ~completionHandler self = msg_send ~self ~cmd:(selector "createPDFWithConfiguration:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let createWebArchiveDataWithCompletionHandler x self = msg_send ~self ~cmd:(selector "createWebArchiveDataWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let customUserAgent self = msg_send ~self ~cmd:(selector "customUserAgent") ~typ:(returning (id))
let cut x self = msg_send ~self ~cmd:(selector "cut:") ~typ:(id @-> returning (void)) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let decreaseSize x self = msg_send ~self ~cmd:(selector "decreaseSize:") ~typ:(id @-> returning (void)) x
let didEndFormControlInteraction self = msg_send ~self ~cmd:(selector "didEndFormControlInteraction") ~typ:(returning (void))
let didMoveToWindow self = msg_send ~self ~cmd:(selector "didMoveToWindow") ~typ:(returning (void))
let didStartFormControlInteraction self = msg_send ~self ~cmd:(selector "didStartFormControlInteraction") ~typ:(returning (void))
let dismissFormAccessoryView self = msg_send ~self ~cmd:(selector "dismissFormAccessoryView") ~typ:(returning (void))
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let estimatedProgress self = msg_send ~self ~cmd:(selector "estimatedProgress") ~typ:(returning (double))
let evaluateJavaScript x ~completionHandler self = msg_send ~self ~cmd:(selector "evaluateJavaScript:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let evaluateJavaScript' x ~inFrame ~inContentWorld ~completionHandler self = msg_send ~self ~cmd:(selector "evaluateJavaScript:inFrame:inContentWorld:completionHandler:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x inFrame inContentWorld completionHandler
let findString x ~withConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "findString:withConfiguration:completionHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x withConfiguration completionHandler
let formInputLabel self = msg_send ~self ~cmd:(selector "formInputLabel") ~typ:(returning (id))
let fullscreenState self = msg_send ~self ~cmd:(selector "fullscreenState") ~typ:(returning (llong))
let goBack self = msg_send ~self ~cmd:(selector "goBack") ~typ:(returning (id))
let goForward self = msg_send ~self ~cmd:(selector "goForward") ~typ:(returning (id))
let goToBackForwardListItem x self = msg_send ~self ~cmd:(selector "goToBackForwardListItem:") ~typ:(id @-> returning (id)) x
let hasOnlySecureContent self = msg_send ~self ~cmd:(selector "hasOnlySecureContent") ~typ:(returning (bool))
let increaseSize x self = msg_send ~self ~cmd:(selector "increaseSize:") ~typ:(id @-> returning (void)) x
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning (id)) x
let initWithFrame' x ~configuration self = msg_send ~self ~cmd:(selector "initWithFrame:configuration:") ~typ:(CGRect.t @-> id @-> returning (id)) x configuration
let inputAccessoryView self = msg_send ~self ~cmd:(selector "inputAccessoryView") ~typ:(returning (id))
let inputAssistantItem self = msg_send ~self ~cmd:(selector "inputAssistantItem") ~typ:(returning (id))
let inputView self = msg_send ~self ~cmd:(selector "inputView") ~typ:(returning (id))
let interactionState self = msg_send ~self ~cmd:(selector "interactionState") ~typ:(returning (id))
let isLoading self = msg_send ~self ~cmd:(selector "isLoading") ~typ:(returning (bool))
let keyboardAccessoryBarNext self = msg_send ~self ~cmd:(selector "keyboardAccessoryBarNext") ~typ:(returning (void))
let keyboardAccessoryBarPrevious self = msg_send ~self ~cmd:(selector "keyboardAccessoryBarPrevious") ~typ:(returning (void))
let layoutSubviews self = msg_send ~self ~cmd:(selector "layoutSubviews") ~typ:(returning (void))
let loadData x ~_MIMEType ~characterEncodingName ~baseURL self = msg_send ~self ~cmd:(selector "loadData:MIMEType:characterEncodingName:baseURL:") ~typ:(id @-> id @-> id @-> id @-> returning (id)) x _MIMEType characterEncodingName baseURL
let loadFileRequest x ~allowingReadAccessToURL self = msg_send ~self ~cmd:(selector "loadFileRequest:allowingReadAccessToURL:") ~typ:(id @-> id @-> returning (id)) x allowingReadAccessToURL
let loadFileURL x ~allowingReadAccessToURL self = msg_send ~self ~cmd:(selector "loadFileURL:allowingReadAccessToURL:") ~typ:(id @-> id @-> returning (id)) x allowingReadAccessToURL
let loadHTMLString x ~baseURL self = msg_send ~self ~cmd:(selector "loadHTMLString:baseURL:") ~typ:(id @-> id @-> returning (id)) x baseURL
let loadRequest x self = msg_send ~self ~cmd:(selector "loadRequest:") ~typ:(id @-> returning (id)) x
let loadSimulatedRequest x ~responseHTMLString self = msg_send ~self ~cmd:(selector "loadSimulatedRequest:responseHTMLString:") ~typ:(id @-> id @-> returning (id)) x responseHTMLString
let loadSimulatedRequest1 x ~withResponseHTMLString self = msg_send ~self ~cmd:(selector "loadSimulatedRequest:withResponseHTMLString:") ~typ:(id @-> id @-> returning (id)) x withResponseHTMLString
let loadSimulatedRequest2 x ~response ~responseData self = msg_send ~self ~cmd:(selector "loadSimulatedRequest:response:responseData:") ~typ:(id @-> id @-> id @-> returning (id)) x response responseData
let loadSimulatedRequest3 x ~withResponse ~responseData self = msg_send ~self ~cmd:(selector "loadSimulatedRequest:withResponse:responseData:") ~typ:(id @-> id @-> id @-> returning (id)) x withResponse responseData
let makeTextWritingDirectionLeftToRight x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionLeftToRight:") ~typ:(id @-> returning (void)) x
let makeTextWritingDirectionNatural x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionNatural:") ~typ:(id @-> returning (void)) x
let makeTextWritingDirectionRightToLeft x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionRightToLeft:") ~typ:(id @-> returning (void)) x
let mediaType self = msg_send ~self ~cmd:(selector "mediaType") ~typ:(returning (id))
let microphoneCaptureState self = msg_send ~self ~cmd:(selector "microphoneCaptureState") ~typ:(returning (llong))
let navigationDelegate self = msg_send ~self ~cmd:(selector "navigationDelegate") ~typ:(returning (id))
let pageZoom self = msg_send ~self ~cmd:(selector "pageZoom") ~typ:(returning (double))
let paste x self = msg_send ~self ~cmd:(selector "paste:") ~typ:(id @-> returning (void)) x
let pasteAndMatchStyle x self = msg_send ~self ~cmd:(selector "pasteAndMatchStyle:") ~typ:(id @-> returning (void)) x
let pauseAllMediaPlayback x self = msg_send ~self ~cmd:(selector "pauseAllMediaPlayback:") ~typ:(ptr void @-> returning (void)) x
let pauseAllMediaPlaybackWithCompletionHandler x self = msg_send ~self ~cmd:(selector "pauseAllMediaPlaybackWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let reload self = msg_send ~self ~cmd:(selector "reload") ~typ:(returning (id))
let reloadFromOrigin self = msg_send ~self ~cmd:(selector "reloadFromOrigin") ~typ:(returning (id))
let replace x self = msg_send ~self ~cmd:(selector "replace:") ~typ:(id @-> returning (void)) x
let requestMediaPlaybackState x self = msg_send ~self ~cmd:(selector "requestMediaPlaybackState:") ~typ:(ptr void @-> returning (void)) x
let requestMediaPlaybackStateWithCompletionHandler x self = msg_send ~self ~cmd:(selector "requestMediaPlaybackStateWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let resignFirstResponder self = msg_send ~self ~cmd:(selector "resignFirstResponder") ~typ:(returning (bool))
let resumeAllMediaPlayback x self = msg_send ~self ~cmd:(selector "resumeAllMediaPlayback:") ~typ:(ptr void @-> returning (void)) x
let resumeDownloadFromResumeData x ~completionHandler self = msg_send ~self ~cmd:(selector "resumeDownloadFromResumeData:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let safeAreaInsetsDidChange self = msg_send ~self ~cmd:(selector "safeAreaInsetsDidChange") ~typ:(returning (void))
let scrollView self = msg_send ~self ~cmd:(selector "scrollView") ~typ:(returning (id))
let scrollView' x ~contentSizeForZoomScale ~withProposedSize self = msg_send ~self ~cmd:(selector "scrollView:contentSizeForZoomScale:withProposedSize:") ~typ:(id @-> double @-> CGSize.t @-> returning (CGSize.t)) x contentSizeForZoomScale withProposedSize
let scrollViewDidEndDecelerating x self = msg_send ~self ~cmd:(selector "scrollViewDidEndDecelerating:") ~typ:(id @-> returning (void)) x
let scrollViewDidEndDragging x ~willDecelerate self = msg_send ~self ~cmd:(selector "scrollViewDidEndDragging:willDecelerate:") ~typ:(id @-> bool @-> returning (void)) x willDecelerate
let scrollViewDidEndScrollingAnimation x self = msg_send ~self ~cmd:(selector "scrollViewDidEndScrollingAnimation:") ~typ:(id @-> returning (void)) x
let scrollViewDidEndZooming x ~withView ~atScale self = msg_send ~self ~cmd:(selector "scrollViewDidEndZooming:withView:atScale:") ~typ:(id @-> id @-> double @-> returning (void)) x withView atScale
let scrollViewDidScroll x self = msg_send ~self ~cmd:(selector "scrollViewDidScroll:") ~typ:(id @-> returning (void)) x
let scrollViewDidScrollToTop x self = msg_send ~self ~cmd:(selector "scrollViewDidScrollToTop:") ~typ:(id @-> returning (void)) x
let scrollViewDidZoom x self = msg_send ~self ~cmd:(selector "scrollViewDidZoom:") ~typ:(id @-> returning (void)) x
let scrollViewWillBeginDragging x self = msg_send ~self ~cmd:(selector "scrollViewWillBeginDragging:") ~typ:(id @-> returning (void)) x
let scrollViewWillBeginZooming x ~withView self = msg_send ~self ~cmd:(selector "scrollViewWillBeginZooming:withView:") ~typ:(id @-> id @-> returning (void)) x withView
let scrollViewWillEndDragging x ~withVelocity ~targetContentOffset self = msg_send ~self ~cmd:(selector "scrollViewWillEndDragging:withVelocity:targetContentOffset:") ~typ:(id @-> CGPoint.t @-> ptr (CGPoint.t) @-> returning (void)) x withVelocity targetContentOffset
let select x self = msg_send ~self ~cmd:(selector "select:") ~typ:(id @-> returning (void)) x
let selectAll x self = msg_send ~self ~cmd:(selector "selectAll:") ~typ:(id @-> returning (void)) x
let selectFormAccessoryHasCheckedItemAtRow x self = msg_send ~self ~cmd:(selector "selectFormAccessoryHasCheckedItemAtRow:") ~typ:(llong @-> returning (bool)) x
let selectFormAccessoryPickerRow x self = msg_send ~self ~cmd:(selector "selectFormAccessoryPickerRow:") ~typ:(int @-> returning (void)) x
let selectFormPopoverTitle self = msg_send ~self ~cmd:(selector "selectFormPopoverTitle") ~typ:(returning (id))
let setAllMediaPlaybackSuspended x ~completionHandler self = msg_send ~self ~cmd:(selector "setAllMediaPlaybackSuspended:completionHandler:") ~typ:(bool @-> ptr void @-> returning (void)) x completionHandler
let setAllowsBackForwardNavigationGestures x self = msg_send ~self ~cmd:(selector "setAllowsBackForwardNavigationGestures:") ~typ:(bool @-> returning (void)) x
let setAllowsLinkPreview x self = msg_send ~self ~cmd:(selector "setAllowsLinkPreview:") ~typ:(bool @-> returning (void)) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning (void)) x
let setBounds x self = msg_send ~self ~cmd:(selector "setBounds:") ~typ:(CGRect.t @-> returning (void)) x
let setCameraCaptureState x ~completionHandler self = msg_send ~self ~cmd:(selector "setCameraCaptureState:completionHandler:") ~typ:(llong @-> ptr void @-> returning (void)) x completionHandler
let setCustomUserAgent x self = msg_send ~self ~cmd:(selector "setCustomUserAgent:") ~typ:(id @-> returning (void)) x
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning (void)) x
let setInteractionState x self = msg_send ~self ~cmd:(selector "setInteractionState:") ~typ:(id @-> returning (void)) x
let setMediaType x self = msg_send ~self ~cmd:(selector "setMediaType:") ~typ:(id @-> returning (void)) x
let setMicrophoneCaptureState x ~completionHandler self = msg_send ~self ~cmd:(selector "setMicrophoneCaptureState:completionHandler:") ~typ:(llong @-> ptr void @-> returning (void)) x completionHandler
let setNavigationDelegate x self = msg_send ~self ~cmd:(selector "setNavigationDelegate:") ~typ:(id @-> returning (void)) x
let setOpaque x self = msg_send ~self ~cmd:(selector "setOpaque:") ~typ:(bool @-> returning (void)) x
let setPageZoom x self = msg_send ~self ~cmd:(selector "setPageZoom:") ~typ:(double @-> returning (void)) x
let setSelectedColorForColorPicker x self = msg_send ~self ~cmd:(selector "setSelectedColorForColorPicker:") ~typ:(id @-> returning (void)) x
let setSemanticContentAttribute x self = msg_send ~self ~cmd:(selector "setSemanticContentAttribute:") ~typ:(llong @-> returning (void)) x
let setTimePickerValueToHour x ~minute self = msg_send ~self ~cmd:(selector "setTimePickerValueToHour:minute:") ~typ:(llong @-> llong @-> returning (void)) x minute
let setUIDelegate x self = msg_send ~self ~cmd:(selector "setUIDelegate:") ~typ:(id @-> returning (void)) x
let setUnderPageBackgroundColor x self = msg_send ~self ~cmd:(selector "setUnderPageBackgroundColor:") ~typ:(id @-> returning (void)) x
let startDownloadUsingRequest x ~completionHandler self = msg_send ~self ~cmd:(selector "startDownloadUsingRequest:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let stopLoading self = msg_send ~self ~cmd:(selector "stopLoading") ~typ:(returning (void))
let suspendAllMediaPlayback x self = msg_send ~self ~cmd:(selector "suspendAllMediaPlayback:") ~typ:(ptr void @-> returning (void)) x
let takeSnapshotWithConfiguration x ~completionHandler self = msg_send ~self ~cmd:(selector "takeSnapshotWithConfiguration:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let targetForAction x ~withSender self = msg_send ~self ~cmd:(selector "targetForAction:withSender:") ~typ:(_SEL @-> id @-> returning (id)) x withSender
let textContentTypeForTesting self = msg_send ~self ~cmd:(selector "textContentTypeForTesting") ~typ:(returning (id))
let themeColor self = msg_send ~self ~cmd:(selector "themeColor") ~typ:(returning (id))
let timePickerValueHour self = msg_send ~self ~cmd:(selector "timePickerValueHour") ~typ:(returning (double))
let timePickerValueMinute self = msg_send ~self ~cmd:(selector "timePickerValueMinute") ~typ:(returning (double))
let title self = msg_send ~self ~cmd:(selector "title") ~typ:(returning (id))
let toggleBoldface x self = msg_send ~self ~cmd:(selector "toggleBoldface:") ~typ:(id @-> returning (void)) x
let toggleItalics x self = msg_send ~self ~cmd:(selector "toggleItalics:") ~typ:(id @-> returning (void)) x
let toggleUnderline x self = msg_send ~self ~cmd:(selector "toggleUnderline:") ~typ:(id @-> returning (void)) x
let underPageBackgroundColor self = msg_send ~self ~cmd:(selector "underPageBackgroundColor") ~typ:(returning (id))
let undoManager self = msg_send ~self ~cmd:(selector "undoManager") ~typ:(returning (id))
let urlSchemeHandlerForURLScheme x self = msg_send ~self ~cmd:(selector "urlSchemeHandlerForURLScheme:") ~typ:(id @-> returning (id)) x
let usesStandardContentView self = msg_send ~self ~cmd:(selector "usesStandardContentView") ~typ:(returning (bool))
let valueForUndefinedKey x self = msg_send ~self ~cmd:(selector "valueForUndefinedKey:") ~typ:(id @-> returning (id)) x
let viewForZoomingInScrollView x self = msg_send ~self ~cmd:(selector "viewForZoomingInScrollView:") ~typ:(id @-> returning (id)) x
let willFinishIgnoringCalloutBarFadeAfterPerformingAction self = msg_send ~self ~cmd:(selector "willFinishIgnoringCalloutBarFadeAfterPerformingAction") ~typ:(returning (void))