(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

open CoreFoundation
open CoreGraphics

(** Apple docs: {{:https://developer.apple.com/documentation/coreanimation/calayer?language=objc}CALayer} *)

let self = get_class "CALayer"

let _CAMLParser x ~setValue ~forKey self = msg_send ~self ~cmd:(selector "CAMLParser:setValue:forKey:") ~typ:(id @-> id @-> id @-> returning void) x setValue forKey
let _CAMLTypeForKey x self = msg_send ~self ~cmd:(selector "CAMLTypeForKey:") ~typ:(id @-> returning id) x
let _CAMLTypeSupportedForKey x self = msg_send ~self ~cmd:(selector "CAMLTypeSupportedForKey:") ~typ:(id @-> returning bool) x
let acceleratesDrawing self = msg_send ~self ~cmd:(selector "acceleratesDrawing") ~typ:(returning bool)
let actionForKey x self = msg_send ~self ~cmd:(selector "actionForKey:") ~typ:(id @-> returning id) x
let actions self = msg_send ~self ~cmd:(selector "actions") ~typ:(returning id)
let addAnimation x ~forKey self = msg_send ~self ~cmd:(selector "addAnimation:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let addConstraint x self = msg_send ~self ~cmd:(selector "addConstraint:") ~typ:(id @-> returning void) x
let addIdentifier x self = msg_send ~self ~cmd:(selector "addIdentifier:") ~typ:(id @-> returning void) x
let addPresentationModifier x self = msg_send ~self ~cmd:(selector "addPresentationModifier:") ~typ:(id @-> returning void) x
let addState x self = msg_send ~self ~cmd:(selector "addState:") ~typ:(id @-> returning void) x
let addSublayer x self = msg_send ~self ~cmd:(selector "addSublayer:") ~typ:(id @-> returning void) x
let affineTransform self = msg_send_stret ~self ~cmd:(selector "affineTransform") ~typ:(returning CGAffineTransform.t) ~return_type:CGAffineTransform.t
let allowsDisplayCompositing self = msg_send ~self ~cmd:(selector "allowsDisplayCompositing") ~typ:(returning bool)
let allowsDynamicSystemOOTF self = msg_send ~self ~cmd:(selector "allowsDynamicSystemOOTF") ~typ:(returning bool)
let allowsEdgeAntialiasing self = msg_send ~self ~cmd:(selector "allowsEdgeAntialiasing") ~typ:(returning bool)
let allowsGroupBlending self = msg_send ~self ~cmd:(selector "allowsGroupBlending") ~typ:(returning bool)
let allowsGroupOpacity self = msg_send ~self ~cmd:(selector "allowsGroupOpacity") ~typ:(returning bool)
let allowsHitTesting self = msg_send ~self ~cmd:(selector "allowsHitTesting") ~typ:(returning bool)
let allowsRemoteEffectHitTesting self = msg_send ~self ~cmd:(selector "allowsRemoteEffectHitTesting") ~typ:(returning bool)
let allowsWeakReference self = msg_send ~self ~cmd:(selector "allowsWeakReference") ~typ:(returning bool)
let ancestorSharedWithLayer x self = msg_send ~self ~cmd:(selector "ancestorSharedWithLayer:") ~typ:(id @-> returning id) x
let anchorPoint self = msg_send_stret ~self ~cmd:(selector "anchorPoint") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let anchorPointZ self = msg_send ~self ~cmd:(selector "anchorPointZ") ~typ:(returning double)
let animationForKey x self = msg_send ~self ~cmd:(selector "animationForKey:") ~typ:(id @-> returning id) x
let animationKeys self = msg_send ~self ~cmd:(selector "animationKeys") ~typ:(returning id)
let attributesForKeyPath x self = msg_send ~self ~cmd:(selector "attributesForKeyPath:") ~typ:(id @-> returning id) x
let autoresizingMask self = msg_send ~self ~cmd:(selector "autoresizingMask") ~typ:(returning uint)
let autoreverses self = msg_send ~self ~cmd:(selector "autoreverses") ~typ:(returning bool)
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning (ptr CGColor.t))
let backgroundColorPhase self = msg_send_stret ~self ~cmd:(selector "backgroundColorPhase") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let backgroundFilters self = msg_send ~self ~cmd:(selector "backgroundFilters") ~typ:(returning id)
let beginTime self = msg_send ~self ~cmd:(selector "beginTime") ~typ:(returning double)
let borderColor self = msg_send ~self ~cmd:(selector "borderColor") ~typ:(returning (ptr CGColor.t))
let borderOffset self = msg_send ~self ~cmd:(selector "borderOffset") ~typ:(returning double)
let borderPathIsBounds self = msg_send ~self ~cmd:(selector "borderPathIsBounds") ~typ:(returning bool)
let borderWidth self = msg_send ~self ~cmd:(selector "borderWidth") ~typ:(returning double)
let bounds self = msg_send_stret ~self ~cmd:(selector "bounds") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let canDrawConcurrently self = msg_send ~self ~cmd:(selector "canDrawConcurrently") ~typ:(returning bool)
let clearHasBeenCommitted self = msg_send ~self ~cmd:(selector "clearHasBeenCommitted") ~typ:(returning void)
let clearsContext self = msg_send ~self ~cmd:(selector "clearsContext") ~typ:(returning bool)
let compositingFilter self = msg_send ~self ~cmd:(selector "compositingFilter") ~typ:(returning id)
let containsPoint x self = msg_send ~self ~cmd:(selector "containsPoint:") ~typ:(CGPoint.t @-> returning bool) x
let contents self = msg_send ~self ~cmd:(selector "contents") ~typ:(returning id)
let contentsAlignsToPixels self = msg_send ~self ~cmd:(selector "contentsAlignsToPixels") ~typ:(returning bool)
let contentsAreFlipped self = msg_send ~self ~cmd:(selector "contentsAreFlipped") ~typ:(returning bool)
let contentsCenter self = msg_send_stret ~self ~cmd:(selector "contentsCenter") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let contentsContainsSubtitles self = msg_send ~self ~cmd:(selector "contentsContainsSubtitles") ~typ:(returning bool)
let contentsDirtyRect self = msg_send_stret ~self ~cmd:(selector "contentsDirtyRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let contentsDither self = msg_send ~self ~cmd:(selector "contentsDither") ~typ:(returning bool)
let contentsEDRStrength self = msg_send ~self ~cmd:(selector "contentsEDRStrength") ~typ:(returning double)
let contentsFormat self = msg_send ~self ~cmd:(selector "contentsFormat") ~typ:(returning id)
let contentsGravity self = msg_send ~self ~cmd:(selector "contentsGravity") ~typ:(returning id)
let contentsGravityEnum self = msg_send ~self ~cmd:(selector "contentsGravityEnum") ~typ:(returning llong) |> LLong.to_int
let contentsMaximumDesiredEDR self = msg_send ~self ~cmd:(selector "contentsMaximumDesiredEDR") ~typ:(returning double)
let contentsMultiplyColor self = msg_send ~self ~cmd:(selector "contentsMultiplyColor") ~typ:(returning (ptr CGColor.t))
let contentsOpaque self = msg_send ~self ~cmd:(selector "contentsOpaque") ~typ:(returning bool)
let contentsRect self = msg_send_stret ~self ~cmd:(selector "contentsRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let contentsScale self = msg_send ~self ~cmd:(selector "contentsScale") ~typ:(returning double)
let contentsScaling self = msg_send ~self ~cmd:(selector "contentsScaling") ~typ:(returning id)
let contentsSwizzle self = msg_send ~self ~cmd:(selector "contentsSwizzle") ~typ:(returning id)
let contentsTransform self = msg_send_stret ~self ~cmd:(selector "contentsTransform") ~typ:(returning CGAffineTransform.t) ~return_type:CGAffineTransform.t
let context self = msg_send ~self ~cmd:(selector "context") ~typ:(returning id)
let continuousCorners self = msg_send ~self ~cmd:(selector "continuousCorners") ~typ:(returning bool)
let convertPoint x ~fromLayer self = msg_send_stret ~self ~cmd:(selector "convertPoint:fromLayer:") ~typ:(CGPoint.t @-> id @-> returning CGPoint.t) ~return_type:CGPoint.t x fromLayer
let convertPoint' x ~toLayer self = msg_send_stret ~self ~cmd:(selector "convertPoint:toLayer:") ~typ:(CGPoint.t @-> id @-> returning CGPoint.t) ~return_type:CGPoint.t x toLayer
let convertRect x ~fromLayer self = msg_send_stret ~self ~cmd:(selector "convertRect:fromLayer:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x fromLayer
let convertRect' x ~toLayer self = msg_send_stret ~self ~cmd:(selector "convertRect:toLayer:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x toLayer
let convertTime x ~fromLayer self = msg_send ~self ~cmd:(selector "convertTime:fromLayer:") ~typ:(double @-> id @-> returning double) x fromLayer
let convertTime' x ~toLayer self = msg_send ~self ~cmd:(selector "convertTime:toLayer:") ~typ:(double @-> id @-> returning double) x toLayer
let cornerContents self = msg_send ~self ~cmd:(selector "cornerContents") ~typ:(returning id)
let cornerContentsCenter self = msg_send_stret ~self ~cmd:(selector "cornerContentsCenter") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let cornerContentsMasksEdges self = msg_send ~self ~cmd:(selector "cornerContentsMasksEdges") ~typ:(returning bool)
let cornerCurve self = msg_send ~self ~cmd:(selector "cornerCurve") ~typ:(returning id)
let cornerRadius self = msg_send ~self ~cmd:(selector "cornerRadius") ~typ:(returning double)
let createsCompositingGroup self = msg_send ~self ~cmd:(selector "createsCompositingGroup") ~typ:(returning bool)
let createsShadowGroup self = msg_send ~self ~cmd:(selector "createsShadowGroup") ~typ:(returning bool)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let debugDescription self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning id)
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning id)
let dependentStatesOfState x self = msg_send ~self ~cmd:(selector "dependentStatesOfState:") ~typ:(id @-> returning id) x
let disableFoveation self = msg_send ~self ~cmd:(selector "disableFoveation") ~typ:(returning bool)
let disableUpdateMask self = msg_send ~self ~cmd:(selector "disableUpdateMask") ~typ:(returning uint)
let display self = msg_send ~self ~cmd:(selector "display") ~typ:(returning void)
let displayIfNeeded self = msg_send ~self ~cmd:(selector "displayIfNeeded") ~typ:(returning void)
let displayMaximumDesiredEDR self = msg_send ~self ~cmd:(selector "displayMaximumDesiredEDR") ~typ:(returning double)
let doubleSided self = msg_send ~self ~cmd:(selector "doubleSided") ~typ:(returning bool)
let drawInContext x self = msg_send ~self ~cmd:(selector "drawInContext:") ~typ:((ptr CGContext.t) @-> returning void) x
let drawsAsynchronously self = msg_send ~self ~cmd:(selector "drawsAsynchronously") ~typ:(returning bool)
let drawsMipmapLevels self = msg_send ~self ~cmd:(selector "drawsMipmapLevels") ~typ:(returning bool)
let duration self = msg_send ~self ~cmd:(selector "duration") ~typ:(returning double)
let edgeAntialiasingMask self = msg_send ~self ~cmd:(selector "edgeAntialiasingMask") ~typ:(returning uint)
let encodeWithCAMLWriter x self = msg_send ~self ~cmd:(selector "encodeWithCAMLWriter:") ~typ:(id @-> returning void) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let fillMode self = msg_send ~self ~cmd:(selector "fillMode") ~typ:(returning id)
let filters self = msg_send ~self ~cmd:(selector "filters") ~typ:(returning id)
let flipsHorizontalAxis self = msg_send ~self ~cmd:(selector "flipsHorizontalAxis") ~typ:(returning bool)
let floating self = msg_send ~self ~cmd:(selector "floating") ~typ:(returning bool)
let frame self = msg_send_stret ~self ~cmd:(selector "frame") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let framingOptions self = msg_send ~self ~cmd:(selector "framingOptions") ~typ:(returning id)
let gain self = msg_send ~self ~cmd:(selector "gain") ~typ:(returning float)
let getRendererInfo x ~size self = msg_send ~self ~cmd:(selector "getRendererInfo:size:") ~typ:((ptr CARenderRendererInfo.t) @-> ullong @-> returning bool) x (ULLong.of_int size)
let hasBeenCommitted self = msg_send ~self ~cmd:(selector "hasBeenCommitted") ~typ:(returning bool)
let hidden self = msg_send ~self ~cmd:(selector "hidden") ~typ:(returning bool)
let hitTest x self = msg_send ~self ~cmd:(selector "hitTest:") ~typ:(CGPoint.t @-> returning id) x
let hitTestsAsOpaque self = msg_send ~self ~cmd:(selector "hitTestsAsOpaque") ~typ:(returning bool)
let hitTestsContentsAlphaChannel self = msg_send ~self ~cmd:(selector "hitTestsContentsAlphaChannel") ~typ:(returning bool)
let identifiers self = msg_send ~self ~cmd:(selector "identifiers") ~typ:(returning id)
let ignoresHitTesting self = msg_send ~self ~cmd:(selector "ignoresHitTesting") ~typ:(returning bool)
let implicitAnimationForKeyPath x self = msg_send ~self ~cmd:(selector "implicitAnimationForKeyPath:") ~typ:(id @-> returning id) x
let inheritsTiming self = msg_send ~self ~cmd:(selector "inheritsTiming") ~typ:(returning bool)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithLayer x self = msg_send ~self ~cmd:(selector "initWithLayer:") ~typ:(id @-> returning id) x
let insertState x ~atIndex self = msg_send ~self ~cmd:(selector "insertState:atIndex:") ~typ:(id @-> uint @-> returning void) x atIndex
let insertSublayer x ~above self = msg_send ~self ~cmd:(selector "insertSublayer:above:") ~typ:(id @-> id @-> returning void) x above
let insertSublayer1 x ~atIndex self = msg_send ~self ~cmd:(selector "insertSublayer:atIndex:") ~typ:(id @-> uint @-> returning void) x atIndex
let insertSublayer2 x ~below self = msg_send ~self ~cmd:(selector "insertSublayer:below:") ~typ:(id @-> id @-> returning void) x below
let invalidateContents self = msg_send ~self ~cmd:(selector "invalidateContents") ~typ:(returning void)
let invertsContentsAreFlipped self = msg_send ~self ~cmd:(selector "invertsContentsAreFlipped") ~typ:(returning bool)
let invertsMask self = msg_send ~self ~cmd:(selector "invertsMask") ~typ:(returning bool)
let invertsShadow self = msg_send ~self ~cmd:(selector "invertsShadow") ~typ:(returning bool)
let isDescendantOf x self = msg_send ~self ~cmd:(selector "isDescendantOf:") ~typ:(id @-> returning bool) x
let isDoubleSided self = msg_send ~self ~cmd:(selector "isDoubleSided") ~typ:(returning bool)
let isFlipped self = msg_send ~self ~cmd:(selector "isFlipped") ~typ:(returning bool)
let isFloating self = msg_send ~self ~cmd:(selector "isFloating") ~typ:(returning bool)
let isFrozen self = msg_send ~self ~cmd:(selector "isFrozen") ~typ:(returning bool)
let isGeometryFlipped self = msg_send ~self ~cmd:(selector "isGeometryFlipped") ~typ:(returning bool)
let isHidden self = msg_send ~self ~cmd:(selector "isHidden") ~typ:(returning bool)
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning bool)
let isSeparated self = msg_send ~self ~cmd:(selector "isSeparated") ~typ:(returning bool)
let layerAtTime x self = msg_send ~self ~cmd:(selector "layerAtTime:") ~typ:(double @-> returning id) x
let layerBeingDrawn self = msg_send ~self ~cmd:(selector "layerBeingDrawn") ~typ:(returning id)
let layerDidBecomeVisible x self = msg_send ~self ~cmd:(selector "layerDidBecomeVisible:") ~typ:(bool @-> returning void) x
let layerDidChangeDisplay x self = msg_send ~self ~cmd:(selector "layerDidChangeDisplay:") ~typ:(uint @-> returning void) x
let layoutBelowIfNeeded self = msg_send ~self ~cmd:(selector "layoutBelowIfNeeded") ~typ:(returning void)
let layoutIfNeeded self = msg_send ~self ~cmd:(selector "layoutIfNeeded") ~typ:(returning void)
let layoutIsActive self = msg_send ~self ~cmd:(selector "layoutIsActive") ~typ:(returning bool)
let layoutManager self = msg_send ~self ~cmd:(selector "layoutManager") ~typ:(returning id)
let layoutSublayers self = msg_send ~self ~cmd:(selector "layoutSublayers") ~typ:(returning void)
let literalContentsCenter self = msg_send ~self ~cmd:(selector "literalContentsCenter") ~typ:(returning bool)
let magnificationFilter self = msg_send ~self ~cmd:(selector "magnificationFilter") ~typ:(returning id)
let mask self = msg_send ~self ~cmd:(selector "mask") ~typ:(returning id)
let maskedCorners self = msg_send ~self ~cmd:(selector "maskedCorners") ~typ:(returning ullong) |> ULLong.to_int
let masksToBounds self = msg_send ~self ~cmd:(selector "masksToBounds") ~typ:(returning bool)
let meshTransform self = msg_send ~self ~cmd:(selector "meshTransform") ~typ:(returning id)
let minificationFilter self = msg_send ~self ~cmd:(selector "minificationFilter") ~typ:(returning id)
let minificationFilterBias self = msg_send ~self ~cmd:(selector "minificationFilterBias") ~typ:(returning float)
let modelLayer self = msg_send ~self ~cmd:(selector "modelLayer") ~typ:(returning id)
let motionBlurAmount self = msg_send ~self ~cmd:(selector "motionBlurAmount") ~typ:(returning double)
let name self = msg_send ~self ~cmd:(selector "name") ~typ:(returning id)
let needsDisplay self = msg_send ~self ~cmd:(selector "needsDisplay") ~typ:(returning bool)
let needsDisplayOnBoundsChange self = msg_send ~self ~cmd:(selector "needsDisplayOnBoundsChange") ~typ:(returning bool)
let needsLayout self = msg_send ~self ~cmd:(selector "needsLayout") ~typ:(returning bool)
let needsLayoutOnGeometryChange self = msg_send ~self ~cmd:(selector "needsLayoutOnGeometryChange") ~typ:(returning bool)
let observationInfo self = msg_send ~self ~cmd:(selector "observationInfo") ~typ:(returning (ptr void))
let opacity self = msg_send ~self ~cmd:(selector "opacity") ~typ:(returning float)
let opaque self = msg_send ~self ~cmd:(selector "opaque") ~typ:(returning bool)
let optimizationOpportunities x self = msg_send ~self ~cmd:(selector "optimizationOpportunities:") ~typ:(bool @-> returning id) x
let position self = msg_send_stret ~self ~cmd:(selector "position") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let preferredFrameSize self = msg_send_stret ~self ~cmd:(selector "preferredFrameSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let preloadsCache self = msg_send ~self ~cmd:(selector "preloadsCache") ~typ:(returning bool)
let prepareContents self = msg_send ~self ~cmd:(selector "prepareContents") ~typ:(returning void)
let presentationLayer self = msg_send ~self ~cmd:(selector "presentationLayer") ~typ:(returning id)
let presentationModifiers self = msg_send ~self ~cmd:(selector "presentationModifiers") ~typ:(returning id)
let punchoutShadow self = msg_send ~self ~cmd:(selector "punchoutShadow") ~typ:(returning bool)
let rasterizationPrefersDisplayCompositing self = msg_send ~self ~cmd:(selector "rasterizationPrefersDisplayCompositing") ~typ:(returning bool)
let rasterizationPrefersWindowServerAwareBackdrops self = msg_send ~self ~cmd:(selector "rasterizationPrefersWindowServerAwareBackdrops") ~typ:(returning bool)
let rasterizationScale self = msg_send ~self ~cmd:(selector "rasterizationScale") ~typ:(returning double)
let recursiveDescription self = msg_send ~self ~cmd:(selector "recursiveDescription") ~typ:(returning id)
let regionBeingDrawn self = msg_send ~self ~cmd:(selector "regionBeingDrawn") ~typ:(returning (ptr void))
let release self = msg_send ~self ~cmd:(selector "release") ~typ:(returning void)
let reloadValueForKeyPath x self = msg_send ~self ~cmd:(selector "reloadValueForKeyPath:") ~typ:(id @-> returning void) x
let remoteEffects self = msg_send ~self ~cmd:(selector "remoteEffects") ~typ:(returning id)
let removeAllAnimations self = msg_send ~self ~cmd:(selector "removeAllAnimations") ~typ:(returning void)
let removeAnimationForKey x self = msg_send ~self ~cmd:(selector "removeAnimationForKey:") ~typ:(id @-> returning void) x
let removeFromSuperlayer self = msg_send ~self ~cmd:(selector "removeFromSuperlayer") ~typ:(returning void)
let removeIdentifier x self = msg_send ~self ~cmd:(selector "removeIdentifier:") ~typ:(id @-> returning void) x
let removePresentationModifier x self = msg_send ~self ~cmd:(selector "removePresentationModifier:") ~typ:(id @-> returning void) x
let removeState x self = msg_send ~self ~cmd:(selector "removeState:") ~typ:(id @-> returning void) x
let renderInContext x self = msg_send ~self ~cmd:(selector "renderInContext:") ~typ:((ptr CGContext.t) @-> returning void) x
let repeatCount self = msg_send ~self ~cmd:(selector "repeatCount") ~typ:(returning float)
let repeatDuration self = msg_send ~self ~cmd:(selector "repeatDuration") ~typ:(returning double)
let replaceSublayer x ~with_ self = msg_send ~self ~cmd:(selector "replaceSublayer:with:") ~typ:(id @-> id @-> returning void) x with_
let resizeSublayersWithOldSize x self = msg_send ~self ~cmd:(selector "resizeSublayersWithOldSize:") ~typ:(CGSize.t @-> returning void) x
let resizeWithOldSuperlayerSize x self = msg_send ~self ~cmd:(selector "resizeWithOldSuperlayerSize:") ~typ:(CGSize.t @-> returning void) x
let retain self = msg_send ~self ~cmd:(selector "retain") ~typ:(returning id)
let retainCount self = msg_send ~self ~cmd:(selector "retainCount") ~typ:(returning ullong) |> ULLong.to_int
let retainWeakReference self = msg_send ~self ~cmd:(selector "retainWeakReference") ~typ:(returning bool)
let rimColor self = msg_send ~self ~cmd:(selector "rimColor") ~typ:(returning (ptr CGColor.t))
let rimOpacity self = msg_send ~self ~cmd:(selector "rimOpacity") ~typ:(returning float)
let rimPathIsBounds self = msg_send ~self ~cmd:(selector "rimPathIsBounds") ~typ:(returning bool)
let rimWidth self = msg_send ~self ~cmd:(selector "rimWidth") ~typ:(returning double)
let scrollPoint x self = msg_send ~self ~cmd:(selector "scrollPoint:") ~typ:(CGPoint.t @-> returning void) x
let scrollRectToVisible x self = msg_send ~self ~cmd:(selector "scrollRectToVisible:") ~typ:(CGRect.t @-> returning void) x
let securityMode self = msg_send ~self ~cmd:(selector "securityMode") ~typ:(returning id)
let separatedOptionWasSet x self = msg_send ~self ~cmd:(selector "separatedOptionWasSet:") ~typ:(id @-> returning void) x
let separatedOptions self = msg_send ~self ~cmd:(selector "separatedOptions") ~typ:(returning id)
let separatedShadowCompositingFilter self = msg_send ~self ~cmd:(selector "separatedShadowCompositingFilter") ~typ:(returning id)
let separatedShadowReceiverMode self = msg_send ~self ~cmd:(selector "separatedShadowReceiverMode") ~typ:(returning uint)
let separatedState self = msg_send ~self ~cmd:(selector "separatedState") ~typ:(returning uint)
let setAcceleratesDrawing x self = msg_send ~self ~cmd:(selector "setAcceleratesDrawing:") ~typ:(bool @-> returning void) x
let setActions x self = msg_send ~self ~cmd:(selector "setActions:") ~typ:(id @-> returning void) x
let setAffineTransform x self = msg_send ~self ~cmd:(selector "setAffineTransform:") ~typ:(CGAffineTransform.t @-> returning void) x
let setAllowsDisplayCompositing x self = msg_send ~self ~cmd:(selector "setAllowsDisplayCompositing:") ~typ:(bool @-> returning void) x
let setAllowsDynamicSystemOOTF x self = msg_send ~self ~cmd:(selector "setAllowsDynamicSystemOOTF:") ~typ:(bool @-> returning void) x
let setAllowsEdgeAntialiasing x self = msg_send ~self ~cmd:(selector "setAllowsEdgeAntialiasing:") ~typ:(bool @-> returning void) x
let setAllowsGroupBlending x self = msg_send ~self ~cmd:(selector "setAllowsGroupBlending:") ~typ:(bool @-> returning void) x
let setAllowsGroupOpacity x self = msg_send ~self ~cmd:(selector "setAllowsGroupOpacity:") ~typ:(bool @-> returning void) x
let setAllowsHitTesting x self = msg_send ~self ~cmd:(selector "setAllowsHitTesting:") ~typ:(bool @-> returning void) x
let setAllowsRemoteEffectHitTesting x self = msg_send ~self ~cmd:(selector "setAllowsRemoteEffectHitTesting:") ~typ:(bool @-> returning void) x
let setAnchorPoint x self = msg_send ~self ~cmd:(selector "setAnchorPoint:") ~typ:(CGPoint.t @-> returning void) x
let setAnchorPointZ x self = msg_send ~self ~cmd:(selector "setAnchorPointZ:") ~typ:(double @-> returning void) x
let setAutoresizingMask x self = msg_send ~self ~cmd:(selector "setAutoresizingMask:") ~typ:(uint @-> returning void) x
let setAutoreverses x self = msg_send ~self ~cmd:(selector "setAutoreverses:") ~typ:(bool @-> returning void) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:((ptr CGColor.t) @-> returning void) x
let setBackgroundColorPhase x self = msg_send ~self ~cmd:(selector "setBackgroundColorPhase:") ~typ:(CGSize.t @-> returning void) x
let setBackgroundFilters x self = msg_send ~self ~cmd:(selector "setBackgroundFilters:") ~typ:(id @-> returning void) x
let setBeginTime x self = msg_send ~self ~cmd:(selector "setBeginTime:") ~typ:(double @-> returning void) x
let setBorderColor x self = msg_send ~self ~cmd:(selector "setBorderColor:") ~typ:((ptr CGColor.t) @-> returning void) x
let setBorderOffset x self = msg_send ~self ~cmd:(selector "setBorderOffset:") ~typ:(double @-> returning void) x
let setBorderPathIsBounds x self = msg_send ~self ~cmd:(selector "setBorderPathIsBounds:") ~typ:(bool @-> returning void) x
let setBorderWidth x self = msg_send ~self ~cmd:(selector "setBorderWidth:") ~typ:(double @-> returning void) x
let setBounds x self = msg_send ~self ~cmd:(selector "setBounds:") ~typ:(CGRect.t @-> returning void) x
let setCanDrawConcurrently x self = msg_send ~self ~cmd:(selector "setCanDrawConcurrently:") ~typ:(bool @-> returning void) x
let setClearsContext x self = msg_send ~self ~cmd:(selector "setClearsContext:") ~typ:(bool @-> returning void) x
let setCompositingFilter x self = msg_send ~self ~cmd:(selector "setCompositingFilter:") ~typ:(id @-> returning void) x
let setContents x self = msg_send ~self ~cmd:(selector "setContents:") ~typ:(id @-> returning void) x
let setContentsAlignsToPixels x self = msg_send ~self ~cmd:(selector "setContentsAlignsToPixels:") ~typ:(bool @-> returning void) x
let setContentsCenter x self = msg_send ~self ~cmd:(selector "setContentsCenter:") ~typ:(CGRect.t @-> returning void) x
let setContentsChanged self = msg_send ~self ~cmd:(selector "setContentsChanged") ~typ:(returning void)
let setContentsContainsSubtitles x self = msg_send ~self ~cmd:(selector "setContentsContainsSubtitles:") ~typ:(bool @-> returning void) x
let setContentsDirtyRect x self = msg_send ~self ~cmd:(selector "setContentsDirtyRect:") ~typ:(CGRect.t @-> returning void) x
let setContentsDither x self = msg_send ~self ~cmd:(selector "setContentsDither:") ~typ:(bool @-> returning void) x
let setContentsEDRStrength x self = msg_send ~self ~cmd:(selector "setContentsEDRStrength:") ~typ:(double @-> returning void) x
let setContentsFormat x self = msg_send ~self ~cmd:(selector "setContentsFormat:") ~typ:(id @-> returning void) x
let setContentsGravity x self = msg_send ~self ~cmd:(selector "setContentsGravity:") ~typ:(id @-> returning void) x
let setContentsMaximumDesiredEDR x self = msg_send ~self ~cmd:(selector "setContentsMaximumDesiredEDR:") ~typ:(double @-> returning void) x
let setContentsMultiplyColor x self = msg_send ~self ~cmd:(selector "setContentsMultiplyColor:") ~typ:((ptr CGColor.t) @-> returning void) x
let setContentsOpaque x self = msg_send ~self ~cmd:(selector "setContentsOpaque:") ~typ:(bool @-> returning void) x
let setContentsRect x self = msg_send ~self ~cmd:(selector "setContentsRect:") ~typ:(CGRect.t @-> returning void) x
let setContentsScale x self = msg_send ~self ~cmd:(selector "setContentsScale:") ~typ:(double @-> returning void) x
let setContentsScaling x self = msg_send ~self ~cmd:(selector "setContentsScaling:") ~typ:(id @-> returning void) x
let setContentsSwizzle x self = msg_send ~self ~cmd:(selector "setContentsSwizzle:") ~typ:(id @-> returning void) x
let setContentsTransform x self = msg_send ~self ~cmd:(selector "setContentsTransform:") ~typ:(CGAffineTransform.t @-> returning void) x
let setContinuousCorners x self = msg_send ~self ~cmd:(selector "setContinuousCorners:") ~typ:(bool @-> returning void) x
let setCornerContents x self = msg_send ~self ~cmd:(selector "setCornerContents:") ~typ:(id @-> returning void) x
let setCornerContentsCenter x self = msg_send ~self ~cmd:(selector "setCornerContentsCenter:") ~typ:(CGRect.t @-> returning void) x
let setCornerContentsMasksEdges x self = msg_send ~self ~cmd:(selector "setCornerContentsMasksEdges:") ~typ:(bool @-> returning void) x
let setCornerCurve x self = msg_send ~self ~cmd:(selector "setCornerCurve:") ~typ:(id @-> returning void) x
let setCornerRadius x self = msg_send ~self ~cmd:(selector "setCornerRadius:") ~typ:(double @-> returning void) x
let setCreatesCompositingGroup x self = msg_send ~self ~cmd:(selector "setCreatesCompositingGroup:") ~typ:(bool @-> returning void) x
let setCreatesShadowGroup x self = msg_send ~self ~cmd:(selector "setCreatesShadowGroup:") ~typ:(bool @-> returning void) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning void) x
let setDisableFoveation x self = msg_send ~self ~cmd:(selector "setDisableFoveation:") ~typ:(bool @-> returning void) x
let setDisableUpdateMask x self = msg_send ~self ~cmd:(selector "setDisableUpdateMask:") ~typ:(uint @-> returning void) x
let setDisplayMaximumDesiredEDR x self = msg_send ~self ~cmd:(selector "setDisplayMaximumDesiredEDR:") ~typ:(double @-> returning void) x
let setDoubleSided x self = msg_send ~self ~cmd:(selector "setDoubleSided:") ~typ:(bool @-> returning void) x
let setDrawsAsynchronously x self = msg_send ~self ~cmd:(selector "setDrawsAsynchronously:") ~typ:(bool @-> returning void) x
let setDuration x self = msg_send ~self ~cmd:(selector "setDuration:") ~typ:(double @-> returning void) x
let setEdgeAntialiasingMask x self = msg_send ~self ~cmd:(selector "setEdgeAntialiasingMask:") ~typ:(uint @-> returning void) x
let setFillMode x self = msg_send ~self ~cmd:(selector "setFillMode:") ~typ:(id @-> returning void) x
let setFilters x self = msg_send ~self ~cmd:(selector "setFilters:") ~typ:(id @-> returning void) x
let setFlipped x self = msg_send ~self ~cmd:(selector "setFlipped:") ~typ:(bool @-> returning void) x
let setFlipsHorizontalAxis x self = msg_send ~self ~cmd:(selector "setFlipsHorizontalAxis:") ~typ:(bool @-> returning void) x
let setFloating x self = msg_send ~self ~cmd:(selector "setFloating:") ~typ:(bool @-> returning void) x
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning void) x
let setFramingOptions x self = msg_send ~self ~cmd:(selector "setFramingOptions:") ~typ:(id @-> returning void) x
let setFrozen x self = msg_send ~self ~cmd:(selector "setFrozen:") ~typ:(bool @-> returning void) x
let setGain x self = msg_send ~self ~cmd:(selector "setGain:") ~typ:(float @-> returning void) x
let setGeometryFlipped x self = msg_send ~self ~cmd:(selector "setGeometryFlipped:") ~typ:(bool @-> returning void) x
let setHidden x self = msg_send ~self ~cmd:(selector "setHidden:") ~typ:(bool @-> returning void) x
let setHitTestsAsOpaque x self = msg_send ~self ~cmd:(selector "setHitTestsAsOpaque:") ~typ:(bool @-> returning void) x
let setHitTestsContentsAlphaChannel x self = msg_send ~self ~cmd:(selector "setHitTestsContentsAlphaChannel:") ~typ:(bool @-> returning void) x
let setInheritsTiming x self = msg_send ~self ~cmd:(selector "setInheritsTiming:") ~typ:(bool @-> returning void) x
let setInvertsContentsAreFlipped x self = msg_send ~self ~cmd:(selector "setInvertsContentsAreFlipped:") ~typ:(bool @-> returning void) x
let setInvertsMask x self = msg_send ~self ~cmd:(selector "setInvertsMask:") ~typ:(bool @-> returning void) x
let setInvertsShadow x self = msg_send ~self ~cmd:(selector "setInvertsShadow:") ~typ:(bool @-> returning void) x
let setLayoutManager x self = msg_send ~self ~cmd:(selector "setLayoutManager:") ~typ:(id @-> returning void) x
let setLiteralContentsCenter x self = msg_send ~self ~cmd:(selector "setLiteralContentsCenter:") ~typ:(bool @-> returning void) x
let setMagnificationFilter x self = msg_send ~self ~cmd:(selector "setMagnificationFilter:") ~typ:(id @-> returning void) x
let setMask x self = msg_send ~self ~cmd:(selector "setMask:") ~typ:(id @-> returning void) x
let setMaskedCorners x self = msg_send ~self ~cmd:(selector "setMaskedCorners:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setMasksToBounds x self = msg_send ~self ~cmd:(selector "setMasksToBounds:") ~typ:(bool @-> returning void) x
let setMeshTransform x self = msg_send ~self ~cmd:(selector "setMeshTransform:") ~typ:(id @-> returning void) x
let setMinificationFilter x self = msg_send ~self ~cmd:(selector "setMinificationFilter:") ~typ:(id @-> returning void) x
let setMinificationFilterBias x self = msg_send ~self ~cmd:(selector "setMinificationFilterBias:") ~typ:(float @-> returning void) x
let setMotionBlurAmount x self = msg_send ~self ~cmd:(selector "setMotionBlurAmount:") ~typ:(double @-> returning void) x
let setName x self = msg_send ~self ~cmd:(selector "setName:") ~typ:(id @-> returning void) x
let setNeedsDisplay self = msg_send ~self ~cmd:(selector "setNeedsDisplay") ~typ:(returning void)
let setNeedsDisplayInRect x self = msg_send ~self ~cmd:(selector "setNeedsDisplayInRect:") ~typ:(CGRect.t @-> returning void) x
let setNeedsDisplayOnBoundsChange x self = msg_send ~self ~cmd:(selector "setNeedsDisplayOnBoundsChange:") ~typ:(bool @-> returning void) x
let setNeedsLayout self = msg_send ~self ~cmd:(selector "setNeedsLayout") ~typ:(returning void)
let setNeedsLayoutOnGeometryChange x self = msg_send ~self ~cmd:(selector "setNeedsLayoutOnGeometryChange:") ~typ:(bool @-> returning void) x
let setObservationInfo x self = msg_send ~self ~cmd:(selector "setObservationInfo:") ~typ:((ptr void) @-> returning void) x
let setOpacity x self = msg_send ~self ~cmd:(selector "setOpacity:") ~typ:(float @-> returning void) x
let setOpaque x self = msg_send ~self ~cmd:(selector "setOpaque:") ~typ:(bool @-> returning void) x
let setPosition x self = msg_send ~self ~cmd:(selector "setPosition:") ~typ:(CGPoint.t @-> returning void) x
let setPreloadsCache x self = msg_send ~self ~cmd:(selector "setPreloadsCache:") ~typ:(bool @-> returning void) x
let setPresentationModifiers x self = msg_send ~self ~cmd:(selector "setPresentationModifiers:") ~typ:(id @-> returning void) x
let setPunchoutShadow x self = msg_send ~self ~cmd:(selector "setPunchoutShadow:") ~typ:(bool @-> returning void) x
let setRasterizationPrefersDisplayCompositing x self = msg_send ~self ~cmd:(selector "setRasterizationPrefersDisplayCompositing:") ~typ:(bool @-> returning void) x
let setRasterizationPrefersWindowServerAwareBackdrops x self = msg_send ~self ~cmd:(selector "setRasterizationPrefersWindowServerAwareBackdrops:") ~typ:(bool @-> returning void) x
let setRasterizationScale x self = msg_send ~self ~cmd:(selector "setRasterizationScale:") ~typ:(double @-> returning void) x
let setRemoteEffects x self = msg_send ~self ~cmd:(selector "setRemoteEffects:") ~typ:(id @-> returning void) x
let setRepeatCount x self = msg_send ~self ~cmd:(selector "setRepeatCount:") ~typ:(float @-> returning void) x
let setRepeatDuration x self = msg_send ~self ~cmd:(selector "setRepeatDuration:") ~typ:(double @-> returning void) x
let setRimColor x self = msg_send ~self ~cmd:(selector "setRimColor:") ~typ:((ptr CGColor.t) @-> returning void) x
let setRimOpacity x self = msg_send ~self ~cmd:(selector "setRimOpacity:") ~typ:(float @-> returning void) x
let setRimPathIsBounds x self = msg_send ~self ~cmd:(selector "setRimPathIsBounds:") ~typ:(bool @-> returning void) x
let setRimWidth x self = msg_send ~self ~cmd:(selector "setRimWidth:") ~typ:(double @-> returning void) x
let setSecurityMode x self = msg_send ~self ~cmd:(selector "setSecurityMode:") ~typ:(id @-> returning void) x
let setSeparated x self = msg_send ~self ~cmd:(selector "setSeparated:") ~typ:(bool @-> returning void) x
let setSeparatedOptions x self = msg_send ~self ~cmd:(selector "setSeparatedOptions:") ~typ:(id @-> returning void) x
let setSeparatedShadowCompositingFilter x self = msg_send ~self ~cmd:(selector "setSeparatedShadowCompositingFilter:") ~typ:(id @-> returning void) x
let setSeparatedShadowReceiverMode x self = msg_send ~self ~cmd:(selector "setSeparatedShadowReceiverMode:") ~typ:(uint @-> returning void) x
let setSeparatedState x self = msg_send ~self ~cmd:(selector "setSeparatedState:") ~typ:(uint @-> returning void) x
let setShadowColor x self = msg_send ~self ~cmd:(selector "setShadowColor:") ~typ:((ptr CGColor.t) @-> returning void) x
let setShadowOffset x self = msg_send ~self ~cmd:(selector "setShadowOffset:") ~typ:(CGSize.t @-> returning void) x
let setShadowOpacity x self = msg_send ~self ~cmd:(selector "setShadowOpacity:") ~typ:(float @-> returning void) x
let setShadowPath x self = msg_send ~self ~cmd:(selector "setShadowPath:") ~typ:((ptr CGPath.t) @-> returning void) x
let setShadowPathIsBounds x self = msg_send ~self ~cmd:(selector "setShadowPathIsBounds:") ~typ:(bool @-> returning void) x
let setShadowRadius x self = msg_send ~self ~cmd:(selector "setShadowRadius:") ~typ:(double @-> returning void) x
let setShouldFlatten x self = msg_send ~self ~cmd:(selector "setShouldFlatten:") ~typ:(bool @-> returning void) x
let setShouldRasterize x self = msg_send ~self ~cmd:(selector "setShouldRasterize:") ~typ:(bool @-> returning void) x
let setShouldReflatten x self = msg_send ~self ~cmd:(selector "setShouldReflatten:") ~typ:(bool @-> returning void) x
let setSizeRequisition x self = msg_send ~self ~cmd:(selector "setSizeRequisition:") ~typ:(CGSize.t @-> returning void) x
let setSoftRim x self = msg_send ~self ~cmd:(selector "setSoftRim:") ~typ:(bool @-> returning void) x
let setSortsSublayers x self = msg_send ~self ~cmd:(selector "setSortsSublayers:") ~typ:(bool @-> returning void) x
let setSpeed x self = msg_send ~self ~cmd:(selector "setSpeed:") ~typ:(float @-> returning void) x
let setStyle x self = msg_send ~self ~cmd:(selector "setStyle:") ~typ:(id @-> returning void) x
let setSublayerTransform x self = msg_send ~self ~cmd:(selector "setSublayerTransform:") ~typ:(CATransform3D.t @-> returning void) x
let setSublayers x self = msg_send ~self ~cmd:(selector "setSublayers:") ~typ:(id @-> returning void) x
let setTimeOffset x self = msg_send ~self ~cmd:(selector "setTimeOffset:") ~typ:(double @-> returning void) x
let setToneMapMode x self = msg_send ~self ~cmd:(selector "setToneMapMode:") ~typ:(id @-> returning void) x
let setToneMapToStandardDynamicRange x self = msg_send ~self ~cmd:(selector "setToneMapToStandardDynamicRange:") ~typ:(bool @-> returning void) x
let setTransform x self = msg_send ~self ~cmd:(selector "setTransform:") ~typ:(CATransform3D.t @-> returning void) x
let setTreatRec709AsSRGB x self = msg_send ~self ~cmd:(selector "setTreatRec709AsSRGB:") ~typ:(bool @-> returning void) x
let setUnsafeUnretainedDelegate x self = msg_send ~self ~cmd:(selector "setUnsafeUnretainedDelegate:") ~typ:(id @-> returning void) x
let setUsesWebKitBehavior x self = msg_send ~self ~cmd:(selector "setUsesWebKitBehavior:") ~typ:(bool @-> returning void) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let setValue1 x ~forKeyPath self = msg_send ~self ~cmd:(selector "setValue:forKeyPath:") ~typ:(id @-> id @-> returning void) x forKeyPath
let setValue2 x ~forUndefinedKey self = msg_send ~self ~cmd:(selector "setValue:forUndefinedKey:") ~typ:(id @-> id @-> returning void) x forUndefinedKey
let setWantsDynamicContentScaling x self = msg_send ~self ~cmd:(selector "setWantsDynamicContentScaling:") ~typ:(bool @-> returning void) x
let setWantsExtendedDynamicRangeContent x self = msg_send ~self ~cmd:(selector "setWantsExtendedDynamicRangeContent:") ~typ:(bool @-> returning void) x
let setZPosition x self = msg_send ~self ~cmd:(selector "setZPosition:") ~typ:(double @-> returning void) x
let shadowColor self = msg_send ~self ~cmd:(selector "shadowColor") ~typ:(returning (ptr CGColor.t))
let shadowOffset self = msg_send_stret ~self ~cmd:(selector "shadowOffset") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let shadowOpacity self = msg_send ~self ~cmd:(selector "shadowOpacity") ~typ:(returning float)
let shadowPath self = msg_send ~self ~cmd:(selector "shadowPath") ~typ:(returning (ptr CGPath.t))
let shadowPathIsBounds self = msg_send ~self ~cmd:(selector "shadowPathIsBounds") ~typ:(returning bool)
let shadowRadius self = msg_send ~self ~cmd:(selector "shadowRadius") ~typ:(returning double)
let shouldArchiveValueForKey x self = msg_send ~self ~cmd:(selector "shouldArchiveValueForKey:") ~typ:(id @-> returning bool) x
let shouldFlatten self = msg_send ~self ~cmd:(selector "shouldFlatten") ~typ:(returning bool)
let shouldRasterize self = msg_send ~self ~cmd:(selector "shouldRasterize") ~typ:(returning bool)
let shouldReflatten self = msg_send ~self ~cmd:(selector "shouldReflatten") ~typ:(returning bool)
let size self = msg_send_stret ~self ~cmd:(selector "size") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let sizeRequisition self = msg_send_stret ~self ~cmd:(selector "sizeRequisition") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let softRim self = msg_send ~self ~cmd:(selector "softRim") ~typ:(returning bool)
let sortsSublayers self = msg_send ~self ~cmd:(selector "sortsSublayers") ~typ:(returning bool)
let speed self = msg_send ~self ~cmd:(selector "speed") ~typ:(returning float)
let stateTransitionFrom x ~to_ self = msg_send ~self ~cmd:(selector "stateTransitionFrom:to:") ~typ:(id @-> id @-> returning id) x to_
let stateWithName x self = msg_send ~self ~cmd:(selector "stateWithName:") ~typ:(id @-> returning id) x
let style self = msg_send ~self ~cmd:(selector "style") ~typ:(returning id)
let sublayerEnumerator self = msg_send ~self ~cmd:(selector "sublayerEnumerator") ~typ:(returning id)
let sublayerTransform self = msg_send_stret ~self ~cmd:(selector "sublayerTransform") ~typ:(returning CATransform3D.t) ~return_type:CATransform3D.t
let sublayers self = msg_send ~self ~cmd:(selector "sublayers") ~typ:(returning id)
let superlayer self = msg_send ~self ~cmd:(selector "superlayer") ~typ:(returning id)
let timeOffset self = msg_send ~self ~cmd:(selector "timeOffset") ~typ:(returning double)
let toneMapMode self = msg_send ~self ~cmd:(selector "toneMapMode") ~typ:(returning id)
let toneMapToStandardDynamicRange self = msg_send ~self ~cmd:(selector "toneMapToStandardDynamicRange") ~typ:(returning bool)
let transform self = msg_send_stret ~self ~cmd:(selector "transform") ~typ:(returning CATransform3D.t) ~return_type:CATransform3D.t
let treatRec709AsSRGB self = msg_send ~self ~cmd:(selector "treatRec709AsSRGB") ~typ:(returning bool)
let unsafeUnretainedDelegate self = msg_send ~self ~cmd:(selector "unsafeUnretainedDelegate") ~typ:(returning id)
let usesWebKitBehavior self = msg_send ~self ~cmd:(selector "usesWebKitBehavior") ~typ:(returning bool)
let valueForKey x self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning id) x
let valueForKeyPath x self = msg_send ~self ~cmd:(selector "valueForKeyPath:") ~typ:(id @-> returning id) x
let valueForUndefinedKey x self = msg_send ~self ~cmd:(selector "valueForUndefinedKey:") ~typ:(id @-> returning id) x
let visibleRect self = msg_send_stret ~self ~cmd:(selector "visibleRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let wantsDynamicContentScaling self = msg_send ~self ~cmd:(selector "wantsDynamicContentScaling") ~typ:(returning bool)
let wantsExtendedDynamicRangeContent self = msg_send ~self ~cmd:(selector "wantsExtendedDynamicRangeContent") ~typ:(returning bool)
let zPosition self = msg_send ~self ~cmd:(selector "zPosition") ~typ:(returning double)