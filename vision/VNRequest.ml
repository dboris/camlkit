(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "VNRequest"

module Class = struct
  let _VNClassCode self = msg_send ~self ~cmd:(selector "VNClassCode") ~typ:(returning (uint))
  let allSupportedRevisions self = msg_send ~self ~cmd:(selector "allSupportedRevisions") ~typ:(returning (id))
  let applicableRevisionForDependentRequestOfClass x ~beingPerformedByRevision self = msg_send ~self ~cmd:(selector "applicableRevisionForDependentRequestOfClass:beingPerformedByRevision:") ~typ:(_Class @-> ullong @-> returning (ullong)) x beingPerformedByRevision
  let configurationClass self = msg_send ~self ~cmd:(selector "configurationClass") ~typ:(returning (_Class))
  let createVNEntityIdentificationModelEntryPrintForRevision x ~fromDescriptorData ~length ~elementCount ~error self = msg_send ~self ~cmd:(selector "createVNEntityIdentificationModelEntryPrintForRevision:fromDescriptorData:length:elementCount:error:") ~typ:(ullong @-> ptr (void) @-> ullong @-> ullong @-> ptr (id) @-> returning (id)) x fromDescriptorData length elementCount error
  let currentRevision self = msg_send ~self ~cmd:(selector "currentRevision") ~typ:(returning (ullong))
  let defaultRevision self = msg_send ~self ~cmd:(selector "defaultRevision") ~typ:(returning (ullong))
  let descriptionForPrivateRevision x self = msg_send ~self ~cmd:(selector "descriptionForPrivateRevision:") ~typ:(ullong @-> returning (id)) x
  let firstSupportedRevisionInOrderedRevisionList x self = msg_send ~self ~cmd:(selector "firstSupportedRevisionInOrderedRevisionList:") ~typ:(ullong @-> returning (ullong)) x
  let frameworkClass self = msg_send ~self ~cmd:(selector "frameworkClass") ~typ:(returning (_Class))
  let getDoubleValue x ~forKey ~inOptions ~error self = msg_send ~self ~cmd:(selector "getDoubleValue:forKey:inOptions:error:") ~typ:(ptr (double) @-> id @-> id @-> ptr (id) @-> returning (bool)) x forKey inOptions error
  let getDoubleValue' x ~forKey ~inOptions ~withDefaultValue ~error self = msg_send ~self ~cmd:(selector "getDoubleValue:forKey:inOptions:withDefaultValue:error:") ~typ:(ptr (double) @-> id @-> id @-> double @-> ptr (id) @-> returning (bool)) x forKey inOptions withDefaultValue error
  let getFloatValue x ~forKey ~inOptions ~error self = msg_send ~self ~cmd:(selector "getFloatValue:forKey:inOptions:error:") ~typ:(ptr (float) @-> id @-> id @-> ptr (id) @-> returning (bool)) x forKey inOptions error
  let getFloatValue' x ~forKey ~inOptions ~withDefaultValue ~error self = msg_send ~self ~cmd:(selector "getFloatValue:forKey:inOptions:withDefaultValue:error:") ~typ:(ptr (float) @-> id @-> id @-> float @-> ptr (id) @-> returning (bool)) x forKey inOptions withDefaultValue error
  let getOptionalArray x ~forKey ~inOptions ~withElementsOfClass ~error self = msg_send ~self ~cmd:(selector "getOptionalArray:forKey:inOptions:withElementsOfClass:error:") ~typ:(ptr (id) @-> id @-> id @-> _Class @-> ptr (id) @-> returning (bool)) x forKey inOptions withElementsOfClass error
  let getOptionalObject x ~ofClass ~forKey ~inOptions ~error self = msg_send ~self ~cmd:(selector "getOptionalObject:ofClass:forKey:inOptions:error:") ~typ:(ptr (id) @-> _Class @-> id @-> id @-> ptr (id) @-> returning (bool)) x ofClass forKey inOptions error
  let getRequiredObject x ~ofClass ~forKey ~inOptions ~error self = msg_send ~self ~cmd:(selector "getRequiredObject:ofClass:forKey:inOptions:error:") ~typ:(ptr (id) @-> _Class @-> id @-> id @-> ptr (id) @-> returning (bool)) x ofClass forKey inOptions error
  let initialize self = msg_send ~self ~cmd:(selector "initialize") ~typ:(returning (void))
  let newConfigurationInstance self = msg_send ~self ~cmd:(selector "newConfigurationInstance") ~typ:(returning (id))
  let privateRevisionsSet self = msg_send ~self ~cmd:(selector "privateRevisionsSet") ~typ:(returning (id))
  let publicRevisionsSet self = msg_send ~self ~cmd:(selector "publicRevisionsSet") ~typ:(returning (id))
  let recordSpecifierModelEquivalenciesInRegistrar x ~error self = msg_send ~self ~cmd:(selector "recordSpecifierModelEquivalenciesInRegistrar:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
  let resolvedRevisionForRevision x self = msg_send ~self ~cmd:(selector "resolvedRevisionForRevision:") ~typ:(ullong @-> returning (ullong)) x
  let revision x ~mayAcceptResultsProducedByRevision self = msg_send ~self ~cmd:(selector "revision:mayAcceptResultsProducedByRevision:") ~typ:(ullong @-> ullong @-> returning (bool)) x mayAcceptResultsProducedByRevision
  let setsTimeRangeOnResults self = msg_send ~self ~cmd:(selector "setsTimeRangeOnResults") ~typ:(returning (bool))
  let supportedPrivateRevisions self = msg_send ~self ~cmd:(selector "supportedPrivateRevisions") ~typ:(returning (id))
  let supportedRevisions self = msg_send ~self ~cmd:(selector "supportedRevisions") ~typ:(returning (id))
  let supportedRevisionsAreFilteredBasedOnAvailableComputeDevices self = msg_send ~self ~cmd:(selector "supportedRevisionsAreFilteredBasedOnAvailableComputeDevices") ~typ:(returning (bool))
  let supportsAnyRevision x self = msg_send ~self ~cmd:(selector "supportsAnyRevision:") ~typ:(ullong @-> returning (bool)) x
  let supportsPrivateRevision x self = msg_send ~self ~cmd:(selector "supportsPrivateRevision:") ~typ:(ullong @-> returning (bool)) x
  let supportsRevision x self = msg_send ~self ~cmd:(selector "supportsRevision:") ~typ:(ullong @-> returning (bool)) x
  let warmUpSession x ~error self = msg_send ~self ~cmd:(selector "warmUpSession:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
end

let _VNCoreMLTransformerDetectionprintAndReturnError x self = msg_send ~self ~cmd:(selector "VNCoreMLTransformerDetectionprintAndReturnError:") ~typ:(ptr (id) @-> returning (id)) x
let _VNCoreMLTransformerSceneprintsAndReturnError x self = msg_send ~self ~cmd:(selector "VNCoreMLTransformerSceneprintsAndReturnError:") ~typ:(ptr (id) @-> returning (id)) x
let _VNImageProcessingSessionPrintAndReturnError x self = msg_send ~self ~cmd:(selector "VNImageProcessingSessionPrintAndReturnError:") ~typ:(ptr (id) @-> returning (id)) x
let _VNImageProcessingSessionPrintKeyPath self = msg_send ~self ~cmd:(selector "VNImageProcessingSessionPrintKeyPath") ~typ:(returning (id))
let _VNImageProcessingSessionRegionOfInterest self = msg_send ~self ~cmd:(selector "VNImageProcessingSessionRegionOfInterest") ~typ:(returning (CGRect.t))
let allowsCachingOfResults self = msg_send ~self ~cmd:(selector "allowsCachingOfResults") ~typ:(returning (bool))
let applicableDetectorAndOptions x ~forRevision ~loadedInSession ~error self = msg_send ~self ~cmd:(selector "applicableDetectorAndOptions:forRevision:loadedInSession:error:") ~typ:(ptr (id) @-> ullong @-> id @-> ptr (id) @-> returning (id)) x forRevision loadedInSession error
let applicableDetectorClassAndOptions x ~forRevision ~error self = msg_send ~self ~cmd:(selector "applicableDetectorClassAndOptions:forRevision:error:") ~typ:(ptr (id) @-> ullong @-> ptr (id) @-> returning (_Class)) x forRevision error
let applicableDetectorTypeForRevision x ~error self = msg_send ~self ~cmd:(selector "applicableDetectorTypeForRevision:error:") ~typ:(ullong @-> ptr (id) @-> returning (id)) x error
let applicableRevisionForDependentRequest x self = msg_send ~self ~cmd:(selector "applicableRevisionForDependentRequest:") ~typ:(id @-> returning (ullong)) x
let applyCompatibleComputeStageDeviceAssignmentsOfRequest x self = msg_send ~self ~cmd:(selector "applyCompatibleComputeStageDeviceAssignmentsOfRequest:") ~typ:(id @-> returning (void)) x
let applyConfigurationOfRequest x self = msg_send ~self ~cmd:(selector "applyConfigurationOfRequest:") ~typ:(id @-> returning (void)) x
let asyncStatus self = msg_send ~self ~cmd:(selector "asyncStatus") ~typ:(returning (id))
let cancel self = msg_send ~self ~cmd:(selector "cancel") ~typ:(returning (void))
let cancellationSemaphore self = msg_send ~self ~cmd:(selector "cancellationSemaphore") ~typ:(returning (id))
let cancellationTriggered self = msg_send ~self ~cmd:(selector "cancellationTriggered") ~typ:(returning (bool))
let cancellationTriggeredAndReturnError x self = msg_send ~self ~cmd:(selector "cancellationTriggeredAndReturnError:") ~typ:(ptr (id) @-> returning (bool)) x
let cancellerAndReturnError x self = msg_send ~self ~cmd:(selector "cancellerAndReturnError:") ~typ:(ptr (id) @-> returning (id)) x
let categorizeFaceObservations x ~shouldRunDetectorBlock ~facesThatNeedNoProcessing ~facesThatNeedProcessing ~facesThatNeed2DLandmarks self = msg_send ~self ~cmd:(selector "categorizeFaceObservations:shouldRunDetectorBlock:facesThatNeedNoProcessing:facesThatNeedProcessing:facesThatNeed2DLandmarks:") ~typ:(id @-> ptr void @-> id @-> id @-> id @-> returning (void)) x shouldRunDetectorBlock facesThatNeedNoProcessing facesThatNeedProcessing facesThatNeed2DLandmarks
let completionHandler self = msg_send ~self ~cmd:(selector "completionHandler") ~typ:(returning (ptr void))
let computeDeviceForComputeStage x self = msg_send ~self ~cmd:(selector "computeDeviceForComputeStage:") ~typ:(id @-> returning (id)) x
let computeStageDeviceAssignments self = msg_send ~self ~cmd:(selector "computeStageDeviceAssignments") ~typ:(returning (id))
let configuration self = msg_send ~self ~cmd:(selector "configuration") ~typ:(returning (id))
let copyStateOfRequest x self = msg_send ~self ~cmd:(selector "copyStateOfRequest:") ~typ:(id @-> returning (void)) x
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x
let dependencyProcessingOrdinality self = msg_send ~self ~cmd:(selector "dependencyProcessingOrdinality") ~typ:(returning (llong))
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let detectFaceLandmarksInContext x ~faces ~error self = msg_send ~self ~cmd:(selector "detectFaceLandmarksInContext:faces:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (id)) x faces error
let detectFacesInContext x ~error self = msg_send ~self ~cmd:(selector "detectFacesInContext:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let detectionLevel self = msg_send ~self ~cmd:(selector "detectionLevel") ~typ:(returning (ullong))
let detectorProgressHandler self = msg_send ~self ~cmd:(selector "detectorProgressHandler") ~typ:(returning (ptr void))
let executionNanoseconds self = msg_send ~self ~cmd:(selector "executionNanoseconds") ~typ:(returning (ullong))
let executionTimeInternal self = msg_send ~self ~cmd:(selector "executionTimeInternal") ~typ:(returning (double))
let frameworkClass self = msg_send ~self ~cmd:(selector "frameworkClass") ~typ:(returning (_Class))
let hasCancellationHook self = msg_send ~self ~cmd:(selector "hasCancellationHook") ~typ:(returning (bool))
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initWithCompletionHandler x self = msg_send ~self ~cmd:(selector "initWithCompletionHandler:") ~typ:(ptr void @-> returning (id)) x
let internalCancelInContext x ~error self = msg_send ~self ~cmd:(selector "internalCancelInContext:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let internalPerformRevision x ~inContext ~error self = msg_send ~self ~cmd:(selector "internalPerformRevision:inContext:error:") ~typ:(ullong @-> id @-> ptr (id) @-> returning (bool)) x inContext error
let ioSurfaceMemoryPoolId self = msg_send ~self ~cmd:(selector "ioSurfaceMemoryPoolId") ~typ:(returning (ullong))
let maximumProcessingDimensionOnTheLongSide self = msg_send ~self ~cmd:(selector "maximumProcessingDimensionOnTheLongSide") ~typ:(returning (ullong))
let metalContextPriority self = msg_send ~self ~cmd:(selector "metalContextPriority") ~typ:(returning (ullong))
let modelFileBackingStore self = msg_send ~self ~cmd:(selector "modelFileBackingStore") ~typ:(returning (ullong))
let newDefaultDetectorOptionsForRequestRevision x ~session self = msg_send ~self ~cmd:(selector "newDefaultDetectorOptionsForRequestRevision:session:") ~typ:(ullong @-> id @-> returning (id)) x session
let newDefaultDetectorOptionsForSession x self = msg_send ~self ~cmd:(selector "newDefaultDetectorOptionsForSession:") ~typ:(id @-> returning (id)) x
let newDuplicateInstance self = msg_send ~self ~cmd:(selector "newDuplicateInstance") ~typ:(returning (id))
let originatingRequestSpecifier self = msg_send ~self ~cmd:(selector "originatingRequestSpecifier") ~typ:(returning (id))
let performInContext x ~error self = msg_send ~self ~cmd:(selector "performInContext:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let performInContextAsync x ~asyncDispatchQueue ~asyncDispatchGroup self = msg_send ~self ~cmd:(selector "performInContextAsync:asyncDispatchQueue:asyncDispatchGroup:") ~typ:(id @-> id @-> id @-> returning (void)) x asyncDispatchQueue asyncDispatchGroup
let preferBackgroundProcessing self = msg_send ~self ~cmd:(selector "preferBackgroundProcessing") ~typ:(returning (bool))
let preferredMetalContext self = msg_send ~self ~cmd:(selector "preferredMetalContext") ~typ:(returning (id))
let processFaceObservations x ~revision ~regionOfInterest ~detectorType ~detectorOptions ~shouldAlignFaceBBox ~shouldRunDetectorBlock ~context ~error self = msg_send ~self ~cmd:(selector "processFaceObservations:revision:regionOfInterest:detectorType:detectorOptions:shouldAlignFaceBBox:shouldRunDetectorBlock:context:error:") ~typ:(id @-> ullong @-> CGRect.t @-> id @-> id @-> ptr void @-> ptr void @-> id @-> ptr (id) @-> returning (id)) x revision regionOfInterest detectorType detectorOptions shouldAlignFaceBBox shouldRunDetectorBlock context error
let processingDevice self = msg_send ~self ~cmd:(selector "processingDevice") ~typ:(returning (id))
let receiveObservations x self = msg_send ~self ~cmd:(selector "receiveObservations:") ~typ:(id @-> returning (void)) x
let recordWarning x ~value self = msg_send ~self ~cmd:(selector "recordWarning:value:") ~typ:(id @-> id @-> returning (void)) x value
let requestTasksQueue self = msg_send ~self ~cmd:(selector "requestTasksQueue") ~typ:(returning (id))
let resetAsyncStatus self = msg_send ~self ~cmd:(selector "resetAsyncStatus") ~typ:(returning (void))
let resolvedComputeStageDeviceAssignments self = msg_send ~self ~cmd:(selector "resolvedComputeStageDeviceAssignments") ~typ:(returning (id))
let resolvedRevision self = msg_send ~self ~cmd:(selector "resolvedRevision") ~typ:(returning (ullong))
let resolvedRevisionDidChangeFromRevision x self = msg_send ~self ~cmd:(selector "resolvedRevisionDidChangeFromRevision:") ~typ:(ullong @-> returning (void)) x
let results self = msg_send ~self ~cmd:(selector "results") ~typ:(returning (id))
let resultsAreAssignedWithOriginatingRequestSpecifier self = msg_send ~self ~cmd:(selector "resultsAreAssignedWithOriginatingRequestSpecifier") ~typ:(returning (bool))
let revision self = msg_send ~self ~cmd:(selector "revision") ~typ:(returning (ullong))
let sequencedRequestPreviousObservationsKey self = msg_send ~self ~cmd:(selector "sequencedRequestPreviousObservationsKey") ~typ:(returning (id))
let serialNumber self = msg_send ~self ~cmd:(selector "serialNumber") ~typ:(returning (ullong))
let setAsyncStatus x ~error self = msg_send ~self ~cmd:(selector "setAsyncStatus:error:") ~typ:(bool @-> id @-> returning (void)) x error
let setCancellationSemaphore x self = msg_send ~self ~cmd:(selector "setCancellationSemaphore:") ~typ:(id @-> returning (void)) x
let setComputeDevice x ~forComputeStage self = msg_send ~self ~cmd:(selector "setComputeDevice:forComputeStage:") ~typ:(id @-> id @-> returning (void)) x forComputeStage
let setDetectionLevel x self = msg_send ~self ~cmd:(selector "setDetectionLevel:") ~typ:(ullong @-> returning (void)) x
let setIoSurfaceMemoryPoolId x self = msg_send ~self ~cmd:(selector "setIoSurfaceMemoryPoolId:") ~typ:(ullong @-> returning (void)) x
let setMaximumProcessingDimensionOnTheLongSide x self = msg_send ~self ~cmd:(selector "setMaximumProcessingDimensionOnTheLongSide:") ~typ:(ullong @-> returning (void)) x
let setMetalContextPriority x self = msg_send ~self ~cmd:(selector "setMetalContextPriority:") ~typ:(ullong @-> returning (void)) x
let setModelFileBackingStore x self = msg_send ~self ~cmd:(selector "setModelFileBackingStore:") ~typ:(ullong @-> returning (void)) x
let setPreferBackgroundProcessing x self = msg_send ~self ~cmd:(selector "setPreferBackgroundProcessing:") ~typ:(bool @-> returning (void)) x
let setPreferredMetalContext x self = msg_send ~self ~cmd:(selector "setPreferredMetalContext:") ~typ:(id @-> returning (void)) x
let setProcessedResults x self = msg_send ~self ~cmd:(selector "setProcessedResults:") ~typ:(id @-> returning (void)) x
let setProcessingDevice x self = msg_send ~self ~cmd:(selector "setProcessingDevice:") ~typ:(id @-> returning (void)) x
let setResults x self = msg_send ~self ~cmd:(selector "setResults:") ~typ:(id @-> returning (void)) x
let setResults' x ~assignedWithOriginatingSpecifier self = msg_send ~self ~cmd:(selector "setResults:assignedWithOriginatingSpecifier:") ~typ:(id @-> bool @-> returning (void)) x assignedWithOriginatingSpecifier
let setRevision x self = msg_send ~self ~cmd:(selector "setRevision:") ~typ:(ullong @-> returning (void)) x
let setRevision' x ~error self = msg_send ~self ~cmd:(selector "setRevision:error:") ~typ:(ullong @-> ptr (id) @-> returning (bool)) x error
let setUsesCPUOnly x self = msg_send ~self ~cmd:(selector "setUsesCPUOnly:") ~typ:(bool @-> returning (void)) x
let specifier self = msg_send ~self ~cmd:(selector "specifier") ~typ:(returning (id))
let supportedComputeStageDevicesAndReturnError x self = msg_send ~self ~cmd:(selector "supportedComputeStageDevicesAndReturnError:") ~typ:(ptr (id) @-> returning (id)) x
let usesCPUOnly self = msg_send ~self ~cmd:(selector "usesCPUOnly") ~typ:(returning (bool))
let utilizedResourcesWithError x self = msg_send ~self ~cmd:(selector "utilizedResourcesWithError:") ~typ:(ptr (id) @-> returning (id)) x
let validateConfigurationAndReturnError x self = msg_send ~self ~cmd:(selector "validateConfigurationAndReturnError:") ~typ:(ptr (id) @-> returning (bool)) x
let validateImageBuffer x ~ofNonZeroWidth ~andHeight ~error self = msg_send ~self ~cmd:(selector "validateImageBuffer:ofNonZeroWidth:andHeight:error:") ~typ:(id @-> ptr (ullong) @-> ptr (ullong) @-> ptr (id) @-> returning (bool)) x ofNonZeroWidth andHeight error
let valueForWarning x self = msg_send ~self ~cmd:(selector "valueForWarning:") ~typ:(id @-> returning (id)) x
let wantsSequencedRequestObservationsRecording self = msg_send ~self ~cmd:(selector "wantsSequencedRequestObservationsRecording") ~typ:(returning (bool))
let warmUpApplicableDetectorInSession x ~error self = msg_send ~self ~cmd:(selector "warmUpApplicableDetectorInSession:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let warmUpSession x ~error self = msg_send ~self ~cmd:(selector "warmUpSession:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let warnings self = msg_send ~self ~cmd:(selector "warnings") ~typ:(returning (id))
let willAcceptCachedResultsFromRequestWithConfiguration x self = msg_send ~self ~cmd:(selector "willAcceptCachedResultsFromRequestWithConfiguration:") ~typ:(id @-> returning (bool)) x