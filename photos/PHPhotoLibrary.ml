(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "PHPhotoLibrary"

module C = struct
  let _PHObjectClassForEntityName x self = msg_send ~self ~cmd:(selector "PHObjectClassForEntityName:") ~typ:(id @-> returning (_Class)) x
  let _PHObjectClassForOID x self = msg_send ~self ~cmd:(selector "PHObjectClassForOID:") ~typ:(id @-> returning (_Class)) x
  let _PHObjectClassForObjectType x self = msg_send ~self ~cmd:(selector "PHObjectClassForObjectType:") ~typ:(llong @-> returning (_Class)) (LLong.of_int x)
  let _PHObjectClasses self = msg_send ~self ~cmd:(selector "PHObjectClasses") ~typ:(returning (id))
  let _PHObjectClassesByEntityName self = msg_send ~self ~cmd:(selector "PHObjectClassesByEntityName") ~typ:(returning (id))
  let assertRunningInExtension self = msg_send ~self ~cmd:(selector "assertRunningInExtension") ~typ:(returning (void))
  let assertTransaction self = msg_send ~self ~cmd:(selector "assertTransaction") ~typ:(returning (void))
  let authorizationStatus self = msg_send ~self ~cmd:(selector "authorizationStatus") ~typ:(returning (llong))
  let authorizationStatusForAccessLevel x self = msg_send ~self ~cmd:(selector "authorizationStatusForAccessLevel:") ~typ:(llong @-> returning (llong)) (LLong.of_int x)
  let checkAuthorizationStatusForAPIAccessLevel x self = msg_send ~self ~cmd:(selector "checkAuthorizationStatusForAPIAccessLevel:") ~typ:(llong @-> returning (bool)) (LLong.of_int x)
  let checkAuthorizationStatusForAPIAccessLevel' x ~suppressPrompt self = msg_send ~self ~cmd:(selector "checkAuthorizationStatusForAPIAccessLevel:suppressPrompt:") ~typ:(llong @-> bool @-> returning (bool)) (LLong.of_int x) suppressPrompt
  let classForFetchType x self = msg_send ~self ~cmd:(selector "classForFetchType:") ~typ:(id @-> returning (_Class)) x
  let collectionListTypeForIdentifierCode x self = msg_send ~self ~cmd:(selector "collectionListTypeForIdentifierCode:") ~typ:(id @-> returning (llong)) x
  let createOrUpgradePhotoLibraryWithWellKnownIdentifier x ~error self = msg_send ~self ~cmd:(selector "createOrUpgradePhotoLibraryWithWellKnownIdentifier:error:") ~typ:(llong @-> ptr (id) @-> returning (bool)) (LLong.of_int x) error
  let enableMultiLibraryMode self = msg_send ~self ~cmd:(selector "enableMultiLibraryMode") ~typ:(returning (void))
  let fetchTypeForLocalIdentifierCode x self = msg_send ~self ~cmd:(selector "fetchTypeForLocalIdentifierCode:") ~typ:(id @-> returning (id)) x
  let hasSharedPhotoLibrary self = msg_send ~self ~cmd:(selector "hasSharedPhotoLibrary") ~typ:(returning (bool))
  let imagePickerPhotoLibrary self = msg_send ~self ~cmd:(selector "imagePickerPhotoLibrary") ~typ:(returning (id))
  let initialize self = msg_send ~self ~cmd:(selector "initialize") ~typ:(returning (void))
  let isMultiLibraryModeEnabled self = msg_send ~self ~cmd:(selector "isMultiLibraryModeEnabled") ~typ:(returning (bool))
  let isPhotosApplicationInstalled self = msg_send ~self ~cmd:(selector "isPhotosApplicationInstalled") ~typ:(returning (bool))
  let isSystemPhotoLibraryURL x self = msg_send ~self ~cmd:(selector "isSystemPhotoLibraryURL:") ~typ:(id @-> returning (bool)) x
  let mediaProcessingDeviceIndependentFacesSortDescriptors self = msg_send ~self ~cmd:(selector "mediaProcessingDeviceIndependentFacesSortDescriptors") ~typ:(returning (id))
  let mediaProcessingFacesSortDescriptorsForGeneratingPersonModel self = msg_send ~self ~cmd:(selector "mediaProcessingFacesSortDescriptorsForGeneratingPersonModel") ~typ:(returning (id))
  let nextOverrideTimeIntervalForSystemBudgets x self = msg_send ~self ~cmd:(selector "nextOverrideTimeIntervalForSystemBudgets:") ~typ:(ullong @-> returning (double)) (ULLong.of_int x)
  let openPhotoLibraryWithWellKnownIdentifier x ~error self = msg_send ~self ~cmd:(selector "openPhotoLibraryWithWellKnownIdentifier:error:") ~typ:(llong @-> ptr (id) @-> returning (id)) (LLong.of_int x) error
  let photoLibraryForCurrentTransaction self = msg_send ~self ~cmd:(selector "photoLibraryForCurrentTransaction") ~typ:(returning (id))
  let removeAllUniquedOIDs self = msg_send ~self ~cmd:(selector "removeAllUniquedOIDs") ~typ:(returning (void))
  let requestAuthorization x self = msg_send ~self ~cmd:(selector "requestAuthorization:") ~typ:(ptr void @-> returning (void)) x
  let requestAuthorizationForAccessLevel x ~handler self = msg_send ~self ~cmd:(selector "requestAuthorizationForAccessLevel:handler:") ~typ:(llong @-> ptr void @-> returning (void)) (LLong.of_int x) handler
  let setImagePickerPhotoLibrary x ~error self = msg_send ~self ~cmd:(selector "setImagePickerPhotoLibrary:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
  let setNeedsToRepairKeyCuratedAssetForMemories x self = msg_send ~self ~cmd:(selector "setNeedsToRepairKeyCuratedAssetForMemories:") ~typ:(id @-> returning (void)) x
  let setSharedPhotoLibrary x self = msg_send ~self ~cmd:(selector "setSharedPhotoLibrary:") ~typ:(id @-> returning (void)) x
  let setSystemPhotoLibraryURL x ~error self = msg_send ~self ~cmd:(selector "setSystemPhotoLibraryURL:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
  let sharedContactStore self = msg_send ~self ~cmd:(selector "sharedContactStore") ~typ:(returning (id))
  let sharedLazyPhotoLibraryForCMM self = msg_send ~self ~cmd:(selector "sharedLazyPhotoLibraryForCMM") ~typ:(returning (id))
  let sharedMomentSharePhotoLibrary self = msg_send ~self ~cmd:(selector "sharedMomentSharePhotoLibrary") ~typ:(returning (id))
  let sharedPhotoLibrary self = msg_send ~self ~cmd:(selector "sharedPhotoLibrary") ~typ:(returning (id))
  let shouldDisplayMergeCandidates x ~forPerson self = msg_send ~self ~cmd:(selector "shouldDisplayMergeCandidates:forPerson:") ~typ:(id @-> id @-> returning (bool)) x forPerson
  let stringFromPHPhotoLibraryType x self = msg_send ~self ~cmd:(selector "stringFromPHPhotoLibraryType:") ~typ:(ushort @-> returning (id)) x
  let systemPhotoLibraryAvailableNotificationName self = msg_send ~self ~cmd:(selector "systemPhotoLibraryAvailableNotificationName") ~typ:(returning (string))
  let systemPhotoLibraryURL self = msg_send ~self ~cmd:(selector "systemPhotoLibraryURL") ~typ:(returning (id))
  let systemPhotoLibraryURLChangeNotificationName self = msg_send ~self ~cmd:(selector "systemPhotoLibraryURLChangeNotificationName") ~typ:(returning (string))
  let uniqueObjectIDCache self = msg_send ~self ~cmd:(selector "uniqueObjectIDCache") ~typ:(returning (id))
  let uniquedOID x self = msg_send ~self ~cmd:(selector "uniquedOID:") ~typ:(id @-> returning (id)) x
  let uniquedOIDs x self = msg_send ~self ~cmd:(selector "uniquedOIDs:") ~typ:(id @-> returning (id)) x
  let uniquedOIDsFromObjects x self = msg_send ~self ~cmd:(selector "uniquedOIDsFromObjects:") ~typ:(id @-> returning (id)) x
  let unsafeShutdownLibraryWithPhotoLibraryURL x self = msg_send ~self ~cmd:(selector "unsafeShutdownLibraryWithPhotoLibraryURL:") ~typ:(id @-> returning (void)) x
  let wellKnownPhotoLibraryURLForIdentifier x self = msg_send ~self ~cmd:(selector "wellKnownPhotoLibraryURLForIdentifier:") ~typ:(llong @-> returning (id)) (LLong.of_int x)
end

let accountDidChange x self = msg_send ~self ~cmd:(selector "accountDidChange:") ~typ:(id @-> returning (void)) x
let albumRootFolderObjectID self = msg_send ~self ~cmd:(selector "albumRootFolderObjectID") ~typ:(returning (id))
let allSocialGroupsForPersonLocalIdentifier x ~options ~error self = msg_send ~self ~cmd:(selector "allSocialGroupsForPersonLocalIdentifier:options:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (id)) x options error
let allowedEntities self = msg_send ~self ~cmd:(selector "allowedEntities") ~typ:(returning (id))
let appPrivateData self = msg_send ~self ~cmd:(selector "appPrivateData") ~typ:(returning (id))
let appPrivateDataWriteFailedWithError x self = msg_send ~self ~cmd:(selector "appPrivateDataWriteFailedWithError:") ~typ:(id @-> returning (void)) x
let assertTransaction self = msg_send ~self ~cmd:(selector "assertTransaction") ~typ:(returning (void))
let assetIdentifiersForPersonIdentifiers x ~error self = msg_send ~self ~cmd:(selector "assetIdentifiersForPersonIdentifiers:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let assetsArePendingForDuplicateMergeProcessingWithLocalIdentifiers x self = msg_send ~self ~cmd:(selector "assetsArePendingForDuplicateMergeProcessingWithLocalIdentifiers:") ~typ:(id @-> returning (bool)) x
let assetsdClient self = msg_send ~self ~cmd:(selector "assetsdClient") ~typ:(returning (id))
let availabilityObservers self = msg_send ~self ~cmd:(selector "availabilityObservers") ~typ:(returning (id))
let backgroundQueueObjectFetchingPhotoLibrary self = msg_send ~self ~cmd:(selector "backgroundQueueObjectFetchingPhotoLibrary") ~typ:(returning (id))
let backgroundQueuePhotoLibrary self = msg_send ~self ~cmd:(selector "backgroundQueuePhotoLibrary") ~typ:(returning (id))
let cacheMetricsCollector self = msg_send ~self ~cmd:(selector "cacheMetricsCollector") ~typ:(returning (id))
let cancelOperationsWithIdentifiers x ~reply self = msg_send ~self ~cmd:(selector "cancelOperationsWithIdentifiers:reply:") ~typ:(id @-> ptr void @-> returning (void)) x reply
let changeHandlingPhotoLibrary self = msg_send ~self ~cmd:(selector "changeHandlingPhotoLibrary") ~typ:(returning (id))
let changeNotificationInfo self = msg_send ~self ~cmd:(selector "changeNotificationInfo") ~typ:(returning (id))
let changeRequestForUUID x self = msg_send ~self ~cmd:(selector "changeRequestForUUID:") ~typ:(id @-> returning (id)) x
let clearsOIDCacheAfterFetchResultDealloc self = msg_send ~self ~cmd:(selector "clearsOIDCacheAfterFetchResultDealloc") ~typ:(returning (bool))
let close self = msg_send ~self ~cmd:(selector "close") ~typ:(returning (void))
let closeWithReason x self = msg_send ~self ~cmd:(selector "closeWithReason:") ~typ:(id @-> returning (void)) x
let cloudIdentifierMappingsForLocalIdentifiers x self = msg_send ~self ~cmd:(selector "cloudIdentifierMappingsForLocalIdentifiers:") ~typ:(id @-> returning (id)) x
let cloudIdentifiersForLocalIdentifiers x self = msg_send ~self ~cmd:(selector "cloudIdentifiersForLocalIdentifiers:") ~typ:(id @-> returning (id)) x
let cloudQuotaResourceBytesUsed x ~error self = msg_send ~self ~cmd:(selector "cloudQuotaResourceBytesUsed:error:") ~typ:(ptr (id) @-> ptr (id) @-> returning (bool)) x error
let cloudQuotaResourceBytesUsed' x ~minVideoSize ~error self = msg_send ~self ~cmd:(selector "cloudQuotaResourceBytesUsed:minVideoSize:error:") ~typ:(ptr (id) @-> ullong @-> ptr (id) @-> returning (bool)) x (ULLong.of_int minVideoSize) error
let cloudQuotaResourceBytesUsedForMinVideoSize x ~completion self = msg_send ~self ~cmd:(selector "cloudQuotaResourceBytesUsedForMinVideoSize:completion:") ~typ:(ullong @-> ptr void @-> returning (void)) (ULLong.of_int x) completion
let countOfClusteringEligibleFaces self = msg_send ~self ~cmd:(selector "countOfClusteringEligibleFaces") ~typ:(returning (ullong))
let countOfDirtyFaceGroups self = msg_send ~self ~cmd:(selector "countOfDirtyFaceGroups") ~typ:(returning (ullong))
let countOfFaceCropsToBeGenerated self = msg_send ~self ~cmd:(selector "countOfFaceCropsToBeGenerated") ~typ:(returning (ullong))
let countOfFetchResultsRegisteredForChangeNotifications self = msg_send ~self ~cmd:(selector "countOfFetchResultsRegisteredForChangeNotifications") ~typ:(returning (ullong))
let countOfReferencedMediaWithCompletionHandler x self = msg_send ~self ~cmd:(selector "countOfReferencedMediaWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let countOfUnclusteredFaces self = msg_send ~self ~cmd:(selector "countOfUnclusteredFaces") ~typ:(returning (ullong))
let countOfUnprocessedFaceCrops self = msg_send ~self ~cmd:(selector "countOfUnprocessedFaceCrops") ~typ:(returning (ullong))
let cplStatus self = msg_send ~self ~cmd:(selector "cplStatus") ~typ:(returning (id))
let createOrUpgradeLibraryUsingOptions x ~error self = msg_send ~self ~cmd:(selector "createOrUpgradeLibraryUsingOptions:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let createPhotoLibraryUsingOptions x ~error self = msg_send ~self ~cmd:(selector "createPhotoLibraryUsingOptions:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let createPhotoLibraryWithError x self = msg_send ~self ~cmd:(selector "createPhotoLibraryWithError:") ~typ:(ptr (id) @-> returning (bool)) x
let createPhotoLibraryWithOptions x ~error self = msg_send ~self ~cmd:(selector "createPhotoLibraryWithOptions:error:") ~typ:(ullong @-> ptr (id) @-> returning (bool)) (ULLong.of_int x) error
let curationDebugInformationForAssetCollectionWithLocalIdentifier x ~options ~error self = msg_send ~self ~cmd:(selector "curationDebugInformationForAssetCollectionWithLocalIdentifier:options:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (id)) x options error
let curationDebugInformationForAssetLocalIdentifier x ~error self = msg_send ~self ~cmd:(selector "curationDebugInformationForAssetLocalIdentifier:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let currentChangeToken self = msg_send ~self ~cmd:(selector "currentChangeToken") ~typ:(returning (id))
let currentToken self = msg_send ~self ~cmd:(selector "currentToken") ~typ:(returning (id))
let databaseUUID self = msg_send ~self ~cmd:(selector "databaseUUID") ~typ:(returning (id))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let debugDescription self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning (id))
let exportGraphForPurpose x ~error self = msg_send ~self ~cmd:(selector "exportGraphForPurpose:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let faceAnalysisProcessingCounts self = msg_send ~self ~cmd:(selector "faceAnalysisProcessingCounts") ~typ:(returning (id))
let faceAnalysisProgressCounts self = msg_send ~self ~cmd:(selector "faceAnalysisProgressCounts") ~typ:(returning (id))
let faceAnalysisProgressForHighlight x self = msg_send ~self ~cmd:(selector "faceAnalysisProgressForHighlight:") ~typ:(id @-> returning (double)) x
let faceClusterSequenceNumbersOfFacesWithClusterSequenceNumbers x ~error self = msg_send ~self ~cmd:(selector "faceClusterSequenceNumbersOfFacesWithClusterSequenceNumbers:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let faceClusterSequenceNumbersOfKeyFacesInAlgorithmicFaceGroupsForPerson x ~verifiedClusterSequenceNumbers self = msg_send ~self ~cmd:(selector "faceClusterSequenceNumbersOfKeyFacesInAlgorithmicFaceGroupsForPerson:verifiedClusterSequenceNumbers:") ~typ:(id @-> id @-> returning (id)) x verifiedClusterSequenceNumbers
let fetchAssetsForMediaProcessingTaskID x ~priority ~analysisVersion ~sceneConfidenceThreshold ~adjustedSinceDate ~error self = msg_send ~self ~cmd:(selector "fetchAssetsForMediaProcessingTaskID:priority:analysisVersion:sceneConfidenceThreshold:adjustedSinceDate:error:") ~typ:(ullong @-> ullong @-> int @-> float @-> id @-> ptr (id) @-> returning (id)) (ULLong.of_int x) (ULLong.of_int priority) analysisVersion sceneConfidenceThreshold adjustedSinceDate error
let fetchCountOfAssetsWithAllowedForAnalysis self = msg_send ~self ~cmd:(selector "fetchCountOfAssetsWithAllowedForAnalysis") ~typ:(returning (llong))
let fetchCountOfAssetsWithFacesProcessedToAnyVersion self = msg_send ~self ~cmd:(selector "fetchCountOfAssetsWithFacesProcessedToAnyVersion") ~typ:(returning (llong))
let fetchCountOfAssetsWithFacesProcessedToLatestVersion self = msg_send ~self ~cmd:(selector "fetchCountOfAssetsWithFacesProcessedToLatestVersion") ~typ:(returning (llong))
let fetchCountOfAssetsWithMediaAnalysisProcessed self = msg_send ~self ~cmd:(selector "fetchCountOfAssetsWithMediaAnalysisProcessed") ~typ:(returning (llong))
let fetchCountOfAssetsWithScenesProcessed self = msg_send ~self ~cmd:(selector "fetchCountOfAssetsWithScenesProcessed") ~typ:(returning (llong))
let fetchDictionariesByPHClassForOIDs x ~propertyHint ~includeTrash ~overrideWithPHClass self = msg_send ~self ~cmd:(selector "fetchDictionariesByPHClassForOIDs:propertyHint:includeTrash:overrideWithPHClass:") ~typ:(id @-> ullong @-> bool @-> _Class @-> returning (id)) x (ULLong.of_int propertyHint) includeTrash overrideWithPHClass
let fetchFacesForMediaProcessingWithPersonLocalIdentifiers x ~inMoment self = msg_send ~self ~cmd:(selector "fetchFacesForMediaProcessingWithPersonLocalIdentifiers:inMoment:") ~typ:(id @-> id @-> returning (id)) x inMoment
let fetchPHObjectsForOIDs x self = msg_send ~self ~cmd:(selector "fetchPHObjectsForOIDs:") ~typ:(id @-> returning (id)) x
let fetchPHObjectsForOIDs' x ~propertyHint ~includeTrash ~overrideResultsWithClass self = msg_send ~self ~cmd:(selector "fetchPHObjectsForOIDs:propertyHint:includeTrash:overrideResultsWithClass:") ~typ:(id @-> ullong @-> bool @-> _Class @-> returning (id)) x (ULLong.of_int propertyHint) includeTrash overrideResultsWithClass
let fetchPHObjectsForUUIDs x ~entityName self = msg_send ~self ~cmd:(selector "fetchPHObjectsForUUIDs:entityName:") ~typ:(id @-> id @-> returning (id)) x entityName
let fetchPersistentChangesSinceToken x ~error self = msg_send ~self ~cmd:(selector "fetchPersistentChangesSinceToken:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let fetchPersistentChangesWithRequest x ~error self = msg_send ~self ~cmd:(selector "fetchPersistentChangesWithRequest:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let fetchPropertiesByOID x ~propertyNamesByEntityName self = msg_send ~self ~cmd:(selector "fetchPropertiesByOID:propertyNamesByEntityName:") ~typ:(id @-> id @-> returning (id)) x propertyNamesByEntityName
let fetchUpdatedObject x self = msg_send ~self ~cmd:(selector "fetchUpdatedObject:") ~typ:(id @-> returning (id)) x
let fetchedObjectsForOIDs x ~propertySetClass self = msg_send ~self ~cmd:(selector "fetchedObjectsForOIDs:propertySetClass:") ~typ:(id @-> _Class @-> returning (id)) x propertySetClass
let getCPLConfigrationValueForClient x ~completionHandler self = msg_send ~self ~cmd:(selector "getCPLConfigrationValueForClient:completionHandler:") ~typ:(ullong @-> ptr void @-> returning (void)) (ULLong.of_int x) completionHandler
let graphStatisticsDescription x self = msg_send ~self ~cmd:(selector "graphStatisticsDescription:") ~typ:(ptr (id) @-> returning (id)) x
let graphStatusDescription x self = msg_send ~self ~cmd:(selector "graphStatusDescription:") ~typ:(ptr (id) @-> returning (id)) x
let handleMergeNotification x self = msg_send ~self ~cmd:(selector "handleMergeNotification:") ~typ:(id @-> returning (void)) x
let highlightDebugInformationForHighlightWithLocalIdentifier x ~error self = msg_send ~self ~cmd:(selector "highlightDebugInformationForHighlightWithLocalIdentifier:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let imageConversionServiceClient self = msg_send ~self ~cmd:(selector "imageConversionServiceClient") ~typ:(returning (id))
let importAssetsFromLibrary x ~assetIdentifiers ~containerIdentifier ~resultHandler self = msg_send ~self ~cmd:(selector "importAssetsFromLibrary:assetIdentifiers:containerIdentifier:resultHandler:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x assetIdentifiers containerIdentifier resultHandler
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initMomentShareLibrary self = msg_send ~self ~cmd:(selector "initMomentShareLibrary") ~typ:(returning (id))
let initSharedLibrary self = msg_send ~self ~cmd:(selector "initSharedLibrary") ~typ:(returning (id))
let initWithPLPhotoLibrary x self = msg_send ~self ~cmd:(selector "initWithPLPhotoLibrary:") ~typ:(id @-> returning (id)) x
let initWithPLPhotoLibrary' x ~type_ self = msg_send ~self ~cmd:(selector "initWithPLPhotoLibrary:type:") ~typ:(id @-> ushort @-> returning (id)) x type_
let initWithPhotoLibraryBundle x ~type_ self = msg_send ~self ~cmd:(selector "initWithPhotoLibraryBundle:type:") ~typ:(id @-> ushort @-> returning (id)) x type_
let initWithPhotoLibraryURL x self = msg_send ~self ~cmd:(selector "initWithPhotoLibraryURL:") ~typ:(id @-> returning (id)) x
let initWithPhotoLibraryURL' x ~type_ self = msg_send ~self ~cmd:(selector "initWithPhotoLibraryURL:type:") ~typ:(id @-> ushort @-> returning (id)) x type_
let invalidatePersistentGraphCachesAndReturnError x self = msg_send ~self ~cmd:(selector "invalidatePersistentGraphCachesAndReturnError:") ~typ:(ptr (id) @-> returning (bool)) x
let invalidateTransientGraphCachesAndReturnError x self = msg_send ~self ~cmd:(selector "invalidateTransientGraphCachesAndReturnError:") ~typ:(ptr (id) @-> returning (bool)) x
let isCloudPhotoLibrary self = msg_send ~self ~cmd:(selector "isCloudPhotoLibrary") ~typ:(returning (bool))
let isCloudPhotoLibraryEnabled self = msg_send ~self ~cmd:(selector "isCloudPhotoLibraryEnabled") ~typ:(returning (bool))
let isFaceProcessingFinished self = msg_send ~self ~cmd:(selector "isFaceProcessingFinished") ~typ:(returning (bool))
let isInitialDuplicateDetectorProcessingCompleted self = msg_send ~self ~cmd:(selector "isInitialDuplicateDetectorProcessingCompleted") ~typ:(returning (bool))
let isPHPhotoLibraryForCMM self = msg_send ~self ~cmd:(selector "isPHPhotoLibraryForCMM") ~typ:(returning (bool))
let isReadOnlyCloudPhotoLibrary self = msg_send ~self ~cmd:(selector "isReadOnlyCloudPhotoLibrary") ~typ:(returning (bool))
let isReadyForAnalysis self = msg_send ~self ~cmd:(selector "isReadyForAnalysis") ~typ:(returning (bool))
let isSharedAlbumsEnabled self = msg_send ~self ~cmd:(selector "isSharedAlbumsEnabled") ~typ:(returning (bool))
let isSystemPhotoLibrary self = msg_send ~self ~cmd:(selector "isSystemPhotoLibrary") ~typ:(returning (bool))
let isWalrusEnabled self = msg_send ~self ~cmd:(selector "isWalrusEnabled") ~typ:(returning (bool))
let isolationQueue self = msg_send ~self ~cmd:(selector "isolationQueue") ~typ:(returning (id))
let lastChangeProcessingStarted self = msg_send ~self ~cmd:(selector "lastChangeProcessingStarted") ~typ:(returning (double))
let legacySaveImageDataToCameraRoll x ~completionTarget ~completionSelector ~contextInfo self = msg_send ~self ~cmd:(selector "legacySaveImageDataToCameraRoll:completionTarget:completionSelector:contextInfo:") ~typ:(id @-> id @-> _SEL @-> ptr (void) @-> returning (void)) x completionTarget completionSelector contextInfo
let legacySaveImageToCameraRoll x ~completionTarget ~completionSelector ~contextInfo self = msg_send ~self ~cmd:(selector "legacySaveImageToCameraRoll:completionTarget:completionSelector:contextInfo:") ~typ:(id @-> id @-> _SEL @-> ptr (void) @-> returning (void)) x completionTarget completionSelector contextInfo
let legacySaveScreenshotToCameraRoll x ~completionTarget ~completionSelector ~contextInfo self = msg_send ~self ~cmd:(selector "legacySaveScreenshotToCameraRoll:completionTarget:completionSelector:contextInfo:") ~typ:(id @-> id @-> _SEL @-> ptr (void) @-> returning (void)) x completionTarget completionSelector contextInfo
let legacySaveVideoToCameraRoll x ~completionTarget ~completionSelector ~contextInfo self = msg_send ~self ~cmd:(selector "legacySaveVideoToCameraRoll:completionTarget:completionSelector:contextInfo:") ~typ:(id @-> id @-> _SEL @-> ptr (void) @-> returning (void)) x completionTarget completionSelector contextInfo
let libraryID self = msg_send ~self ~cmd:(selector "libraryID") ~typ:(returning (id))
let librarySpecificFetchOptions self = msg_send ~self ~cmd:(selector "librarySpecificFetchOptions") ~typ:(returning (id))
let limitedLibraryPredicateForApplication x ~fetchType self = msg_send ~self ~cmd:(selector "limitedLibraryPredicateForApplication:fetchType:") ~typ:(id @-> id @-> returning (id)) x fetchType
let localIdentifierMappingsForCloudIdentifiers x self = msg_send ~self ~cmd:(selector "localIdentifierMappingsForCloudIdentifiers:") ~typ:(id @-> returning (id)) x
let localIdentifiersForCloudIdentifiers x self = msg_send ~self ~cmd:(selector "localIdentifiersForCloudIdentifiers:") ~typ:(id @-> returning (id)) x
let mainQueueConcurrencyPhotoLibrary self = msg_send ~self ~cmd:(selector "mainQueueConcurrencyPhotoLibrary") ~typ:(returning (id))
let mainQueueManagedObjectContext self = msg_send ~self ~cmd:(selector "mainQueueManagedObjectContext") ~typ:(returning (id))
let mainQueuePhotoLibrary self = msg_send ~self ~cmd:(selector "mainQueuePhotoLibrary") ~typ:(returning (id))
let managedObjectContext self = msg_send ~self ~cmd:(selector "managedObjectContext") ~typ:(returning (id))
let managedObjectContextForCurrentQueueQoS self = msg_send ~self ~cmd:(selector "managedObjectContextForCurrentQueueQoS") ~typ:(returning (id))
let memoryDebugInformationForMemoryWithLocalIdentifier x ~error self = msg_send ~self ~cmd:(selector "memoryDebugInformationForMemoryWithLocalIdentifier:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let mergeDuplicateAssetsWithLocalIdentifiers x ~completionHandler self = msg_send ~self ~cmd:(selector "mergeDuplicateAssetsWithLocalIdentifiers:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let migrationDate self = msg_send ~self ~cmd:(selector "migrationDate") ~typ:(returning (id))
let newClusteringEligibleFacesFetchOptions self = msg_send ~self ~cmd:(selector "newClusteringEligibleFacesFetchOptions") ~typ:(returning (id))
let newFaceCropsToBeGeneratedFetchOptions self = msg_send ~self ~cmd:(selector "newFaceCropsToBeGeneratedFetchOptions") ~typ:(returning (id))
let newUnclusteredFacesFetchOptions self = msg_send ~self ~cmd:(selector "newUnclusteredFacesFetchOptions") ~typ:(returning (id))
let objectFetchingContextForCurrentQueueQoS self = msg_send ~self ~cmd:(selector "objectFetchingContextForCurrentQueueQoS") ~typ:(returning (id))
let objectFetchingManagedObjectContextForObject x ~propertySet self = msg_send ~self ~cmd:(selector "objectFetchingManagedObjectContextForObject:propertySet:") ~typ:(id @-> id @-> returning (id)) x propertySet
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let openAndWaitWithUpgrade x ~error self = msg_send ~self ~cmd:(selector "openAndWaitWithUpgrade:error:") ~typ:(bool @-> ptr (id) @-> returning (bool)) x error
let openAndWaitWithUpgrade' x ~options ~error self = msg_send ~self ~cmd:(selector "openAndWaitWithUpgrade:options:error:") ~typ:(bool @-> id @-> ptr (id) @-> returning (bool)) x options error
let overrideSystemBudgetsForSyncSession x ~pauseReason ~systemBudgets ~completionHandler self = msg_send ~self ~cmd:(selector "overrideSystemBudgetsForSyncSession:pauseReason:systemBudgets:completionHandler:") ~typ:(bool @-> id @-> ullong @-> ptr void @-> returning (void)) x pauseReason (ULLong.of_int systemBudgets) completionHandler
let pathManager self = msg_send ~self ~cmd:(selector "pathManager") ~typ:(returning (id))
let performCancellableChanges x ~completionHandler self = msg_send ~self ~cmd:(selector "performCancellableChanges:completionHandler:") ~typ:(ptr void @-> ptr void @-> returning (void)) x completionHandler
let performCancellableChangesAndWait x ~error self = msg_send ~self ~cmd:(selector "performCancellableChangesAndWait:error:") ~typ:(ptr void @-> ptr (id) @-> returning (bool)) x error
let performChanges x ~completionHandler self = msg_send ~self ~cmd:(selector "performChanges:completionHandler:") ~typ:(ptr void @-> ptr void @-> returning (void)) x completionHandler
let performChangesAndWait x ~error self = msg_send ~self ~cmd:(selector "performChangesAndWait:error:") ~typ:(ptr void @-> ptr (id) @-> returning (bool)) x error
let performChangesRequest self = msg_send ~self ~cmd:(selector "performChangesRequest") ~typ:(returning (id))
let personPromotionProcessingStatusForUserInterface x self = msg_send ~self ~cmd:(selector "personPromotionProcessingStatusForUserInterface:") ~typ:(ptr void @-> returning (void)) x
let petVIPModelExists self = msg_send ~self ~cmd:(selector "petVIPModelExists") ~typ:(returning (bool))
let photoAnalysisClient self = msg_send ~self ~cmd:(selector "photoAnalysisClient") ~typ:(returning (id))
let photoAnalysisClientAllowed self = msg_send ~self ~cmd:(selector "photoAnalysisClientAllowed") ~typ:(returning (bool))
let photoLibrary self = msg_send ~self ~cmd:(selector "photoLibrary") ~typ:(returning (id))
let photoLibraryBundle self = msg_send ~self ~cmd:(selector "photoLibraryBundle") ~typ:(returning (id))
let photoLibraryForCurrentQueueQoS self = msg_send ~self ~cmd:(selector "photoLibraryForCurrentQueueQoS") ~typ:(returning (id))
let photoLibraryURL self = msg_send ~self ~cmd:(selector "photoLibraryURL") ~typ:(returning (id))
let plLibraryOptionsFromPHOptions x ~createOptions self = msg_send ~self ~cmd:(selector "plLibraryOptionsFromPHOptions:createOptions:") ~typ:(id @-> ptr (ullong) @-> returning (id)) x createOptions
let postOpenProgress self = msg_send ~self ~cmd:(selector "postOpenProgress") ~typ:(returning (id))
let postsPersistentHistoryChangedNotifications self = msg_send ~self ~cmd:(selector "postsPersistentHistoryChangedNotifications") ~typ:(returning (bool))
let processUniversalSearchJITForAssetLocalIdentifier x ~processingTypes ~error self = msg_send ~self ~cmd:(selector "processUniversalSearchJITForAssetLocalIdentifier:processingTypes:error:") ~typ:(id @-> ullong @-> ptr (id) @-> returning (bool)) x (ULLong.of_int processingTypes) error
let processUniversalSearchJITForCoreSpotlightUniqueIdentifier x ~bundleID ~processingTypes ~error self = msg_send ~self ~cmd:(selector "processUniversalSearchJITForCoreSpotlightUniqueIdentifier:bundleID:processingTypes:error:") ~typ:(id @-> id @-> ullong @-> ptr (id) @-> returning (id)) x bundleID (ULLong.of_int processingTypes) error
let projectAlbumRootFolderObjectID self = msg_send ~self ~cmd:(selector "projectAlbumRootFolderObjectID") ~typ:(returning (id))
let queryForType x ~withIdentifiers ~local self = msg_send ~self ~cmd:(selector "queryForType:withIdentifiers:local:") ~typ:(id @-> id @-> bool @-> returning (id)) x withIdentifiers local
let ratioOfAssetsAtOrAboveFaceAnalysisVersion x self = msg_send ~self ~cmd:(selector "ratioOfAssetsAtOrAboveFaceAnalysisVersion:") ~typ:(short @-> returning (double)) x
let ratioOfAssetsAtOrAboveSceneAnalysisVersion x self = msg_send ~self ~cmd:(selector "ratioOfAssetsAtOrAboveSceneAnalysisVersion:") ~typ:(short @-> returning (double)) x
let ratioOfAssetsWithFacesProcessed self = msg_send ~self ~cmd:(selector "ratioOfAssetsWithFacesProcessed") ~typ:(returning (double))
let ratioOfAssetsWithMediaAnalysisProcessed self = msg_send ~self ~cmd:(selector "ratioOfAssetsWithMediaAnalysisProcessed") ~typ:(returning (double))
let ratioOfAssetsWithScenesProcessed self = msg_send ~self ~cmd:(selector "ratioOfAssetsWithScenesProcessed") ~typ:(returning (double))
let recordDeleteRequest x self = msg_send ~self ~cmd:(selector "recordDeleteRequest:") ~typ:(id @-> returning (void)) x
let recordInsertRequest x self = msg_send ~self ~cmd:(selector "recordInsertRequest:") ~typ:(id @-> returning (void)) x
let recordUpdateRequest x self = msg_send ~self ~cmd:(selector "recordUpdateRequest:") ~typ:(id @-> returning (void)) x
let registerAvailabilityObserver x self = msg_send ~self ~cmd:(selector "registerAvailabilityObserver:") ~typ:(id @-> returning (void)) x
let registerChangeObserver x self = msg_send ~self ~cmd:(selector "registerChangeObserver:") ~typ:(id @-> returning (void)) x
let registerFetchResult x self = msg_send ~self ~cmd:(selector "registerFetchResult:") ~typ:(id @-> returning (void)) x
let relatedDebugInformationBetweenAssetForLocalIdentifier x ~andRelatedAssetCollectionForLocalIdentifier ~options ~relatedType ~error self = msg_send ~self ~cmd:(selector "relatedDebugInformationBetweenAssetForLocalIdentifier:andRelatedAssetCollectionForLocalIdentifier:options:relatedType:error:") ~typ:(id @-> id @-> id @-> ullong @-> ptr (id) @-> returning (id)) x andRelatedAssetCollectionForLocalIdentifier options (ULLong.of_int relatedType) error
let relatedDebugInformationBetweenReferenceAssetCollectionForLocalIdentifier x ~andRelatedAssetCollectionForLocalIdentifier ~options ~relatedType ~error self = msg_send ~self ~cmd:(selector "relatedDebugInformationBetweenReferenceAssetCollectionForLocalIdentifier:andRelatedAssetCollectionForLocalIdentifier:options:relatedType:error:") ~typ:(id @-> id @-> id @-> ullong @-> ptr (id) @-> returning (id)) x andRelatedAssetCollectionForLocalIdentifier options (ULLong.of_int relatedType) error
let requestAssetRevGeocodingForAssetLocalIdentifiers x ~withError self = msg_send ~self ~cmd:(selector "requestAssetRevGeocodingForAssetLocalIdentifiers:withError:") ~typ:(id @-> ptr (id) @-> returning (bool)) x withError
let requestAssetRevGeocodingWithError x self = msg_send ~self ~cmd:(selector "requestAssetRevGeocodingWithError:") ~typ:(ptr (id) @-> returning (bool)) x
let requestEnrichmentWithOptions x ~error self = msg_send ~self ~cmd:(selector "requestEnrichmentWithOptions:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let requestExternalAssetRelevanceProcessingWithReply x self = msg_send ~self ~cmd:(selector "requestExternalAssetRelevanceProcessingWithReply:") ~typ:(ptr void @-> returning (void)) x
let requestGenerateQuestionsWithOptions x ~reply self = msg_send ~self ~cmd:(selector "requestGenerateQuestionsWithOptions:reply:") ~typ:(id @-> ptr void @-> returning (void)) x reply
let requestGraphInferencesSummaryWithDateInterval x ~error self = msg_send ~self ~cmd:(selector "requestGraphInferencesSummaryWithDateInterval:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let requestGraphInferencesSummaryWithMomentLocalIdentifiers x ~error self = msg_send ~self ~cmd:(selector "requestGraphInferencesSummaryWithMomentLocalIdentifiers:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let requestGraphModelResultWithOptions x ~progress ~completion self = msg_send ~self ~cmd:(selector "requestGraphModelResultWithOptions:progress:completion:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x progress completion
let requestGraphMomentLocalIdentifiersWithDateInterval x ~error self = msg_send ~self ~cmd:(selector "requestGraphMomentLocalIdentifiersWithDateInterval:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let requestGraphReadyNotificationWithCoalescingIdentifier x ~completion self = msg_send ~self ~cmd:(selector "requestGraphReadyNotificationWithCoalescingIdentifier:completion:") ~typ:(id @-> ptr void @-> returning (void)) x completion
let requestGraphRebuildProgressWithCompletion x self = msg_send ~self ~cmd:(selector "requestGraphRebuildProgressWithCompletion:") ~typ:(ptr void @-> returning (void)) x
let requestGraphRebuildWithOptions x ~progress ~completion self = msg_send ~self ~cmd:(selector "requestGraphRebuildWithOptions:progress:completion:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x progress completion
let requestGraphRebuildWithProgress x ~completion self = msg_send ~self ~cmd:(selector "requestGraphRebuildWithProgress:completion:") ~typ:(id @-> ptr void @-> returning (void)) x completion
let requestHighlightCollectionEnrichmentWithOptions x ~error self = msg_send ~self ~cmd:(selector "requestHighlightCollectionEnrichmentWithOptions:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let requestHighlightEnrichmentWithOptions x ~error self = msg_send ~self ~cmd:(selector "requestHighlightEnrichmentWithOptions:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let requestHighlightEstimatesWithCompletion x self = msg_send ~self ~cmd:(selector "requestHighlightEstimatesWithCompletion:") ~typ:(ptr void @-> returning (void)) x
let requestProcessingTypes x ~forAssetsWithLocalIdentifiers ~progressHandler ~completionHandler self = msg_send ~self ~cmd:(selector "requestProcessingTypes:forAssetsWithLocalIdentifiers:progressHandler:completionHandler:") ~typ:(ullong @-> id @-> ptr void @-> ptr void @-> returning (int)) (ULLong.of_int x) forAssetsWithLocalIdentifiers progressHandler completionHandler
let requestSandboxExtensionsIfNeededWithError x self = msg_send ~self ~cmd:(selector "requestSandboxExtensionsIfNeededWithError:") ~typ:(ptr (id) @-> returning (bool)) x
let requestSearchIndexGraphUpdates x ~supportingData ~withCompletion self = msg_send ~self ~cmd:(selector "requestSearchIndexGraphUpdates:supportingData:withCompletion:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x supportingData withCompletion
let requestSearchIndexUpdates x ~withCompletion self = msg_send ~self ~cmd:(selector "requestSearchIndexUpdates:withCompletion:") ~typ:(id @-> ptr void @-> returning (void)) x withCompletion
let requestStartSharedLibrarySuggestionResultWithError x self = msg_send ~self ~cmd:(selector "requestStartSharedLibrarySuggestionResultWithError:") ~typ:(ptr (id) @-> returning (bool)) x
let requestSyndicationProcessingWithOptions x ~reply self = msg_send ~self ~cmd:(selector "requestSyndicationProcessingWithOptions:reply:") ~typ:(id @-> ptr void @-> returning (void)) x reply
let requestTextFeaturesForMomentLocalIdentifiers x ~error self = msg_send ~self ~cmd:(selector "requestTextFeaturesForMomentLocalIdentifiers:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let requestTotalProgressCountsForWorkerType x ~states ~completion self = msg_send ~self ~cmd:(selector "requestTotalProgressCountsForWorkerType:states:completion:") ~typ:(short @-> id @-> ptr void @-> returning (void)) x states completion
let resetFaceAnalysisWithResetLevel x ~completionHandler self = msg_send ~self ~cmd:(selector "resetFaceAnalysisWithResetLevel:completionHandler:") ~typ:(llong @-> ptr void @-> returning (void)) (LLong.of_int x) completionHandler
let resetLimitedLibraryAccessForApplication x ~completionHandler self = msg_send ~self ~cmd:(selector "resetLimitedLibraryAccessForApplication:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let runPFLWithAttachments x ~recipeUserInfo ~resultBlock self = msg_send ~self ~cmd:(selector "runPFLWithAttachments:recipeUserInfo:resultBlock:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x recipeUserInfo resultBlock
let runShadowEvaluationWithRecipe x ~models ~trialDeploymentID ~trialExperimentID ~trialTreatmentID ~resultBlock self = msg_send ~self ~cmd:(selector "runShadowEvaluationWithRecipe:models:trialDeploymentID:trialExperimentID:trialTreatmentID:resultBlock:") ~typ:(id @-> id @-> id @-> id @-> id @-> ptr void @-> returning (void)) x models trialDeploymentID trialExperimentID trialTreatmentID resultBlock
let sceneAnalysisProgressForHighlight x self = msg_send ~self ~cmd:(selector "sceneAnalysisProgressForHighlight:") ~typ:(id @-> returning (double)) x
let sceneTaxonomyDetectorNodeSceneIDsFromSceneID x ~sceneTaxonomy self = msg_send ~self ~cmd:(selector "sceneTaxonomyDetectorNodeSceneIDsFromSceneID:sceneTaxonomy:") ~typ:(uint @-> id @-> returning (id)) x sceneTaxonomy
let searchIndex self = msg_send ~self ~cmd:(selector "searchIndex") ~typ:(returning (id))
let setAvailabilityObservers x self = msg_send ~self ~cmd:(selector "setAvailabilityObservers:") ~typ:(id @-> returning (void)) x
let setChangeNotificationInfo x self = msg_send ~self ~cmd:(selector "setChangeNotificationInfo:") ~typ:(id @-> returning (void)) x
let setChangeRequest x ~forUUID self = msg_send ~self ~cmd:(selector "setChangeRequest:forUUID:") ~typ:(id @-> id @-> returning (void)) x forUUID
let setClearsOIDCacheAfterFetchResultDealloc x self = msg_send ~self ~cmd:(selector "setClearsOIDCacheAfterFetchResultDealloc:") ~typ:(bool @-> returning (void)) x
let setCloudPhotoLibraryPauseState x ~reason self = msg_send ~self ~cmd:(selector "setCloudPhotoLibraryPauseState:reason:") ~typ:(bool @-> short @-> returning (void)) x reason
let setCustomLibrarySpecificFetchOptions x self = msg_send ~self ~cmd:(selector "setCustomLibrarySpecificFetchOptions:") ~typ:(id @-> returning (void)) x
let setImageConversionServiceClient x self = msg_send ~self ~cmd:(selector "setImageConversionServiceClient:") ~typ:(id @-> returning (void)) x
let setIsolationQueue x self = msg_send ~self ~cmd:(selector "setIsolationQueue:") ~typ:(id @-> returning (void)) x
let setLastChangeProcessingStarted x self = msg_send ~self ~cmd:(selector "setLastChangeProcessingStarted:") ~typ:(double @-> returning (void)) x
let setPerformChangesRequest x self = msg_send ~self ~cmd:(selector "setPerformChangesRequest:") ~typ:(id @-> returning (void)) x
let setPostsPersistentHistoryChangedNotifications x self = msg_send ~self ~cmd:(selector "setPostsPersistentHistoryChangedNotifications:") ~typ:(bool @-> returning (void)) x
let setTransactionQueue x self = msg_send ~self ~cmd:(selector "setTransactionQueue:") ~typ:(id @-> returning (void)) x
let setUnavailabilityReason x self = msg_send ~self ~cmd:(selector "setUnavailabilityReason:") ~typ:(id @-> returning (void)) x
let setUnknownMergeEvent x self = msg_send ~self ~cmd:(selector "setUnknownMergeEvent:") ~typ:(bool @-> returning (void)) x
let setVideoConversionServiceClient x self = msg_send ~self ~cmd:(selector "setVideoConversionServiceClient:") ~typ:(id @-> returning (void)) x
let setWidgetTimelineGeneratedForDisplaySize x self = msg_send ~self ~cmd:(selector "setWidgetTimelineGeneratedForDisplaySize:") ~typ:(CGSize.t @-> returning (void)) x
let sharingMessageSuggestionDebugInformationForAssetCollectionLocalIdentifier x ~error self = msg_send ~self ~cmd:(selector "sharingMessageSuggestionDebugInformationForAssetCollectionLocalIdentifier:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let sharingSuggestionDebugInformationForAssetCollectionLocalIdentifier x ~error self = msg_send ~self ~cmd:(selector "sharingSuggestionDebugInformationForAssetCollectionLocalIdentifier:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let sharingSuggestionWithRandomPick x ~fallbackToRecentMoments ~needsNotification self = msg_send ~self ~cmd:(selector "sharingSuggestionWithRandomPick:fallbackToRecentMoments:needsNotification:") ~typ:(bool @-> bool @-> bool @-> returning (id)) x fallbackToRecentMoments needsNotification
let shouldMobileSlideShowLaunchWithError x self = msg_send ~self ~cmd:(selector "shouldMobileSlideShowLaunchWithError:") ~typ:(ptr (id) @-> returning (bool)) x
let simulateMemoriesNotificationWithOptions x ~reply self = msg_send ~self ~cmd:(selector "simulateMemoriesNotificationWithOptions:reply:") ~typ:(id @-> ptr void @-> returning (void)) x reply
let socialGroupsOverlappingPersonLocalIdentifiers x ~error self = msg_send ~self ~cmd:(selector "socialGroupsOverlappingPersonLocalIdentifiers:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let sortedArrayOfPersonIdentifiers x ~error self = msg_send ~self ~cmd:(selector "sortedArrayOfPersonIdentifiers:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let stateCaptureDictionary self = msg_send ~self ~cmd:(selector "stateCaptureDictionary") ~typ:(returning (id))
let statusDidChange x self = msg_send ~self ~cmd:(selector "statusDidChange:") ~typ:(id @-> returning (void)) x
let suggestedMePersonIdentifierWithError x self = msg_send ~self ~cmd:(selector "suggestedMePersonIdentifierWithError:") ~typ:(ptr (id) @-> returning (id)) x
let suggestionsForPersonLocalIdentifier x ~clusterSequenceNumbers ~excludePersonLocalIdentifiers ~minimumSuggestionFaceCount self = msg_send ~self ~cmd:(selector "suggestionsForPersonLocalIdentifier:clusterSequenceNumbers:excludePersonLocalIdentifiers:minimumSuggestionFaceCount:") ~typ:(id @-> id @-> id @-> ullong @-> returning (id)) x clusterSequenceNumbers excludePersonLocalIdentifiers (ULLong.of_int minimumSuggestionFaceCount)
let summaryCurationForHighlightForLocalIdentifier x ~options ~error self = msg_send ~self ~cmd:(selector "summaryCurationForHighlightForLocalIdentifier:options:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (id)) x options error
let transactionPhotoLibrary self = msg_send ~self ~cmd:(selector "transactionPhotoLibrary") ~typ:(returning (id))
let transactionQueue self = msg_send ~self ~cmd:(selector "transactionQueue") ~typ:(returning (id))
let type_ self = msg_send ~self ~cmd:(selector "type") ~typ:(returning (ushort))
let unavailabilityReason self = msg_send ~self ~cmd:(selector "unavailabilityReason") ~typ:(returning (id))
let unknownMergeEvent self = msg_send ~self ~cmd:(selector "unknownMergeEvent") ~typ:(returning (bool))
let unregisterAvailabilityObserver x self = msg_send ~self ~cmd:(selector "unregisterAvailabilityObserver:") ~typ:(id @-> returning (void)) x
let unregisterChangeObserver x self = msg_send ~self ~cmd:(selector "unregisterChangeObserver:") ~typ:(id @-> returning (void)) x
let unregisterFetchResult x self = msg_send ~self ~cmd:(selector "unregisterFetchResult:") ~typ:(id @-> returning (void)) x
let upgradePhotoLibraryUsingOptions x ~completion self = msg_send ~self ~cmd:(selector "upgradePhotoLibraryUsingOptions:completion:") ~typ:(id @-> ptr void @-> returning (id)) x completion
let urlForApplicationDataFolderIdentifier x self = msg_send ~self ~cmd:(selector "urlForApplicationDataFolderIdentifier:") ~typ:(llong @-> returning (id)) (LLong.of_int x)
let userInitiatedQueuePhotoLibrary self = msg_send ~self ~cmd:(selector "userInitiatedQueuePhotoLibrary") ~typ:(returning (id))
let uuid self = msg_send ~self ~cmd:(selector "uuid") ~typ:(returning (id))
let variationCache self = msg_send ~self ~cmd:(selector "variationCache") ~typ:(returning (id))
let videoConversionServiceClient self = msg_send ~self ~cmd:(selector "videoConversionServiceClient") ~typ:(returning (id))
let wellKnownPhotoLibraryIdentifier self = msg_send ~self ~cmd:(selector "wellKnownPhotoLibraryIdentifier") ~typ:(returning (llong))