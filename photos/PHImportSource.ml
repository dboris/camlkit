(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "PHImportSource"

let accessItems x self = msg_send ~self ~cmd:(selector "accessItems:") ~typ:(ptr void @-> returning (void)) x
let addImportSourceObserver x self = msg_send ~self ~cmd:(selector "addImportSourceObserver:") ~typ:(id @-> returning (void)) x
let addItems x self = msg_send ~self ~cmd:(selector "addItems:") ~typ:(id @-> returning (void)) x
let addPairedSidecar x self = msg_send ~self ~cmd:(selector "addPairedSidecar:") ~typ:(id @-> returning (void)) x
let addRepresentationsForAsset x self = msg_send ~self ~cmd:(selector "addRepresentationsForAsset:") ~typ:(id @-> returning (void)) x
let addSourceFileIdentifiersForRemovedFiles x self = msg_send ~self ~cmd:(selector "addSourceFileIdentifiersForRemovedFiles:") ~typ:(id @-> returning (void)) x
let assetLoadOrder self = msg_send ~self ~cmd:(selector "assetLoadOrder") ~typ:(returning (llong))
let assets self = msg_send ~self ~cmd:(selector "assets") ~typ:(returning (id))
let assetsByProcessingItem x self = msg_send ~self ~cmd:(selector "assetsByProcessingItem:") ~typ:(id @-> returning (id)) x
let assetsDescription self = msg_send ~self ~cmd:(selector "assetsDescription") ~typ:(returning (id))
let autolaunchApplicationURL self = msg_send ~self ~cmd:(selector "autolaunchApplicationURL") ~typ:(returning (id))
let batchComplete self = msg_send ~self ~cmd:(selector "batchComplete") ~typ:(returning (bool))
let batchCount self = msg_send ~self ~cmd:(selector "batchCount") ~typ:(returning (ullong))
let batchInterval self = msg_send ~self ~cmd:(selector "batchInterval") ~typ:(returning (double))
let batchQueue self = msg_send ~self ~cmd:(selector "batchQueue") ~typ:(returning (id))
let batchSize self = msg_send ~self ~cmd:(selector "batchSize") ~typ:(returning (ullong))
let batchStart self = msg_send ~self ~cmd:(selector "batchStart") ~typ:(returning (double))
let beginProcessingWithCompletion x self = msg_send ~self ~cmd:(selector "beginProcessingWithCompletion:") ~typ:(ptr void @-> returning (void)) x
let beginWork self = msg_send ~self ~cmd:(selector "beginWork") ~typ:(returning (void))
let canAutolaunch self = msg_send ~self ~cmd:(selector "canAutolaunch") ~typ:(returning (bool))
let canDeleteContent self = msg_send ~self ~cmd:(selector "canDeleteContent") ~typ:(returning (bool))
let canEject self = msg_send ~self ~cmd:(selector "canEject") ~typ:(returning (bool))
let canReference self = msg_send ~self ~cmd:(selector "canReference") ~typ:(returning (bool))
let canShowProgress self = msg_send ~self ~cmd:(selector "canShowProgress") ~typ:(returning (bool))
let completedItems self = msg_send ~self ~cmd:(selector "completedItems") ~typ:(returning (ullong))
let completion self = msg_send ~self ~cmd:(selector "completion") ~typ:(returning (ptr void))
let confirmAsset x ~isBaseOf self = msg_send ~self ~cmd:(selector "confirmAsset:isBaseOf:") ~typ:(id @-> id @-> returning (bool)) x isBaseOf
let confirmAsset1 x ~isRenderOf self = msg_send ~self ~cmd:(selector "confirmAsset:isRenderOf:") ~typ:(id @-> id @-> returning (bool)) x isRenderOf
let confirmAsset2 x ~isSidecarOfAsset self = msg_send ~self ~cmd:(selector "confirmAsset:isSidecarOfAsset:") ~typ:(id @-> id @-> returning (bool)) x isSidecarOfAsset
let confirmAsset3 x ~isSocOf self = msg_send ~self ~cmd:(selector "confirmAsset:isSocOf:") ~typ:(id @-> id @-> returning (bool)) x isSocOf
let containsSupportedMediaWithImportExceptions x self = msg_send ~self ~cmd:(selector "containsSupportedMediaWithImportExceptions:") ~typ:(ptr (id) @-> returning (bool)) x
let controlQueue self = msg_send ~self ~cmd:(selector "controlQueue") ~typ:(returning (id))
let currentItemIndex self = msg_send ~self ~cmd:(selector "currentItemIndex") ~typ:(returning (ullong))
let date x ~matchesDate self = msg_send ~self ~cmd:(selector "date:matchesDate:") ~typ:(id @-> id @-> returning (bool)) x matchesDate
let deleteContentAllowed self = msg_send ~self ~cmd:(selector "deleteContentAllowed") ~typ:(returning (bool))
let deleteImportAssets x ~isConfirmed ~atEnd self = msg_send ~self ~cmd:(selector "deleteImportAssets:isConfirmed:atEnd:") ~typ:(id @-> bool @-> ptr void @-> returning (id)) x isConfirmed atEnd
let deleteImportAssets' x ~isConfirmed ~isCancelable ~atEnd self = msg_send ~self ~cmd:(selector "deleteImportAssets:isConfirmed:isCancelable:atEnd:") ~typ:(id @-> bool @-> bool @-> ptr void @-> returning (id)) x isConfirmed isCancelable atEnd
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let dispatchAssetDataRequestAsync x ~usingBlock self = msg_send ~self ~cmd:(selector "dispatchAssetDataRequestAsync:usingBlock:") ~typ:(id @-> ptr void @-> returning (void)) x usingBlock
let dupPathCollectionQueue self = msg_send ~self ~cmd:(selector "dupPathCollectionQueue") ~typ:(returning (id))
let dupeDateFormatter self = msg_send ~self ~cmd:(selector "dupeDateFormatter") ~typ:(returning (id))
let duplicateAssets self = msg_send ~self ~cmd:(selector "duplicateAssets") ~typ:(returning (id))
let eject self = msg_send ~self ~cmd:(selector "eject") ~typ:(returning (void))
let endBatch self = msg_send ~self ~cmd:(selector "endBatch") ~typ:(returning (void))
let endWork self = msg_send ~self ~cmd:(selector "endWork") ~typ:(returning (void))
let errors self = msg_send ~self ~cmd:(selector "errors") ~typ:(returning (id))
let findDuplicatesOfItems x ~considerItemsInTheTrash self = msg_send ~self ~cmd:(selector "findDuplicatesOfItems:considerItemsInTheTrash:") ~typ:(id @-> bool @-> returning (void)) x considerItemsInTheTrash
let folders self = msg_send ~self ~cmd:(selector "folders") ~typ:(returning (id))
let icon self = msg_send ~self ~cmd:(selector "icon") ~typ:(returning (id))
let iconSymbolName self = msg_send ~self ~cmd:(selector "iconSymbolName") ~typ:(returning (id))
let importIdentifierToLivePhotoStateMap self = msg_send ~self ~cmd:(selector "importIdentifierToLivePhotoStateMap") ~typ:(returning (id))
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let isAppleDevice self = msg_send ~self ~cmd:(selector "isAppleDevice") ~typ:(returning (bool))
let isAvailable self = msg_send ~self ~cmd:(selector "isAvailable") ~typ:(returning (bool))
let isCamera self = msg_send ~self ~cmd:(selector "isCamera") ~typ:(returning (bool))
let isConnectedDevice self = msg_send ~self ~cmd:(selector "isConnectedDevice") ~typ:(returning (bool))
let isDone self = msg_send ~self ~cmd:(selector "isDone") ~typ:(returning (bool))
let isEjecting self = msg_send ~self ~cmd:(selector "isEjecting") ~typ:(returning (bool))
let isLibrary self = msg_send ~self ~cmd:(selector "isLibrary") ~typ:(returning (bool))
let isLivePhotoForImportIdentifier x self = msg_send ~self ~cmd:(selector "isLivePhotoForImportIdentifier:") ~typ:(id @-> returning (bool)) x
let isOptimizedCPLStorage self = msg_send ~self ~cmd:(selector "isOptimizedCPLStorage") ~typ:(returning (bool))
let isPairedSidecar x self = msg_send ~self ~cmd:(selector "isPairedSidecar:") ~typ:(id @-> returning (bool)) x
let itemProcessingQueue self = msg_send ~self ~cmd:(selector "itemProcessingQueue") ~typ:(returning (id))
let itemQueue self = msg_send ~self ~cmd:(selector "itemQueue") ~typ:(returning (id))
let items self = msg_send ~self ~cmd:(selector "items") ~typ:(returning (id))
let library self = msg_send ~self ~cmd:(selector "library") ~typ:(returning (id))
let loadAssetsForLibrary x ~allowDuplicates ~order ~atEnd self = msg_send ~self ~cmd:(selector "loadAssetsForLibrary:allowDuplicates:order:atEnd:") ~typ:(id @-> bool @-> llong @-> ptr void @-> returning (id)) x allowDuplicates (LLong.of_int order) atEnd
let loadAssetsForLibrary1 x ~allowDuplicates ~order ~batchInterval ~atEnd self = msg_send ~self ~cmd:(selector "loadAssetsForLibrary:allowDuplicates:order:batchInterval:atEnd:") ~typ:(id @-> bool @-> llong @-> double @-> ptr void @-> returning (id)) x allowDuplicates (LLong.of_int order) batchInterval atEnd
let loadAssetsForLibrary2 x ~allowDuplicates ~order ~batchSize ~atEnd self = msg_send ~self ~cmd:(selector "loadAssetsForLibrary:allowDuplicates:order:batchSize:atEnd:") ~typ:(id @-> bool @-> llong @-> ullong @-> ptr void @-> returning (id)) x allowDuplicates (LLong.of_int order) (ULLong.of_int batchSize) atEnd
let loadAssetsForLibrary3 x ~allowDuplicates ~order ~batchSize ~batchInterval ~atEnd self = msg_send ~self ~cmd:(selector "loadAssetsForLibrary:allowDuplicates:order:batchSize:batchInterval:atEnd:") ~typ:(id @-> bool @-> llong @-> ullong @-> double @-> ptr void @-> returning (id)) x allowDuplicates (LLong.of_int order) (ULLong.of_int batchSize) batchInterval atEnd
let loadSidecarsFor x self = msg_send ~self ~cmd:(selector "loadSidecarsFor:") ~typ:(id @-> returning (void)) x
let name self = msg_send ~self ~cmd:(selector "name") ~typ:(returning (id))
let nextItem self = msg_send ~self ~cmd:(selector "nextItem") ~typ:(returning (id))
let nextItemIndex self = msg_send ~self ~cmd:(selector "nextItemIndex") ~typ:(returning (ullong))
let notifyObserversUsingBlock x self = msg_send ~self ~cmd:(selector "notifyObserversUsingBlock:") ~typ:(ptr void @-> returning (void)) x
let open_ self = msg_send ~self ~cmd:(selector "open") ~typ:(returning (bool))
let options self = msg_send ~self ~cmd:(selector "options") ~typ:(returning (id))
let pairedSidecarsByImportIdentifier self = msg_send ~self ~cmd:(selector "pairedSidecarsByImportIdentifier") ~typ:(returning (id))
let path self = msg_send ~self ~cmd:(selector "path") ~typ:(returning (id))
let pauseAssetLoading self = msg_send ~self ~cmd:(selector "pauseAssetLoading") ~typ:(returning (void))
let prefix self = msg_send ~self ~cmd:(selector "prefix") ~typ:(returning (id))
let processAssets x self = msg_send ~self ~cmd:(selector "processAssets:") ~typ:(id @-> returning (id)) x
let processNextItems self = msg_send ~self ~cmd:(selector "processNextItems") ~typ:(returning (void))
let processPotentialJpegAsset x ~plusRawAsset self = msg_send ~self ~cmd:(selector "processPotentialJpegAsset:plusRawAsset:") ~typ:(id @-> id @-> returning (bool)) x plusRawAsset
let processRepresentation x self = msg_send ~self ~cmd:(selector "processRepresentation:") ~typ:(id @-> returning (void)) x
let processResource x self = msg_send ~self ~cmd:(selector "processResource:") ~typ:(id @-> returning (void)) x
let processed self = msg_send ~self ~cmd:(selector "processed") ~typ:(returning (id))
let processingQueue self = msg_send ~self ~cmd:(selector "processingQueue") ~typ:(returning (id))
let productKind self = msg_send ~self ~cmd:(selector "productKind") ~typ:(returning (id))
let progress self = msg_send ~self ~cmd:(selector "progress") ~typ:(returning (id))
let rampBatchInterval self = msg_send ~self ~cmd:(selector "rampBatchInterval") ~typ:(returning (bool))
let removeAssets x self = msg_send ~self ~cmd:(selector "removeAssets:") ~typ:(id @-> returning (void)) x
let removeImportSourceObserver x self = msg_send ~self ~cmd:(selector "removeImportSourceObserver:") ~typ:(id @-> returning (void)) x
let removedSourceFileIdentifiers self = msg_send ~self ~cmd:(selector "removedSourceFileIdentifiers") ~typ:(returning (id))
let requestDeleteAssetsForRecords x self = msg_send ~self ~cmd:(selector "requestDeleteAssetsForRecords:") ~typ:(id @-> returning (id)) x
let resumeAssetLoading self = msg_send ~self ~cmd:(selector "resumeAssetLoading") ~typ:(returning (void))
let setAssetLoadOrder x self = msg_send ~self ~cmd:(selector "setAssetLoadOrder:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setAssets x self = msg_send ~self ~cmd:(selector "setAssets:") ~typ:(id @-> returning (void)) x
let setAutolaunchApplicationURL x self = msg_send ~self ~cmd:(selector "setAutolaunchApplicationURL:") ~typ:(id @-> returning (void)) x
let setBatchCount x self = msg_send ~self ~cmd:(selector "setBatchCount:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setBatchInterval x self = msg_send ~self ~cmd:(selector "setBatchInterval:") ~typ:(double @-> returning (void)) x
let setBatchQueue x self = msg_send ~self ~cmd:(selector "setBatchQueue:") ~typ:(id @-> returning (void)) x
let setBatchSize x self = msg_send ~self ~cmd:(selector "setBatchSize:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setBatchStart x self = msg_send ~self ~cmd:(selector "setBatchStart:") ~typ:(double @-> returning (void)) x
let setCompletedItems x self = msg_send ~self ~cmd:(selector "setCompletedItems:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setCompletion x self = msg_send ~self ~cmd:(selector "setCompletion:") ~typ:(ptr void @-> returning (void)) x
let setControlQueue x self = msg_send ~self ~cmd:(selector "setControlQueue:") ~typ:(id @-> returning (void)) x
let setCurrentItemIndex x self = msg_send ~self ~cmd:(selector "setCurrentItemIndex:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setDeleteContentAllowed x self = msg_send ~self ~cmd:(selector "setDeleteContentAllowed:") ~typ:(bool @-> returning (void)) x
let setDupPathCollectionQueue x self = msg_send ~self ~cmd:(selector "setDupPathCollectionQueue:") ~typ:(id @-> returning (void)) x
let setDupeDateFormatter x self = msg_send ~self ~cmd:(selector "setDupeDateFormatter:") ~typ:(id @-> returning (void)) x
let setDuplicateAssets x self = msg_send ~self ~cmd:(selector "setDuplicateAssets:") ~typ:(id @-> returning (void)) x
let setErrors x self = msg_send ~self ~cmd:(selector "setErrors:") ~typ:(id @-> returning (void)) x
let setFolders x self = msg_send ~self ~cmd:(selector "setFolders:") ~typ:(id @-> returning (void)) x
let setImportIdentifierToLivePhotoStateMap x self = msg_send ~self ~cmd:(selector "setImportIdentifierToLivePhotoStateMap:") ~typ:(id @-> returning (void)) x
let setIsLivePhotoForImportIdentifier x self = msg_send ~self ~cmd:(selector "setIsLivePhotoForImportIdentifier:") ~typ:(id @-> returning (void)) x
let setItemProcessingQueue x self = msg_send ~self ~cmd:(selector "setItemProcessingQueue:") ~typ:(id @-> returning (void)) x
let setItemQueue x self = msg_send ~self ~cmd:(selector "setItemQueue:") ~typ:(id @-> returning (void)) x
let setItems x self = msg_send ~self ~cmd:(selector "setItems:") ~typ:(id @-> returning (void)) x
let setNextItemIndex x self = msg_send ~self ~cmd:(selector "setNextItemIndex:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setOpen x self = msg_send ~self ~cmd:(selector "setOpen:") ~typ:(bool @-> returning (void)) x
let setOptions x self = msg_send ~self ~cmd:(selector "setOptions:") ~typ:(id @-> returning (void)) x
let setPairedSidecarsByImportIdentifier x self = msg_send ~self ~cmd:(selector "setPairedSidecarsByImportIdentifier:") ~typ:(id @-> returning (void)) x
let setPrefix x self = msg_send ~self ~cmd:(selector "setPrefix:") ~typ:(id @-> returning (void)) x
let setProcessed x self = msg_send ~self ~cmd:(selector "setProcessed:") ~typ:(id @-> returning (void)) x
let setProcessingQueue x self = msg_send ~self ~cmd:(selector "setProcessingQueue:") ~typ:(id @-> returning (void)) x
let setProgress x self = msg_send ~self ~cmd:(selector "setProgress:") ~typ:(id @-> returning (void)) x
let setRampBatchInterval x self = msg_send ~self ~cmd:(selector "setRampBatchInterval:") ~typ:(bool @-> returning (void)) x
let setSourceAccessState x self = msg_send ~self ~cmd:(selector "setSourceAccessState:") ~typ:(bool @-> returning (void)) x
let setUuid x self = msg_send ~self ~cmd:(selector "setUuid:") ~typ:(id @-> returning (void)) x
let sourceAccessState self = msg_send ~self ~cmd:(selector "sourceAccessState") ~typ:(returning (bool))
let stalled self = msg_send ~self ~cmd:(selector "stalled") ~typ:(returning (bool))
let stopAssetLoading self = msg_send ~self ~cmd:(selector "stopAssetLoading") ~typ:(returning (void))
let timeZoneLookup self = msg_send ~self ~cmd:(selector "timeZoneLookup") ~typ:(returning (id))
let uuid self = msg_send ~self ~cmd:(selector "uuid") ~typ:(returning (id))
let volumePath self = msg_send ~self ~cmd:(selector "volumePath") ~typ:(returning (id))