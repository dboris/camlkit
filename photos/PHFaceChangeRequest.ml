(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "PHFaceChangeRequest"

module C = struct
  let changeRequestForFace x self = msg_send ~self ~cmd:(selector "changeRequestForFace:") ~typ:(id @-> returning (id)) x
  let creationRequestForFace self = msg_send ~self ~cmd:(selector "creationRequestForFace") ~typ:(returning (id))
  let deleteFaces x self = msg_send ~self ~cmd:(selector "deleteFaces:") ~typ:(id @-> returning (void)) x
end

let adjustmentVersion self = msg_send ~self ~cmd:(selector "adjustmentVersion") ~typ:(returning (id))
let ageType self = msg_send ~self ~cmd:(selector "ageType") ~typ:(returning (ushort))
let applyMutationsToManagedObject x ~photoLibrary ~error self = msg_send ~self ~cmd:(selector "applyMutationsToManagedObject:photoLibrary:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (bool)) x photoLibrary error
let associateFaceWithPersonUUID x self = msg_send ~self ~cmd:(selector "associateFaceWithPersonUUID:") ~typ:(id @-> returning (void)) x
let associatedPersonLibraryURL self = msg_send ~self ~cmd:(selector "associatedPersonLibraryURL") ~typ:(returning (id))
let blurScore self = msg_send ~self ~cmd:(selector "blurScore") ~typ:(returning (double))
let bodyCenterX self = msg_send ~self ~cmd:(selector "bodyCenterX") ~typ:(returning (double))
let bodyCenterY self = msg_send ~self ~cmd:(selector "bodyCenterY") ~typ:(returning (double))
let bodyHeight self = msg_send ~self ~cmd:(selector "bodyHeight") ~typ:(returning (double))
let bodyWidth self = msg_send ~self ~cmd:(selector "bodyWidth") ~typ:(returning (double))
let centerX self = msg_send ~self ~cmd:(selector "centerX") ~typ:(returning (double))
let centerY self = msg_send ~self ~cmd:(selector "centerY") ~typ:(returning (double))
let clusterSequenceNumber self = msg_send ~self ~cmd:(selector "clusterSequenceNumber") ~typ:(returning (llong))
let createManagedObjectForInsertIntoPhotoLibrary x ~error self = msg_send ~self ~cmd:(selector "createManagedObjectForInsertIntoPhotoLibrary:error:") ~typ:(id @-> ptr (id) @-> returning (id)) x error
let detectionType self = msg_send ~self ~cmd:(selector "detectionType") ~typ:(returning (short))
let duration self = msg_send ~self ~cmd:(selector "duration") ~typ:(returning (double))
let encodeToXPCDict x self = msg_send ~self ~cmd:(selector "encodeToXPCDict:") ~typ:(id @-> returning (void)) x
let ethnicityType self = msg_send ~self ~cmd:(selector "ethnicityType") ~typ:(returning (ushort))
let eyeMakeupType self = msg_send ~self ~cmd:(selector "eyeMakeupType") ~typ:(returning (ushort))
let eyesState self = msg_send ~self ~cmd:(selector "eyesState") ~typ:(returning (ushort))
let faceAlgorithmVersion self = msg_send ~self ~cmd:(selector "faceAlgorithmVersion") ~typ:(returning (llong))
let faceExpressionType self = msg_send ~self ~cmd:(selector "faceExpressionType") ~typ:(returning (ushort))
let faceprint self = msg_send ~self ~cmd:(selector "faceprint") ~typ:(returning (id))
let facialHairType self = msg_send ~self ~cmd:(selector "facialHairType") ~typ:(returning (ushort))
let gazeAngle self = msg_send ~self ~cmd:(selector "gazeAngle") ~typ:(returning (float))
let gazeCenterX self = msg_send ~self ~cmd:(selector "gazeCenterX") ~typ:(returning (double))
let gazeCenterY self = msg_send ~self ~cmd:(selector "gazeCenterY") ~typ:(returning (double))
let gazeConfidence self = msg_send ~self ~cmd:(selector "gazeConfidence") ~typ:(returning (float))
let gazeRect self = msg_send_stret ~self ~cmd:(selector "gazeRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let gazeType self = msg_send ~self ~cmd:(selector "gazeType") ~typ:(returning (ushort))
let glassesType self = msg_send ~self ~cmd:(selector "glassesType") ~typ:(returning (ushort))
let groupingIdentifier self = msg_send ~self ~cmd:(selector "groupingIdentifier") ~typ:(returning (id))
let hairColorType self = msg_send ~self ~cmd:(selector "hairColorType") ~typ:(returning (ushort))
let hairType self = msg_send ~self ~cmd:(selector "hairType") ~typ:(returning (ushort))
let hasFaceMask self = msg_send ~self ~cmd:(selector "hasFaceMask") ~typ:(returning (bool))
let hasSmile self = msg_send ~self ~cmd:(selector "hasSmile") ~typ:(returning (bool))
let headgearType self = msg_send ~self ~cmd:(selector "headgearType") ~typ:(returning (ushort))
let initForNewObject self = msg_send ~self ~cmd:(selector "initForNewObject") ~typ:(returning (id))
let initWithUUID x ~objectID self = msg_send ~self ~cmd:(selector "initWithUUID:objectID:") ~typ:(id @-> id @-> returning (id)) x objectID
let initWithXPCDict x ~request ~clientAuthorization self = msg_send ~self ~cmd:(selector "initWithXPCDict:request:clientAuthorization:") ~typ:(id @-> id @-> id @-> returning (id)) x request clientAuthorization
let isHidden self = msg_send ~self ~cmd:(selector "isHidden") ~typ:(returning (bool))
let isInTrash self = msg_send ~self ~cmd:(selector "isInTrash") ~typ:(returning (bool))
let isInVIPModel self = msg_send ~self ~cmd:(selector "isInVIPModel") ~typ:(returning (bool))
let isLeftEyeClosed self = msg_send ~self ~cmd:(selector "isLeftEyeClosed") ~typ:(returning (bool))
let isRightEyeClosed self = msg_send ~self ~cmd:(selector "isRightEyeClosed") ~typ:(returning (bool))
let lipMakeupType self = msg_send ~self ~cmd:(selector "lipMakeupType") ~typ:(returning (ushort))
let managedEntityName self = msg_send ~self ~cmd:(selector "managedEntityName") ~typ:(returning (id))
let manual self = msg_send ~self ~cmd:(selector "manual") ~typ:(returning (bool))
let nameSource self = msg_send ~self ~cmd:(selector "nameSource") ~typ:(returning (llong))
let placeholderForCreatedFace self = msg_send ~self ~cmd:(selector "placeholderForCreatedFace") ~typ:(returning (id))
let poseType self = msg_send ~self ~cmd:(selector "poseType") ~typ:(returning (ushort))
let poseYaw self = msg_send ~self ~cmd:(selector "poseYaw") ~typ:(returning (double))
let quality self = msg_send ~self ~cmd:(selector "quality") ~typ:(returning (double))
let qualityMeasure self = msg_send ~self ~cmd:(selector "qualityMeasure") ~typ:(returning (llong))
let roll self = msg_send ~self ~cmd:(selector "roll") ~typ:(returning (double))
let setAdjustmentVersion x self = msg_send ~self ~cmd:(selector "setAdjustmentVersion:") ~typ:(id @-> returning (void)) x
let setAgeType x self = msg_send ~self ~cmd:(selector "setAgeType:") ~typ:(ushort @-> returning (void)) x
let setAssociatedPersonLibraryURL x self = msg_send ~self ~cmd:(selector "setAssociatedPersonLibraryURL:") ~typ:(id @-> returning (void)) x
let setBlurScore x self = msg_send ~self ~cmd:(selector "setBlurScore:") ~typ:(double @-> returning (void)) x
let setBodyCenterX x self = msg_send ~self ~cmd:(selector "setBodyCenterX:") ~typ:(double @-> returning (void)) x
let setBodyCenterY x self = msg_send ~self ~cmd:(selector "setBodyCenterY:") ~typ:(double @-> returning (void)) x
let setBodyHeight x self = msg_send ~self ~cmd:(selector "setBodyHeight:") ~typ:(double @-> returning (void)) x
let setBodyWidth x self = msg_send ~self ~cmd:(selector "setBodyWidth:") ~typ:(double @-> returning (void)) x
let setCenterX x self = msg_send ~self ~cmd:(selector "setCenterX:") ~typ:(double @-> returning (void)) x
let setCenterY x self = msg_send ~self ~cmd:(selector "setCenterY:") ~typ:(double @-> returning (void)) x
let setClusterSequenceNumber x self = msg_send ~self ~cmd:(selector "setClusterSequenceNumber:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setDetectionTraits x self = msg_send ~self ~cmd:(selector "setDetectionTraits:") ~typ:(id @-> returning (void)) x
let setDetectionType x self = msg_send ~self ~cmd:(selector "setDetectionType:") ~typ:(short @-> returning (void)) x
let setDuration x self = msg_send ~self ~cmd:(selector "setDuration:") ~typ:(double @-> returning (void)) x
let setEthnicityType x self = msg_send ~self ~cmd:(selector "setEthnicityType:") ~typ:(ushort @-> returning (void)) x
let setEyeMakeupType x self = msg_send ~self ~cmd:(selector "setEyeMakeupType:") ~typ:(ushort @-> returning (void)) x
let setEyesState x self = msg_send ~self ~cmd:(selector "setEyesState:") ~typ:(ushort @-> returning (void)) x
let setFaceAlgorithmVersion x self = msg_send ~self ~cmd:(selector "setFaceAlgorithmVersion:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setFaceExpressionType x self = msg_send ~self ~cmd:(selector "setFaceExpressionType:") ~typ:(ushort @-> returning (void)) x
let setFaceprint x self = msg_send ~self ~cmd:(selector "setFaceprint:") ~typ:(id @-> returning (void)) x
let setFacialHairType x self = msg_send ~self ~cmd:(selector "setFacialHairType:") ~typ:(ushort @-> returning (void)) x
let setGazeAngle x self = msg_send ~self ~cmd:(selector "setGazeAngle:") ~typ:(float @-> returning (void)) x
let setGazeCenterX x self = msg_send ~self ~cmd:(selector "setGazeCenterX:") ~typ:(double @-> returning (void)) x
let setGazeCenterY x self = msg_send ~self ~cmd:(selector "setGazeCenterY:") ~typ:(double @-> returning (void)) x
let setGazeConfidence x self = msg_send ~self ~cmd:(selector "setGazeConfidence:") ~typ:(float @-> returning (void)) x
let setGazeRect x self = msg_send ~self ~cmd:(selector "setGazeRect:") ~typ:(CGRect.t @-> returning (void)) x
let setGazeType x self = msg_send ~self ~cmd:(selector "setGazeType:") ~typ:(ushort @-> returning (void)) x
let setGlassesType x self = msg_send ~self ~cmd:(selector "setGlassesType:") ~typ:(ushort @-> returning (void)) x
let setGroupingIdentifier x self = msg_send ~self ~cmd:(selector "setGroupingIdentifier:") ~typ:(id @-> returning (void)) x
let setHairColorType x self = msg_send ~self ~cmd:(selector "setHairColorType:") ~typ:(ushort @-> returning (void)) x
let setHairType x self = msg_send ~self ~cmd:(selector "setHairType:") ~typ:(ushort @-> returning (void)) x
let setHasFaceMask x self = msg_send ~self ~cmd:(selector "setHasFaceMask:") ~typ:(bool @-> returning (void)) x
let setHasSmile x self = msg_send ~self ~cmd:(selector "setHasSmile:") ~typ:(bool @-> returning (void)) x
let setHeadgearType x self = msg_send ~self ~cmd:(selector "setHeadgearType:") ~typ:(ushort @-> returning (void)) x
let setHidden x self = msg_send ~self ~cmd:(selector "setHidden:") ~typ:(bool @-> returning (void)) x
let setInTrash x self = msg_send ~self ~cmd:(selector "setInTrash:") ~typ:(bool @-> returning (void)) x
let setIsInVIPModel x self = msg_send ~self ~cmd:(selector "setIsInVIPModel:") ~typ:(bool @-> returning (void)) x
let setLeftEyeClosed x self = msg_send ~self ~cmd:(selector "setLeftEyeClosed:") ~typ:(bool @-> returning (void)) x
let setLipMakeupType x self = msg_send ~self ~cmd:(selector "setLipMakeupType:") ~typ:(ushort @-> returning (void)) x
let setManual x self = msg_send ~self ~cmd:(selector "setManual:") ~typ:(bool @-> returning (void)) x
let setNameSource x self = msg_send ~self ~cmd:(selector "setNameSource:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setPoseType x self = msg_send ~self ~cmd:(selector "setPoseType:") ~typ:(ushort @-> returning (void)) x
let setPoseYaw x self = msg_send ~self ~cmd:(selector "setPoseYaw:") ~typ:(double @-> returning (void)) x
let setQuality x self = msg_send ~self ~cmd:(selector "setQuality:") ~typ:(double @-> returning (void)) x
let setQualityMeasure x self = msg_send ~self ~cmd:(selector "setQualityMeasure:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setRightEyeClosed x self = msg_send ~self ~cmd:(selector "setRightEyeClosed:") ~typ:(bool @-> returning (void)) x
let setRoll x self = msg_send ~self ~cmd:(selector "setRoll:") ~typ:(double @-> returning (void)) x
let setSexType x self = msg_send ~self ~cmd:(selector "setSexType:") ~typ:(ushort @-> returning (void)) x
let setShouldClearFaceCropGenerationState x self = msg_send ~self ~cmd:(selector "setShouldClearFaceCropGenerationState:") ~typ:(bool @-> returning (void)) x
let setSize x self = msg_send ~self ~cmd:(selector "setSize:") ~typ:(double @-> returning (void)) x
let setSkintoneType x self = msg_send ~self ~cmd:(selector "setSkintoneType:") ~typ:(ushort @-> returning (void)) x
let setSmileType x self = msg_send ~self ~cmd:(selector "setSmileType:") ~typ:(ushort @-> returning (void)) x
let setSourceHeight x self = msg_send ~self ~cmd:(selector "setSourceHeight:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setSourceWidth x self = msg_send ~self ~cmd:(selector "setSourceWidth:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setStartTime x self = msg_send ~self ~cmd:(selector "setStartTime:") ~typ:(double @-> returning (void)) x
let setVuObservationID x self = msg_send ~self ~cmd:(selector "setVuObservationID:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let sexType self = msg_send ~self ~cmd:(selector "sexType") ~typ:(returning (ushort))
let shouldClearFaceCropGenerationState self = msg_send ~self ~cmd:(selector "shouldClearFaceCropGenerationState") ~typ:(returning (bool))
let size self = msg_send ~self ~cmd:(selector "size") ~typ:(returning (double))
let skintoneType self = msg_send ~self ~cmd:(selector "skintoneType") ~typ:(returning (ushort))
let smileType self = msg_send ~self ~cmd:(selector "smileType") ~typ:(returning (ushort))
let sourceHeight self = msg_send ~self ~cmd:(selector "sourceHeight") ~typ:(returning (llong))
let sourceWidth self = msg_send ~self ~cmd:(selector "sourceWidth") ~typ:(returning (llong))
let startTime self = msg_send ~self ~cmd:(selector "startTime") ~typ:(returning (double))
let validateInsertIntoPhotoLibrary x ~error self = msg_send ~self ~cmd:(selector "validateInsertIntoPhotoLibrary:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let validateMutationsToManagedObject x ~error self = msg_send ~self ~cmd:(selector "validateMutationsToManagedObject:error:") ~typ:(id @-> ptr (id) @-> returning (bool)) x error
let vuObservationID self = msg_send ~self ~cmd:(selector "vuObservationID") ~typ:(returning (llong))