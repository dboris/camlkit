(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "PHImportAsset"

module C = struct
  let assetFileForURL x ~source self = msg_send ~self ~cmd:(selector "assetFileForURL:source:") ~typ:(id @-> id @-> returning (id)) x source
  let assetFileForURL' x ~source ~withUuid self = msg_send ~self ~cmd:(selector "assetFileForURL:source:withUuid:") ~typ:(id @-> id @-> id @-> returning (id)) x source withUuid
  let determineIfTIFFIsRAW x ~url self = msg_send ~self ~cmd:(selector "determineIfTIFFIsRAW:url:") ~typ:(id @-> id @-> returning (void)) x url
  let directoryExists x self = msg_send ~self ~cmd:(selector "directoryExists:") ~typ:(id @-> returning (bool)) x
  let fileExists x self = msg_send ~self ~cmd:(selector "fileExists:") ~typ:(id @-> returning (bool)) x
  let isOriginalAdjustmentData x self = msg_send ~self ~cmd:(selector "isOriginalAdjustmentData:") ~typ:(id @-> returning (bool)) x
  let isValidAsSidecar x self = msg_send ~self ~cmd:(selector "isValidAsSidecar:") ~typ:(id @-> returning (bool)) x
  let loadDatesForAssetSequence x ~atEnd self = msg_send ~self ~cmd:(selector "loadDatesForAssetSequence:atEnd:") ~typ:(id @-> ptr void @-> returning (id)) x atEnd
  let loadDatesForAssets x ~atEnd self = msg_send ~self ~cmd:(selector "loadDatesForAssets:atEnd:") ~typ:(id @-> ptr void @-> returning (id)) x atEnd
  let logImageDateFileDateDifferencesForAsset x self = msg_send ~self ~cmd:(selector "logImageDateFileDateDifferencesForAsset:") ~typ:(id @-> returning (void)) x
end

let accessibilityDescription self = msg_send ~self ~cmd:(selector "accessibilityDescription") ~typ:(returning (id))
let addBurstAsset x self = msg_send ~self ~cmd:(selector "addBurstAsset:") ~typ:(id @-> returning (void)) x
let addSidecarAsset x self = msg_send ~self ~cmd:(selector "addSidecarAsset:") ~typ:(id @-> returning (void)) x
let adjustmentSidecar self = msg_send ~self ~cmd:(selector "adjustmentSidecar") ~typ:(returning (id))
let approximateBytesRequiredToImport self = msg_send ~self ~cmd:(selector "approximateBytesRequiredToImport") ~typ:(returning (ullong))
let assetDescription self = msg_send ~self ~cmd:(selector "assetDescription") ~typ:(returning (id))
let assetSizeIncludingRelatedAssets self = msg_send ~self ~cmd:(selector "assetSizeIncludingRelatedAssets") ~typ:(returning (ullong))
let audioAsset self = msg_send ~self ~cmd:(selector "audioAsset") ~typ:(returning (id))
let avThumbnailOfSize x ~canceler ~error self = msg_send ~self ~cmd:(selector "avThumbnailOfSize:canceler:error:") ~typ:(ullong @-> id @-> ptr (id) @-> returning (id)) (ULLong.of_int x) canceler error
let avchdAssetId self = msg_send ~self ~cmd:(selector "avchdAssetId") ~typ:(returning (id))
let base self = msg_send ~self ~cmd:(selector "base") ~typ:(returning (id))
let basenameForOriginalAdjustmentData self = msg_send ~self ~cmd:(selector "basenameForOriginalAdjustmentData") ~typ:(returning (id))
let bitrate self = msg_send ~self ~cmd:(selector "bitrate") ~typ:(returning (id))
let burstPick self = msg_send ~self ~cmd:(selector "burstPick") ~typ:(returning (id))
let burstPickType self = msg_send ~self ~cmd:(selector "burstPickType") ~typ:(returning (int))
let burstUUID self = msg_send ~self ~cmd:(selector "burstUUID") ~typ:(returning (id))
let cachedHash self = msg_send ~self ~cmd:(selector "cachedHash") ~typ:(returning (ullong))
let cameraMake self = msg_send ~self ~cmd:(selector "cameraMake") ~typ:(returning (id))
let cameraModel self = msg_send ~self ~cmd:(selector "cameraModel") ~typ:(returning (id))
let canDelete self = msg_send ~self ~cmd:(selector "canDelete") ~typ:(returning (bool))
let canPreserveFolderStructure self = msg_send ~self ~cmd:(selector "canPreserveFolderStructure") ~typ:(returning (bool))
let canReference self = msg_send ~self ~cmd:(selector "canReference") ~typ:(returning (bool))
let cgImageSize self = msg_send_stret ~self ~cmd:(selector "cgImageSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let checkForSidecarWithExtension x self = msg_send ~self ~cmd:(selector "checkForSidecarWithExtension:") ~typ:(id @-> returning (id)) x
let codec self = msg_send ~self ~cmd:(selector "codec") ~typ:(returning (id))
let configureSidecarTypeForExtension x self = msg_send ~self ~cmd:(selector "configureSidecarTypeForExtension:") ~typ:(id @-> returning (void)) x
let configureWithContentType x ~supportedMediaType self = msg_send ~self ~cmd:(selector "configureWithContentType:supportedMediaType:") ~typ:(id @-> bool @-> returning (bool)) x supportedMediaType
let contentType self = msg_send ~self ~cmd:(selector "contentType") ~typ:(returning (id))
let copyFromURL x ~toURL self = msg_send ~self ~cmd:(selector "copyFromURL:toURL:") ~typ:(id @-> id @-> returning (id)) x toURL
let copyMethod self = msg_send ~self ~cmd:(selector "copyMethod") ~typ:(returning (ullong))
let copyToURL x ~completionHandler self = msg_send ~self ~cmd:(selector "copyToURL:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let createdFileName self = msg_send ~self ~cmd:(selector "createdFileName") ~typ:(returning (id))
let creationDate self = msg_send ~self ~cmd:(selector "creationDate") ~typ:(returning (id))
let cropEXIFThumbSize x ~originalSize self = msg_send_stret ~self ~cmd:(selector "cropEXIFThumbSize:originalSize:") ~typ:(CGSize.t @-> CGSize.t @-> returning (CGSize.t)) ~return_type:CGSize.t x originalSize
let customAssetProperties self = msg_send ~self ~cmd:(selector "customAssetProperties") ~typ:(returning (id))
let dateKey self = msg_send ~self ~cmd:(selector "dateKey") ~typ:(returning (id))
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let descriptionWithPrefix x self = msg_send ~self ~cmd:(selector "descriptionWithPrefix:") ~typ:(id @-> returning (id)) x
let digitalZoomRatio self = msg_send ~self ~cmd:(selector "digitalZoomRatio") ~typ:(returning (id))
let duplicateAssets self = msg_send ~self ~cmd:(selector "duplicateAssets") ~typ:(returning (id))
let duplicateAssetsForLibrary x self = msg_send ~self ~cmd:(selector "duplicateAssetsForLibrary:") ~typ:(id @-> returning (id)) x
let duplicateStateConfidence self = msg_send ~self ~cmd:(selector "duplicateStateConfidence") ~typ:(returning (bool))
let duplicates self = msg_send ~self ~cmd:(selector "duplicates") ~typ:(returning (id))
let durationTimeInterval self = msg_send ~self ~cmd:(selector "durationTimeInterval") ~typ:(returning (id))
let exifPixelSize self = msg_send_stret ~self ~cmd:(selector "exifPixelSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let exposureBias self = msg_send ~self ~cmd:(selector "exposureBias") ~typ:(returning (id))
let exposureTime self = msg_send ~self ~cmd:(selector "exposureTime") ~typ:(returning (id))
let fNumber self = msg_send ~self ~cmd:(selector "fNumber") ~typ:(returning (id))
let fileCreationDate self = msg_send ~self ~cmd:(selector "fileCreationDate") ~typ:(returning (id))
let fileData self = msg_send ~self ~cmd:(selector "fileData") ~typ:(returning (id))
let fileExtension self = msg_send ~self ~cmd:(selector "fileExtension") ~typ:(returning (id))
let fileLocation self = msg_send ~self ~cmd:(selector "fileLocation") ~typ:(returning (bool))
let fileModificationDate self = msg_send ~self ~cmd:(selector "fileModificationDate") ~typ:(returning (id))
let fileName self = msg_send ~self ~cmd:(selector "fileName") ~typ:(returning (id))
let filePresenter self = msg_send ~self ~cmd:(selector "filePresenter") ~typ:(returning (id))
let fileSize self = msg_send ~self ~cmd:(selector "fileSize") ~typ:(returning (ullong))
let fingerprint self = msg_send ~self ~cmd:(selector "fingerprint") ~typ:(returning (id))
let flashFired self = msg_send ~self ~cmd:(selector "flashFired") ~typ:(returning (id))
let focalLength self = msg_send ~self ~cmd:(selector "focalLength") ~typ:(returning (id))
let focalLengthIn35mm self = msg_send ~self ~cmd:(selector "focalLengthIn35mm") ~typ:(returning (id))
let formattedCameraModel self = msg_send ~self ~cmd:(selector "formattedCameraModel") ~typ:(returning (id))
let fps self = msg_send ~self ~cmd:(selector "fps") ~typ:(returning (id))
let groupingUUID self = msg_send ~self ~cmd:(selector "groupingUUID") ~typ:(returning (id))
let hasAdjustments self = msg_send ~self ~cmd:(selector "hasAdjustments") ~typ:(returning (bool))
let hasAudioAttachment self = msg_send ~self ~cmd:(selector "hasAudioAttachment") ~typ:(returning (bool))
let hasOriginalResourceType self = msg_send ~self ~cmd:(selector "hasOriginalResourceType") ~typ:(returning (bool))
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong))
let imageGenerator self = msg_send ~self ~cmd:(selector "imageGenerator") ~typ:(returning (id))
let imageSize self = msg_send_stret ~self ~cmd:(selector "imageSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let imageThumbnailOfSize x ~canceler ~error self = msg_send ~self ~cmd:(selector "imageThumbnailOfSize:canceler:error:") ~typ:(ullong @-> id @-> ptr (id) @-> returning (id)) (ULLong.of_int x) canceler error
let importIdentifier self = msg_send ~self ~cmd:(selector "importIdentifier") ~typ:(returning (id))
let importRecordForPrimaryAsset self = msg_send ~self ~cmd:(selector "importRecordForPrimaryAsset") ~typ:(returning (id))
let initWithSource x self = msg_send ~self ~cmd:(selector "initWithSource:") ~typ:(id @-> returning (id)) x
let initWithSource' x ~url ~type_ ~supportedMediaType ~uuid self = msg_send ~self ~cmd:(selector "initWithSource:url:type:supportedMediaType:uuid:") ~typ:(id @-> id @-> id @-> bool @-> id @-> returning (id)) x url type_ supportedMediaType uuid
let isAVCHD self = msg_send ~self ~cmd:(selector "isAVCHD") ~typ:(returning (bool))
let isAppropriateForUI self = msg_send ~self ~cmd:(selector "isAppropriateForUI") ~typ:(returning (bool))
let isAudio self = msg_send ~self ~cmd:(selector "isAudio") ~typ:(returning (bool))
let isBase self = msg_send ~self ~cmd:(selector "isBase") ~typ:(returning (bool))
let isBurst self = msg_send ~self ~cmd:(selector "isBurst") ~typ:(returning (bool))
let isDuplicate self = msg_send ~self ~cmd:(selector "isDuplicate") ~typ:(returning (bool))
let isEqual x self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning (bool)) x
let isEqualToImportAsset x self = msg_send ~self ~cmd:(selector "isEqualToImportAsset:") ~typ:(id @-> returning (bool)) x
let isGIF self = msg_send ~self ~cmd:(selector "isGIF") ~typ:(returning (bool))
let isGrouped self = msg_send ~self ~cmd:(selector "isGrouped") ~typ:(returning (bool))
let isHDR self = msg_send ~self ~cmd:(selector "isHDR") ~typ:(returning (bool))
let isHEIF self = msg_send ~self ~cmd:(selector "isHEIF") ~typ:(returning (bool))
let isImage self = msg_send ~self ~cmd:(selector "isImage") ~typ:(returning (bool))
let isJPEG self = msg_send ~self ~cmd:(selector "isJPEG") ~typ:(returning (bool))
let isJPEG2000 self = msg_send ~self ~cmd:(selector "isJPEG2000") ~typ:(returning (bool))
let isJpegPlusRAW self = msg_send ~self ~cmd:(selector "isJpegPlusRAW") ~typ:(returning (bool))
let isLivePhoto self = msg_send ~self ~cmd:(selector "isLivePhoto") ~typ:(returning (bool))
let isMovie self = msg_send ~self ~cmd:(selector "isMovie") ~typ:(returning (bool))
let isOriginalAdjustmentData self = msg_send ~self ~cmd:(selector "isOriginalAdjustmentData") ~typ:(returning (bool))
let isPDF self = msg_send ~self ~cmd:(selector "isPDF") ~typ:(returning (bool))
let isPNG self = msg_send ~self ~cmd:(selector "isPNG") ~typ:(returning (bool))
let isPSD self = msg_send ~self ~cmd:(selector "isPSD") ~typ:(returning (bool))
let isPrimary self = msg_send ~self ~cmd:(selector "isPrimary") ~typ:(returning (bool))
let isRAW self = msg_send ~self ~cmd:(selector "isRAW") ~typ:(returning (bool))
let isRender self = msg_send ~self ~cmd:(selector "isRender") ~typ:(returning (bool))
let isRepresentation self = msg_send ~self ~cmd:(selector "isRepresentation") ~typ:(returning (bool))
let isSDOF self = msg_send ~self ~cmd:(selector "isSDOF") ~typ:(returning (bool))
let isSidecar self = msg_send ~self ~cmd:(selector "isSidecar") ~typ:(returning (bool))
let isSloMo self = msg_send ~self ~cmd:(selector "isSloMo") ~typ:(returning (bool))
let isSpatialOverCapture self = msg_send ~self ~cmd:(selector "isSpatialOverCapture") ~typ:(returning (bool))
let isTIFF self = msg_send ~self ~cmd:(selector "isTIFF") ~typ:(returning (bool))
let isTagged self = msg_send ~self ~cmd:(selector "isTagged") ~typ:(returning (bool))
let isTimelapse self = msg_send ~self ~cmd:(selector "isTimelapse") ~typ:(returning (bool))
let isValidForReference self = msg_send ~self ~cmd:(selector "isValidForReference") ~typ:(returning (bool))
let isVideoComplementOf x self = msg_send ~self ~cmd:(selector "isVideoComplementOf:") ~typ:(id @-> returning (bool)) x
let isViewable self = msg_send ~self ~cmd:(selector "isViewable") ~typ:(returning (bool))
let iso self = msg_send ~self ~cmd:(selector "iso") ~typ:(returning (id))
let keywordTitles self = msg_send ~self ~cmd:(selector "keywordTitles") ~typ:(returning (id))
let largeMovieRender self = msg_send ~self ~cmd:(selector "largeMovieRender") ~typ:(returning (id))
let largeRender self = msg_send ~self ~cmd:(selector "largeRender") ~typ:(returning (id))
let lastDuplicateCheck self = msg_send ~self ~cmd:(selector "lastDuplicateCheck") ~typ:(returning (id))
let lensModel self = msg_send ~self ~cmd:(selector "lensModel") ~typ:(returning (id))
let livePhotoPairingIdentifier self = msg_send ~self ~cmd:(selector "livePhotoPairingIdentifier") ~typ:(returning (id))
let loadMetadataAsync x self = msg_send ~self ~cmd:(selector "loadMetadataAsync:") ~typ:(ptr void @-> returning (void)) x
let loadMetadataSync self = msg_send ~self ~cmd:(selector "loadMetadataSync") ~typ:(returning (void))
let loadSidecarFiles self = msg_send ~self ~cmd:(selector "loadSidecarFiles") ~typ:(returning (void))
let loadSidecars self = msg_send ~self ~cmd:(selector "loadSidecars") ~typ:(returning (id))
let makeImportIdentifier self = msg_send ~self ~cmd:(selector "makeImportIdentifier") ~typ:(returning (id))
let metadata self = msg_send ~self ~cmd:(selector "metadata") ~typ:(returning (id))
let meteringMode self = msg_send ~self ~cmd:(selector "meteringMode") ~typ:(returning (id))
let miniRender self = msg_send ~self ~cmd:(selector "miniRender") ~typ:(returning (id))
let nameKey self = msg_send ~self ~cmd:(selector "nameKey") ~typ:(returning (id))
let orientation self = msg_send ~self ~cmd:(selector "orientation") ~typ:(returning (uint))
let orientedPixelSize self = msg_send_stret ~self ~cmd:(selector "orientedPixelSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let originalAdjustmentSidecar self = msg_send ~self ~cmd:(selector "originalAdjustmentSidecar") ~typ:(returning (id))
let originatingAssetID self = msg_send ~self ~cmd:(selector "originatingAssetID") ~typ:(returning (id))
let parentFolderPath self = msg_send ~self ~cmd:(selector "parentFolderPath") ~typ:(returning (id))
let performAdditionalLivePhotoChecksOnImageAsset x self = msg_send ~self ~cmd:(selector "performAdditionalLivePhotoChecksOnImageAsset:") ~typ:(id @-> returning (bool)) x
let rawAsset self = msg_send ~self ~cmd:(selector "rawAsset") ~typ:(returning (id))
let redactedFileNameDescription self = msg_send ~self ~cmd:(selector "redactedFileNameDescription") ~typ:(returning (id))
let relatedAssets self = msg_send ~self ~cmd:(selector "relatedAssets") ~typ:(returning (id))
let relatedBurstAssets self = msg_send ~self ~cmd:(selector "relatedBurstAssets") ~typ:(returning (id))
let relatedBytes self = msg_send ~self ~cmd:(selector "relatedBytes") ~typ:(returning (ullong))
let removeBlackBarsFromExifThumbnail x ~fullSize self = msg_send ~self ~cmd:(selector "removeBlackBarsFromExifThumbnail:fullSize:") ~typ:(id @-> CGSize.t @-> returning (id)) x fullSize
let removeSidecarAsset x self = msg_send ~self ~cmd:(selector "removeSidecarAsset:") ~typ:(id @-> returning (void)) x
let representedObject self = msg_send ~self ~cmd:(selector "representedObject") ~typ:(returning (id))
let resourceSubType self = msg_send ~self ~cmd:(selector "resourceSubType") ~typ:(returning (ullong))
let resourceType self = msg_send ~self ~cmd:(selector "resourceType") ~typ:(returning (llong))
let resourceTypes self = msg_send ~self ~cmd:(selector "resourceTypes") ~typ:(returning (id))
let sampleRate self = msg_send ~self ~cmd:(selector "sampleRate") ~typ:(returning (id))
let securityScopedURL self = msg_send ~self ~cmd:(selector "securityScopedURL") ~typ:(returning (id))
let setAudioAsset x self = msg_send ~self ~cmd:(selector "setAudioAsset:") ~typ:(id @-> returning (void)) x
let setBase x self = msg_send ~self ~cmd:(selector "setBase:") ~typ:(id @-> returning (void)) x
let setBurstPick x self = msg_send ~self ~cmd:(selector "setBurstPick:") ~typ:(id @-> returning (void)) x
let setCachedHash x self = msg_send ~self ~cmd:(selector "setCachedHash:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setContentType x self = msg_send ~self ~cmd:(selector "setContentType:") ~typ:(id @-> returning (void)) x
let setCopyMethod x self = msg_send ~self ~cmd:(selector "setCopyMethod:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setCreatedFileName x self = msg_send ~self ~cmd:(selector "setCreatedFileName:") ~typ:(id @-> returning (void)) x
let setCustomAssetProperties x self = msg_send ~self ~cmd:(selector "setCustomAssetProperties:") ~typ:(id @-> returning (void)) x
let setDuplicateStateConfidence x self = msg_send ~self ~cmd:(selector "setDuplicateStateConfidence:") ~typ:(bool @-> returning (void)) x
let setDuplicates x self = msg_send ~self ~cmd:(selector "setDuplicates:") ~typ:(id @-> returning (void)) x
let setDuplicates' x ~forLibrary self = msg_send ~self ~cmd:(selector "setDuplicates:forLibrary:") ~typ:(id @-> id @-> returning (void)) x forLibrary
let setFileCreationDate x self = msg_send ~self ~cmd:(selector "setFileCreationDate:") ~typ:(id @-> returning (void)) x
let setFileData x self = msg_send ~self ~cmd:(selector "setFileData:") ~typ:(id @-> returning (void)) x
let setFileExtension x self = msg_send ~self ~cmd:(selector "setFileExtension:") ~typ:(id @-> returning (void)) x
let setFileLocation x self = msg_send ~self ~cmd:(selector "setFileLocation:") ~typ:(bool @-> returning (void)) x
let setFileModificationDate x self = msg_send ~self ~cmd:(selector "setFileModificationDate:") ~typ:(id @-> returning (void)) x
let setFileName x self = msg_send ~self ~cmd:(selector "setFileName:") ~typ:(id @-> returning (void)) x
let setFilePresenter x self = msg_send ~self ~cmd:(selector "setFilePresenter:") ~typ:(id @-> returning (void)) x
let setFileSize x self = msg_send ~self ~cmd:(selector "setFileSize:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setImageGenerator x self = msg_send ~self ~cmd:(selector "setImageGenerator:") ~typ:(id @-> returning (void)) x
let setImageSize x self = msg_send ~self ~cmd:(selector "setImageSize:") ~typ:(CGSize.t @-> returning (void)) x
let setImportIdentifier x self = msg_send ~self ~cmd:(selector "setImportIdentifier:") ~typ:(id @-> returning (void)) x
let setIsDuplicate x self = msg_send ~self ~cmd:(selector "setIsDuplicate:") ~typ:(bool @-> returning (void)) x
let setLargeMovieRender x self = msg_send ~self ~cmd:(selector "setLargeMovieRender:") ~typ:(id @-> returning (void)) x
let setLargeRender x self = msg_send ~self ~cmd:(selector "setLargeRender:") ~typ:(id @-> returning (void)) x
let setLastDuplicateCheck x self = msg_send ~self ~cmd:(selector "setLastDuplicateCheck:") ~typ:(id @-> returning (void)) x
let setLoadSidecars x self = msg_send ~self ~cmd:(selector "setLoadSidecars:") ~typ:(id @-> returning (void)) x
let setMetadata x self = msg_send ~self ~cmd:(selector "setMetadata:") ~typ:(id @-> returning (void)) x
let setMiniRender x self = msg_send ~self ~cmd:(selector "setMiniRender:") ~typ:(id @-> returning (void)) x
let setRawAsset x self = msg_send ~self ~cmd:(selector "setRawAsset:") ~typ:(id @-> returning (void)) x
let setRelatedBurstAssets x self = msg_send ~self ~cmd:(selector "setRelatedBurstAssets:") ~typ:(id @-> returning (void)) x
let setResourceSubType x self = msg_send ~self ~cmd:(selector "setResourceSubType:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setResourceType x self = msg_send ~self ~cmd:(selector "setResourceType:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setSidecarAssetsByType x self = msg_send ~self ~cmd:(selector "setSidecarAssetsByType:") ~typ:(id @-> returning (void)) x
let setSidecarsLoaded x self = msg_send ~self ~cmd:(selector "setSidecarsLoaded:") ~typ:(bool @-> returning (void)) x
let setSpatialOverCapture x self = msg_send ~self ~cmd:(selector "setSpatialOverCapture:") ~typ:(id @-> returning (void)) x
let setThumbnailRender x self = msg_send ~self ~cmd:(selector "setThumbnailRender:") ~typ:(id @-> returning (void)) x
let setThumbnailSize x self = msg_send ~self ~cmd:(selector "setThumbnailSize:") ~typ:(CGSize.t @-> returning (void)) x
let setTreatAsUnsupportedRAW x self = msg_send ~self ~cmd:(selector "setTreatAsUnsupportedRAW:") ~typ:(bool @-> returning (void)) x
let setUrl x self = msg_send ~self ~cmd:(selector "setUrl:") ~typ:(id @-> returning (void)) x
let setUserInfo x self = msg_send ~self ~cmd:(selector "setUserInfo:") ~typ:(id @-> returning (void)) x
let setUserMetadata x self = msg_send ~self ~cmd:(selector "setUserMetadata:") ~typ:(id @-> returning (void)) x
let setUuid x self = msg_send ~self ~cmd:(selector "setUuid:") ~typ:(id @-> returning (void)) x
let setVideoComplement x self = msg_send ~self ~cmd:(selector "setVideoComplement:") ~typ:(id @-> returning (void)) x
let shouldPreserveUUID self = msg_send ~self ~cmd:(selector "shouldPreserveUUID") ~typ:(returning (bool))
let sidecarAssetBytes self = msg_send ~self ~cmd:(selector "sidecarAssetBytes") ~typ:(returning (ullong))
let sidecarAssets self = msg_send ~self ~cmd:(selector "sidecarAssets") ~typ:(returning (id))
let sidecarAssetsByType self = msg_send ~self ~cmd:(selector "sidecarAssetsByType") ~typ:(returning (id))
let sidecarInfoDictionaries self = msg_send ~self ~cmd:(selector "sidecarInfoDictionaries") ~typ:(returning (id))
let sidecarInfoDictionary self = msg_send ~self ~cmd:(selector "sidecarInfoDictionary") ~typ:(returning (id))
let sidecarsLoaded self = msg_send ~self ~cmd:(selector "sidecarsLoaded") ~typ:(returning (bool))
let sizeKey self = msg_send ~self ~cmd:(selector "sizeKey") ~typ:(returning (id))
let slmSidecar self = msg_send ~self ~cmd:(selector "slmSidecar") ~typ:(returning (id))
let source self = msg_send ~self ~cmd:(selector "source") ~typ:(returning (id))
let spatialOverCapture self = msg_send ~self ~cmd:(selector "spatialOverCapture") ~typ:(returning (id))
let spatialOverCaptureIdentifier self = msg_send ~self ~cmd:(selector "spatialOverCaptureIdentifier") ~typ:(returning (id))
let stripMarkerFromName x ~markerLocation self = msg_send ~self ~cmd:(selector "stripMarkerFromName:markerLocation:") ~typ:(id @-> ullong @-> returning (id)) x (ULLong.of_int markerLocation)
let takeAsVideoComplement x self = msg_send ~self ~cmd:(selector "takeAsVideoComplement:") ~typ:(id @-> returning (void)) x
let thumbnailForSize x ~atEnd self = msg_send ~self ~cmd:(selector "thumbnailForSize:atEnd:") ~typ:(ullong @-> ptr void @-> returning (id)) (ULLong.of_int x) atEnd
let thumbnailForSize' x ~priority ~atEnd self = msg_send ~self ~cmd:(selector "thumbnailForSize:priority:atEnd:") ~typ:(ullong @-> bool @-> ptr void @-> returning (id)) (ULLong.of_int x) priority atEnd
let thumbnailRender self = msg_send ~self ~cmd:(selector "thumbnailRender") ~typ:(returning (id))
let thumbnailSize self = msg_send_stret ~self ~cmd:(selector "thumbnailSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let thumbnailUsingRequest x ~atEnd self = msg_send ~self ~cmd:(selector "thumbnailUsingRequest:atEnd:") ~typ:(id @-> ptr void @-> returning (void)) x atEnd
let timeZone self = msg_send ~self ~cmd:(selector "timeZone") ~typ:(returning (id))
let title self = msg_send ~self ~cmd:(selector "title") ~typ:(returning (id))
let trackFormat self = msg_send ~self ~cmd:(selector "trackFormat") ~typ:(returning (id))
let transformedPixelSize self = msg_send_stret ~self ~cmd:(selector "transformedPixelSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let treatAsUnsupportedRAW self = msg_send ~self ~cmd:(selector "treatAsUnsupportedRAW") ~typ:(returning (bool))
let updateIsRAW x ~contentType self = msg_send ~self ~cmd:(selector "updateIsRAW:contentType:") ~typ:(bool @-> id @-> returning (void)) x contentType
let url self = msg_send ~self ~cmd:(selector "url") ~typ:(returning (id))
let userInfo self = msg_send ~self ~cmd:(selector "userInfo") ~typ:(returning (id))
let userMetadata self = msg_send ~self ~cmd:(selector "userMetadata") ~typ:(returning (id))
let uuid self = msg_send ~self ~cmd:(selector "uuid") ~typ:(returning (id))
let validateMetadataForImportRecord x self = msg_send ~self ~cmd:(selector "validateMetadataForImportRecord:") ~typ:(id @-> returning (id)) x
let videoComplement self = msg_send ~self ~cmd:(selector "videoComplement") ~typ:(returning (id))
let whiteBalance self = msg_send ~self ~cmd:(selector "whiteBalance") ~typ:(returning (id))
let xmpSidecar self = msg_send ~self ~cmd:(selector "xmpSidecar") ~typ:(returning (id))