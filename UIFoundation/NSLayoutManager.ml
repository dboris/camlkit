(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

open Foundation
open CoreText

(** Apple docs: {{:https://developer.apple.com/documentation/uifoundation/nslayoutmanager?language=objc}NSLayoutManager} *)

let self = get_class "NSLayoutManager"

let alloc () = msg_send ~self ~cmd:(selector "alloc") ~typ:(returning id)

let _CGGlyphAtIndex x self = msg_send ~self ~cmd:(selector "CGGlyphAtIndex:") ~typ:(ullong @-> returning ushort) (ULLong.of_int x)
let _CGGlyphAtIndex' x ~isValidIndex self = msg_send ~self ~cmd:(selector "CGGlyphAtIndex:isValidIndex:") ~typ:(ullong @-> (ptr bool) @-> returning ushort) (ULLong.of_int x) isValidIndex
let addTemporaryAttribute x ~value ~forCharacterRange self = msg_send ~self ~cmd:(selector "addTemporaryAttribute:value:forCharacterRange:") ~typ:(id @-> id @-> NSRange.t @-> returning void) x value forCharacterRange
let addTemporaryAttributes x ~forCharacterRange self = msg_send ~self ~cmd:(selector "addTemporaryAttributes:forCharacterRange:") ~typ:(id @-> NSRange.t @-> returning void) x forCharacterRange
let addTextContainer x self = msg_send ~self ~cmd:(selector "addTextContainer:") ~typ:(id @-> returning void) x
let allowsNonContiguousLayout self = msg_send ~self ~cmd:(selector "allowsNonContiguousLayout") ~typ:(returning bool)
let allowsOriginalFontMetricsOverride self = msg_send ~self ~cmd:(selector "allowsOriginalFontMetricsOverride") ~typ:(returning bool)
let applicationFrameworkContext self = msg_send ~self ~cmd:(selector "applicationFrameworkContext") ~typ:(returning llong) |> LLong.to_int
let attachmentSizeForGlyphAtIndex x self = msg_send_stret ~self ~cmd:(selector "attachmentSizeForGlyphAtIndex:") ~typ:(ullong @-> returning CGSize.t) ~return_type:CGSize.t (ULLong.of_int x)
let attributedString self = msg_send ~self ~cmd:(selector "attributedString") ~typ:(returning id)
let awakeFromNib self = msg_send ~self ~cmd:(selector "awakeFromNib") ~typ:(returning void)
let backgroundColorProvidesOpaqueSurface self = msg_send ~self ~cmd:(selector "backgroundColorProvidesOpaqueSurface") ~typ:(returning bool)
let backgroundLayoutEnabled self = msg_send ~self ~cmd:(selector "backgroundLayoutEnabled") ~typ:(returning bool)
let baselineOffsetForGlyphAtIndex x self = msg_send ~self ~cmd:(selector "baselineOffsetForGlyphAtIndex:") ~typ:(ullong @-> returning double) (ULLong.of_int x)
let beginScrollingForView x ~textContainer self = msg_send ~self ~cmd:(selector "beginScrollingForView:textContainer:") ~typ:(id @-> id @-> returning void) x textContainer
let boundingRectForGlyphRange x ~inTextContainer self = msg_send_stret ~self ~cmd:(selector "boundingRectForGlyphRange:inTextContainer:") ~typ:(NSRange.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x inTextContainer
let boundsRectForTextBlock x ~glyphRange self = msg_send_stret ~self ~cmd:(selector "boundsRectForTextBlock:glyphRange:") ~typ:(id @-> NSRange.t @-> returning CGRect.t) ~return_type:CGRect.t x glyphRange
let boundsRectForTextBlock' x ~atIndex ~effectiveRange self = msg_send_stret ~self ~cmd:(selector "boundsRectForTextBlock:atIndex:effectiveRange:") ~typ:(id @-> ullong @-> (ptr NSRange.t) @-> returning CGRect.t) ~return_type:CGRect.t x (ULLong.of_int atIndex) effectiveRange
let characterIndexForGlyphAtIndex x self = msg_send ~self ~cmd:(selector "characterIndexForGlyphAtIndex:") ~typ:(ullong @-> returning ullong) (ULLong.of_int x) |> ULLong.to_int
let characterIndexForPoint x ~inTextContainer ~fractionOfDistanceBetweenInsertionPoints self = msg_send ~self ~cmd:(selector "characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:") ~typ:(CGPoint.t @-> id @-> (ptr double) @-> returning ullong) x inTextContainer fractionOfDistanceBetweenInsertionPoints |> ULLong.to_int
let characterRangeForGlyphRange x ~actualGlyphRange self = msg_send_stret ~self ~cmd:(selector "characterRangeForGlyphRange:actualGlyphRange:") ~typ:(NSRange.t @-> (ptr NSRange.t) @-> returning NSRange.t) ~return_type:NSRange.t x actualGlyphRange
let coordinateAccess x self = msg_send ~self ~cmd:(selector "coordinateAccess:") ~typ:((ptr void) @-> returning void) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let defaultAttachmentScaling self = msg_send ~self ~cmd:(selector "defaultAttachmentScaling") ~typ:(returning ullong) |> ULLong.to_int
let defaultBaselineOffsetForFont x self = msg_send ~self ~cmd:(selector "defaultBaselineOffsetForFont:") ~typ:(id @-> returning double) x
let defaultLineHeightForFont x self = msg_send ~self ~cmd:(selector "defaultLineHeightForFont:") ~typ:(id @-> returning double) x
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning id)
let deleteGlyphsInRange x self = msg_send ~self ~cmd:(selector "deleteGlyphsInRange:") ~typ:(NSRange.t @-> returning void) x
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let destinationTextContainerForRange x ~inTextContainer self = msg_send ~self ~cmd:(selector "destinationTextContainerForRange:inTextContainer:") ~typ:(NSRange.t @-> id @-> returning id) x inTextContainer
let didCompleteLayoutObserverBlock self = msg_send ~self ~cmd:(selector "didCompleteLayoutObserverBlock") ~typ:(returning (ptr void))
let drawBackgroundForGlyphRange x ~atPoint self = msg_send ~self ~cmd:(selector "drawBackgroundForGlyphRange:atPoint:") ~typ:(NSRange.t @-> CGPoint.t @-> returning void) x atPoint
let drawGlyphsForGlyphRange x ~atPoint self = msg_send ~self ~cmd:(selector "drawGlyphsForGlyphRange:atPoint:") ~typ:(NSRange.t @-> CGPoint.t @-> returning void) x atPoint
let drawSpellingUnderlineForGlyphRange x ~spellingState ~inGlyphRange ~lineFragmentRect ~lineFragmentGlyphRange ~containerOrigin self = msg_send ~self ~cmd:(selector "drawSpellingUnderlineForGlyphRange:spellingState:inGlyphRange:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") ~typ:(NSRange.t @-> llong @-> NSRange.t @-> CGRect.t @-> NSRange.t @-> CGPoint.t @-> returning void) x (LLong.of_int spellingState) inGlyphRange lineFragmentRect lineFragmentGlyphRange containerOrigin
let drawStrikethroughForGlyphRange x ~strikethroughType ~baselineOffset ~lineFragmentRect ~lineFragmentGlyphRange ~containerOrigin self = msg_send ~self ~cmd:(selector "drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") ~typ:(NSRange.t @-> llong @-> double @-> CGRect.t @-> NSRange.t @-> CGPoint.t @-> returning void) x (LLong.of_int strikethroughType) baselineOffset lineFragmentRect lineFragmentGlyphRange containerOrigin
let drawUnderlineForGlyphRange x ~underlineType ~baselineOffset ~lineFragmentRect ~lineFragmentGlyphRange ~containerOrigin self = msg_send ~self ~cmd:(selector "drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") ~typ:(NSRange.t @-> llong @-> double @-> CGRect.t @-> NSRange.t @-> CGPoint.t @-> returning void) x (LLong.of_int underlineType) baselineOffset lineFragmentRect lineFragmentGlyphRange containerOrigin
let drawsOutsideLineFragmentForGlyphAtIndex x self = msg_send ~self ~cmd:(selector "drawsOutsideLineFragmentForGlyphAtIndex:") ~typ:(ullong @-> returning bool) (ULLong.of_int x)
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let endScrollingForView x ~textContainer self = msg_send ~self ~cmd:(selector "endScrollingForView:textContainer:") ~typ:(id @-> id @-> returning void) x textContainer
let ensureGlyphsForCharacterRange x self = msg_send ~self ~cmd:(selector "ensureGlyphsForCharacterRange:") ~typ:(NSRange.t @-> returning void) x
let ensureGlyphsForGlyphRange x self = msg_send ~self ~cmd:(selector "ensureGlyphsForGlyphRange:") ~typ:(NSRange.t @-> returning void) x
let ensureLayoutForBoundingRect x ~inTextContainer self = msg_send ~self ~cmd:(selector "ensureLayoutForBoundingRect:inTextContainer:") ~typ:(CGRect.t @-> id @-> returning void) x inTextContainer
let ensureLayoutForCharacterRange x self = msg_send ~self ~cmd:(selector "ensureLayoutForCharacterRange:") ~typ:(NSRange.t @-> returning void) x
let ensureLayoutForGlyphRange x self = msg_send ~self ~cmd:(selector "ensureLayoutForGlyphRange:") ~typ:(NSRange.t @-> returning void) x
let ensureLayoutForTextContainer x self = msg_send ~self ~cmd:(selector "ensureLayoutForTextContainer:") ~typ:(id @-> returning void) x
let enumerateEnclosingRectsForCharacterRange x ~withinSelectedCharacterRange ~inTextContainer ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateEnclosingRectsForCharacterRange:withinSelectedCharacterRange:inTextContainer:usingBlock:") ~typ:(NSRange.t @-> NSRange.t @-> id @-> (ptr void) @-> returning void) x withinSelectedCharacterRange inTextContainer usingBlock
let enumerateEnclosingRectsForGlyphRange x ~withinSelectedGlyphRange ~inTextContainer ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:") ~typ:(NSRange.t @-> NSRange.t @-> id @-> (ptr void) @-> returning void) x withinSelectedGlyphRange inTextContainer usingBlock
let enumerateLineFragmentsForGlyphRange x ~usingBlock self = msg_send ~self ~cmd:(selector "enumerateLineFragmentsForGlyphRange:usingBlock:") ~typ:(NSRange.t @-> (ptr void) @-> returning void) x usingBlock
let extraLineFragmentRect self = msg_send_stret ~self ~cmd:(selector "extraLineFragmentRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let extraLineFragmentTextContainer self = msg_send ~self ~cmd:(selector "extraLineFragmentTextContainer") ~typ:(returning id)
let extraLineFragmentUsedRect self = msg_send_stret ~self ~cmd:(selector "extraLineFragmentUsedRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let fillBackgroundRectArray x ~count ~forCharacterRange ~color self = msg_send ~self ~cmd:(selector "fillBackgroundRectArray:count:forCharacterRange:color:") ~typ:((ptr CGRect.t) @-> ullong @-> NSRange.t @-> id @-> returning void) x (ULLong.of_int count) forCharacterRange color
let fillMarkedBackgroundRectArray x ~count ~forCharacterRange ~color self = msg_send ~self ~cmd:(selector "fillMarkedBackgroundRectArray:count:forCharacterRange:color:") ~typ:((ptr CGRect.t) @-> ullong @-> NSRange.t @-> id @-> returning void) x (ULLong.of_int count) forCharacterRange color
let finalize self = msg_send ~self ~cmd:(selector "finalize") ~typ:(returning void)
let firstTextView self = msg_send ~self ~cmd:(selector "firstTextView") ~typ:(returning id)
let firstUnlaidCharacterIndex self = msg_send ~self ~cmd:(selector "firstUnlaidCharacterIndex") ~typ:(returning ullong) |> ULLong.to_int
let firstUnlaidGlyphIndex self = msg_send ~self ~cmd:(selector "firstUnlaidGlyphIndex") ~typ:(returning ullong) |> ULLong.to_int
let flipsIfNeeded self = msg_send ~self ~cmd:(selector "flipsIfNeeded") ~typ:(returning bool)
let fractionOfDistanceThroughGlyphForPoint x ~inTextContainer self = msg_send ~self ~cmd:(selector "fractionOfDistanceThroughGlyphForPoint:inTextContainer:") ~typ:(CGPoint.t @-> id @-> returning double) x inTextContainer
let getFirstUnlaidCharacterIndex x ~glyphIndex self = msg_send ~self ~cmd:(selector "getFirstUnlaidCharacterIndex:glyphIndex:") ~typ:((ptr ullong) @-> (ptr ullong) @-> returning void) x glyphIndex
let getGlyphs x ~range self = msg_send ~self ~cmd:(selector "getGlyphs:range:") ~typ:((ptr uint) @-> NSRange.t @-> returning ullong) x range |> ULLong.to_int
let getGlyphsInRange x ~glyphs ~characterIndexes ~glyphInscriptions ~elasticBits self = msg_send ~self ~cmd:(selector "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:") ~typ:(NSRange.t @-> (ptr uint) @-> (ptr ullong) @-> (ptr ullong) @-> (ptr bool) @-> returning ullong) x glyphs characterIndexes glyphInscriptions elasticBits |> ULLong.to_int
let getGlyphsInRange1 x ~glyphs ~properties ~characterIndexes ~bidiLevels self = msg_send ~self ~cmd:(selector "getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:") ~typ:(NSRange.t @-> (ptr ushort) @-> (ptr llong) @-> (ptr ullong) @-> string @-> returning ullong) x glyphs properties characterIndexes bidiLevels |> ULLong.to_int
let getGlyphsInRange2 x ~glyphs ~characterIndexes ~glyphInscriptions ~elasticBits ~bidiLevels self = msg_send ~self ~cmd:(selector "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:") ~typ:(NSRange.t @-> (ptr uint) @-> (ptr ullong) @-> (ptr ullong) @-> (ptr bool) @-> string @-> returning ullong) x glyphs characterIndexes glyphInscriptions elasticBits bidiLevels |> ULLong.to_int
let getLineFragmentInsertionPointArraysForCharacterAtIndex x ~inDisplayOrder ~positions ~characterIndexes ~count ~alternatePositions ~characterIndexes_ ~count_ self = msg_send ~self ~cmd:(selector "getLineFragmentInsertionPointArraysForCharacterAtIndex:inDisplayOrder:positions:characterIndexes:count:alternatePositions:characterIndexes:count:") ~typ:(ullong @-> bool @-> (ptr (ptr double)) @-> (ptr (ptr ullong)) @-> (ptr ullong) @-> (ptr (ptr double)) @-> (ptr (ptr ullong)) @-> (ptr ullong) @-> returning llong) (ULLong.of_int x) inDisplayOrder positions characterIndexes count alternatePositions characterIndexes_ count_ |> LLong.to_int
let getLineFragmentInsertionPointsForCharacterAtIndex x ~alternatePositions ~inDisplayOrder ~positions ~characterIndexes self = msg_send ~self ~cmd:(selector "getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:") ~typ:(ullong @-> bool @-> bool @-> (ptr double) @-> (ptr ullong) @-> returning ullong) (ULLong.of_int x) alternatePositions inDisplayOrder positions characterIndexes |> ULLong.to_int
let glyphAtIndex x self = msg_send ~self ~cmd:(selector "glyphAtIndex:") ~typ:(ullong @-> returning uint) (ULLong.of_int x)
let glyphAtIndex' x ~isValidIndex self = msg_send ~self ~cmd:(selector "glyphAtIndex:isValidIndex:") ~typ:(ullong @-> (ptr bool) @-> returning uint) (ULLong.of_int x) isValidIndex
let glyphGenerator self = msg_send ~self ~cmd:(selector "glyphGenerator") ~typ:(returning id)
let glyphIndexForCharacterAtIndex x self = msg_send ~self ~cmd:(selector "glyphIndexForCharacterAtIndex:") ~typ:(ullong @-> returning ullong) (ULLong.of_int x) |> ULLong.to_int
let glyphIndexForPoint x ~inTextContainer self = msg_send ~self ~cmd:(selector "glyphIndexForPoint:inTextContainer:") ~typ:(CGPoint.t @-> id @-> returning ullong) x inTextContainer |> ULLong.to_int
let glyphIndexForPoint' x ~inTextContainer ~fractionOfDistanceThroughGlyph self = msg_send ~self ~cmd:(selector "glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:") ~typ:(CGPoint.t @-> id @-> (ptr double) @-> returning ullong) x inTextContainer fractionOfDistanceThroughGlyph |> ULLong.to_int
let glyphRangeForBoundingRect x ~inTextContainer self = msg_send_stret ~self ~cmd:(selector "glyphRangeForBoundingRect:inTextContainer:") ~typ:(CGRect.t @-> id @-> returning NSRange.t) ~return_type:NSRange.t x inTextContainer
let glyphRangeForBoundingRectWithoutAdditionalLayout x ~inTextContainer self = msg_send_stret ~self ~cmd:(selector "glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:") ~typ:(CGRect.t @-> id @-> returning NSRange.t) ~return_type:NSRange.t x inTextContainer
let glyphRangeForCharacterRange x ~actualCharacterRange self = msg_send_stret ~self ~cmd:(selector "glyphRangeForCharacterRange:actualCharacterRange:") ~typ:(NSRange.t @-> (ptr NSRange.t) @-> returning NSRange.t) ~return_type:NSRange.t x actualCharacterRange
let glyphRangeForTextContainer x self = msg_send_stret ~self ~cmd:(selector "glyphRangeForTextContainer:") ~typ:(id @-> returning NSRange.t) ~return_type:NSRange.t x
let hasNonContiguousLayout self = msg_send ~self ~cmd:(selector "hasNonContiguousLayout") ~typ:(returning bool)
let hyphenationFactor self = msg_send ~self ~cmd:(selector "hyphenationFactor") ~typ:(returning float)
let ignoresAntialiasThreshold self = msg_send ~self ~cmd:(selector "ignoresAntialiasThreshold") ~typ:(returning bool)
let ignoresViewTransformations self = msg_send ~self ~cmd:(selector "ignoresViewTransformations") ~typ:(returning bool)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let insertGlyph x ~atGlyphIndex ~characterIndex self = msg_send ~self ~cmd:(selector "insertGlyph:atGlyphIndex:characterIndex:") ~typ:(uint @-> ullong @-> ullong @-> returning void) x (ULLong.of_int atGlyphIndex) (ULLong.of_int characterIndex)
let insertGlyphs x ~length ~forStartingGlyphAtIndex ~characterIndex self = msg_send ~self ~cmd:(selector "insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:") ~typ:((ptr uint) @-> ullong @-> ullong @-> ullong @-> returning void) x (ULLong.of_int length) (ULLong.of_int forStartingGlyphAtIndex) (ULLong.of_int characterIndex)
let insertTextContainer x ~atIndex self = msg_send ~self ~cmd:(selector "insertTextContainer:atIndex:") ~typ:(id @-> ullong @-> returning void) x (ULLong.of_int atIndex)
let intAttribute x ~forGlyphAtIndex self = msg_send ~self ~cmd:(selector "intAttribute:forGlyphAtIndex:") ~typ:(llong @-> ullong @-> returning llong) (LLong.of_int x) (ULLong.of_int forGlyphAtIndex) |> LLong.to_int
let invalidateDisplayForCharacterRange x self = msg_send ~self ~cmd:(selector "invalidateDisplayForCharacterRange:") ~typ:(NSRange.t @-> returning void) x
let invalidateDisplayForGlyphRange x self = msg_send ~self ~cmd:(selector "invalidateDisplayForGlyphRange:") ~typ:(NSRange.t @-> returning void) x
let invalidateGlyphsForCharacterRange x ~changeInLength ~actualCharacterRange self = msg_send ~self ~cmd:(selector "invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:") ~typ:(NSRange.t @-> llong @-> (ptr NSRange.t) @-> returning void) x (LLong.of_int changeInLength) actualCharacterRange
let invalidateGlyphsOnLayoutInvalidationForGlyphRange x self = msg_send ~self ~cmd:(selector "invalidateGlyphsOnLayoutInvalidationForGlyphRange:") ~typ:(NSRange.t @-> returning void) x
let invalidateLayoutForCharacterRange x ~actualCharacterRange self = msg_send ~self ~cmd:(selector "invalidateLayoutForCharacterRange:actualCharacterRange:") ~typ:(NSRange.t @-> (ptr NSRange.t) @-> returning void) x actualCharacterRange
let invalidateLayoutForCharacterRange' x ~isSoft ~actualCharacterRange self = msg_send ~self ~cmd:(selector "invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:") ~typ:(NSRange.t @-> bool @-> (ptr NSRange.t) @-> returning void) x isSoft actualCharacterRange
let isScrolling self = msg_send ~self ~cmd:(selector "isScrolling") ~typ:(returning bool)
let isValidGlyphIndex x self = msg_send ~self ~cmd:(selector "isValidGlyphIndex:") ~typ:(ullong @-> returning bool) (ULLong.of_int x)
let layoutFragmentsForReplacingCharactersInRange x ~withAttributedString ~rect ~textContainer self = msg_send ~self ~cmd:(selector "layoutFragmentsForReplacingCharactersInRange:withAttributedString:rect:textContainer:") ~typ:(NSRange.t @-> id @-> CGRect.t @-> id @-> returning id) x withAttributedString rect textContainer
let layoutOptions self = msg_send ~self ~cmd:(selector "layoutOptions") ~typ:(returning ullong) |> ULLong.to_int
let layoutRectForTextBlock x ~glyphRange self = msg_send_stret ~self ~cmd:(selector "layoutRectForTextBlock:glyphRange:") ~typ:(id @-> NSRange.t @-> returning CGRect.t) ~return_type:CGRect.t x glyphRange
let layoutRectForTextBlock' x ~atIndex ~effectiveRange self = msg_send_stret ~self ~cmd:(selector "layoutRectForTextBlock:atIndex:effectiveRange:") ~typ:(id @-> ullong @-> (ptr NSRange.t) @-> returning CGRect.t) ~return_type:CGRect.t x (ULLong.of_int atIndex) effectiveRange
let limitsLayoutForSuspiciousContents self = msg_send ~self ~cmd:(selector "limitsLayoutForSuspiciousContents") ~typ:(returning bool)
let lineFragmentRectForGlyphAtIndex x ~effectiveRange self = msg_send_stret ~self ~cmd:(selector "lineFragmentRectForGlyphAtIndex:effectiveRange:") ~typ:(ullong @-> (ptr NSRange.t) @-> returning CGRect.t) ~return_type:CGRect.t (ULLong.of_int x) effectiveRange
let lineFragmentRectForGlyphAtIndex' x ~effectiveRange ~withoutAdditionalLayout self = msg_send_stret ~self ~cmd:(selector "lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") ~typ:(ullong @-> (ptr NSRange.t) @-> bool @-> returning CGRect.t) ~return_type:CGRect.t (ULLong.of_int x) effectiveRange withoutAdditionalLayout
let lineFragmentUsedRectForGlyphAtIndex x ~effectiveRange self = msg_send_stret ~self ~cmd:(selector "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:") ~typ:(ullong @-> (ptr NSRange.t) @-> returning CGRect.t) ~return_type:CGRect.t (ULLong.of_int x) effectiveRange
let lineFragmentUsedRectForGlyphAtIndex1 x ~effectiveRange ~allowLayout self = msg_send_stret ~self ~cmd:(selector "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:allowLayout:") ~typ:(ullong @-> (ptr NSRange.t) @-> bool @-> returning CGRect.t) ~return_type:CGRect.t (ULLong.of_int x) effectiveRange allowLayout
let lineFragmentUsedRectForGlyphAtIndex2 x ~effectiveRange ~withoutAdditionalLayout self = msg_send_stret ~self ~cmd:(selector "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") ~typ:(ullong @-> (ptr NSRange.t) @-> bool @-> returning CGRect.t) ~return_type:CGRect.t (ULLong.of_int x) effectiveRange withoutAdditionalLayout
let linkAttributesForAttributes x ~forCharacterAtIndex self = msg_send ~self ~cmd:(selector "linkAttributesForAttributes:forCharacterAtIndex:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int forCharacterAtIndex)
let linkAttributesForLink x ~forCharacterAtIndex self = msg_send ~self ~cmd:(selector "linkAttributesForLink:forCharacterAtIndex:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int forCharacterAtIndex)
let locationForGlyphAtIndex x self = msg_send_stret ~self ~cmd:(selector "locationForGlyphAtIndex:") ~typ:(ullong @-> returning CGPoint.t) ~return_type:CGPoint.t (ULLong.of_int x)
let notShownAttributeForGlyphAtIndex x self = msg_send ~self ~cmd:(selector "notShownAttributeForGlyphAtIndex:") ~typ:(ullong @-> returning bool) (ULLong.of_int x)
let numberOfGlyphs self = msg_send ~self ~cmd:(selector "numberOfGlyphs") ~typ:(returning ullong) |> ULLong.to_int
let paragraphArbitrator self = msg_send ~self ~cmd:(selector "paragraphArbitrator") ~typ:(returning id)
let prepareLayoutForBoundingRect x ~textContainer self = msg_send_stret ~self ~cmd:(selector "prepareLayoutForBoundingRect:textContainer:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x textContainer
let processEditingForTextStorage x ~edited ~range ~changeInLength ~invalidatedRange self = msg_send ~self ~cmd:(selector "processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:") ~typ:(id @-> ullong @-> NSRange.t @-> llong @-> NSRange.t @-> returning void) x (ULLong.of_int edited) range (LLong.of_int changeInLength) invalidatedRange
let propertyForGlyphAtIndex x self = msg_send ~self ~cmd:(selector "propertyForGlyphAtIndex:") ~typ:(ullong @-> returning llong) (ULLong.of_int x) |> LLong.to_int
let rangeOfCharacterClusterAtIndex x ~type_ self = msg_send_stret ~self ~cmd:(selector "rangeOfCharacterClusterAtIndex:type:") ~typ:(ullong @-> llong @-> returning NSRange.t) ~return_type:NSRange.t (ULLong.of_int x) (LLong.of_int type_)
let rangeOfNominallySpacedGlyphsContainingIndex x self = msg_send_stret ~self ~cmd:(selector "rangeOfNominallySpacedGlyphsContainingIndex:") ~typ:(ullong @-> returning NSRange.t) ~return_type:NSRange.t (ULLong.of_int x)
let rectArrayForCharacterRange x ~withinSelectedCharacterRange ~inTextContainer ~rectCount self = msg_send ~self ~cmd:(selector "rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:") ~typ:(NSRange.t @-> NSRange.t @-> id @-> (ptr ullong) @-> returning (ptr CGRect.t)) x withinSelectedCharacterRange inTextContainer rectCount
let rectArrayForGlyphRange x ~withinSelectedGlyphRange ~inTextContainer ~rectCount self = msg_send ~self ~cmd:(selector "rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:") ~typ:(NSRange.t @-> NSRange.t @-> id @-> (ptr ullong) @-> returning (ptr CGRect.t)) x withinSelectedGlyphRange inTextContainer rectCount
let removeTemporaryAttribute x ~forCharacterRange self = msg_send ~self ~cmd:(selector "removeTemporaryAttribute:forCharacterRange:") ~typ:(id @-> NSRange.t @-> returning void) x forCharacterRange
let removeTextContainerAtIndex x self = msg_send ~self ~cmd:(selector "removeTextContainerAtIndex:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let renderingColorForDocumentColor x self = msg_send ~self ~cmd:(selector "renderingColorForDocumentColor:") ~typ:(id @-> returning id) x
let replaceGlyphAtIndex x ~withGlyph self = msg_send ~self ~cmd:(selector "replaceGlyphAtIndex:withGlyph:") ~typ:(ullong @-> uint @-> returning void) (ULLong.of_int x) withGlyph
let replaceTextStorage x self = msg_send ~self ~cmd:(selector "replaceTextStorage:") ~typ:(id @-> returning void) x
let selectedTextAttributesForCharacterAtIndex x ~effectiveRange self = msg_send ~self ~cmd:(selector "selectedTextAttributesForCharacterAtIndex:effectiveRange:") ~typ:(ullong @-> (ptr NSRange.t) @-> returning id) (ULLong.of_int x) effectiveRange
let setAllowsNonContiguousLayout x self = msg_send ~self ~cmd:(selector "setAllowsNonContiguousLayout:") ~typ:(bool @-> returning void) x
let setAllowsOriginalFontMetricsOverride x self = msg_send ~self ~cmd:(selector "setAllowsOriginalFontMetricsOverride:") ~typ:(bool @-> returning void) x
let setApplicationFrameworkContext x self = msg_send ~self ~cmd:(selector "setApplicationFrameworkContext:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setAttachmentSize x ~forGlyphRange self = msg_send ~self ~cmd:(selector "setAttachmentSize:forGlyphRange:") ~typ:(CGSize.t @-> NSRange.t @-> returning void) x forGlyphRange
let setBackgroundLayoutEnabled x self = msg_send ~self ~cmd:(selector "setBackgroundLayoutEnabled:") ~typ:(bool @-> returning void) x
let setBaselineOffset x ~forGlyphAtIndex self = msg_send ~self ~cmd:(selector "setBaselineOffset:forGlyphAtIndex:") ~typ:(double @-> ullong @-> returning void) x (ULLong.of_int forGlyphAtIndex)
let setBoundsRect x ~forTextBlock ~glyphRange self = msg_send ~self ~cmd:(selector "setBoundsRect:forTextBlock:glyphRange:") ~typ:(CGRect.t @-> id @-> NSRange.t @-> returning void) x forTextBlock glyphRange
let setCharacterIndex x ~forGlyphAtIndex self = msg_send ~self ~cmd:(selector "setCharacterIndex:forGlyphAtIndex:") ~typ:(ullong @-> ullong @-> returning void) (ULLong.of_int x) (ULLong.of_int forGlyphAtIndex)
let setDefaultAttachmentScaling x self = msg_send ~self ~cmd:(selector "setDefaultAttachmentScaling:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning void) x
let setDidCompleteLayoutObserverBlock x self = msg_send ~self ~cmd:(selector "setDidCompleteLayoutObserverBlock:") ~typ:((ptr void) @-> returning void) x
let setDrawsOutsideLineFragment x ~forGlyphAtIndex self = msg_send ~self ~cmd:(selector "setDrawsOutsideLineFragment:forGlyphAtIndex:") ~typ:(bool @-> ullong @-> returning void) x (ULLong.of_int forGlyphAtIndex)
let setEllipsisGlyphAttribute x ~forGlyphAtIndex self = msg_send ~self ~cmd:(selector "setEllipsisGlyphAttribute:forGlyphAtIndex:") ~typ:(bool @-> ullong @-> returning void) x (ULLong.of_int forGlyphAtIndex)
let setExtraLineFragmentRect x ~usedRect ~textContainer self = msg_send ~self ~cmd:(selector "setExtraLineFragmentRect:usedRect:textContainer:") ~typ:(CGRect.t @-> CGRect.t @-> id @-> returning void) x usedRect textContainer
let setFlipsIfNeeded x self = msg_send ~self ~cmd:(selector "setFlipsIfNeeded:") ~typ:(bool @-> returning void) x
let setGlyphGenerator x self = msg_send ~self ~cmd:(selector "setGlyphGenerator:") ~typ:(id @-> returning void) x
let setGlyphs x ~properties ~characterIndexes ~font ~forGlyphRange self = msg_send ~self ~cmd:(selector "setGlyphs:properties:characterIndexes:font:forGlyphRange:") ~typ:((ptr ushort) @-> (ptr llong) @-> (ptr ullong) @-> id @-> NSRange.t @-> returning void) x properties characterIndexes font forGlyphRange
let setHyphenationFactor x self = msg_send ~self ~cmd:(selector "setHyphenationFactor:") ~typ:(float @-> returning void) x
let setIgnoresAntialiasThreshold x self = msg_send ~self ~cmd:(selector "setIgnoresAntialiasThreshold:") ~typ:(bool @-> returning void) x
let setIgnoresViewTransformations x self = msg_send ~self ~cmd:(selector "setIgnoresViewTransformations:") ~typ:(bool @-> returning void) x
let setIntAttribute x ~value ~forGlyphAtIndex self = msg_send ~self ~cmd:(selector "setIntAttribute:value:forGlyphAtIndex:") ~typ:(llong @-> llong @-> ullong @-> returning void) (LLong.of_int x) (LLong.of_int value) (ULLong.of_int forGlyphAtIndex)
let setLayoutRect x ~forTextBlock ~glyphRange self = msg_send ~self ~cmd:(selector "setLayoutRect:forTextBlock:glyphRange:") ~typ:(CGRect.t @-> id @-> NSRange.t @-> returning void) x forTextBlock glyphRange
let setLimitsLayoutForSuspiciousContents x self = msg_send ~self ~cmd:(selector "setLimitsLayoutForSuspiciousContents:") ~typ:(bool @-> returning void) x
let setLineFragmentRect x ~forGlyphRange ~usedRect self = msg_send ~self ~cmd:(selector "setLineFragmentRect:forGlyphRange:usedRect:") ~typ:(CGRect.t @-> NSRange.t @-> CGRect.t @-> returning void) x forGlyphRange usedRect
let setLineFragmentRect' x ~forGlyphRange ~usedRect ~baselineOffset self = msg_send ~self ~cmd:(selector "setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:") ~typ:(CGRect.t @-> NSRange.t @-> CGRect.t @-> double @-> returning void) x forGlyphRange usedRect baselineOffset
let setLocation x ~forStartOfGlyphRange self = msg_send ~self ~cmd:(selector "setLocation:forStartOfGlyphRange:") ~typ:(CGPoint.t @-> NSRange.t @-> returning void) x forStartOfGlyphRange
let setLocation' x ~forStartOfGlyphRange ~coalesceRuns self = msg_send ~self ~cmd:(selector "setLocation:forStartOfGlyphRange:coalesceRuns:") ~typ:(CGPoint.t @-> NSRange.t @-> bool @-> returning void) x forStartOfGlyphRange coalesceRuns
let setLocations x ~startingGlyphIndexes ~count ~forGlyphRange self = msg_send ~self ~cmd:(selector "setLocations:startingGlyphIndexes:count:forGlyphRange:") ~typ:((ptr CGPoint.t) @-> (ptr ullong) @-> ullong @-> NSRange.t @-> returning void) x startingGlyphIndexes (ULLong.of_int count) forGlyphRange
let setNotShownAttribute x ~forGlyphAtIndex self = msg_send ~self ~cmd:(selector "setNotShownAttribute:forGlyphAtIndex:") ~typ:(bool @-> ullong @-> returning void) x (ULLong.of_int forGlyphAtIndex)
let setParagraphArbitrator x self = msg_send ~self ~cmd:(selector "setParagraphArbitrator:") ~typ:(id @-> returning void) x
let setShowsControlCharacters x self = msg_send ~self ~cmd:(selector "setShowsControlCharacters:") ~typ:(bool @-> returning void) x
let setShowsInvisibleCharacters x self = msg_send ~self ~cmd:(selector "setShowsInvisibleCharacters:") ~typ:(bool @-> returning void) x
let setStyleEffectConfiguration x self = msg_send ~self ~cmd:(selector "setStyleEffectConfiguration:") ~typ:(id @-> returning void) x
let setSynchronizesAlignmentToDirection x self = msg_send ~self ~cmd:(selector "setSynchronizesAlignmentToDirection:") ~typ:(bool @-> returning void) x
let setTemporaryAttributes x ~forCharacterRange self = msg_send ~self ~cmd:(selector "setTemporaryAttributes:forCharacterRange:") ~typ:(id @-> NSRange.t @-> returning void) x forCharacterRange
let setTextContainer x ~forGlyphRange self = msg_send ~self ~cmd:(selector "setTextContainer:forGlyphRange:") ~typ:(id @-> NSRange.t @-> returning void) x forGlyphRange
let setTextStorage x self = msg_send ~self ~cmd:(selector "setTextStorage:") ~typ:(id @-> returning void) x
let setTypesetter x self = msg_send ~self ~cmd:(selector "setTypesetter:") ~typ:(id @-> returning void) x
let setTypesetterBehavior x self = msg_send ~self ~cmd:(selector "setTypesetterBehavior:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setUnderlineColorForSpelling x self = msg_send ~self ~cmd:(selector "setUnderlineColorForSpelling:") ~typ:(id @-> returning void) x
let setUnderlineColorForTextAlternatives x self = msg_send ~self ~cmd:(selector "setUnderlineColorForTextAlternatives:") ~typ:(id @-> returning void) x
let setUsesDefaultHyphenation x self = msg_send ~self ~cmd:(selector "setUsesDefaultHyphenation:") ~typ:(bool @-> returning void) x
let setUsesFontLeading x self = msg_send ~self ~cmd:(selector "setUsesFontLeading:") ~typ:(bool @-> returning void) x
let setUsesScreenFonts x self = msg_send ~self ~cmd:(selector "setUsesScreenFonts:") ~typ:(bool @-> returning void) x
let setViewProvider x ~forTextAttachment ~characterIndex self = msg_send ~self ~cmd:(selector "setViewProvider:forTextAttachment:characterIndex:") ~typ:(id @-> id @-> ullong @-> returning void) x forTextAttachment (ULLong.of_int characterIndex)
let showAttachment x ~inRect ~textContainer ~characterIndex self = msg_send ~self ~cmd:(selector "showAttachment:inRect:textContainer:characterIndex:") ~typ:(id @-> CGRect.t @-> id @-> ullong @-> returning void) x inRect textContainer (ULLong.of_int characterIndex)
let showAttachmentCell x ~inRect ~characterIndex self = msg_send ~self ~cmd:(selector "showAttachmentCell:inRect:characterIndex:") ~typ:(id @-> CGRect.t @-> ullong @-> returning void) x inRect (ULLong.of_int characterIndex)
let showCGGlyphs x ~positions ~count ~font ~matrix ~attributes ~inContext self = msg_send ~self ~cmd:(selector "showCGGlyphs:positions:count:font:matrix:attributes:inContext:") ~typ:((ptr ushort) @-> (ptr CGPoint.t) @-> ullong @-> id @-> id @-> id @-> id @-> returning void) x positions (ULLong.of_int count) font matrix attributes inContext
let showCGGlyphs' x ~positions ~count ~font ~textMatrix ~attributes ~inContext self = msg_send ~self ~cmd:(selector "showCGGlyphs:positions:count:font:textMatrix:attributes:inContext:") ~typ:((ptr ushort) @-> (ptr CGPoint.t) @-> llong @-> id @-> CGAffineTransform.t @-> id @-> (ptr CGContext.t) @-> returning void) x positions (LLong.of_int count) font textMatrix attributes inContext
let showsControlCharacters self = msg_send ~self ~cmd:(selector "showsControlCharacters") ~typ:(returning bool)
let showsInvisibleCharacters self = msg_send ~self ~cmd:(selector "showsInvisibleCharacters") ~typ:(returning bool)
let strikethroughGlyphRange x ~strikethroughType ~lineFragmentRect ~lineFragmentGlyphRange ~containerOrigin self = msg_send ~self ~cmd:(selector "strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") ~typ:(NSRange.t @-> llong @-> CGRect.t @-> NSRange.t @-> CGPoint.t @-> returning void) x (LLong.of_int strikethroughType) lineFragmentRect lineFragmentGlyphRange containerOrigin
let styleEffectConfiguration self = msg_send ~self ~cmd:(selector "styleEffectConfiguration") ~typ:(returning id)
let substituteFontForFont x self = msg_send ~self ~cmd:(selector "substituteFontForFont:") ~typ:(id @-> returning id) x
let synchronizesAlignmentToDirection self = msg_send ~self ~cmd:(selector "synchronizesAlignmentToDirection") ~typ:(returning bool)
let temporaryAttribute x ~atCharacterIndex ~effectiveRange self = msg_send ~self ~cmd:(selector "temporaryAttribute:atCharacterIndex:effectiveRange:") ~typ:(id @-> ullong @-> (ptr NSRange.t) @-> returning id) x (ULLong.of_int atCharacterIndex) effectiveRange
let temporaryAttribute' x ~atCharacterIndex ~longestEffectiveRange ~inRange self = msg_send ~self ~cmd:(selector "temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:") ~typ:(id @-> ullong @-> (ptr NSRange.t) @-> NSRange.t @-> returning id) x (ULLong.of_int atCharacterIndex) longestEffectiveRange inRange
let temporaryAttributesAtCharacterIndex x ~effectiveRange self = msg_send ~self ~cmd:(selector "temporaryAttributesAtCharacterIndex:effectiveRange:") ~typ:(ullong @-> (ptr NSRange.t) @-> returning id) (ULLong.of_int x) effectiveRange
let temporaryAttributesAtCharacterIndex' x ~longestEffectiveRange ~inRange self = msg_send ~self ~cmd:(selector "temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:") ~typ:(ullong @-> (ptr NSRange.t) @-> NSRange.t @-> returning id) (ULLong.of_int x) longestEffectiveRange inRange
let textContainerChangedGeometry x self = msg_send ~self ~cmd:(selector "textContainerChangedGeometry:") ~typ:(id @-> returning void) x
let textContainerChangedTextView x self = msg_send ~self ~cmd:(selector "textContainerChangedTextView:") ~typ:(id @-> returning void) x
let textContainerChangedTextView' x ~fromTextView self = msg_send ~self ~cmd:(selector "textContainerChangedTextView:fromTextView:") ~typ:(id @-> id @-> returning void) x fromTextView
let textContainerForGlyphAtIndex x ~effectiveRange self = msg_send ~self ~cmd:(selector "textContainerForGlyphAtIndex:effectiveRange:") ~typ:(ullong @-> (ptr NSRange.t) @-> returning id) (ULLong.of_int x) effectiveRange
let textContainerForGlyphAtIndex' x ~effectiveRange ~withoutAdditionalLayout self = msg_send ~self ~cmd:(selector "textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:") ~typ:(ullong @-> (ptr NSRange.t) @-> bool @-> returning id) (ULLong.of_int x) effectiveRange withoutAdditionalLayout
let textContainers self = msg_send ~self ~cmd:(selector "textContainers") ~typ:(returning id)
let textStorage self = msg_send ~self ~cmd:(selector "textStorage") ~typ:(returning id)
let textStorage' x ~edited ~range ~changeInLength ~invalidatedRange self = msg_send ~self ~cmd:(selector "textStorage:edited:range:changeInLength:invalidatedRange:") ~typ:(id @-> ullong @-> NSRange.t @-> llong @-> NSRange.t @-> returning void) x (ULLong.of_int edited) range (LLong.of_int changeInLength) invalidatedRange
let textViewForBeginningOfSelection self = msg_send ~self ~cmd:(selector "textViewForBeginningOfSelection") ~typ:(returning id)
let truncatedGlyphRangeInLineFragmentForGlyphAtIndex x self = msg_send_stret ~self ~cmd:(selector "truncatedGlyphRangeInLineFragmentForGlyphAtIndex:") ~typ:(ullong @-> returning NSRange.t) ~return_type:NSRange.t (ULLong.of_int x)
let typesetter self = msg_send ~self ~cmd:(selector "typesetter") ~typ:(returning id)
let typesetterBehavior self = msg_send ~self ~cmd:(selector "typesetterBehavior") ~typ:(returning llong) |> LLong.to_int
let underlineColorForSpelling self = msg_send ~self ~cmd:(selector "underlineColorForSpelling") ~typ:(returning id)
let underlineColorForTextAlternatives self = msg_send ~self ~cmd:(selector "underlineColorForTextAlternatives") ~typ:(returning id)
let underlineGlyphRange x ~underlineType ~lineFragmentRect ~lineFragmentGlyphRange ~containerOrigin self = msg_send ~self ~cmd:(selector "underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:") ~typ:(NSRange.t @-> llong @-> CGRect.t @-> NSRange.t @-> CGPoint.t @-> returning void) x (LLong.of_int underlineType) lineFragmentRect lineFragmentGlyphRange containerOrigin
let usedRectForTextContainer x self = msg_send_stret ~self ~cmd:(selector "usedRectForTextContainer:") ~typ:(id @-> returning CGRect.t) ~return_type:CGRect.t x
let usesDefaultHyphenation self = msg_send ~self ~cmd:(selector "usesDefaultHyphenation") ~typ:(returning bool)
let usesFontLeading self = msg_send ~self ~cmd:(selector "usesFontLeading") ~typ:(returning bool)
let usesScreenFonts self = msg_send ~self ~cmd:(selector "usesScreenFonts") ~typ:(returning bool)
let viewProviderForTextAttachment x ~characterIndex self = msg_send ~self ~cmd:(selector "viewProviderForTextAttachment:characterIndex:") ~typ:(id @-> ullong @-> returning id) x (ULLong.of_int characterIndex)