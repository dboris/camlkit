(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

open Foundation
open CoreAnimation
open CoreText

(** Apple docs: {{:https://developer.apple.com/documentation/uikit/uitextview?language=objc}UITextView} *)

let self = get_class "UITextView"

let accessibilityFrame self = msg_send_stret ~self ~cmd:(selector "accessibilityFrame") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let addGhostedRange x self = msg_send ~self ~cmd:(selector "addGhostedRange:") ~typ:(id @-> returning void) x
let addInvisibleRange x self = msg_send ~self ~cmd:(selector "addInvisibleRange:") ~typ:(id @-> returning void) x
let addSnapshotSeparation x ~withAffinity self = msg_send ~self ~cmd:(selector "addSnapshotSeparation:withAffinity:") ~typ:(double @-> llong @-> returning void) x (LLong.of_int withAffinity)
let addTextAlternativesDisplayStyle x ~toRange self = msg_send ~self ~cmd:(selector "addTextAlternativesDisplayStyle:toRange:") ~typ:(llong @-> NSRange.t @-> returning void) (LLong.of_int x) toRange
let adjustedContentInsetDidChange self = msg_send ~self ~cmd:(selector "adjustedContentInsetDidChange") ~typ:(returning void)
let adjustsFontForContentSizeCategory self = msg_send ~self ~cmd:(selector "adjustsFontForContentSizeCategory") ~typ:(returning bool)
let alignCenter x self = msg_send ~self ~cmd:(selector "alignCenter:") ~typ:(id @-> returning void) x
let alignJustified x self = msg_send ~self ~cmd:(selector "alignJustified:") ~typ:(id @-> returning void) x
let alignLeft x self = msg_send ~self ~cmd:(selector "alignLeft:") ~typ:(id @-> returning void) x
let alignRight x self = msg_send ~self ~cmd:(selector "alignRight:") ~typ:(id @-> returning void) x
let allowsAttachments self = msg_send ~self ~cmd:(selector "allowsAttachments") ~typ:(returning bool)
let allowsDraggingAttachments self = msg_send ~self ~cmd:(selector "allowsDraggingAttachments") ~typ:(returning bool)
let allowsEditingTextAttributes self = msg_send ~self ~cmd:(selector "allowsEditingTextAttributes") ~typ:(returning bool)
let annotatedSubstringForRange x self = msg_send ~self ~cmd:(selector "annotatedSubstringForRange:") ~typ:(id @-> returning id) x
let attributedPlaceholder self = msg_send ~self ~cmd:(selector "attributedPlaceholder") ~typ:(returning id)
let attributedText self = msg_send ~self ~cmd:(selector "attributedText") ~typ:(returning id)
let attributedTextInRange x self = msg_send ~self ~cmd:(selector "attributedTextInRange:") ~typ:(id @-> returning id) x
let automaticallySelectedOverlay self = msg_send ~self ~cmd:(selector "automaticallySelectedOverlay") ~typ:(returning id)
let baseWritingDirectionForPosition x ~inDirection self = msg_send ~self ~cmd:(selector "baseWritingDirectionForPosition:inDirection:") ~typ:(id @-> llong @-> returning llong) x (LLong.of_int inDirection) |> LLong.to_int
let becomeDropResponder self = msg_send ~self ~cmd:(selector "becomeDropResponder") ~typ:(returning void)
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning bool)
let becomesEditableWithGestures self = msg_send ~self ~cmd:(selector "becomesEditableWithGestures") ~typ:(returning bool)
let beginFloatingCursorAtPoint x self = msg_send ~self ~cmd:(selector "beginFloatingCursorAtPoint:") ~typ:(CGPoint.t @-> returning void) x
let beginSelectionChange self = msg_send ~self ~cmd:(selector "beginSelectionChange") ~typ:(returning void)
let beginSnapshotSeparationOfHeight x ~atYOffset self = msg_send ~self ~cmd:(selector "beginSnapshotSeparationOfHeight:atYOffset:") ~typ:(double @-> double @-> returning double) x atYOffset
let beginningOfDocument self = msg_send ~self ~cmd:(selector "beginningOfDocument") ~typ:(returning id)
let bottomContentPadding self = msg_send ~self ~cmd:(selector "bottomContentPadding") ~typ:(returning id)
let canBecomeDropResponder self = msg_send ~self ~cmd:(selector "canBecomeDropResponder") ~typ:(returning bool)
let canBecomeFirstResponder self = msg_send ~self ~cmd:(selector "canBecomeFirstResponder") ~typ:(returning bool)
let canBecomeFocused self = msg_send ~self ~cmd:(selector "canBecomeFocused") ~typ:(returning bool)
let canPerformAction x ~withSender self = msg_send ~self ~cmd:(selector "canPerformAction:withSender:") ~typ:(_SEL @-> id @-> returning bool) x withSender
let canResignFirstResponder self = msg_send ~self ~cmd:(selector "canResignFirstResponder") ~typ:(returning bool)
let cancelAutoscroll self = msg_send ~self ~cmd:(selector "cancelAutoscroll") ~typ:(returning void)
let capitalizeWord x self = msg_send ~self ~cmd:(selector "capitalizeWord:") ~typ:(id @-> returning void) x
let captureTextFromCamera x self = msg_send ~self ~cmd:(selector "captureTextFromCamera:") ~typ:(id @-> returning void) x
let caretRectForPosition x self = msg_send_stret ~self ~cmd:(selector "caretRectForPosition:") ~typ:(id @-> returning CGRect.t) ~return_type:CGRect.t x
let characterRangeAtPoint x self = msg_send ~self ~cmd:(selector "characterRangeAtPoint:") ~typ:(CGPoint.t @-> returning id) x
let characterRangeByExtendingPosition x ~inDirection self = msg_send ~self ~cmd:(selector "characterRangeByExtendingPosition:inDirection:") ~typ:(id @-> llong @-> returning id) x (LLong.of_int inDirection)
let clearsOnInsertion self = msg_send ~self ~cmd:(selector "clearsOnInsertion") ~typ:(returning bool)
let closestPositionToPoint x self = msg_send ~self ~cmd:(selector "closestPositionToPoint:") ~typ:(CGPoint.t @-> returning id) x
let closestPositionToPoint' x ~withinRange self = msg_send ~self ~cmd:(selector "closestPositionToPoint:withinRange:") ~typ:(CGPoint.t @-> id @-> returning id) x withinRange
let comparePosition x ~toPosition self = msg_send ~self ~cmd:(selector "comparePosition:toPosition:") ~typ:(id @-> id @-> returning llong) x toPosition |> LLong.to_int
let contentOffsetForSameViewDrops self = msg_send_stret ~self ~cmd:(selector "contentOffsetForSameViewDrops") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let copy x self = msg_send ~self ~cmd:(selector "copy:") ~typ:(id @-> returning void) x
let copyFont x self = msg_send ~self ~cmd:(selector "copyFont:") ~typ:(id @-> returning void) x
let cut x self = msg_send ~self ~cmd:(selector "cut:") ~typ:(id @-> returning void) x
let dataDetectorTypes self = msg_send ~self ~cmd:(selector "dataDetectorTypes") ~typ:(returning ullong) |> ULLong.to_int
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let debugDescription self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning id)
let decodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "decodeRestorableStateWithCoder:") ~typ:(id @-> returning void) x
let decodeRestorableStateWithCoder' x ~includingSelectedTextAndDisplayedViewControllers self = msg_send ~self ~cmd:(selector "decodeRestorableStateWithCoder:includingSelectedTextAndDisplayedViewControllers:") ~typ:(id @-> bool @-> returning void) x includingSelectedTextAndDisplayedViewControllers
let decreaseSize x self = msg_send ~self ~cmd:(selector "decreaseSize:") ~typ:(id @-> returning void) x
let deleteBackward self = msg_send ~self ~cmd:(selector "deleteBackward") ~typ:(returning void)
let disableClearsOnInsertion self = msg_send ~self ~cmd:(selector "disableClearsOnInsertion") ~typ:(returning void)
let draggingFinished x self = msg_send ~self ~cmd:(selector "draggingFinished:") ~typ:(id @-> returning void) x
let draggingStarted self = msg_send ~self ~cmd:(selector "draggingStarted") ~typ:(returning void)
let drawRect x ~forViewPrintFormatter self = msg_send ~self ~cmd:(selector "drawRect:forViewPrintFormatter:") ~typ:(CGRect.t @-> id @-> returning void) x forViewPrintFormatter
let drawingDelegate self = msg_send ~self ~cmd:(selector "drawingDelegate") ~typ:(returning id)
let droppingFinished self = msg_send ~self ~cmd:(selector "droppingFinished") ~typ:(returning void)
let droppingStarted self = msg_send ~self ~cmd:(selector "droppingStarted") ~typ:(returning void)
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning void) x
let encodeRestorableStateWithCoder' x ~includingSelectedTextAndDisplayedViewControllers self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:includingSelectedTextAndDisplayedViewControllers:") ~typ:(id @-> bool @-> returning void) x includingSelectedTextAndDisplayedViewControllers
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let endFloatingCursor self = msg_send ~self ~cmd:(selector "endFloatingCursor") ~typ:(returning void)
let endOfDocument self = msg_send ~self ~cmd:(selector "endOfDocument") ~typ:(returning id)
let endSelectionChange self = msg_send ~self ~cmd:(selector "endSelectionChange") ~typ:(returning void)
let endSnapshotSeparation self = msg_send ~self ~cmd:(selector "endSnapshotSeparation") ~typ:(returning void)
let extractWordArrayFromTokensArray x self = msg_send ~self ~cmd:(selector "extractWordArrayFromTokensArray:") ~typ:(id @-> returning id) x
let firstRectForRange x self = msg_send_stret ~self ~cmd:(selector "firstRectForRange:") ~typ:(id @-> returning CGRect.t) ~return_type:CGRect.t x
let font self = msg_send ~self ~cmd:(selector "font") ~typ:(returning id)
let forceDisableDictation self = msg_send ~self ~cmd:(selector "forceDisableDictation") ~typ:(returning bool)
let forceEnableDictation self = msg_send ~self ~cmd:(selector "forceEnableDictation") ~typ:(returning bool)
let forwardingTargetForSelector x self = msg_send ~self ~cmd:(selector "forwardingTargetForSelector:") ~typ:(_SEL @-> returning id) x
let frameForDictationResultPlaceholder x self = msg_send_stret ~self ~cmd:(selector "frameForDictationResultPlaceholder:") ~typ:(id @-> returning CGRect.t) ~return_type:CGRect.t x
let hasText self = msg_send ~self ~cmd:(selector "hasText") ~typ:(returning bool)
let hasTextItemsOfType x ~inTextRange self = msg_send ~self ~cmd:(selector "hasTextItemsOfType:inTextRange:") ~typ:(llong @-> id @-> returning bool) (LLong.of_int x) inTextRange
let hitTest x ~withEvent self = msg_send ~self ~cmd:(selector "hitTest:withEvent:") ~typ:(CGPoint.t @-> id @-> returning id) x withEvent
let increaseSize x self = msg_send ~self ~cmd:(selector "increaseSize:") ~typ:(id @-> returning void) x
let initReadonlyAndUnselectableWithFrame x ~textContainer self = msg_send ~self ~cmd:(selector "initReadonlyAndUnselectableWithFrame:textContainer:") ~typ:(CGRect.t @-> id @-> returning id) x textContainer
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning id) x
let initWithFrame1 x ~font self = msg_send ~self ~cmd:(selector "initWithFrame:font:") ~typ:(CGRect.t @-> id @-> returning id) x font
let initWithFrame2 x ~textContainer self = msg_send ~self ~cmd:(selector "initWithFrame:textContainer:") ~typ:(CGRect.t @-> id @-> returning id) x textContainer
let ink self = msg_send ~self ~cmd:(selector "ink") ~typ:(returning id)
let inputAccessoryView self = msg_send ~self ~cmd:(selector "inputAccessoryView") ~typ:(returning id)
let inputDelegate self = msg_send ~self ~cmd:(selector "inputDelegate") ~typ:(returning id)
let inputView self = msg_send ~self ~cmd:(selector "inputView") ~typ:(returning id)
let insertAttributedText x self = msg_send ~self ~cmd:(selector "insertAttributedText:") ~typ:(id @-> returning void) x
let insertDictationResultPlaceholder self = msg_send ~self ~cmd:(selector "insertDictationResultPlaceholder") ~typ:(returning id)
let insertText x self = msg_send ~self ~cmd:(selector "insertText:") ~typ:(id @-> returning void) x
let insertText1 x ~alternatives ~style self = msg_send ~self ~cmd:(selector "insertText:alternatives:style:") ~typ:(id @-> id @-> llong @-> returning void) x alternatives (LLong.of_int style)
let insertText2 x ~style ~alternatives self = msg_send ~self ~cmd:(selector "insertText:style:alternatives:") ~typ:(id @-> llong @-> id @-> returning void) x (LLong.of_int style) alternatives
let insertTextPlaceholderWithSize x self = msg_send ~self ~cmd:(selector "insertTextPlaceholderWithSize:") ~typ:(CGSize.t @-> returning id) x
let interactionAssistant self = msg_send ~self ~cmd:(selector "interactionAssistant") ~typ:(returning id)
let interactionState self = msg_send ~self ~cmd:(selector "interactionState") ~typ:(returning id)
let intrinsicContentSize self = msg_send_stret ~self ~cmd:(selector "intrinsicContentSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let invalidateDropCaret self = msg_send ~self ~cmd:(selector "invalidateDropCaret") ~typ:(returning void)
let invalidateIntrinsicContentSize self = msg_send ~self ~cmd:(selector "invalidateIntrinsicContentSize") ~typ:(returning void)
let isAccessibilityElementByDefault self = msg_send ~self ~cmd:(selector "isAccessibilityElementByDefault") ~typ:(returning bool)
let isEditable self = msg_send ~self ~cmd:(selector "isEditable") ~typ:(returning bool)
let isEditableForTextContainerView x self = msg_send ~self ~cmd:(selector "isEditableForTextContainerView:") ~typ:(id @-> returning bool) x
let isEditing self = msg_send ~self ~cmd:(selector "isEditing") ~typ:(returning bool)
let isElementAccessibilityExposedToInterfaceBuilder self = msg_send ~self ~cmd:(selector "isElementAccessibilityExposedToInterfaceBuilder") ~typ:(returning bool)
let isFingerDrawingEnabled self = msg_send ~self ~cmd:(selector "isFingerDrawingEnabled") ~typ:(returning bool)
let isLayoutSizeDependentOnPerpendicularAxis self = msg_send ~self ~cmd:(selector "isLayoutSizeDependentOnPerpendicularAxis") ~typ:(returning bool)
let isPaperEnabled self = msg_send ~self ~cmd:(selector "isPaperEnabled") ~typ:(returning bool)
let isRulerEnabled self = msg_send ~self ~cmd:(selector "isRulerEnabled") ~typ:(returning bool)
let isSelectable self = msg_send ~self ~cmd:(selector "isSelectable") ~typ:(returning bool)
let isStylusDrawingEnabled self = msg_send ~self ~cmd:(selector "isStylusDrawingEnabled") ~typ:(returning bool)
let isTextDragActive self = msg_send ~self ~cmd:(selector "isTextDragActive") ~typ:(returning bool)
let isTextDropActive self = msg_send ~self ~cmd:(selector "isTextDropActive") ~typ:(returning bool)
let keyboardInput x ~shouldInsertText ~isMarkedText self = msg_send ~self ~cmd:(selector "keyboardInput:shouldInsertText:isMarkedText:") ~typ:(id @-> id @-> bool @-> returning bool) x shouldInsertText isMarkedText
let keyboardInput' x ~shouldReplaceTextInRange ~replacementText self = msg_send ~self ~cmd:(selector "keyboardInput:shouldReplaceTextInRange:replacementText:") ~typ:(id @-> NSRange.t @-> id @-> returning bool) x shouldReplaceTextInRange replacementText
let keyboardInputChanged x self = msg_send ~self ~cmd:(selector "keyboardInputChanged:") ~typ:(id @-> returning bool) x
let keyboardInputChangedSelection x self = msg_send ~self ~cmd:(selector "keyboardInputChangedSelection:") ~typ:(id @-> returning void) x
let keyboardInputShouldDelete x self = msg_send ~self ~cmd:(selector "keyboardInputShouldDelete:") ~typ:(id @-> returning bool) x
let largeContentTitle self = msg_send ~self ~cmd:(selector "largeContentTitle") ~typ:(returning id)
let layoutManager self = msg_send ~self ~cmd:(selector "layoutManager") ~typ:(returning id)
let layoutSubviews self = msg_send ~self ~cmd:(selector "layoutSubviews") ~typ:(returning void)
let lineHeight self = msg_send ~self ~cmd:(selector "lineHeight") ~typ:(returning double)
let linedPaper self = msg_send ~self ~cmd:(selector "linedPaper") ~typ:(returning id)
let linkTextAttributes self = msg_send ~self ~cmd:(selector "linkTextAttributes") ~typ:(returning id)
let linkTextAttributesForTextContainerView x self = msg_send ~self ~cmd:(selector "linkTextAttributesForTextContainerView:") ~typ:(id @-> returning id) x
let lowercaseWord x self = msg_send ~self ~cmd:(selector "lowercaseWord:") ~typ:(id @-> returning void) x
let makeTextWritingDirectionLeftToRight x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionLeftToRight:") ~typ:(id @-> returning void) x
let makeTextWritingDirectionNatural x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionNatural:") ~typ:(id @-> returning void) x
let makeTextWritingDirectionRightToLeft x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionRightToLeft:") ~typ:(id @-> returning void) x
let marginTop self = msg_send ~self ~cmd:(selector "marginTop") ~typ:(returning ullong) |> ULLong.to_int
let markedTextRange self = msg_send ~self ~cmd:(selector "markedTextRange") ~typ:(returning id)
let markedTextStyle self = msg_send ~self ~cmd:(selector "markedTextStyle") ~typ:(returning id)
let maxTileHeight self = msg_send ~self ~cmd:(selector "maxTileHeight") ~typ:(returning double)
let methodSignatureForSelector x self = msg_send ~self ~cmd:(selector "methodSignatureForSelector:") ~typ:(_SEL @-> returning id) x
let offsetFromPosition x ~toPosition self = msg_send ~self ~cmd:(selector "offsetFromPosition:toPosition:") ~typ:(id @-> id @-> returning llong) x toPosition |> LLong.to_int
let paperTexture self = msg_send ~self ~cmd:(selector "paperTexture") ~typ:(returning id)
let paste x self = msg_send ~self ~cmd:(selector "paste:") ~typ:(id @-> returning void) x
let pasteAndMatchStyle x self = msg_send ~self ~cmd:(selector "pasteAndMatchStyle:") ~typ:(id @-> returning void) x
let pasteDelegate self = msg_send ~self ~cmd:(selector "pasteDelegate") ~typ:(returning id)
let pasteFont x self = msg_send ~self ~cmd:(selector "pasteFont:") ~typ:(id @-> returning void) x
let pasteItemProviders x self = msg_send ~self ~cmd:(selector "pasteItemProviders:") ~typ:(id @-> returning void) x
let positionFromPosition x ~offset self = msg_send ~self ~cmd:(selector "positionFromPosition:offset:") ~typ:(id @-> llong @-> returning id) x (LLong.of_int offset)
let positionFromPosition' x ~inDirection ~offset self = msg_send ~self ~cmd:(selector "positionFromPosition:inDirection:offset:") ~typ:(id @-> llong @-> llong @-> returning id) x (LLong.of_int inDirection) (LLong.of_int offset)
let positionWithinRange x ~farthestInDirection self = msg_send ~self ~cmd:(selector "positionWithinRange:farthestInDirection:") ~typ:(id @-> llong @-> returning id) x (LLong.of_int farthestInDirection)
let rangeWithTextAlternatives x ~atPosition self = msg_send ~self ~cmd:(selector "rangeWithTextAlternatives:atPosition:") ~typ:((ptr id) @-> id @-> returning id) x atPosition
let rectInTextContainerForRect x self = msg_send_stret ~self ~cmd:(selector "rectInTextContainerForRect:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let removeAllGhostedRanges self = msg_send ~self ~cmd:(selector "removeAllGhostedRanges") ~typ:(returning void)
let removeAnnotation x ~forRange self = msg_send ~self ~cmd:(selector "removeAnnotation:forRange:") ~typ:(id @-> id @-> returning void) x forRange
let removeDictationResultPlaceholder x ~willInsertResult self = msg_send ~self ~cmd:(selector "removeDictationResultPlaceholder:willInsertResult:") ~typ:(id @-> bool @-> returning void) x willInsertResult
let removeInvisibleRange x self = msg_send ~self ~cmd:(selector "removeInvisibleRange:") ~typ:(id @-> returning void) x
let removeTextPlaceholder x self = msg_send ~self ~cmd:(selector "removeTextPlaceholder:") ~typ:(id @-> returning void) x
let replace x self = msg_send ~self ~cmd:(selector "replace:") ~typ:(id @-> returning void) x
let replaceRange x ~withText self = msg_send ~self ~cmd:(selector "replaceRange:withText:") ~typ:(id @-> id @-> returning void) x withText
let replaceRange' x ~withAnnotatedString ~relativeReplacementRange self = msg_send ~self ~cmd:(selector "replaceRange:withAnnotatedString:relativeReplacementRange:") ~typ:(id @-> id @-> NSRange.t @-> returning void) x withAnnotatedString relativeReplacementRange
let replaceRangeWithTextWithoutClosingTyping x ~replacementText self = msg_send ~self ~cmd:(selector "replaceRangeWithTextWithoutClosingTyping:replacementText:") ~typ:(id @-> id @-> returning void) x replacementText
let resignDropResponderWithDropPerformed x self = msg_send ~self ~cmd:(selector "resignDropResponderWithDropPerformed:") ~typ:(bool @-> returning void) x
let resignFirstResponder self = msg_send ~self ~cmd:(selector "resignFirstResponder") ~typ:(returning bool)
let respondsToSelector x self = msg_send ~self ~cmd:(selector "respondsToSelector:") ~typ:(_SEL @-> returning bool) x
let scrollRangeToVisible x self = msg_send ~self ~cmd:(selector "scrollRangeToVisible:") ~typ:(NSRange.t @-> returning void) x
let scrollSelectionToVisible x self = msg_send ~self ~cmd:(selector "scrollSelectionToVisible:") ~typ:(bool @-> returning void) x
let select x self = msg_send ~self ~cmd:(selector "select:") ~typ:(id @-> returning void) x
let selectAll x self = msg_send ~self ~cmd:(selector "selectAll:") ~typ:(id @-> returning void) x
let selectedRange self = msg_send_stret ~self ~cmd:(selector "selectedRange") ~typ:(returning NSRange.t) ~return_type:NSRange.t
let selectedRangeForTextContainerView x self = msg_send_stret ~self ~cmd:(selector "selectedRangeForTextContainerView:") ~typ:(id @-> returning NSRange.t) ~return_type:NSRange.t x
let selectedText self = msg_send ~self ~cmd:(selector "selectedText") ~typ:(returning id)
let selectedTextRange self = msg_send ~self ~cmd:(selector "selectedTextRange") ~typ:(returning id)
let selectionAffinity self = msg_send ~self ~cmd:(selector "selectionAffinity") ~typ:(returning llong) |> LLong.to_int
let selectionContainerView self = msg_send ~self ~cmd:(selector "selectionContainerView") ~typ:(returning id)
let selectionRectsForRange x self = msg_send ~self ~cmd:(selector "selectionRectsForRange:") ~typ:(id @-> returning id) x
let selectionView self = msg_send ~self ~cmd:(selector "selectionView") ~typ:(returning id)
let setAdjustsFontForContentSizeCategory x self = msg_send ~self ~cmd:(selector "setAdjustsFontForContentSizeCategory:") ~typ:(bool @-> returning void) x
let setAllowsEditingTextAttributes x self = msg_send ~self ~cmd:(selector "setAllowsEditingTextAttributes:") ~typ:(bool @-> returning void) x
let setAttributedMarkedText x ~selectedRange self = msg_send ~self ~cmd:(selector "setAttributedMarkedText:selectedRange:") ~typ:(id @-> NSRange.t @-> returning void) x selectedRange
let setAttributedPlaceholder x self = msg_send ~self ~cmd:(selector "setAttributedPlaceholder:") ~typ:(id @-> returning void) x
let setAttributedText x self = msg_send ~self ~cmd:(selector "setAttributedText:") ~typ:(id @-> returning void) x
let setBaseWritingDirection x ~forRange self = msg_send ~self ~cmd:(selector "setBaseWritingDirection:forRange:") ~typ:(llong @-> id @-> returning void) (LLong.of_int x) forRange
let setBecomesEditableWithGestures x self = msg_send ~self ~cmd:(selector "setBecomesEditableWithGestures:") ~typ:(bool @-> returning void) x
let setBounds x self = msg_send ~self ~cmd:(selector "setBounds:") ~typ:(CGRect.t @-> returning void) x
let setClearsOnInsertion x self = msg_send ~self ~cmd:(selector "setClearsOnInsertion:") ~typ:(bool @-> returning void) x
let setContentMode x self = msg_send ~self ~cmd:(selector "setContentMode:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setContentOffset x self = msg_send ~self ~cmd:(selector "setContentOffset:") ~typ:(CGPoint.t @-> returning void) x
let setContentOffsetForSameViewDrops x self = msg_send ~self ~cmd:(selector "setContentOffsetForSameViewDrops:") ~typ:(CGPoint.t @-> returning void) x
let setContentToHTMLString x self = msg_send ~self ~cmd:(selector "setContentToHTMLString:") ~typ:(id @-> returning void) x
let setContinuousSpellCheckingEnabled x self = msg_send ~self ~cmd:(selector "setContinuousSpellCheckingEnabled:") ~typ:(bool @-> returning void) x
let setDataDetectorTypes x self = msg_send ~self ~cmd:(selector "setDataDetectorTypes:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setDrawingDelegate x self = msg_send ~self ~cmd:(selector "setDrawingDelegate:") ~typ:(id @-> returning void) x
let setEditable x self = msg_send ~self ~cmd:(selector "setEditable:") ~typ:(bool @-> returning void) x
let setFingerDrawingEnabled x self = msg_send ~self ~cmd:(selector "setFingerDrawingEnabled:") ~typ:(bool @-> returning void) x
let setFont x self = msg_send ~self ~cmd:(selector "setFont:") ~typ:(id @-> returning void) x
let setForceDisableDictation x self = msg_send ~self ~cmd:(selector "setForceDisableDictation:") ~typ:(bool @-> returning void) x
let setForceEnableDictation x self = msg_send ~self ~cmd:(selector "setForceEnableDictation:") ~typ:(bool @-> returning void) x
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning void) x
let setInk x self = msg_send ~self ~cmd:(selector "setInk:") ~typ:(id @-> returning void) x
let setInputAccessoryView x self = msg_send ~self ~cmd:(selector "setInputAccessoryView:") ~typ:(id @-> returning void) x
let setInputDelegate x self = msg_send ~self ~cmd:(selector "setInputDelegate:") ~typ:(id @-> returning void) x
let setInputView x self = msg_send ~self ~cmd:(selector "setInputView:") ~typ:(id @-> returning void) x
let setInteractionState x self = msg_send ~self ~cmd:(selector "setInteractionState:") ~typ:(id @-> returning void) x
let setLineHeight x self = msg_send ~self ~cmd:(selector "setLineHeight:") ~typ:(double @-> returning void) x
let setLinedPaper x self = msg_send ~self ~cmd:(selector "setLinedPaper:") ~typ:(id @-> returning void) x
let setLinkTextAttributes x self = msg_send ~self ~cmd:(selector "setLinkTextAttributes:") ~typ:(id @-> returning void) x
let setMarginTop x self = msg_send ~self ~cmd:(selector "setMarginTop:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setMarkedText x ~selectedRange self = msg_send ~self ~cmd:(selector "setMarkedText:selectedRange:") ~typ:(id @-> NSRange.t @-> returning void) x selectedRange
let setMarkedTextStyle x self = msg_send ~self ~cmd:(selector "setMarkedTextStyle:") ~typ:(id @-> returning void) x
let setMaxTileHeight x self = msg_send ~self ~cmd:(selector "setMaxTileHeight:") ~typ:(double @-> returning void) x
let setNeedsDisplay self = msg_send ~self ~cmd:(selector "setNeedsDisplay") ~typ:(returning void)
let setNeedsDisplayInRect x self = msg_send ~self ~cmd:(selector "setNeedsDisplayInRect:") ~typ:(CGRect.t @-> returning void) x
let setNeedsLayout self = msg_send ~self ~cmd:(selector "setNeedsLayout") ~typ:(returning void)
let setPaperEnabled x self = msg_send ~self ~cmd:(selector "setPaperEnabled:") ~typ:(bool @-> returning void) x
let setPaperTexture x self = msg_send ~self ~cmd:(selector "setPaperTexture:") ~typ:(id @-> returning void) x
let setPasteDelegate x self = msg_send ~self ~cmd:(selector "setPasteDelegate:") ~typ:(id @-> returning void) x
let setRulerEnabled x self = msg_send ~self ~cmd:(selector "setRulerEnabled:") ~typ:(bool @-> returning void) x
let setScrollEnabled x self = msg_send ~self ~cmd:(selector "setScrollEnabled:") ~typ:(bool @-> returning void) x
let setSecureTextEntry x self = msg_send ~self ~cmd:(selector "setSecureTextEntry:") ~typ:(bool @-> returning void) x
let setSelectable x self = msg_send ~self ~cmd:(selector "setSelectable:") ~typ:(bool @-> returning void) x
let setSelectedRange x self = msg_send ~self ~cmd:(selector "setSelectedRange:") ~typ:(NSRange.t @-> returning void) x
let setSelectedTextRange x self = msg_send ~self ~cmd:(selector "setSelectedTextRange:") ~typ:(id @-> returning void) x
let setShouldAutoscrollAboveBottom x self = msg_send ~self ~cmd:(selector "setShouldAutoscrollAboveBottom:") ~typ:(bool @-> returning void) x
let setShouldPresentSheetsInAWindowLayeredAboveTheKeyboard x self = msg_send ~self ~cmd:(selector "setShouldPresentSheetsInAWindowLayeredAboveTheKeyboard:") ~typ:(bool @-> returning void) x
let setShouldPreserveVisualFontSizeFidelity x self = msg_send ~self ~cmd:(selector "setShouldPreserveVisualFontSizeFidelity:") ~typ:(bool @-> returning void) x
let setStylusDrawingEnabled x self = msg_send ~self ~cmd:(selector "setStylusDrawingEnabled:") ~typ:(bool @-> returning void) x
let setStylusDrawingEnabled' x ~drawingClass ~sixChannelBlending self = msg_send ~self ~cmd:(selector "setStylusDrawingEnabled:drawingClass:sixChannelBlending:") ~typ:(bool @-> _Class @-> bool @-> returning void) x drawingClass sixChannelBlending
let setText x self = msg_send ~self ~cmd:(selector "setText:") ~typ:(id @-> returning void) x
let setTextAlignment x self = msg_send ~self ~cmd:(selector "setTextAlignment:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setTextColor x self = msg_send ~self ~cmd:(selector "setTextColor:") ~typ:(id @-> returning void) x
let setTextContainerInset x self = msg_send ~self ~cmd:(selector "setTextContainerInset:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setTextDragDelegate x self = msg_send ~self ~cmd:(selector "setTextDragDelegate:") ~typ:(id @-> returning void) x
let setTextDragOptions x self = msg_send ~self ~cmd:(selector "setTextDragOptions:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setTextDropDelegate x self = msg_send ~self ~cmd:(selector "setTextDropDelegate:") ~typ:(id @-> returning void) x
let setTiledViewsDrawAsynchronously x self = msg_send ~self ~cmd:(selector "setTiledViewsDrawAsynchronously:") ~typ:(bool @-> returning void) x
let setTypingAttributes x self = msg_send ~self ~cmd:(selector "setTypingAttributes:") ~typ:(id @-> returning void) x
let setUsesStandardTextScaling x self = msg_send ~self ~cmd:(selector "setUsesStandardTextScaling:") ~typ:(bool @-> returning void) x
let setUsesTiledViews x self = msg_send ~self ~cmd:(selector "setUsesTiledViews:") ~typ:(bool @-> returning void) x
let setVisualStyle x self = msg_send ~self ~cmd:(selector "setVisualStyle:") ~typ:(id @-> returning void) x
let shouldAutoscrollAboveBottom self = msg_send ~self ~cmd:(selector "shouldAutoscrollAboveBottom") ~typ:(returning bool)
let shouldPresentSheetsInAWindowLayeredAboveTheKeyboard self = msg_send ~self ~cmd:(selector "shouldPresentSheetsInAWindowLayeredAboveTheKeyboard") ~typ:(returning bool)
let shouldPreserveVisualFontSizeFidelity self = msg_send ~self ~cmd:(selector "shouldPreserveVisualFontSizeFidelity") ~typ:(returning bool)
let sizeThatFits x self = msg_send_stret ~self ~cmd:(selector "sizeThatFits:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let startAutoscroll x self = msg_send ~self ~cmd:(selector "startAutoscroll:") ~typ:(CGPoint.t @-> returning void) x
let startInteractionWithLinkAtPoint x self = msg_send ~self ~cmd:(selector "startInteractionWithLinkAtPoint:") ~typ:(CGPoint.t @-> returning void) x
let takeTraitsFrom x self = msg_send ~self ~cmd:(selector "takeTraitsFrom:") ~typ:(id @-> returning void) x
let text self = msg_send ~self ~cmd:(selector "text") ~typ:(returning id)
let textAlignment self = msg_send ~self ~cmd:(selector "textAlignment") ~typ:(returning llong) |> LLong.to_int
let textColor self = msg_send ~self ~cmd:(selector "textColor") ~typ:(returning id)
let textContainer self = msg_send ~self ~cmd:(selector "textContainer") ~typ:(returning id)
let textContainerInset self = msg_send_stret ~self ~cmd:(selector "textContainerInset") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let textContainerView x ~cuiCatalogForTextEffectName self = msg_send ~self ~cmd:(selector "textContainerView:cuiCatalogForTextEffectName:") ~typ:(id @-> id @-> returning id) x cuiCatalogForTextEffectName
let textContainerView' x ~linkTextAttributesForLink ~forCharacterAtIndex self = msg_send ~self ~cmd:(selector "textContainerView:linkTextAttributesForLink:forCharacterAtIndex:") ~typ:(id @-> id @-> ullong @-> returning id) x linkTextAttributesForLink (ULLong.of_int forCharacterAtIndex)
let textDragDelegate self = msg_send ~self ~cmd:(selector "textDragDelegate") ~typ:(returning id)
let textDragInteraction self = msg_send ~self ~cmd:(selector "textDragInteraction") ~typ:(returning id)
let textDragOptions self = msg_send ~self ~cmd:(selector "textDragOptions") ~typ:(returning llong) |> LLong.to_int
let textDropDelegate self = msg_send ~self ~cmd:(selector "textDropDelegate") ~typ:(returning id)
let textDropInteraction self = msg_send ~self ~cmd:(selector "textDropInteraction") ~typ:(returning id)
let textInRange x self = msg_send ~self ~cmd:(selector "textInRange:") ~typ:(id @-> returning id) x
let textInput x ~shouldChangeCharactersInRange ~replacementText self = msg_send ~self ~cmd:(selector "textInput:shouldChangeCharactersInRange:replacementText:") ~typ:(id @-> NSRange.t @-> id @-> returning bool) x shouldChangeCharactersInRange replacementText
let textInputDidAnimatePaste x self = msg_send ~self ~cmd:(selector "textInputDidAnimatePaste:") ~typ:(id @-> returning void) x
let textInputDidChange x self = msg_send ~self ~cmd:(selector "textInputDidChange:") ~typ:(id @-> returning void) x
let textInputDidChangeSelection x self = msg_send ~self ~cmd:(selector "textInputDidChangeSelection:") ~typ:(id @-> returning void) x
let textInputShouldExtendCaretHeight x self = msg_send ~self ~cmd:(selector "textInputShouldExtendCaretHeight:") ~typ:(id @-> returning bool) x
let textInputView self = msg_send ~self ~cmd:(selector "textInputView") ~typ:(returning id)
let textInputWillAnimatePaste x self = msg_send ~self ~cmd:(selector "textInputWillAnimatePaste:") ~typ:(id @-> returning void) x
let textItemCoordinateSpace self = msg_send ~self ~cmd:(selector "textItemCoordinateSpace") ~typ:(returning id)
let textItemsOfType x ~inTextRange self = msg_send ~self ~cmd:(selector "textItemsOfType:inTextRange:") ~typ:(llong @-> id @-> returning id) (LLong.of_int x) inTextRange
let textLayoutController self = msg_send ~self ~cmd:(selector "textLayoutController") ~typ:(returning id)
let textRangeFromPosition x ~toPosition self = msg_send ~self ~cmd:(selector "textRangeFromPosition:toPosition:") ~typ:(id @-> id @-> returning id) x toPosition
let textStorage self = msg_send ~self ~cmd:(selector "textStorage") ~typ:(returning id)
let textStylingAtPosition x ~inDirection self = msg_send ~self ~cmd:(selector "textStylingAtPosition:inDirection:") ~typ:(id @-> llong @-> returning id) x (LLong.of_int inDirection)
let tiledViewsDrawAsynchronously self = msg_send ~self ~cmd:(selector "tiledViewsDrawAsynchronously") ~typ:(returning bool)
let tintColorDidChange self = msg_send ~self ~cmd:(selector "tintColorDidChange") ~typ:(returning void)
let toggleBoldface x self = msg_send ~self ~cmd:(selector "toggleBoldface:") ~typ:(id @-> returning void) x
let toggleItalics x self = msg_send ~self ~cmd:(selector "toggleItalics:") ~typ:(id @-> returning void) x
let toggleSmartInsertDelete x self = msg_send ~self ~cmd:(selector "toggleSmartInsertDelete:") ~typ:(id @-> returning void) x
let toggleUnderline x self = msg_send ~self ~cmd:(selector "toggleUnderline:") ~typ:(id @-> returning void) x
let tokenizer self = msg_send ~self ~cmd:(selector "tokenizer") ~typ:(returning id)
let topContentPadding self = msg_send ~self ~cmd:(selector "topContentPadding") ~typ:(returning id)
let traitCollectionDidChange x self = msg_send ~self ~cmd:(selector "traitCollectionDidChange:") ~typ:(id @-> returning void) x
let typingAttributes self = msg_send ~self ~cmd:(selector "typingAttributes") ~typ:(returning id)
let undoManager self = msg_send ~self ~cmd:(selector "undoManager") ~typ:(returning id)
let unmarkText self = msg_send ~self ~cmd:(selector "unmarkText") ~typ:(returning void)
let updateAutoscrollAboveBottom self = msg_send ~self ~cmd:(selector "updateAutoscrollAboveBottom") ~typ:(returning void)
let updateFloatingCursorAtPoint x self = msg_send ~self ~cmd:(selector "updateFloatingCursorAtPoint:") ~typ:(CGPoint.t @-> returning void) x
let updateFloatingCursorAtPoint' x ~velocity self = msg_send ~self ~cmd:(selector "updateFloatingCursorAtPoint:velocity:") ~typ:(CGPoint.t @-> CGPoint.t @-> returning void) x velocity
let updateInteractionWithLinkAtPoint x self = msg_send ~self ~cmd:(selector "updateInteractionWithLinkAtPoint:") ~typ:(CGPoint.t @-> returning void) x
let updateSelection self = msg_send ~self ~cmd:(selector "updateSelection") ~typ:(returning void)
let updateSelectionForTextContainerView x self = msg_send ~self ~cmd:(selector "updateSelectionForTextContainerView:") ~typ:(id @-> returning void) x
let updateSelectionImmediately self = msg_send ~self ~cmd:(selector "updateSelectionImmediately") ~typ:(returning void)
let updateTextAttributesWithConversionHandler x self = msg_send ~self ~cmd:(selector "updateTextAttributesWithConversionHandler:") ~typ:((ptr void) @-> returning void) x
let uppercaseWord x self = msg_send ~self ~cmd:(selector "uppercaseWord:") ~typ:(id @-> returning void) x
let usesStandardTextScaling self = msg_send ~self ~cmd:(selector "usesStandardTextScaling") ~typ:(returning bool)
let usesTiledViews self = msg_send ~self ~cmd:(selector "usesTiledViews") ~typ:(returning bool)
let validateCommand x self = msg_send ~self ~cmd:(selector "validateCommand:") ~typ:(id @-> returning void) x
let validateInteractionWithLinkAtPoint x self = msg_send ~self ~cmd:(selector "validateInteractionWithLinkAtPoint:") ~typ:(CGPoint.t @-> returning void) x
let visibleRect self = msg_send_stret ~self ~cmd:(selector "visibleRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let visibleRectIgnoringKeyboard self = msg_send_stret ~self ~cmd:(selector "visibleRectIgnoringKeyboard") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let visibleTextRange self = msg_send ~self ~cmd:(selector "visibleTextRange") ~typ:(returning id)
let visibleTextRect self = msg_send_stret ~self ~cmd:(selector "visibleTextRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let visualStyle self = msg_send ~self ~cmd:(selector "visualStyle") ~typ:(returning id)
let webView self = msg_send ~self ~cmd:(selector "webView") ~typ:(returning id)
let willInteractWithLinkAtPoint x self = msg_send ~self ~cmd:(selector "willInteractWithLinkAtPoint:") ~typ:(CGPoint.t @-> returning bool) x