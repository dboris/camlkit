(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation
open CoreText

(** Apple docs: {{:https://developer.apple.com/documentation/uikit/uiview?language=objc}UIView} *)

let self = get_class "UIView"

let _PDFKitEnclosingScrollView self = msg_send ~self ~cmd:(selector "PDFKitEnclosingScrollView") ~typ:(returning id)
let abSetLayoutDebuggingColor x self = msg_send ~self ~cmd:(selector "abSetLayoutDebuggingColor:") ~typ:(id @-> returning void) x
let accessibilityApplyInvertFilter self = msg_send ~self ~cmd:(selector "accessibilityApplyInvertFilter") ~typ:(returning void)
let accessibilityIgnoresInvertColors self = msg_send ~self ~cmd:(selector "accessibilityIgnoresInvertColors") ~typ:(returning bool)
let accessibilityInvertFilterApplied self = msg_send ~self ~cmd:(selector "accessibilityInvertFilterApplied") ~typ:(returning bool)
let accessibilityUnapplyInvertFilter self = msg_send ~self ~cmd:(selector "accessibilityUnapplyInvertFilter") ~typ:(returning void)
let actionForLayer x ~forKey self = msg_send ~self ~cmd:(selector "actionForLayer:forKey:") ~typ:(id @-> id @-> returning id) x forKey
let addAnimation x ~forKey self = msg_send ~self ~cmd:(selector "addAnimation:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let addConstraint x self = msg_send ~self ~cmd:(selector "addConstraint:") ~typ:(id @-> returning void) x
let addConstraints x self = msg_send ~self ~cmd:(selector "addConstraints:") ~typ:(id @-> returning void) x
let addGestureRecognizer x self = msg_send ~self ~cmd:(selector "addGestureRecognizer:") ~typ:(id @-> returning void) x
let addInteraction x self = msg_send ~self ~cmd:(selector "addInteraction:") ~typ:(id @-> returning void) x
let addLayoutGuide x self = msg_send ~self ~cmd:(selector "addLayoutGuide:") ~typ:(id @-> returning void) x
let addMotionEffect x self = msg_send ~self ~cmd:(selector "addMotionEffect:") ~typ:(id @-> returning void) x
let addSubview x self = msg_send ~self ~cmd:(selector "addSubview:") ~typ:(id @-> returning void) x
let akEnclosingScrollView self = msg_send ~self ~cmd:(selector "akEnclosingScrollView") ~typ:(returning id)
let akVisibleRect self = msg_send_stret ~self ~cmd:(selector "akVisibleRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let alignmentRectForFrame x self = msg_send_stret ~self ~cmd:(selector "alignmentRectForFrame:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let alignmentRectInsets self = msg_send_stret ~self ~cmd:(selector "alignmentRectInsets") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let allowsGroupBlending self = msg_send ~self ~cmd:(selector "allowsGroupBlending") ~typ:(returning bool)
let allowsGroupOpacity self = msg_send ~self ~cmd:(selector "allowsGroupOpacity") ~typ:(returning bool)
let alpha self = msg_send ~self ~cmd:(selector "alpha") ~typ:(returning double)
let animationInfoCreateIfNecessary x self = msg_send ~self ~cmd:(selector "animationInfoCreateIfNecessary:") ~typ:(bool @-> returning id) x
let appliedContentSizeCategoryLimitsDescription self = msg_send ~self ~cmd:(selector "appliedContentSizeCategoryLimitsDescription") ~typ:(returning id)
let areChildrenFocused self = msg_send ~self ~cmd:(selector "areChildrenFocused") ~typ:(returning bool)
let artworkCatalog self = msg_send ~self ~cmd:(selector "artworkCatalog") ~typ:(returning id)
let autorelease self = msg_send ~self ~cmd:(selector "autorelease") ~typ:(returning id)
let autoresizesSubviews self = msg_send ~self ~cmd:(selector "autoresizesSubviews") ~typ:(returning bool)
let autoresizingMask self = msg_send ~self ~cmd:(selector "autoresizingMask") ~typ:(returning ullong)
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning id)
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning bool)
let bottomAnchor self = msg_send ~self ~cmd:(selector "bottomAnchor") ~typ:(returning id)
let bounds self = msg_send_stret ~self ~cmd:(selector "bounds") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let bringSubviewToFront x self = msg_send ~self ~cmd:(selector "bringSubviewToFront:") ~typ:(id @-> returning void) x
let calculateLayoutSizeFittingSize x self = msg_send_stret ~self ~cmd:(selector "calculateLayoutSizeFittingSize:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let canBecomeFocused self = msg_send ~self ~cmd:(selector "canBecomeFocused") ~typ:(returning bool)
let canUseFastLayoutSizeCalulation self = msg_send ~self ~cmd:(selector "canUseFastLayoutSizeCalulation") ~typ:(returning bool)
let cancelMouseTracking self = msg_send ~self ~cmd:(selector "cancelMouseTracking") ~typ:(returning bool)
let cancelTouchTracking self = msg_send ~self ~cmd:(selector "cancelTouchTracking") ~typ:(returning bool)
let center self = msg_send_stret ~self ~cmd:(selector "center") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let centerXAnchor self = msg_send ~self ~cmd:(selector "centerXAnchor") ~typ:(returning id)
let centerYAnchor self = msg_send ~self ~cmd:(selector "centerYAnchor") ~typ:(returning id)
let charge self = msg_send ~self ~cmd:(selector "charge") ~typ:(returning float)
let clearArtworkCatalogs self = msg_send ~self ~cmd:(selector "clearArtworkCatalogs") ~typ:(returning void)
let clearsContextBeforeDrawing self = msg_send ~self ~cmd:(selector "clearsContextBeforeDrawing") ~typ:(returning bool)
let clipsToBounds self = msg_send ~self ~cmd:(selector "clipsToBounds") ~typ:(returning bool)
let compareTextEffectsOrdering x self = msg_send ~self ~cmd:(selector "compareTextEffectsOrdering:") ~typ:(id @-> returning llong) x
let compositingMode self = msg_send ~self ~cmd:(selector "compositingMode") ~typ:(returning llong)
let constraints self = msg_send ~self ~cmd:(selector "constraints") ~typ:(returning id)
let constraintsAffectingLayoutForAxis x self = msg_send ~self ~cmd:(selector "constraintsAffectingLayoutForAxis:") ~typ:(llong @-> returning id) (LLong.of_int x)
let constraintsAffectingLayoutForAxis' x ~ofItem self = msg_send ~self ~cmd:(selector "constraintsAffectingLayoutForAxis:ofItem:") ~typ:(llong @-> id @-> returning id) (LLong.of_int x) ofItem
let constraintsDidChangeInEngine x self = msg_send ~self ~cmd:(selector "constraintsDidChangeInEngine:") ~typ:(id @-> returning void) x
let containsView x self = msg_send ~self ~cmd:(selector "containsView:") ~typ:(id @-> returning bool) x
let contentCompressionResistancePriorityForAxis x self = msg_send ~self ~cmd:(selector "contentCompressionResistancePriorityForAxis:") ~typ:(llong @-> returning float) (LLong.of_int x)
let contentHuggingPriorityForAxis x self = msg_send ~self ~cmd:(selector "contentHuggingPriorityForAxis:") ~typ:(llong @-> returning float) (LLong.of_int x)
let contentLayoutSizeCacheDescription self = msg_send ~self ~cmd:(selector "contentLayoutSizeCacheDescription") ~typ:(returning id)
let contentMode self = msg_send ~self ~cmd:(selector "contentMode") ~typ:(returning llong)
let contentScaleFactor self = msg_send ~self ~cmd:(selector "contentScaleFactor") ~typ:(returning double)
let contentStretch self = msg_send_stret ~self ~cmd:(selector "contentStretch") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let convertPoint x ~fromCoordinateSpace self = msg_send_stret ~self ~cmd:(selector "convertPoint:fromCoordinateSpace:") ~typ:(CGPoint.t @-> id @-> returning CGPoint.t) ~return_type:CGPoint.t x fromCoordinateSpace
let convertPoint1 x ~fromView self = msg_send_stret ~self ~cmd:(selector "convertPoint:fromView:") ~typ:(CGPoint.t @-> id @-> returning CGPoint.t) ~return_type:CGPoint.t x fromView
let convertPoint2 x ~toCoordinateSpace self = msg_send_stret ~self ~cmd:(selector "convertPoint:toCoordinateSpace:") ~typ:(CGPoint.t @-> id @-> returning CGPoint.t) ~return_type:CGPoint.t x toCoordinateSpace
let convertPoint3 x ~toView self = msg_send_stret ~self ~cmd:(selector "convertPoint:toView:") ~typ:(CGPoint.t @-> id @-> returning CGPoint.t) ~return_type:CGPoint.t x toView
let convertRect x ~fromCoordinateSpace self = msg_send_stret ~self ~cmd:(selector "convertRect:fromCoordinateSpace:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x fromCoordinateSpace
let convertRect1 x ~fromView self = msg_send_stret ~self ~cmd:(selector "convertRect:fromView:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x fromView
let convertRect2 x ~toCoordinateSpace self = msg_send_stret ~self ~cmd:(selector "convertRect:toCoordinateSpace:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x toCoordinateSpace
let convertRect3 x ~toView self = msg_send_stret ~self ~cmd:(selector "convertRect:toView:") ~typ:(CGRect.t @-> id @-> returning CGRect.t) ~return_type:CGRect.t x toView
let convertSize x ~fromView self = msg_send_stret ~self ~cmd:(selector "convertSize:fromView:") ~typ:(CGSize.t @-> id @-> returning CGSize.t) ~return_type:CGSize.t x fromView
let convertSize' x ~toView self = msg_send_stret ~self ~cmd:(selector "convertSize:toView:") ~typ:(CGSize.t @-> id @-> returning CGSize.t) ~return_type:CGSize.t x toView
let coordinateSpace self = msg_send ~self ~cmd:(selector "coordinateSpace") ~typ:(returning id)
let customAlignmentRectInsets self = msg_send_stret ~self ~cmd:(selector "customAlignmentRectInsets") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let customBaselineOffsetFromBottom self = msg_send ~self ~cmd:(selector "customBaselineOffsetFromBottom") ~typ:(returning double)
let customFirstBaselineOffsetFromTop self = msg_send ~self ~cmd:(selector "customFirstBaselineOffsetFromTop") ~typ:(returning double)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let debugSizeCache self = msg_send ~self ~cmd:(selector "debugSizeCache") ~typ:(returning id)
let debugSizeCacheDict self = msg_send ~self ~cmd:(selector "debugSizeCacheDict") ~typ:(returning id)
let deferredBecomeFirstResponder self = msg_send ~self ~cmd:(selector "deferredBecomeFirstResponder") ~typ:(returning void)
let deliversButtonsForGesturesToSuperview self = msg_send ~self ~cmd:(selector "deliversButtonsForGesturesToSuperview") ~typ:(returning bool)
let deliversTouchesForGesturesToSuperview self = msg_send ~self ~cmd:(selector "deliversTouchesForGesturesToSuperview") ~typ:(returning bool)
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let didAddSubview x self = msg_send ~self ~cmd:(selector "didAddSubview:") ~typ:(id @-> returning void) x
let didMoveToSuperview self = msg_send ~self ~cmd:(selector "didMoveToSuperview") ~typ:(returning void)
let didMoveToWindow self = msg_send ~self ~cmd:(selector "didMoveToWindow") ~typ:(returning void)
let didUpdateFocusInContext x ~withAnimationCoordinator self = msg_send ~self ~cmd:(selector "didUpdateFocusInContext:withAnimationCoordinator:") ~typ:(id @-> id @-> returning void) x withAnimationCoordinator
let directionalLayoutMargins self = msg_send_stret ~self ~cmd:(selector "directionalLayoutMargins") ~typ:(returning NSDirectionalEdgeInsets.t) ~return_type:NSDirectionalEdgeInsets.t
let drawLayer x ~inContext self = msg_send ~self ~cmd:(selector "drawLayer:inContext:") ~typ:(id @-> (ptr CGContext.t) @-> returning void) x inContext
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning void) x
let drawRect' x ~forViewPrintFormatter self = msg_send ~self ~cmd:(selector "drawRect:forViewPrintFormatter:") ~typ:(CGRect.t @-> id @-> returning void) x forViewPrintFormatter
let drawViewHierarchyInRect x self = msg_send ~self ~cmd:(selector "drawViewHierarchyInRect:") ~typ:(CGRect.t @-> returning bool) x
let drawViewHierarchyInRect' x ~afterScreenUpdates self = msg_send ~self ~cmd:(selector "drawViewHierarchyInRect:afterScreenUpdates:") ~typ:(CGRect.t @-> bool @-> returning bool) x afterScreenUpdates
let edgesInsettingLayoutMarginsFromSafeArea self = msg_send ~self ~cmd:(selector "edgesInsettingLayoutMarginsFromSafeArea") ~typ:(returning ullong)
let edgesPreservingSuperviewLayoutMargins self = msg_send ~self ~cmd:(selector "edgesPreservingSuperviewLayoutMargins") ~typ:(returning ullong)
let effectiveAlignmentRectInsets self = msg_send_stret ~self ~cmd:(selector "effectiveAlignmentRectInsets") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let effectiveBaselineOffsetFromBottom self = msg_send ~self ~cmd:(selector "effectiveBaselineOffsetFromBottom") ~typ:(returning double)
let effectiveBaselineOffsetFromContentBottom self = msg_send ~self ~cmd:(selector "effectiveBaselineOffsetFromContentBottom") ~typ:(returning double)
let effectiveFirstBaselineOffsetFromContentTop self = msg_send ~self ~cmd:(selector "effectiveFirstBaselineOffsetFromContentTop") ~typ:(returning double)
let effectiveFirstBaselineOffsetFromTop self = msg_send ~self ~cmd:(selector "effectiveFirstBaselineOffsetFromTop") ~typ:(returning double)
let effectiveLayoutSizeFittingSize x self = msg_send_stret ~self ~cmd:(selector "effectiveLayoutSizeFittingSize:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let effectiveScreenScale self = msg_send ~self ~cmd:(selector "effectiveScreenScale") ~typ:(returning double)
let effectiveUserInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "effectiveUserInterfaceLayoutDirection") ~typ:(returning llong)
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let endEditing x self = msg_send ~self ~cmd:(selector "endEditing:") ~typ:(bool @-> returning bool) x
let engine x ~markerForConstraintToBreakAmongConstraints self = msg_send ~self ~cmd:(selector "engine:markerForConstraintToBreakAmongConstraints:") ~typ:(id @-> id @-> returning id) x markerForConstraintToBreakAmongConstraints
let engine' x ~willBreakConstraint ~dueToMutuallyExclusiveConstraints self = msg_send ~self ~cmd:(selector "engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:") ~typ:(id @-> id @-> id @-> returning void) x willBreakConstraint dueToMutuallyExclusiveConstraints
let exchangeSubviewAtIndex x ~withSubviewAtIndex self = msg_send ~self ~cmd:(selector "exchangeSubviewAtIndex:withSubviewAtIndex:") ~typ:(llong @-> llong @-> returning void) (LLong.of_int x) (LLong.of_int withSubviewAtIndex)
let exerciseAmbiguityInLayout self = msg_send ~self ~cmd:(selector "exerciseAmbiguityInLayout") ~typ:(returning void)
let extent self = msg_send_stret ~self ~cmd:(selector "extent") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let fakeScribbleInteractionDelegate self = msg_send ~self ~cmd:(selector "fakeScribbleInteractionDelegate") ~typ:(returning id)
let findFirstResponder self = msg_send ~self ~cmd:(selector "findFirstResponder") ~typ:(returning id)
let firstBaselineAnchor self = msg_send ~self ~cmd:(selector "firstBaselineAnchor") ~typ:(returning id)
let focusEffect self = msg_send ~self ~cmd:(selector "focusEffect") ~typ:(returning id)
let focusGroupIdentifier self = msg_send ~self ~cmd:(selector "focusGroupIdentifier") ~typ:(returning id)
let focusGroupPriority self = msg_send ~self ~cmd:(selector "focusGroupPriority") ~typ:(returning llong)
let focusGuides self = msg_send ~self ~cmd:(selector "focusGuides") ~typ:(returning id)
let focusItemContainer self = msg_send ~self ~cmd:(selector "focusItemContainer") ~typ:(returning id)
let focusItemsInRect x self = msg_send ~self ~cmd:(selector "focusItemsInRect:") ~typ:(CGRect.t @-> returning id) x
let focusedViewDidChange self = msg_send ~self ~cmd:(selector "focusedViewDidChange") ~typ:(returning void)
let forceDisplayIfNeeded self = msg_send ~self ~cmd:(selector "forceDisplayIfNeeded") ~typ:(returning void)
let frame self = msg_send_stret ~self ~cmd:(selector "frame") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let frameForAlignmentRect x self = msg_send_stret ~self ~cmd:(selector "frameForAlignmentRect:") ~typ:(CGRect.t @-> returning CGRect.t) ~return_type:CGRect.t x
let frameOrigin self = msg_send_stret ~self ~cmd:(selector "frameOrigin") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let gestureParent self = msg_send ~self ~cmd:(selector "gestureParent") ~typ:(returning id)
let gestureRecognizerShouldBegin x self = msg_send ~self ~cmd:(selector "gestureRecognizerShouldBegin:") ~typ:(id @-> returning bool) x
let gestureRecognizers self = msg_send ~self ~cmd:(selector "gestureRecognizers") ~typ:(returning id)
let hasAmbiguousLayout self = msg_send ~self ~cmd:(selector "hasAmbiguousLayout") ~typ:(returning bool)
let heightAnchor self = msg_send ~self ~cmd:(selector "heightAnchor") ~typ:(returning id)
let hitRect self = msg_send_stret ~self ~cmd:(selector "hitRect") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let hitTest x ~forEvent self = msg_send ~self ~cmd:(selector "hitTest:forEvent:") ~typ:(CGPoint.t @-> (ptr void) @-> returning id) x forEvent
let hitTest' x ~withEvent self = msg_send ~self ~cmd:(selector "hitTest:withEvent:") ~typ:(CGPoint.t @-> id @-> returning id) x withEvent
let hitTestDirectionalInsets self = msg_send_stret ~self ~cmd:(selector "hitTestDirectionalInsets") ~typ:(returning NSDirectionalEdgeInsets.t) ~return_type:NSDirectionalEdgeInsets.t
let hitTestInsets self = msg_send_stret ~self ~cmd:(selector "hitTestInsets") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let infoCardThemeChanged self = msg_send ~self ~cmd:(selector "infoCardThemeChanged") ~typ:(returning void)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning id) x
let initWithSize x self = msg_send ~self ~cmd:(selector "initWithSize:") ~typ:(CGSize.t @-> returning id) x
let inputResponderController self = msg_send ~self ~cmd:(selector "inputResponderController") ~typ:(returning id)
let insertSubview x ~above self = msg_send ~self ~cmd:(selector "insertSubview:above:") ~typ:(id @-> id @-> returning void) x above
let insertSubview1 x ~aboveSubview self = msg_send ~self ~cmd:(selector "insertSubview:aboveSubview:") ~typ:(id @-> id @-> returning void) x aboveSubview
let insertSubview2 x ~atIndex self = msg_send ~self ~cmd:(selector "insertSubview:atIndex:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int atIndex)
let insertSubview3 x ~below self = msg_send ~self ~cmd:(selector "insertSubview:below:") ~typ:(id @-> id @-> returning void) x below
let insertSubview4 x ~belowSubview self = msg_send ~self ~cmd:(selector "insertSubview:belowSubview:") ~typ:(id @-> id @-> returning void) x belowSubview
let insetsLayoutMarginsFromSafeArea self = msg_send ~self ~cmd:(selector "insetsLayoutMarginsFromSafeArea") ~typ:(returning bool)
let interactionTintColor self = msg_send ~self ~cmd:(selector "interactionTintColor") ~typ:(returning id)
let interactionTintColorDidChange self = msg_send ~self ~cmd:(selector "interactionTintColorDidChange") ~typ:(returning void)
let interactions self = msg_send ~self ~cmd:(selector "interactions") ~typ:(returning id)
let intrinsicContentSize self = msg_send_stret ~self ~cmd:(selector "intrinsicContentSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let invalidateIntrinsicContentSize self = msg_send ~self ~cmd:(selector "invalidateIntrinsicContentSize") ~typ:(returning void)
let invalidatingIntrinsicContentSizeAlsoInvalidatesSuperview self = msg_send ~self ~cmd:(selector "invalidatingIntrinsicContentSizeAlsoInvalidatesSuperview") ~typ:(returning bool)
let isAccessibilityElementByDefault self = msg_send ~self ~cmd:(selector "isAccessibilityElementByDefault") ~typ:(returning bool)
let isDescendantOfView x self = msg_send ~self ~cmd:(selector "isDescendantOfView:") ~typ:(id @-> returning bool) x
let isDrawingFindIndicator self = msg_send ~self ~cmd:(selector "isDrawingFindIndicator") ~typ:(returning bool)
let isElementAccessibilityExposedToInterfaceBuilder self = msg_send ~self ~cmd:(selector "isElementAccessibilityExposedToInterfaceBuilder") ~typ:(returning bool)
let isEnabled self = msg_send ~self ~cmd:(selector "isEnabled") ~typ:(returning bool)
let isExclusiveTouch self = msg_send ~self ~cmd:(selector "isExclusiveTouch") ~typ:(returning bool)
let isFocused self = msg_send ~self ~cmd:(selector "isFocused") ~typ:(returning bool)
let isHidden self = msg_send ~self ~cmd:(selector "isHidden") ~typ:(returning bool)
let isHiddenOrHasHiddenAncestor self = msg_send ~self ~cmd:(selector "isHiddenOrHasHiddenAncestor") ~typ:(returning bool)
let isLayoutSizeDependentOnPerpendicularAxis self = msg_send ~self ~cmd:(selector "isLayoutSizeDependentOnPerpendicularAxis") ~typ:(returning bool)
let isMultipleTouchEnabled self = msg_send ~self ~cmd:(selector "isMultipleTouchEnabled") ~typ:(returning bool)
let isOpaque self = msg_send ~self ~cmd:(selector "isOpaque") ~typ:(returning bool)
let isTransparentFocusItem self = msg_send ~self ~cmd:(selector "isTransparentFocusItem") ~typ:(returning bool)
let isUserInteractionEnabled self = msg_send ~self ~cmd:(selector "isUserInteractionEnabled") ~typ:(returning bool)
let keyboardLayoutGuide self = msg_send ~self ~cmd:(selector "keyboardLayoutGuide") ~typ:(returning id)
let keyboardSceneDelegate self = msg_send ~self ~cmd:(selector "keyboardSceneDelegate") ~typ:(returning id)
let largeContentImage self = msg_send ~self ~cmd:(selector "largeContentImage") ~typ:(returning id)
let largeContentImageInsets self = msg_send_stret ~self ~cmd:(selector "largeContentImageInsets") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let largeContentTitle self = msg_send ~self ~cmd:(selector "largeContentTitle") ~typ:(returning id)
let lastBaselineAnchor self = msg_send ~self ~cmd:(selector "lastBaselineAnchor") ~typ:(returning id)
let layer self = msg_send ~self ~cmd:(selector "layer") ~typ:(returning id)
let layerWillDraw x self = msg_send ~self ~cmd:(selector "layerWillDraw:") ~typ:(id @-> returning void) x
let layoutBelowIfNeeded self = msg_send ~self ~cmd:(selector "layoutBelowIfNeeded") ~typ:(returning void)
let layoutGuides self = msg_send ~self ~cmd:(selector "layoutGuides") ~typ:(returning id)
let layoutIfNeeded self = msg_send ~self ~cmd:(selector "layoutIfNeeded") ~typ:(returning void)
let layoutMargins self = msg_send_stret ~self ~cmd:(selector "layoutMargins") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let layoutMarginsDidChange self = msg_send ~self ~cmd:(selector "layoutMarginsDidChange") ~typ:(returning void)
let layoutMarginsFollowReadableWidth self = msg_send ~self ~cmd:(selector "layoutMarginsFollowReadableWidth") ~typ:(returning bool)
let layoutMarginsGuide self = msg_send ~self ~cmd:(selector "layoutMarginsGuide") ~typ:(returning id)
let layoutSublayersOfLayer x self = msg_send ~self ~cmd:(selector "layoutSublayersOfLayer:") ~typ:(id @-> returning void) x
let layoutSubviews self = msg_send ~self ~cmd:(selector "layoutSubviews") ~typ:(returning void)
let leadingAnchor self = msg_send ~self ~cmd:(selector "leadingAnchor") ~typ:(returning id)
let leftAnchor self = msg_send ~self ~cmd:(selector "leftAnchor") ~typ:(returning id)
let maskView self = msg_send ~self ~cmd:(selector "maskView") ~typ:(returning id)
let maximumContentSizeCategory self = msg_send ~self ~cmd:(selector "maximumContentSizeCategory") ~typ:(returning id)
let maximumLayoutSize self = msg_send_stret ~self ~cmd:(selector "maximumLayoutSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let minimumContentSizeCategory self = msg_send ~self ~cmd:(selector "minimumContentSizeCategory") ~typ:(returning id)
let minimumLayoutSize self = msg_send_stret ~self ~cmd:(selector "minimumLayoutSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let motionEffects self = msg_send ~self ~cmd:(selector "motionEffects") ~typ:(returning id)
let movedFromSuperview x self = msg_send ~self ~cmd:(selector "movedFromSuperview:") ~typ:(id @-> returning void) x
let movedFromWindow x self = msg_send ~self ~cmd:(selector "movedFromWindow:") ~typ:(id @-> returning void) x
let movedToSuperview x self = msg_send ~self ~cmd:(selector "movedToSuperview:") ~typ:(id @-> returning void) x
let movedToWindow x self = msg_send ~self ~cmd:(selector "movedToWindow:") ~typ:(id @-> returning void) x
let needsDisplay self = msg_send ~self ~cmd:(selector "needsDisplay") ~typ:(returning bool)
let needsDisplayOnBoundsChange self = msg_send ~self ~cmd:(selector "needsDisplayOnBoundsChange") ~typ:(returning bool)
let needsUpdateConstraints self = msg_send ~self ~cmd:(selector "needsUpdateConstraints") ~typ:(returning bool)
let neverCacheEffectiveLayoutSize self = msg_send ~self ~cmd:(selector "neverCacheEffectiveLayoutSize") ~typ:(returning bool)
let newSnapshotWithRect x self = msg_send ~self ~cmd:(selector "newSnapshotWithRect:") ~typ:(CGRect.t @-> returning (ptr CGImage.t)) x
let nextResponder self = msg_send ~self ~cmd:(selector "nextResponder") ~typ:(returning id)
let nukeContentLayoutSizeCacheFromOrbit self = msg_send ~self ~cmd:(selector "nukeContentLayoutSizeCacheFromOrbit") ~typ:(returning void)
let origin self = msg_send_stret ~self ~cmd:(selector "origin") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let overrideUserInterfaceStyle self = msg_send ~self ~cmd:(selector "overrideUserInterfaceStyle") ~typ:(returning llong)
let parentFocusEnvironment self = msg_send ~self ~cmd:(selector "parentFocusEnvironment") ~typ:(returning id)
let pointInside x ~forEvent self = msg_send ~self ~cmd:(selector "pointInside:forEvent:") ~typ:(CGPoint.t @-> (ptr void) @-> returning bool) x forEvent
let pointInside' x ~withEvent self = msg_send ~self ~cmd:(selector "pointInside:withEvent:") ~typ:(CGPoint.t @-> id @-> returning bool) x withEvent
let position self = msg_send_stret ~self ~cmd:(selector "position") ~typ:(returning CGPoint.t) ~return_type:CGPoint.t
let preferredFocusEnvironments self = msg_send ~self ~cmd:(selector "preferredFocusEnvironments") ~typ:(returning id)
let preferredFocusedView self = msg_send ~self ~cmd:(selector "preferredFocusedView") ~typ:(returning id)
let preservesSuperviewLayoutMargins self = msg_send ~self ~cmd:(selector "preservesSuperviewLayoutMargins") ~typ:(returning bool)
let readableContentGuide self = msg_send ~self ~cmd:(selector "readableContentGuide") ~typ:(returning id)
let recursiveDescription self = msg_send ~self ~cmd:(selector "recursiveDescription") ~typ:(returning id)
let recursivelyForceDisplayIfNeeded self = msg_send ~self ~cmd:(selector "recursivelyForceDisplayIfNeeded") ~typ:(returning void)
let reduceWidth x self = msg_send ~self ~cmd:(selector "reduceWidth:") ~typ:(double @-> returning void) x
let release self = msg_send ~self ~cmd:(selector "release") ~typ:(returning void)
let removeAllGestureRecognizers self = msg_send ~self ~cmd:(selector "removeAllGestureRecognizers") ~typ:(returning void)
let removeConstraint x self = msg_send ~self ~cmd:(selector "removeConstraint:") ~typ:(id @-> returning void) x
let removeConstraints x self = msg_send ~self ~cmd:(selector "removeConstraints:") ~typ:(id @-> returning void) x
let removeFromSuperview self = msg_send ~self ~cmd:(selector "removeFromSuperview") ~typ:(returning void)
let removeGestureRecognizer x self = msg_send ~self ~cmd:(selector "removeGestureRecognizer:") ~typ:(id @-> returning void) x
let removeInteraction x self = msg_send ~self ~cmd:(selector "removeInteraction:") ~typ:(id @-> returning void) x
let removeLayoutGuide x self = msg_send ~self ~cmd:(selector "removeLayoutGuide:") ~typ:(id @-> returning void) x
let removeMotionEffect x self = msg_send ~self ~cmd:(selector "removeMotionEffect:") ~typ:(id @-> returning void) x
let resizableSnapshotFromRect x ~withCapInsets self = msg_send ~self ~cmd:(selector "resizableSnapshotFromRect:withCapInsets:") ~typ:(CGRect.t @-> UIEdgeInsets.t @-> returning id) x withCapInsets
let resizableSnapshotViewFromRect x ~withCapInsets self = msg_send ~self ~cmd:(selector "resizableSnapshotViewFromRect:withCapInsets:") ~typ:(CGRect.t @-> UIEdgeInsets.t @-> returning id) x withCapInsets
let resizableSnapshotViewFromRect' x ~afterScreenUpdates ~withCapInsets self = msg_send ~self ~cmd:(selector "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:") ~typ:(CGRect.t @-> bool @-> UIEdgeInsets.t @-> returning id) x afterScreenUpdates withCapInsets
let resizeSubviewsWithOldSize x self = msg_send ~self ~cmd:(selector "resizeSubviewsWithOldSize:") ~typ:(CGSize.t @-> returning void) x
let resizeWithOldSuperviewSize x self = msg_send ~self ~cmd:(selector "resizeWithOldSuperviewSize:") ~typ:(CGSize.t @-> returning void) x
let restoreUserActivityState x self = msg_send ~self ~cmd:(selector "restoreUserActivityState:") ~typ:(id @-> returning void) x
let retain self = msg_send ~self ~cmd:(selector "retain") ~typ:(returning id)
let retainCount self = msg_send ~self ~cmd:(selector "retainCount") ~typ:(returning ullong)
let rightAnchor self = msg_send ~self ~cmd:(selector "rightAnchor") ~typ:(returning id)
let safeAreaInsets self = msg_send_stret ~self ~cmd:(selector "safeAreaInsets") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let safeAreaInsetsDidChange self = msg_send ~self ~cmd:(selector "safeAreaInsetsDidChange") ~typ:(returning void)
let safeAreaLayoutGuide self = msg_send ~self ~cmd:(selector "safeAreaLayoutGuide") ~typ:(returning id)
let scalesLargeContentImage self = msg_send ~self ~cmd:(selector "scalesLargeContentImage") ~typ:(returning bool)
let scriptingInfoWithChildren self = msg_send ~self ~cmd:(selector "scriptingInfoWithChildren") ~typ:(returning id)
let semanticContentAttribute self = msg_send ~self ~cmd:(selector "semanticContentAttribute") ~typ:(returning llong)
let sendSubviewToBack x self = msg_send ~self ~cmd:(selector "sendSubviewToBack:") ~typ:(id @-> returning void) x
let setAccessibilityIgnoresInvertColors x self = msg_send ~self ~cmd:(selector "setAccessibilityIgnoresInvertColors:") ~typ:(bool @-> returning void) x
let setAllowsGroupBlending x self = msg_send ~self ~cmd:(selector "setAllowsGroupBlending:") ~typ:(bool @-> returning void) x
let setAllowsGroupOpacity x self = msg_send ~self ~cmd:(selector "setAllowsGroupOpacity:") ~typ:(bool @-> returning void) x
let setAlpha x self = msg_send ~self ~cmd:(selector "setAlpha:") ~typ:(double @-> returning void) x
let setAreChildrenFocused x self = msg_send ~self ~cmd:(selector "setAreChildrenFocused:") ~typ:(bool @-> returning void) x
let setAutoresizesSubviews x self = msg_send ~self ~cmd:(selector "setAutoresizesSubviews:") ~typ:(bool @-> returning void) x
let setAutoresizingMask x self = msg_send ~self ~cmd:(selector "setAutoresizingMask:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning void) x
let setBounds x self = msg_send ~self ~cmd:(selector "setBounds:") ~typ:(CGRect.t @-> returning void) x
let setCenter x self = msg_send ~self ~cmd:(selector "setCenter:") ~typ:(CGPoint.t @-> returning void) x
let setCharge x self = msg_send ~self ~cmd:(selector "setCharge:") ~typ:(float @-> returning void) x
let setClearsContext x self = msg_send ~self ~cmd:(selector "setClearsContext:") ~typ:(bool @-> returning void) x
let setClearsContextBeforeDrawing x self = msg_send ~self ~cmd:(selector "setClearsContextBeforeDrawing:") ~typ:(bool @-> returning void) x
let setClipsSubviews x self = msg_send ~self ~cmd:(selector "setClipsSubviews:") ~typ:(bool @-> returning void) x
let setClipsToBounds x self = msg_send ~self ~cmd:(selector "setClipsToBounds:") ~typ:(bool @-> returning void) x
let setCompositingMode x self = msg_send ~self ~cmd:(selector "setCompositingMode:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setContentCompressionResistancePriority x ~forAxis self = msg_send ~self ~cmd:(selector "setContentCompressionResistancePriority:forAxis:") ~typ:(float @-> llong @-> returning void) x (LLong.of_int forAxis)
let setContentHuggingPriority x ~forAxis self = msg_send ~self ~cmd:(selector "setContentHuggingPriority:forAxis:") ~typ:(float @-> llong @-> returning void) x (LLong.of_int forAxis)
let setContentMode x self = msg_send ~self ~cmd:(selector "setContentMode:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setContentScaleFactor x self = msg_send ~self ~cmd:(selector "setContentScaleFactor:") ~typ:(double @-> returning void) x
let setContentStretch x self = msg_send ~self ~cmd:(selector "setContentStretch:") ~typ:(CGRect.t @-> returning void) x
let setContentsPosition x self = msg_send ~self ~cmd:(selector "setContentsPosition:") ~typ:(int @-> returning void) x
let setCurrentEffectiveLayoutSizeFittingSizeShouldNotBeCached self = msg_send ~self ~cmd:(selector "setCurrentEffectiveLayoutSizeFittingSizeShouldNotBeCached") ~typ:(returning void)
let setCustomAlignmentRectInsets x self = msg_send ~self ~cmd:(selector "setCustomAlignmentRectInsets:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setCustomBaselineOffsetFromBottom x self = msg_send ~self ~cmd:(selector "setCustomBaselineOffsetFromBottom:") ~typ:(double @-> returning void) x
let setCustomFirstBaselineOffsetFromTop x self = msg_send ~self ~cmd:(selector "setCustomFirstBaselineOffsetFromTop:") ~typ:(double @-> returning void) x
let setDeliversButtonsForGesturesToSuperview x self = msg_send ~self ~cmd:(selector "setDeliversButtonsForGesturesToSuperview:") ~typ:(bool @-> returning void) x
let setDeliversTouchesForGesturesToSuperview x self = msg_send ~self ~cmd:(selector "setDeliversTouchesForGesturesToSuperview:") ~typ:(bool @-> returning void) x
let setDirectionalLayoutMargins x self = msg_send ~self ~cmd:(selector "setDirectionalLayoutMargins:") ~typ:(NSDirectionalEdgeInsets.t @-> returning void) x
let setDrawingFindIndicator x self = msg_send ~self ~cmd:(selector "setDrawingFindIndicator:") ~typ:(bool @-> returning void) x
let setEdgesInsettingLayoutMarginsFromSafeArea x self = msg_send ~self ~cmd:(selector "setEdgesInsettingLayoutMarginsFromSafeArea:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setEdgesPreservingSuperviewLayoutMargins x self = msg_send ~self ~cmd:(selector "setEdgesPreservingSuperviewLayoutMargins:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning void) x
let setExclusiveTouch x self = msg_send ~self ~cmd:(selector "setExclusiveTouch:") ~typ:(bool @-> returning void) x
let setFakeScribbleInteractionDelegate x self = msg_send ~self ~cmd:(selector "setFakeScribbleInteractionDelegate:") ~typ:(id @-> returning void) x
let setFixedBackgroundPattern x self = msg_send ~self ~cmd:(selector "setFixedBackgroundPattern:") ~typ:(bool @-> returning void) x
let setFocusEffect x self = msg_send ~self ~cmd:(selector "setFocusEffect:") ~typ:(id @-> returning void) x
let setFocusGroupIdentifier x self = msg_send ~self ~cmd:(selector "setFocusGroupIdentifier:") ~typ:(id @-> returning void) x
let setFocusGroupPriority x self = msg_send ~self ~cmd:(selector "setFocusGroupPriority:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning void) x
let setFrame' x ~forFields self = msg_send ~self ~cmd:(selector "setFrame:forFields:") ~typ:(CGRect.t @-> int @-> returning void) x forFields
let setFrameOrigin x self = msg_send ~self ~cmd:(selector "setFrameOrigin:") ~typ:(CGPoint.t @-> returning void) x
let setGestureRecognizers x self = msg_send ~self ~cmd:(selector "setGestureRecognizers:") ~typ:(id @-> returning void) x
let setHidden x self = msg_send ~self ~cmd:(selector "setHidden:") ~typ:(bool @-> returning void) x
let setHitTestDirectionalInsets x self = msg_send ~self ~cmd:(selector "setHitTestDirectionalInsets:") ~typ:(NSDirectionalEdgeInsets.t @-> returning void) x
let setHitTestInsets x self = msg_send ~self ~cmd:(selector "setHitTestInsets:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setInsetsLayoutMarginsFromSafeArea x self = msg_send ~self ~cmd:(selector "setInsetsLayoutMarginsFromSafeArea:") ~typ:(bool @-> returning void) x
let setInteractionTintColor x self = msg_send ~self ~cmd:(selector "setInteractionTintColor:") ~typ:(id @-> returning void) x
let setInteractions x self = msg_send ~self ~cmd:(selector "setInteractions:") ~typ:(id @-> returning void) x
let setInvalidatingIntrinsicContentSizeAlsoInvalidatesSuperview x self = msg_send ~self ~cmd:(selector "setInvalidatingIntrinsicContentSizeAlsoInvalidatesSuperview:") ~typ:(bool @-> returning void) x
let setLargeContentImage x self = msg_send ~self ~cmd:(selector "setLargeContentImage:") ~typ:(id @-> returning void) x
let setLargeContentImageInsets x self = msg_send ~self ~cmd:(selector "setLargeContentImageInsets:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setLargeContentTitle x self = msg_send ~self ~cmd:(selector "setLargeContentTitle:") ~typ:(id @-> returning void) x
let setLayoutMargins x self = msg_send ~self ~cmd:(selector "setLayoutMargins:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setLayoutMarginsFollowReadableWidth x self = msg_send ~self ~cmd:(selector "setLayoutMarginsFollowReadableWidth:") ~typ:(bool @-> returning void) x
let setLayoutSize x ~withContentPriority self = msg_send ~self ~cmd:(selector "setLayoutSize:withContentPriority:") ~typ:(CGSize.t @-> float @-> returning void) x withContentPriority
let setLayoutSize' x ~withHorizontalContentPriority ~verticalContentPriority self = msg_send ~self ~cmd:(selector "setLayoutSize:withHorizontalContentPriority:verticalContentPriority:") ~typ:(CGSize.t @-> float @-> float @-> returning void) x withHorizontalContentPriority verticalContentPriority
let setMaskView x self = msg_send ~self ~cmd:(selector "setMaskView:") ~typ:(id @-> returning void) x
let setMaximumContentSizeCategory x self = msg_send ~self ~cmd:(selector "setMaximumContentSizeCategory:") ~typ:(id @-> returning void) x
let setMaximumLayoutSize x self = msg_send ~self ~cmd:(selector "setMaximumLayoutSize:") ~typ:(CGSize.t @-> returning void) x
let setMinimumContentSizeCategory x self = msg_send ~self ~cmd:(selector "setMinimumContentSizeCategory:") ~typ:(id @-> returning void) x
let setMinimumLayoutSize x self = msg_send ~self ~cmd:(selector "setMinimumLayoutSize:") ~typ:(CGSize.t @-> returning void) x
let setMotionEffects x self = msg_send ~self ~cmd:(selector "setMotionEffects:") ~typ:(id @-> returning void) x
let setMultipleTouchEnabled x self = msg_send ~self ~cmd:(selector "setMultipleTouchEnabled:") ~typ:(bool @-> returning void) x
let setNeedsDisplay self = msg_send ~self ~cmd:(selector "setNeedsDisplay") ~typ:(returning void)
let setNeedsDisplayInRect x self = msg_send ~self ~cmd:(selector "setNeedsDisplayInRect:") ~typ:(CGRect.t @-> returning void) x
let setNeedsDisplayOnBoundsChange x self = msg_send ~self ~cmd:(selector "setNeedsDisplayOnBoundsChange:") ~typ:(bool @-> returning void) x
let setNeedsFocusUpdate self = msg_send ~self ~cmd:(selector "setNeedsFocusUpdate") ~typ:(returning void)
let setNeedsLayout self = msg_send ~self ~cmd:(selector "setNeedsLayout") ~typ:(returning void)
let setNeedsPreferredFocusedItemUpdate self = msg_send ~self ~cmd:(selector "setNeedsPreferredFocusedItemUpdate") ~typ:(returning void)
let setNeedsUpdateConstraints self = msg_send ~self ~cmd:(selector "setNeedsUpdateConstraints") ~typ:(returning void)
let setNeverCacheEffectiveLayoutSize x self = msg_send ~self ~cmd:(selector "setNeverCacheEffectiveLayoutSize:") ~typ:(bool @-> returning void) x
let setOpaque x self = msg_send ~self ~cmd:(selector "setOpaque:") ~typ:(bool @-> returning void) x
let setOrigin x self = msg_send ~self ~cmd:(selector "setOrigin:") ~typ:(CGPoint.t @-> returning void) x
let setOverrideUserInterfaceStyle x self = msg_send ~self ~cmd:(selector "setOverrideUserInterfaceStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setPosition x self = msg_send ~self ~cmd:(selector "setPosition:") ~typ:(CGPoint.t @-> returning void) x
let setPresentationValue x ~forKey ~updateIfExists self = msg_send ~self ~cmd:(selector "setPresentationValue:forKey:updateIfExists:") ~typ:(id @-> id @-> bool @-> returning void) x forKey updateIfExists
let setPreservesSuperviewLayoutMargins x self = msg_send ~self ~cmd:(selector "setPreservesSuperviewLayoutMargins:") ~typ:(bool @-> returning void) x
let setRotationBy x self = msg_send ~self ~cmd:(selector "setRotationBy:") ~typ:(float @-> returning void) x
let setSafeAreaInsets x self = msg_send ~self ~cmd:(selector "setSafeAreaInsets:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setScalesLargeContentImage x self = msg_send ~self ~cmd:(selector "setScalesLargeContentImage:") ~typ:(bool @-> returning void) x
let setSemanticContentAttribute x self = msg_send ~self ~cmd:(selector "setSemanticContentAttribute:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setShowsLargeContentViewer x self = msg_send ~self ~cmd:(selector "setShowsLargeContentViewer:") ~typ:(bool @-> returning void) x
let setSize x self = msg_send ~self ~cmd:(selector "setSize:") ~typ:(CGSize.t @-> returning void) x
let setSkipsSubviewEnumeration x self = msg_send ~self ~cmd:(selector "setSkipsSubviewEnumeration:") ~typ:(bool @-> returning void) x
let setTag x self = msg_send ~self ~cmd:(selector "setTag:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setTintAdjustmentMode x self = msg_send ~self ~cmd:(selector "setTintAdjustmentMode:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setTintColor x self = msg_send ~self ~cmd:(selector "setTintColor:") ~typ:(id @-> returning void) x
let setTransform3D x self = msg_send ~self ~cmd:(selector "setTransform3D:") ~typ:(CATransform3D.t @-> returning void) x
let setTransform x self = msg_send ~self ~cmd:(selector "setTransform:") ~typ:(CGAffineTransform.t @-> returning void) x
let setTranslatesAutoresizingMaskIntoConstraints x self = msg_send ~self ~cmd:(selector "setTranslatesAutoresizingMaskIntoConstraints:") ~typ:(bool @-> returning void) x
let setUntransformedFrame x self = msg_send ~self ~cmd:(selector "setUntransformedFrame:") ~typ:(CGRect.t @-> returning void) x
let setUserInteractionEnabled x self = msg_send ~self ~cmd:(selector "setUserInteractionEnabled:") ~typ:(bool @-> returning void) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let setViewTraversalMark x self = msg_send ~self ~cmd:(selector "setViewTraversalMark:") ~typ:(bool @-> returning void) x
let setWantsDeepColorDrawing x self = msg_send ~self ~cmd:(selector "setWantsDeepColorDrawing:") ~typ:(bool @-> returning void) x
let shouldUpdateFocusInContext x self = msg_send ~self ~cmd:(selector "shouldUpdateFocusInContext:") ~typ:(id @-> returning bool) x
let showsLargeContentViewer self = msg_send ~self ~cmd:(selector "showsLargeContentViewer") ~typ:(returning bool)
let size self = msg_send_stret ~self ~cmd:(selector "size") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let sizeThatFits x self = msg_send_stret ~self ~cmd:(selector "sizeThatFits:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let sizeToFit self = msg_send ~self ~cmd:(selector "sizeToFit") ~typ:(returning void)
let skipsSubviewEnumeration self = msg_send ~self ~cmd:(selector "skipsSubviewEnumeration") ~typ:(returning bool)
let snapshot self = msg_send ~self ~cmd:(selector "snapshot") ~typ:(returning id)
let snapshotView self = msg_send ~self ~cmd:(selector "snapshotView") ~typ:(returning id)
let snapshotViewAfterScreenUpdates x self = msg_send ~self ~cmd:(selector "snapshotViewAfterScreenUpdates:") ~typ:(bool @-> returning id) x
let solutionDidChangeInEngine x self = msg_send ~self ~cmd:(selector "solutionDidChangeInEngine:") ~typ:(id @-> returning void) x
let stopSettingPresentationValueForKey x self = msg_send ~self ~cmd:(selector "stopSettingPresentationValueForKey:") ~typ:(id @-> returning void) x
let subviews self = msg_send ~self ~cmd:(selector "subviews") ~typ:(returning id)
let superview self = msg_send ~self ~cmd:(selector "superview") ~typ:(returning id)
let systemLayoutSizeFittingSize x self = msg_send_stret ~self ~cmd:(selector "systemLayoutSizeFittingSize:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let systemLayoutSizeFittingSize' x ~withHorizontalFittingPriority ~verticalFittingPriority self = msg_send_stret ~self ~cmd:(selector "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:") ~typ:(CGSize.t @-> float @-> float @-> returning CGSize.t) ~return_type:CGSize.t x withHorizontalFittingPriority verticalFittingPriority
let systemSpacingToAdjecentSiblingView x ~axis ~baselineRelative ~multiplier self = msg_send ~self ~cmd:(selector "systemSpacingToAdjecentSiblingView:axis:baselineRelative:multiplier:") ~typ:(id @-> llong @-> bool @-> double @-> returning double) x (LLong.of_int axis) baselineRelative multiplier
let systemSpacingToSuperView x ~edge ~baselineRelative ~multiplier self = msg_send ~self ~cmd:(selector "systemSpacingToSuperView:edge:baselineRelative:multiplier:") ~typ:(id @-> ullong @-> bool @-> double @-> returning double) x (ULLong.of_int edge) baselineRelative multiplier
let tag self = msg_send ~self ~cmd:(selector "tag") ~typ:(returning llong)
let textEffectsVisibilityLevel self = msg_send ~self ~cmd:(selector "textEffectsVisibilityLevel") ~typ:(returning int)
let textEffectsVisibilityLevelInKeyboardWindow self = msg_send ~self ~cmd:(selector "textEffectsVisibilityLevelInKeyboardWindow") ~typ:(returning int)
let textInputView self = msg_send ~self ~cmd:(selector "textInputView") ~typ:(returning id)
let tintAdjustmentMode self = msg_send ~self ~cmd:(selector "tintAdjustmentMode") ~typ:(returning llong)
let tintColor self = msg_send ~self ~cmd:(selector "tintColor") ~typ:(returning id)
let tintColorDidChange self = msg_send ~self ~cmd:(selector "tintColorDidChange") ~typ:(returning void)
let tintColorOverride self = msg_send ~self ~cmd:(selector "tintColorOverride") ~typ:(returning id)
let tintColorOverrideDarkened self = msg_send ~self ~cmd:(selector "tintColorOverrideDarkened") ~typ:(returning id)
let topAnchor self = msg_send ~self ~cmd:(selector "topAnchor") ~typ:(returning id)
let trailingAnchor self = msg_send ~self ~cmd:(selector "trailingAnchor") ~typ:(returning id)
let traitCollection self = msg_send ~self ~cmd:(selector "traitCollection") ~typ:(returning id)
let traitCollectionDidChange x self = msg_send ~self ~cmd:(selector "traitCollectionDidChange:") ~typ:(id @-> returning void) x
let transform self = msg_send_stret ~self ~cmd:(selector "transform") ~typ:(returning CGAffineTransform.t) ~return_type:CGAffineTransform.t
let transform3D self = msg_send_stret ~self ~cmd:(selector "transform3D") ~typ:(returning CATransform3D.t) ~return_type:CATransform3D.t
let translatesAutoresizingMaskIntoConstraints self = msg_send ~self ~cmd:(selector "translatesAutoresizingMaskIntoConstraints") ~typ:(returning bool)
let updateConstraints self = msg_send ~self ~cmd:(selector "updateConstraints") ~typ:(returning void)
let updateConstraintsIfNeeded self = msg_send ~self ~cmd:(selector "updateConstraintsIfNeeded") ~typ:(returning void)
let updateFocusIfNeeded self = msg_send ~self ~cmd:(selector "updateFocusIfNeeded") ~typ:(returning void)
let updateUserActivityState x self = msg_send ~self ~cmd:(selector "updateUserActivityState:") ~typ:(id @-> returning void) x
let useBlockyMagnificationInClassic self = msg_send ~self ~cmd:(selector "useBlockyMagnificationInClassic") ~typ:(returning bool)
let viewDidMoveToSuperview self = msg_send ~self ~cmd:(selector "viewDidMoveToSuperview") ~typ:(returning void)
let viewForBaselineLayout self = msg_send ~self ~cmd:(selector "viewForBaselineLayout") ~typ:(returning id)
let viewForFirstBaselineLayout self = msg_send ~self ~cmd:(selector "viewForFirstBaselineLayout") ~typ:(returning id)
let viewForLastBaselineLayout self = msg_send ~self ~cmd:(selector "viewForLastBaselineLayout") ~typ:(returning id)
let viewPrintFormatter self = msg_send ~self ~cmd:(selector "viewPrintFormatter") ~typ:(returning id)
let viewTraversalMark self = msg_send ~self ~cmd:(selector "viewTraversalMark") ~typ:(returning bool)
let viewWillMoveToSuperview x self = msg_send ~self ~cmd:(selector "viewWillMoveToSuperview:") ~typ:(id @-> returning void) x
let viewWithTag x self = msg_send ~self ~cmd:(selector "viewWithTag:") ~typ:(llong @-> returning id) (LLong.of_int x)
let visibleBounds self = msg_send_stret ~self ~cmd:(selector "visibleBounds") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let wantsDeepColorDrawing self = msg_send ~self ~cmd:(selector "wantsDeepColorDrawing") ~typ:(returning bool)
let widthAnchor self = msg_send ~self ~cmd:(selector "widthAnchor") ~typ:(returning id)
let willMoveToSuperview x self = msg_send ~self ~cmd:(selector "willMoveToSuperview:") ~typ:(id @-> returning void) x
let willMoveToWindow x self = msg_send ~self ~cmd:(selector "willMoveToWindow:") ~typ:(id @-> returning void) x
let willRemoveSubview x self = msg_send ~self ~cmd:(selector "willRemoveSubview:") ~typ:(id @-> returning void) x
let window self = msg_send ~self ~cmd:(selector "window") ~typ:(returning id)