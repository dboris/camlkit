(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation
open CoreText

(** Apple docs: {{:https://developer.apple.com/documentation/uikit/uitableview?language=objc}UITableView} *)

let self = get_class "UITableView"

let accessoryInsetsDidChange x self = msg_send ~self ~cmd:(selector "accessoryInsetsDidChange:") ~typ:(UIEdgeInsets.t @-> returning void) x
let adjustIndexPaths x ~forMoveOfIndexPath ~toIndexPath self = msg_send ~self ~cmd:(selector "adjustIndexPaths:forMoveOfIndexPath:toIndexPath:") ~typ:(id @-> id @-> id @-> returning void) x forMoveOfIndexPath toIndexPath
let allowsFocus self = msg_send ~self ~cmd:(selector "allowsFocus") ~typ:(returning bool)
let allowsFocusDuringEditing self = msg_send ~self ~cmd:(selector "allowsFocusDuringEditing") ~typ:(returning bool)
let allowsFooterViewsToFloat self = msg_send ~self ~cmd:(selector "allowsFooterViewsToFloat") ~typ:(returning bool)
let allowsHeaderViewsToFloat self = msg_send ~self ~cmd:(selector "allowsHeaderViewsToFloat") ~typ:(returning bool)
let allowsMultipleSelection self = msg_send ~self ~cmd:(selector "allowsMultipleSelection") ~typ:(returning bool)
let allowsMultipleSelectionDuringEditing self = msg_send ~self ~cmd:(selector "allowsMultipleSelectionDuringEditing") ~typ:(returning bool)
let allowsSelection self = msg_send ~self ~cmd:(selector "allowsSelection") ~typ:(returning bool)
let allowsSelectionDuringEditing self = msg_send ~self ~cmd:(selector "allowsSelectionDuringEditing") ~typ:(returning bool)
let awakeFromNib self = msg_send ~self ~cmd:(selector "awakeFromNib") ~typ:(returning void)
let backgroundView self = msg_send ~self ~cmd:(selector "backgroundView") ~typ:(returning id)
let beginUpdates self = msg_send ~self ~cmd:(selector "beginUpdates") ~typ:(returning void)
let bringSubviewToFront x self = msg_send ~self ~cmd:(selector "bringSubviewToFront:") ~typ:(id @-> returning void) x
let canBeEdited self = msg_send ~self ~cmd:(selector "canBeEdited") ~typ:(returning bool)
let canBecomeFocused self = msg_send ~self ~cmd:(selector "canBecomeFocused") ~typ:(returning bool)
let cancelTouchTracking self = msg_send ~self ~cmd:(selector "cancelTouchTracking") ~typ:(returning bool)
let cellForRowAtIndexPath x self = msg_send ~self ~cmd:(selector "cellForRowAtIndexPath:") ~typ:(id @-> returning id) x
let cellLayoutMarginsFollowReadableWidth self = msg_send ~self ~cmd:(selector "cellLayoutMarginsFollowReadableWidth") ~typ:(returning bool)
let contextMenuInteraction self = msg_send ~self ~cmd:(selector "contextMenuInteraction") ~typ:(returning id)
let contextMenuInteraction1 x ~configurationForMenuAtLocation self = msg_send ~self ~cmd:(selector "contextMenuInteraction:configurationForMenuAtLocation:") ~typ:(id @-> CGPoint.t @-> returning id) x configurationForMenuAtLocation
let contextMenuInteraction2 x ~previewForDismissingMenuWithConfiguration self = msg_send ~self ~cmd:(selector "contextMenuInteraction:previewForDismissingMenuWithConfiguration:") ~typ:(id @-> id @-> returning id) x previewForDismissingMenuWithConfiguration
let contextMenuInteraction3 x ~previewForHighlightingMenuWithConfiguration self = msg_send ~self ~cmd:(selector "contextMenuInteraction:previewForHighlightingMenuWithConfiguration:") ~typ:(id @-> id @-> returning id) x previewForHighlightingMenuWithConfiguration
let contextMenuInteraction4 x ~willDisplayMenuForConfiguration ~animator self = msg_send ~self ~cmd:(selector "contextMenuInteraction:willDisplayMenuForConfiguration:animator:") ~typ:(id @-> id @-> id @-> returning void) x willDisplayMenuForConfiguration animator
let contextMenuInteraction5 x ~willEndForConfiguration ~animator self = msg_send ~self ~cmd:(selector "contextMenuInteraction:willEndForConfiguration:animator:") ~typ:(id @-> id @-> id @-> returning void) x willEndForConfiguration animator
let contextMenuInteraction6 x ~willPerformPreviewActionForMenuWithConfiguration ~animator self = msg_send ~self ~cmd:(selector "contextMenuInteraction:willPerformPreviewActionForMenuWithConfiguration:animator:") ~typ:(id @-> id @-> id @-> returning void) x willPerformPreviewActionForMenuWithConfiguration animator
let contextualActionForDeletingRowAtIndexPath x self = msg_send ~self ~cmd:(selector "contextualActionForDeletingRowAtIndexPath:") ~typ:(id @-> returning id) x
let currentTouch self = msg_send ~self ~cmd:(selector "currentTouch") ~typ:(returning id)
let dataSource self = msg_send ~self ~cmd:(selector "dataSource") ~typ:(returning id)
let dataSourceIndexPathForPresentationIndexPath x self = msg_send ~self ~cmd:(selector "dataSourceIndexPathForPresentationIndexPath:") ~typ:(id @-> returning id) x
let dataSourceSectionIndexForPresentationSectionIndex x self = msg_send ~self ~cmd:(selector "dataSourceSectionIndexForPresentationSectionIndex:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let decodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "decodeRestorableStateWithCoder:") ~typ:(id @-> returning void) x
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning id)
let deleteConfirmationIndexPath self = msg_send ~self ~cmd:(selector "deleteConfirmationIndexPath") ~typ:(returning id)
let deleteRowsAtIndexPaths x ~withRowAnimation self = msg_send ~self ~cmd:(selector "deleteRowsAtIndexPaths:withRowAnimation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int withRowAnimation)
let deleteSections x ~withRowAnimation self = msg_send ~self ~cmd:(selector "deleteSections:withRowAnimation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int withRowAnimation)
let dequeueReusableCellWithIdentifier x self = msg_send ~self ~cmd:(selector "dequeueReusableCellWithIdentifier:") ~typ:(id @-> returning id) x
let dequeueReusableCellWithIdentifier' x ~forIndexPath self = msg_send ~self ~cmd:(selector "dequeueReusableCellWithIdentifier:forIndexPath:") ~typ:(id @-> id @-> returning id) x forIndexPath
let dequeueReusableHeaderFooterViewWithIdentifier x self = msg_send ~self ~cmd:(selector "dequeueReusableHeaderFooterViewWithIdentifier:") ~typ:(id @-> returning id) x
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let deselectRowAtIndexPath x ~animated self = msg_send ~self ~cmd:(selector "deselectRowAtIndexPath:animated:") ~typ:(id @-> bool @-> returning void) x animated
let didMoveToWindow self = msg_send ~self ~cmd:(selector "didMoveToWindow") ~typ:(returning void)
let dragDelegate self = msg_send ~self ~cmd:(selector "dragDelegate") ~typ:(returning id)
let dragDestinationDelegate self = msg_send ~self ~cmd:(selector "dragDestinationDelegate") ~typ:(returning id)
let dragInteractionEnabled self = msg_send ~self ~cmd:(selector "dragInteractionEnabled") ~typ:(returning bool)
let dragSourceDelegate self = msg_send ~self ~cmd:(selector "dragSourceDelegate") ~typ:(returning id)
let dropDelegate self = msg_send ~self ~cmd:(selector "dropDelegate") ~typ:(returning id)
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning void) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let endUpdates self = msg_send ~self ~cmd:(selector "endUpdates") ~typ:(returning void)
let endUpdatesWithContext x self = msg_send ~self ~cmd:(selector "endUpdatesWithContext:") ~typ:(id @-> returning void) x
let estimatedRowHeight self = msg_send ~self ~cmd:(selector "estimatedRowHeight") ~typ:(returning double)
let estimatedSectionFooterHeight self = msg_send ~self ~cmd:(selector "estimatedSectionFooterHeight") ~typ:(returning double)
let estimatedSectionHeaderHeight self = msg_send ~self ~cmd:(selector "estimatedSectionHeaderHeight") ~typ:(returning double)
let fillerRowHeight self = msg_send ~self ~cmd:(selector "fillerRowHeight") ~typ:(returning double)
let flashScrollIndicators self = msg_send ~self ~cmd:(selector "flashScrollIndicators") ~typ:(returning void)
let footerViewForSection x self = msg_send ~self ~cmd:(selector "footerViewForSection:") ~typ:(llong @-> returning id) (LLong.of_int x)
let gestureRecognizerViewForSwipeActionController x self = msg_send ~self ~cmd:(selector "gestureRecognizerViewForSwipeActionController:") ~typ:(id @-> returning id) x
let globalRowForRowAtIndexPath x self = msg_send ~self ~cmd:(selector "globalRowForRowAtIndexPath:") ~typ:(id @-> returning llong) x
let hasActiveDrag self = msg_send ~self ~cmd:(selector "hasActiveDrag") ~typ:(returning bool)
let hasActiveDrop self = msg_send ~self ~cmd:(selector "hasActiveDrop") ~typ:(returning bool)
let hasUncommittedUpdates self = msg_send ~self ~cmd:(selector "hasUncommittedUpdates") ~typ:(returning bool)
let headerViewForSection x self = msg_send ~self ~cmd:(selector "headerViewForSection:") ~typ:(llong @-> returning id) (LLong.of_int x)
let heightForAutohidingTableHeaderView self = msg_send ~self ~cmd:(selector "heightForAutohidingTableHeaderView") ~typ:(returning double)
let heightForTableHeaderViewHiding self = msg_send ~self ~cmd:(selector "heightForTableHeaderViewHiding") ~typ:(returning double)
let highlightRowAtIndexPath x ~animated ~scrollPosition self = msg_send ~self ~cmd:(selector "highlightRowAtIndexPath:animated:scrollPosition:") ~typ:(id @-> bool @-> llong @-> returning bool) x animated (LLong.of_int scrollPosition)
let highlightedGlobalRow self = msg_send ~self ~cmd:(selector "highlightedGlobalRow") ~typ:(returning llong)
let hitTest x ~forEvent self = msg_send ~self ~cmd:(selector "hitTest:forEvent:") ~typ:(CGPoint.t @-> (ptr void) @-> returning id) x forEvent
let hitTest' x ~withEvent self = msg_send ~self ~cmd:(selector "hitTest:withEvent:") ~typ:(CGPoint.t @-> id @-> returning id) x withEvent
let ignorePinnedTableHeaderUpdates self = msg_send ~self ~cmd:(selector "ignorePinnedTableHeaderUpdates") ~typ:(returning bool)
let indexBarAccessoryView x ~contentOffsetForEntry ~atIndex self = msg_send_stret ~self ~cmd:(selector "indexBarAccessoryView:contentOffsetForEntry:atIndex:") ~typ:(id @-> id @-> llong @-> returning CGPoint.t) ~return_type:CGPoint.t x contentOffsetForEntry (LLong.of_int atIndex)
let indexFrame self = msg_send_stret ~self ~cmd:(selector "indexFrame") ~typ:(returning CGRect.t) ~return_type:CGRect.t
let indexPathForCell x self = msg_send ~self ~cmd:(selector "indexPathForCell:") ~typ:(id @-> returning id) x
let indexPathForRowAtGlobalRow x self = msg_send ~self ~cmd:(selector "indexPathForRowAtGlobalRow:") ~typ:(llong @-> returning id) (LLong.of_int x)
let indexPathForRowAtPoint x self = msg_send ~self ~cmd:(selector "indexPathForRowAtPoint:") ~typ:(CGPoint.t @-> returning id) x
let indexPathForSelectedRow self = msg_send ~self ~cmd:(selector "indexPathForSelectedRow") ~typ:(returning id)
let indexPathsForRowsInRect x self = msg_send ~self ~cmd:(selector "indexPathsForRowsInRect:") ~typ:(CGRect.t @-> returning id) x
let indexPathsForSelectedRows self = msg_send ~self ~cmd:(selector "indexPathsForSelectedRows") ~typ:(returning id)
let indexPathsForVisibleRows self = msg_send ~self ~cmd:(selector "indexPathsForVisibleRows") ~typ:(returning id)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning id) x
let initWithFrame' x ~style self = msg_send ~self ~cmd:(selector "initWithFrame:style:") ~typ:(CGRect.t @-> llong @-> returning id) x (LLong.of_int style)
let insertRowsAtIndexPaths x ~withRowAnimation self = msg_send ~self ~cmd:(selector "insertRowsAtIndexPaths:withRowAnimation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int withRowAnimation)
let insertSections x ~withRowAnimation self = msg_send ~self ~cmd:(selector "insertSections:withRowAnimation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int withRowAnimation)
let insetsContentViewsToSafeArea self = msg_send ~self ~cmd:(selector "insetsContentViewsToSafeArea") ~typ:(returning bool)
let isEditing self = msg_send ~self ~cmd:(selector "isEditing") ~typ:(returning bool)
let isElementAccessibilityExposedToInterfaceBuilder self = msg_send ~self ~cmd:(selector "isElementAccessibilityExposedToInterfaceBuilder") ~typ:(returning bool)
let isIndexHidden self = msg_send ~self ~cmd:(selector "isIndexHidden") ~typ:(returning bool)
let isPrefetchingEnabled self = msg_send ~self ~cmd:(selector "isPrefetchingEnabled") ~typ:(returning bool)
let isSpringLoaded self = msg_send ~self ~cmd:(selector "isSpringLoaded") ~typ:(returning bool)
let itemContainerViewForSwipeActionController x self = msg_send ~self ~cmd:(selector "itemContainerViewForSwipeActionController:") ~typ:(id @-> returning id) x
let keyCommands self = msg_send ~self ~cmd:(selector "keyCommands") ~typ:(returning id)
let layoutDirectionForSwipeActionController x self = msg_send ~self ~cmd:(selector "layoutDirectionForSwipeActionController:") ~typ:(id @-> returning llong) x
let layoutMarginsFollowReadableWidth self = msg_send ~self ~cmd:(selector "layoutMarginsFollowReadableWidth") ~typ:(returning bool)
let layoutSubviews self = msg_send ~self ~cmd:(selector "layoutSubviews") ~typ:(returning void)
let longPress x self = msg_send ~self ~cmd:(selector "longPress:") ~typ:(id @-> returning void) x
let longPressGestureWithinAutoscrollZone self = msg_send ~self ~cmd:(selector "longPressGestureWithinAutoscrollZone") ~typ:(returning bool)
let maximumGlobalRowIndex self = msg_send ~self ~cmd:(selector "maximumGlobalRowIndex") ~typ:(returning llong)
let maximumNumberOfSectionIndexTitlesWithoutTruncation self = msg_send ~self ~cmd:(selector "maximumNumberOfSectionIndexTitlesWithoutTruncation") ~typ:(returning ullong)
let moveRowAtIndexPath x ~toIndexPath self = msg_send ~self ~cmd:(selector "moveRowAtIndexPath:toIndexPath:") ~typ:(id @-> id @-> returning void) x toIndexPath
let moveSection x ~toSection self = msg_send ~self ~cmd:(selector "moveSection:toSection:") ~typ:(llong @-> llong @-> returning void) (LLong.of_int x) (LLong.of_int toSection)
let multiselectCheckmarkColor self = msg_send ~self ~cmd:(selector "multiselectCheckmarkColor") ~typ:(returning id)
let noteNumberOfRowsChanged self = msg_send ~self ~cmd:(selector "noteNumberOfRowsChanged") ~typ:(returning void)
let numberOfRowsInSection x self = msg_send ~self ~cmd:(selector "numberOfRowsInSection:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let numberOfSections self = msg_send ~self ~cmd:(selector "numberOfSections") ~typ:(returning llong)
let overlapsSectionHeaderViews self = msg_send ~self ~cmd:(selector "overlapsSectionHeaderViews") ~typ:(returning bool)
let performBatchUpdates x ~completion self = msg_send ~self ~cmd:(selector "performBatchUpdates:completion:") ~typ:((ptr void) @-> (ptr void) @-> returning void) x completion
let performUsingPresentationValues x self = msg_send ~self ~cmd:(selector "performUsingPresentationValues:") ~typ:((ptr void) @-> returning void) x
let preferredFocusedView self = msg_send ~self ~cmd:(selector "preferredFocusedView") ~typ:(returning id)
let prefetchDataSource self = msg_send ~self ~cmd:(selector "prefetchDataSource") ~typ:(returning id)
let presentationIndexPathForDataSourceIndexPath x self = msg_send ~self ~cmd:(selector "presentationIndexPathForDataSourceIndexPath:") ~typ:(id @-> returning id) x
let presentationSectionIndexForDataSourceSectionIndex x self = msg_send ~self ~cmd:(selector "presentationSectionIndexForDataSourceSectionIndex:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let pressesBegan x ~withEvent self = msg_send ~self ~cmd:(selector "pressesBegan:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let pressesCancelled x ~withEvent self = msg_send ~self ~cmd:(selector "pressesCancelled:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let pressesChanged x ~withEvent self = msg_send ~self ~cmd:(selector "pressesChanged:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let pressesEnded x ~withEvent self = msg_send ~self ~cmd:(selector "pressesEnded:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let reconfigureRowsAtIndexPaths x self = msg_send ~self ~cmd:(selector "reconfigureRowsAtIndexPaths:") ~typ:(id @-> returning void) x
let rectForFooterInSection x self = msg_send_stret ~self ~cmd:(selector "rectForFooterInSection:") ~typ:(llong @-> returning CGRect.t) ~return_type:CGRect.t (LLong.of_int x)
let rectForHeaderInSection x self = msg_send_stret ~self ~cmd:(selector "rectForHeaderInSection:") ~typ:(llong @-> returning CGRect.t) ~return_type:CGRect.t (LLong.of_int x)
let rectForRowAtIndexPath x self = msg_send_stret ~self ~cmd:(selector "rectForRowAtIndexPath:") ~typ:(id @-> returning CGRect.t) ~return_type:CGRect.t x
let rectForSection x self = msg_send_stret ~self ~cmd:(selector "rectForSection:") ~typ:(llong @-> returning CGRect.t) ~return_type:CGRect.t (LLong.of_int x)
let registerClass x ~forCellReuseIdentifier self = msg_send ~self ~cmd:(selector "registerClass:forCellReuseIdentifier:") ~typ:(_Class @-> id @-> returning void) x forCellReuseIdentifier
let registerClass' x ~forHeaderFooterViewReuseIdentifier self = msg_send ~self ~cmd:(selector "registerClass:forHeaderFooterViewReuseIdentifier:") ~typ:(_Class @-> id @-> returning void) x forHeaderFooterViewReuseIdentifier
let registerNib x ~forCellReuseIdentifier self = msg_send ~self ~cmd:(selector "registerNib:forCellReuseIdentifier:") ~typ:(id @-> id @-> returning void) x forCellReuseIdentifier
let registerNib' x ~forHeaderFooterViewReuseIdentifier self = msg_send ~self ~cmd:(selector "registerNib:forHeaderFooterViewReuseIdentifier:") ~typ:(id @-> id @-> returning void) x forHeaderFooterViewReuseIdentifier
let reloadData self = msg_send ~self ~cmd:(selector "reloadData") ~typ:(returning void)
let reloadRowsAtIndexPaths x ~withRowAnimation self = msg_send ~self ~cmd:(selector "reloadRowsAtIndexPaths:withRowAnimation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int withRowAnimation)
let reloadSectionIndexTitles self = msg_send ~self ~cmd:(selector "reloadSectionIndexTitles") ~typ:(returning void)
let reloadSections x ~withRowAnimation self = msg_send ~self ~cmd:(selector "reloadSections:withRowAnimation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int withRowAnimation)
let remembersLastFocusedIndexPath self = msg_send ~self ~cmd:(selector "remembersLastFocusedIndexPath") ~typ:(returning bool)
let resizeSubviewsWithOldSize x self = msg_send ~self ~cmd:(selector "resizeSubviewsWithOldSize:") ~typ:(CGSize.t @-> returning void) x
let rowHeight self = msg_send ~self ~cmd:(selector "rowHeight") ~typ:(returning double)
let scrollToNearestSelectedRowAtScrollPosition x ~animated self = msg_send ~self ~cmd:(selector "scrollToNearestSelectedRowAtScrollPosition:animated:") ~typ:(llong @-> bool @-> returning void) (LLong.of_int x) animated
let scrollToRowAtIndexPath x ~atScrollPosition ~animated self = msg_send ~self ~cmd:(selector "scrollToRowAtIndexPath:atScrollPosition:animated:") ~typ:(id @-> llong @-> bool @-> returning void) x (LLong.of_int atScrollPosition) animated
let sectionBorderColor self = msg_send ~self ~cmd:(selector "sectionBorderColor") ~typ:(returning id)
let sectionFooterHeight self = msg_send ~self ~cmd:(selector "sectionFooterHeight") ~typ:(returning double)
let sectionHeaderHeight self = msg_send ~self ~cmd:(selector "sectionHeaderHeight") ~typ:(returning double)
let sectionHeaderTopPadding self = msg_send ~self ~cmd:(selector "sectionHeaderTopPadding") ~typ:(returning double)
let sectionIndexBackgroundColor self = msg_send ~self ~cmd:(selector "sectionIndexBackgroundColor") ~typ:(returning id)
let sectionIndexColor self = msg_send ~self ~cmd:(selector "sectionIndexColor") ~typ:(returning id)
let sectionIndexMinimumDisplayRowCount self = msg_send ~self ~cmd:(selector "sectionIndexMinimumDisplayRowCount") ~typ:(returning llong)
let sectionIndexTrackingBackgroundColor self = msg_send ~self ~cmd:(selector "sectionIndexTrackingBackgroundColor") ~typ:(returning id)
let selectRowAtIndexPath x ~animated ~scrollPosition self = msg_send ~self ~cmd:(selector "selectRowAtIndexPath:animated:scrollPosition:") ~typ:(id @-> bool @-> llong @-> returning void) x animated (LLong.of_int scrollPosition)
let selectedCell self = msg_send ~self ~cmd:(selector "selectedCell") ~typ:(returning id)
let selectionFollowsFocus self = msg_send ~self ~cmd:(selector "selectionFollowsFocus") ~typ:(returning bool)
let sendSubviewToBack x self = msg_send ~self ~cmd:(selector "sendSubviewToBack:") ~typ:(id @-> returning void) x
let separatorBottomShadowColor self = msg_send ~self ~cmd:(selector "separatorBottomShadowColor") ~typ:(returning id)
let separatorColor self = msg_send ~self ~cmd:(selector "separatorColor") ~typ:(returning id)
let separatorEffect self = msg_send ~self ~cmd:(selector "separatorEffect") ~typ:(returning id)
let separatorInset self = msg_send_stret ~self ~cmd:(selector "separatorInset") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let separatorInsetReference self = msg_send ~self ~cmd:(selector "separatorInsetReference") ~typ:(returning llong)
let separatorStyle self = msg_send ~self ~cmd:(selector "separatorStyle") ~typ:(returning llong)
let separatorTopShadowColor self = msg_send ~self ~cmd:(selector "separatorTopShadowColor") ~typ:(returning id)
let setAllowsFocus x self = msg_send ~self ~cmd:(selector "setAllowsFocus:") ~typ:(bool @-> returning void) x
let setAllowsFocusDuringEditing x self = msg_send ~self ~cmd:(selector "setAllowsFocusDuringEditing:") ~typ:(bool @-> returning void) x
let setAllowsMultipleSelection x self = msg_send ~self ~cmd:(selector "setAllowsMultipleSelection:") ~typ:(bool @-> returning void) x
let setAllowsMultipleSelectionDuringEditing x self = msg_send ~self ~cmd:(selector "setAllowsMultipleSelectionDuringEditing:") ~typ:(bool @-> returning void) x
let setAllowsSelection x self = msg_send ~self ~cmd:(selector "setAllowsSelection:") ~typ:(bool @-> returning void) x
let setAllowsSelectionDuringEditing x self = msg_send ~self ~cmd:(selector "setAllowsSelectionDuringEditing:") ~typ:(bool @-> returning void) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning void) x
let setBackgroundView x self = msg_send ~self ~cmd:(selector "setBackgroundView:") ~typ:(id @-> returning void) x
let setBounds x self = msg_send ~self ~cmd:(selector "setBounds:") ~typ:(CGRect.t @-> returning void) x
let setCellLayoutMarginsFollowReadableWidth x self = msg_send ~self ~cmd:(selector "setCellLayoutMarginsFollowReadableWidth:") ~typ:(bool @-> returning void) x
let setContentInset x self = msg_send ~self ~cmd:(selector "setContentInset:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setContentOffset x self = msg_send ~self ~cmd:(selector "setContentOffset:") ~typ:(CGPoint.t @-> returning void) x
let setContentSize x self = msg_send ~self ~cmd:(selector "setContentSize:") ~typ:(CGSize.t @-> returning void) x
let setContentSize' x ~skipContentOffsetAdjustment self = msg_send ~self ~cmd:(selector "setContentSize:skipContentOffsetAdjustment:") ~typ:(CGSize.t @-> bool @-> returning void) x skipContentOffsetAdjustment
let setCountString x self = msg_send ~self ~cmd:(selector "setCountString:") ~typ:(id @-> returning void) x
let setCountStringInsignificantRowCount x self = msg_send ~self ~cmd:(selector "setCountStringInsignificantRowCount:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setCurrentTouch x self = msg_send ~self ~cmd:(selector "setCurrentTouch:") ~typ:(id @-> returning void) x
let setDataSource x self = msg_send ~self ~cmd:(selector "setDataSource:") ~typ:(id @-> returning void) x
let setDelaysContentTouches x self = msg_send ~self ~cmd:(selector "setDelaysContentTouches:") ~typ:(bool @-> returning void) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning void) x
let setDeleteConfirmationIndexPath x ~animated self = msg_send ~self ~cmd:(selector "setDeleteConfirmationIndexPath:animated:") ~typ:(id @-> bool @-> returning void) x animated
let setDirectionalLayoutMargins x self = msg_send ~self ~cmd:(selector "setDirectionalLayoutMargins:") ~typ:(NSDirectionalEdgeInsets.t @-> returning void) x
let setDragDelegate x self = msg_send ~self ~cmd:(selector "setDragDelegate:") ~typ:(id @-> returning void) x
let setDragDestinationDelegate x self = msg_send ~self ~cmd:(selector "setDragDestinationDelegate:") ~typ:(id @-> returning void) x
let setDragInteractionEnabled x self = msg_send ~self ~cmd:(selector "setDragInteractionEnabled:") ~typ:(bool @-> returning void) x
let setDragSourceDelegate x self = msg_send ~self ~cmd:(selector "setDragSourceDelegate:") ~typ:(id @-> returning void) x
let setDropDelegate x self = msg_send ~self ~cmd:(selector "setDropDelegate:") ~typ:(id @-> returning void) x
let setEditing x self = msg_send ~self ~cmd:(selector "setEditing:") ~typ:(bool @-> returning void) x
let setEditing' x ~animated self = msg_send ~self ~cmd:(selector "setEditing:animated:") ~typ:(bool @-> bool @-> returning void) x animated
let setEstimatedRowHeight x self = msg_send ~self ~cmd:(selector "setEstimatedRowHeight:") ~typ:(double @-> returning void) x
let setEstimatedSectionFooterHeight x self = msg_send ~self ~cmd:(selector "setEstimatedSectionFooterHeight:") ~typ:(double @-> returning void) x
let setEstimatedSectionHeaderHeight x self = msg_send ~self ~cmd:(selector "setEstimatedSectionHeaderHeight:") ~typ:(double @-> returning void) x
let setFillerRowHeight x self = msg_send ~self ~cmd:(selector "setFillerRowHeight:") ~typ:(double @-> returning void) x
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning void) x
let setIndexHidden x ~animated self = msg_send ~self ~cmd:(selector "setIndexHidden:animated:") ~typ:(bool @-> bool @-> returning void) x animated
let setIndexHiddenForSearch x self = msg_send ~self ~cmd:(selector "setIndexHiddenForSearch:") ~typ:(bool @-> returning void) x
let setInsetsContentViewsToSafeArea x self = msg_send ~self ~cmd:(selector "setInsetsContentViewsToSafeArea:") ~typ:(bool @-> returning void) x
let setInsetsLayoutMarginsFromSafeArea x self = msg_send ~self ~cmd:(selector "setInsetsLayoutMarginsFromSafeArea:") ~typ:(bool @-> returning void) x
let setLayoutMargins x self = msg_send ~self ~cmd:(selector "setLayoutMargins:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setLayoutMarginsFollowReadableWidth x self = msg_send ~self ~cmd:(selector "setLayoutMarginsFollowReadableWidth:") ~typ:(bool @-> returning void) x
let setMultiselectCheckmarkColor x self = msg_send ~self ~cmd:(selector "setMultiselectCheckmarkColor:") ~typ:(id @-> returning void) x
let setOverlapsSectionHeaderViews x self = msg_send ~self ~cmd:(selector "setOverlapsSectionHeaderViews:") ~typ:(bool @-> returning void) x
let setPrefetchDataSource x self = msg_send ~self ~cmd:(selector "setPrefetchDataSource:") ~typ:(id @-> returning void) x
let setPrefetchingEnabled x self = msg_send ~self ~cmd:(selector "setPrefetchingEnabled:") ~typ:(bool @-> returning void) x
let setRefreshControl x self = msg_send ~self ~cmd:(selector "setRefreshControl:") ~typ:(id @-> returning void) x
let setRemembersLastFocusedIndexPath x self = msg_send ~self ~cmd:(selector "setRemembersLastFocusedIndexPath:") ~typ:(bool @-> returning void) x
let setRowHeight x self = msg_send ~self ~cmd:(selector "setRowHeight:") ~typ:(double @-> returning void) x
let setSectionBorderColor x self = msg_send ~self ~cmd:(selector "setSectionBorderColor:") ~typ:(id @-> returning void) x
let setSectionFooterHeight x self = msg_send ~self ~cmd:(selector "setSectionFooterHeight:") ~typ:(double @-> returning void) x
let setSectionHeaderHeight x self = msg_send ~self ~cmd:(selector "setSectionHeaderHeight:") ~typ:(double @-> returning void) x
let setSectionHeaderTopPadding x self = msg_send ~self ~cmd:(selector "setSectionHeaderTopPadding:") ~typ:(double @-> returning void) x
let setSectionIndexBackgroundColor x self = msg_send ~self ~cmd:(selector "setSectionIndexBackgroundColor:") ~typ:(id @-> returning void) x
let setSectionIndexColor x self = msg_send ~self ~cmd:(selector "setSectionIndexColor:") ~typ:(id @-> returning void) x
let setSectionIndexMinimumDisplayRowCount x self = msg_send ~self ~cmd:(selector "setSectionIndexMinimumDisplayRowCount:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setSectionIndexTrackingBackgroundColor x self = msg_send ~self ~cmd:(selector "setSectionIndexTrackingBackgroundColor:") ~typ:(id @-> returning void) x
let setSelectionFollowsFocus x self = msg_send ~self ~cmd:(selector "setSelectionFollowsFocus:") ~typ:(bool @-> returning void) x
let setSemanticContentAttribute x self = msg_send ~self ~cmd:(selector "setSemanticContentAttribute:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setSeparatorBottomShadowColor x self = msg_send ~self ~cmd:(selector "setSeparatorBottomShadowColor:") ~typ:(id @-> returning void) x
let setSeparatorColor x self = msg_send ~self ~cmd:(selector "setSeparatorColor:") ~typ:(id @-> returning void) x
let setSeparatorEffect x self = msg_send ~self ~cmd:(selector "setSeparatorEffect:") ~typ:(id @-> returning void) x
let setSeparatorInset x self = msg_send ~self ~cmd:(selector "setSeparatorInset:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setSeparatorInsetReference x self = msg_send ~self ~cmd:(selector "setSeparatorInsetReference:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setSeparatorStyle x self = msg_send ~self ~cmd:(selector "setSeparatorStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setSeparatorTopShadowColor x self = msg_send ~self ~cmd:(selector "setSeparatorTopShadowColor:") ~typ:(id @-> returning void) x
let setShowsHorizontalScrollIndicator x self = msg_send ~self ~cmd:(selector "setShowsHorizontalScrollIndicator:") ~typ:(bool @-> returning void) x
let setShowsVerticalScrollIndicator x self = msg_send ~self ~cmd:(selector "setShowsVerticalScrollIndicator:") ~typ:(bool @-> returning void) x
let setSpringLoaded x self = msg_send ~self ~cmd:(selector "setSpringLoaded:") ~typ:(bool @-> returning void) x
let setTableFooterView x self = msg_send ~self ~cmd:(selector "setTableFooterView:") ~typ:(id @-> returning void) x
let setTableHeaderBackgroundColor x self = msg_send ~self ~cmd:(selector "setTableHeaderBackgroundColor:") ~typ:(id @-> returning void) x
let setTableHeaderView x self = msg_send ~self ~cmd:(selector "setTableHeaderView:") ~typ:(id @-> returning void) x
let setTableHeaderViewShouldAutoHide x self = msg_send ~self ~cmd:(selector "setTableHeaderViewShouldAutoHide:") ~typ:(bool @-> returning void) x
let setUsesVariableMargins x self = msg_send ~self ~cmd:(selector "setUsesVariableMargins:") ~typ:(bool @-> returning void) x
let shouldDisplayTopSeparatorForRowAtIndexPath x self = msg_send ~self ~cmd:(selector "shouldDisplayTopSeparatorForRowAtIndexPath:") ~typ:(id @-> returning bool) x
let sizeThatFits x self = msg_send_stret ~self ~cmd:(selector "sizeThatFits:") ~typ:(CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x
let style self = msg_send ~self ~cmd:(selector "style") ~typ:(returning llong)
let swipeActionController x ~backgroundColorForItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:backgroundColorForItemAtIndexPath:") ~typ:(id @-> id @-> returning id) x backgroundColorForItemAtIndexPath
let swipeActionController1 x ~didEndSwipeForItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:didEndSwipeForItemAtIndexPath:") ~typ:(id @-> id @-> returning void) x didEndSwipeForItemAtIndexPath
let swipeActionController2 x ~extraInsetsForItemAtIndexPath self = msg_send_stret ~self ~cmd:(selector "swipeActionController:extraInsetsForItemAtIndexPath:") ~typ:(id @-> id @-> returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t x extraInsetsForItemAtIndexPath
let swipeActionController3 x ~indexPathForTouchLocation self = msg_send ~self ~cmd:(selector "swipeActionController:indexPathForTouchLocation:") ~typ:(id @-> CGPoint.t @-> returning id) x indexPathForTouchLocation
let swipeActionController4 x ~leadingSwipeConfigurationForItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:leadingSwipeConfigurationForItemAtIndexPath:") ~typ:(id @-> id @-> returning id) x leadingSwipeConfigurationForItemAtIndexPath
let swipeActionController5 x ~mayBeginSwipeForItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:mayBeginSwipeForItemAtIndexPath:") ~typ:(id @-> id @-> returning bool) x mayBeginSwipeForItemAtIndexPath
let swipeActionController6 x ~trailingSwipeConfigurationForItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:trailingSwipeConfigurationForItemAtIndexPath:") ~typ:(id @-> id @-> returning id) x trailingSwipeConfigurationForItemAtIndexPath
let swipeActionController7 x ~viewForItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:viewForItemAtIndexPath:") ~typ:(id @-> id @-> returning id) x viewForItemAtIndexPath
let swipeActionController8 x ~willBeginSwipeForItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:willBeginSwipeForItemAtIndexPath:") ~typ:(id @-> id @-> returning void) x willBeginSwipeForItemAtIndexPath
let swipeActionController9 x ~cleanupActionsView ~forItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:cleanupActionsView:forItemAtIndexPath:") ~typ:(id @-> id @-> id @-> returning void) x cleanupActionsView forItemAtIndexPath
let swipeActionController10 x ~insertActionsView ~forItemAtIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:insertActionsView:forItemAtIndexPath:") ~typ:(id @-> id @-> id @-> returning bool) x insertActionsView forItemAtIndexPath
let swipeActionController11 x ~willPerformAction ~atIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:willPerformAction:atIndexPath:") ~typ:(id @-> id @-> id @-> returning void) x willPerformAction atIndexPath
let swipeActionController12 x ~didCompleteAction ~cancelled ~atIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:didCompleteAction:cancelled:atIndexPath:") ~typ:(id @-> id @-> bool @-> id @-> returning void) x didCompleteAction cancelled atIndexPath
let swipeActionController13 x ~didCompleteAnimationOfAction ~canceled ~atIndexPath self = msg_send ~self ~cmd:(selector "swipeActionController:didCompleteAnimationOfAction:canceled:atIndexPath:") ~typ:(id @-> id @-> bool @-> id @-> returning void) x didCompleteAnimationOfAction canceled atIndexPath
let swipeActionController14 x ~swipeOccurrence ~didChangeStateFrom ~to_ self = msg_send ~self ~cmd:(selector "swipeActionController:swipeOccurrence:didChangeStateFrom:to:") ~typ:(id @-> id @-> llong @-> llong @-> returning void) x swipeOccurrence (LLong.of_int didChangeStateFrom) (LLong.of_int to_)
let swipeActionForDeletingRowAtIndexPath x self = msg_send ~self ~cmd:(selector "swipeActionForDeletingRowAtIndexPath:") ~typ:(id @-> returning id) x
let tableFooterView self = msg_send ~self ~cmd:(selector "tableFooterView") ~typ:(returning id)
let tableHeaderBackgroundColor self = msg_send ~self ~cmd:(selector "tableHeaderBackgroundColor") ~typ:(returning id)
let tableHeaderView self = msg_send ~self ~cmd:(selector "tableHeaderView") ~typ:(returning id)
let tableHeaderViewShouldAutoHide self = msg_send ~self ~cmd:(selector "tableHeaderViewShouldAutoHide") ~typ:(returning bool)
let targetForAction x ~withSender self = msg_send ~self ~cmd:(selector "targetForAction:withSender:") ~typ:(_SEL @-> id @-> returning id) x withSender
let tintColorDidChange self = msg_send ~self ~cmd:(selector "tintColorDidChange") ~typ:(returning void)
let touchesBegan x ~withEvent self = msg_send ~self ~cmd:(selector "touchesBegan:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let touchesCancelled x ~withEvent self = msg_send ~self ~cmd:(selector "touchesCancelled:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let touchesEnded x ~withEvent self = msg_send ~self ~cmd:(selector "touchesEnded:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let touchesMoved x ~withEvent self = msg_send ~self ~cmd:(selector "touchesMoved:withEvent:") ~typ:(id @-> id @-> returning void) x withEvent
let touchesShouldCancelInContentView x self = msg_send ~self ~cmd:(selector "touchesShouldCancelInContentView:") ~typ:(id @-> returning bool) x
let traitCollectionDidChange x self = msg_send ~self ~cmd:(selector "traitCollectionDidChange:") ~typ:(id @-> returning void) x
let unhighlightRowAtIndexPath x ~animated self = msg_send ~self ~cmd:(selector "unhighlightRowAtIndexPath:animated:") ~typ:(id @-> bool @-> returning void) x animated
let usesVariableMargins self = msg_send ~self ~cmd:(selector "usesVariableMargins") ~typ:(returning bool)
let visibleCells self = msg_send ~self ~cmd:(selector "visibleCells") ~typ:(returning id)
let willMoveToSuperview x self = msg_send ~self ~cmd:(selector "willMoveToSuperview:") ~typ:(id @-> returning void) x