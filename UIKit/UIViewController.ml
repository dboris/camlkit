(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation
open CoreText

(** Apple docs: {{:https://developer.apple.com/documentation/uikit/uiviewcontroller?language=objc}UIViewController} *)

let self = get_class "UIViewController"

let accessibilityIdentifier self = msg_send ~self ~cmd:(selector "accessibilityIdentifier") ~typ:(returning id)
let accessibilityLargeTextDidChange self = msg_send ~self ~cmd:(selector "accessibilityLargeTextDidChange") ~typ:(returning void)
let actionSheetPresentationController self = msg_send ~self ~cmd:(selector "actionSheetPresentationController") ~typ:(returning id)
let addChildViewController x self = msg_send ~self ~cmd:(selector "addChildViewController:") ~typ:(id @-> returning void) x
let addKeyCommand x self = msg_send ~self ~cmd:(selector "addKeyCommand:") ~typ:(id @-> returning void) x
let additionalSafeAreaInsets self = msg_send_stret ~self ~cmd:(selector "additionalSafeAreaInsets") ~typ:(returning UIEdgeInsets.t) ~return_type:UIEdgeInsets.t
let afterAppearanceBlock self = msg_send ~self ~cmd:(selector "afterAppearanceBlock") ~typ:(returning (ptr void))
let allowedChildViewControllersForUnwindingFromSource x self = msg_send ~self ~cmd:(selector "allowedChildViewControllersForUnwindingFromSource:") ~typ:(id @-> returning id) x
let appearanceTransitionsAreDisabled self = msg_send ~self ~cmd:(selector "appearanceTransitionsAreDisabled") ~typ:(returning bool)
let applicationDidResume self = msg_send ~self ~cmd:(selector "applicationDidResume") ~typ:(returning void)
let applicationFinishedRestoringState self = msg_send ~self ~cmd:(selector "applicationFinishedRestoringState") ~typ:(returning void)
let applicationWantsViewsToDisappear self = msg_send ~self ~cmd:(selector "applicationWantsViewsToDisappear") ~typ:(returning void)
let applicationWillSuspend self = msg_send ~self ~cmd:(selector "applicationWillSuspend") ~typ:(returning void)
let attentionClassDumpUser x ~yesItsUsAgain ~althoughSwizzlingAndOverridingPrivateMethodsIsFun ~itWasntMuchFunWhenYourAppStoppedWorking ~pleaseRefrainFromDoingSoInTheFutureOkayThanksBye self = msg_send ~self ~cmd:(selector "attentionClassDumpUser:yesItsUsAgain:althoughSwizzlingAndOverridingPrivateMethodsIsFun:itWasntMuchFunWhenYourAppStoppedWorking:pleaseRefrainFromDoingSoInTheFutureOkayThanksBye:") ~typ:(id @-> id @-> id @-> id @-> id @-> returning void) x yesItsUsAgain althoughSwizzlingAndOverridingPrivateMethodsIsFun itWasntMuchFunWhenYourAppStoppedWorking pleaseRefrainFromDoingSoInTheFutureOkayThanksBye
let automaticallyAdjustsScrollViewInsets self = msg_send ~self ~cmd:(selector "automaticallyAdjustsScrollViewInsets") ~typ:(returning bool)
let automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers self = msg_send ~self ~cmd:(selector "automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers") ~typ:(returning bool)
let autorelease self = msg_send ~self ~cmd:(selector "autorelease") ~typ:(returning id)
let autoresizeArchivedView self = msg_send ~self ~cmd:(selector "autoresizeArchivedView") ~typ:(returning void)
let autoresizesArchivedViewToFullSize self = msg_send ~self ~cmd:(selector "autoresizesArchivedViewToFullSize") ~typ:(returning bool)
let awakeFromNib self = msg_send ~self ~cmd:(selector "awakeFromNib") ~typ:(returning void)
let beginAppearanceTransition x ~animated self = msg_send ~self ~cmd:(selector "beginAppearanceTransition:animated:") ~typ:(bool @-> bool @-> returning void) x animated
let beginRequestWithExtensionContext x self = msg_send ~self ~cmd:(selector "beginRequestWithExtensionContext:") ~typ:(id @-> returning void) x
let bottomLayoutGuide self = msg_send ~self ~cmd:(selector "bottomLayoutGuide") ~typ:(returning id)
let canHandleSnapbackIdentifier x ~animated self = msg_send ~self ~cmd:(selector "canHandleSnapbackIdentifier:animated:") ~typ:(id @-> bool @-> returning bool) x animated
let canPerformAction x ~withSender self = msg_send ~self ~cmd:(selector "canPerformAction:withSender:") ~typ:(_SEL @-> id @-> returning bool) x withSender
let canPerformUnwindSegueAction x ~fromViewController ~sender self = msg_send ~self ~cmd:(selector "canPerformUnwindSegueAction:fromViewController:sender:") ~typ:(_SEL @-> id @-> id @-> returning bool) x fromViewController sender
let canPerformUnwindSegueAction' x ~fromViewController ~withSender self = msg_send ~self ~cmd:(selector "canPerformUnwindSegueAction:fromViewController:withSender:") ~typ:(_SEL @-> id @-> id @-> returning bool) x fromViewController withSender
let cancelBeginAppearanceTransition self = msg_send ~self ~cmd:(selector "cancelBeginAppearanceTransition") ~typ:(returning void)
let childModalViewController self = msg_send ~self ~cmd:(selector "childModalViewController") ~typ:(returning id)
let childViewControllerContainingSegueSource x self = msg_send ~self ~cmd:(selector "childViewControllerContainingSegueSource:") ~typ:(id @-> returning id) x
let childViewControllerForHomeIndicatorAutoHidden self = msg_send ~self ~cmd:(selector "childViewControllerForHomeIndicatorAutoHidden") ~typ:(returning id)
let childViewControllerForPointerLock self = msg_send ~self ~cmd:(selector "childViewControllerForPointerLock") ~typ:(returning id)
let childViewControllerForScreenEdgesDeferringSystemGestures self = msg_send ~self ~cmd:(selector "childViewControllerForScreenEdgesDeferringSystemGestures") ~typ:(returning id)
let childViewControllerForStatusBarHidden self = msg_send ~self ~cmd:(selector "childViewControllerForStatusBarHidden") ~typ:(returning id)
let childViewControllerForStatusBarStyle self = msg_send ~self ~cmd:(selector "childViewControllerForStatusBarStyle") ~typ:(returning id)
let childViewControllerForTouchBar self = msg_send ~self ~cmd:(selector "childViewControllerForTouchBar") ~typ:(returning id)
let childViewControllerForUserInterfaceStyle self = msg_send ~self ~cmd:(selector "childViewControllerForUserInterfaceStyle") ~typ:(returning id)
let childViewControllerForWhitePointAdaptivityStyle self = msg_send ~self ~cmd:(selector "childViewControllerForWhitePointAdaptivityStyle") ~typ:(returning id)
let childViewControllers self = msg_send ~self ~cmd:(selector "childViewControllers") ~typ:(returning id)
let childViewControllersCount self = msg_send ~self ~cmd:(selector "childViewControllersCount") ~typ:(returning ullong)
let collapseSecondaryViewController x ~forSplitViewController self = msg_send ~self ~cmd:(selector "collapseSecondaryViewController:forSplitViewController:") ~typ:(id @-> id @-> returning void) x forSplitViewController
let containmentSupport self = msg_send ~self ~cmd:(selector "containmentSupport") ~typ:(returning bool)
let contentAlpha self = msg_send ~self ~cmd:(selector "contentAlpha") ~typ:(returning double)
let contentScrollView self = msg_send ~self ~cmd:(selector "contentScrollView") ~typ:(returning id)
let contentScrollViewForEdge x self = msg_send ~self ~cmd:(selector "contentScrollViewForEdge:") ~typ:(ullong @-> returning id) (ULLong.of_int x)
let contentSizeForViewInPopover self = msg_send_stret ~self ~cmd:(selector "contentSizeForViewInPopover") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let contentSizeForViewInPopoverView self = msg_send_stret ~self ~cmd:(selector "contentSizeForViewInPopoverView") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let contentVisibility self = msg_send ~self ~cmd:(selector "contentVisibility") ~typ:(returning llong)
let currentAction self = msg_send ~self ~cmd:(selector "currentAction") ~typ:(returning id)
let customNavigationInteractiveTransitionDuration self = msg_send ~self ~cmd:(selector "customNavigationInteractiveTransitionDuration") ~typ:(returning double)
let customNavigationInteractiveTransitionPercentComplete self = msg_send ~self ~cmd:(selector "customNavigationInteractiveTransitionPercentComplete") ~typ:(returning double)
let customTransitioningView self = msg_send ~self ~cmd:(selector "customTransitioningView") ~typ:(returning id)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let defaultPNGName self = msg_send ~self ~cmd:(selector "defaultPNGName") ~typ:(returning id)
let definesPresentationContext self = msg_send ~self ~cmd:(selector "definesPresentationContext") ~typ:(returning bool)
let didAnimateFirstHalfOfRotationToInterfaceOrientation x self = msg_send ~self ~cmd:(selector "didAnimateFirstHalfOfRotationToInterfaceOrientation:") ~typ:(llong @-> returning void) (LLong.of_int x)
let didMoveToParentViewController x self = msg_send ~self ~cmd:(selector "didMoveToParentViewController:") ~typ:(id @-> returning void) x
let didReceiveMemoryWarning self = msg_send ~self ~cmd:(selector "didReceiveMemoryWarning") ~typ:(returning void)
let didRotateFromInterfaceOrientation x self = msg_send ~self ~cmd:(selector "didRotateFromInterfaceOrientation:") ~typ:(llong @-> returning void) (LLong.of_int x)
let didUpdateFocusInContext x ~withAnimationCoordinator self = msg_send ~self ~cmd:(selector "didUpdateFocusInContext:withAnimationCoordinator:") ~typ:(id @-> id @-> returning void) x withAnimationCoordinator
let disablesAutomaticKeyboardDismissal self = msg_send ~self ~cmd:(selector "disablesAutomaticKeyboardDismissal") ~typ:(returning bool)
let dismissModalViewControllerAnimated x self = msg_send ~self ~cmd:(selector "dismissModalViewControllerAnimated:") ~typ:(bool @-> returning void) x
let dismissModalViewControllerWithTransition x self = msg_send ~self ~cmd:(selector "dismissModalViewControllerWithTransition:") ~typ:(int @-> returning void) x
let dismissMoviePlayerViewControllerAnimated self = msg_send ~self ~cmd:(selector "dismissMoviePlayerViewControllerAnimated") ~typ:(returning void)
let dismissViewControllerAnimated x ~completion self = msg_send ~self ~cmd:(selector "dismissViewControllerAnimated:completion:") ~typ:(bool @-> (ptr void) @-> returning void) x completion
let dismissViewControllerWithTransition x ~completion self = msg_send ~self ~cmd:(selector "dismissViewControllerWithTransition:completion:") ~typ:(int @-> (ptr void) @-> returning void) x completion
let dropShadowView self = msg_send ~self ~cmd:(selector "dropShadowView") ~typ:(returning id)
let durationForTransition x self = msg_send ~self ~cmd:(selector "durationForTransition:") ~typ:(int @-> returning double) x
let edgesForExtendedLayout self = msg_send ~self ~cmd:(selector "edgesForExtendedLayout") ~typ:(returning ullong)
let editButtonItem self = msg_send ~self ~cmd:(selector "editButtonItem") ~typ:(returning id)
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning void) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let endAppearanceTransition self = msg_send ~self ~cmd:(selector "endAppearanceTransition") ~typ:(returning void)
let extendedLayoutIncludesOpaqueBars self = msg_send ~self ~cmd:(selector "extendedLayoutIncludesOpaqueBars") ~typ:(returning bool)
let extensionContext self = msg_send ~self ~cmd:(selector "extensionContext") ~typ:(returning id)
let focusGroupIdentifier self = msg_send ~self ~cmd:(selector "focusGroupIdentifier") ~typ:(returning id)
let focusItemContainer self = msg_send ~self ~cmd:(selector "focusItemContainer") ~typ:(returning id)
let forceUnloadView self = msg_send ~self ~cmd:(selector "forceUnloadView") ~typ:(returning void)
let formSheetSize self = msg_send_stret ~self ~cmd:(selector "formSheetSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let getRotationContentSettings x ~forWindow self = msg_send ~self ~cmd:(selector "getRotationContentSettings:forWindow:") ~typ:((ptr void) @-> id @-> returning void) x forWindow
let hidesBottomBarWhenPushed self = msg_send ~self ~cmd:(selector "hidesBottomBarWhenPushed") ~typ:(returning bool)
let ignoresParentMargins self = msg_send ~self ~cmd:(selector "ignoresParentMargins") ~typ:(returning bool)
let inExplicitAppearanceTransition self = msg_send ~self ~cmd:(selector "inExplicitAppearanceTransition") ~typ:(returning bool)
let infoCardThemeChanged self = msg_send ~self ~cmd:(selector "infoCardThemeChanged") ~typ:(returning void)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithNibName x ~bundle self = msg_send ~self ~cmd:(selector "initWithNibName:bundle:") ~typ:(id @-> id @-> returning id) x bundle
let interfaceOrientation self = msg_send ~self ~cmd:(selector "interfaceOrientation") ~typ:(returning llong)
let invalidate self = msg_send ~self ~cmd:(selector "invalidate") ~typ:(returning id)
let isBeingDismissed self = msg_send ~self ~cmd:(selector "isBeingDismissed") ~typ:(returning bool)
let isBeingPresented self = msg_send ~self ~cmd:(selector "isBeingPresented") ~typ:(returning bool)
let isEditing self = msg_send ~self ~cmd:(selector "isEditing") ~typ:(returning bool)
let isFinishingModalTransition self = msg_send ~self ~cmd:(selector "isFinishingModalTransition") ~typ:(returning bool)
let isInAnimatedVCTransition self = msg_send ~self ~cmd:(selector "isInAnimatedVCTransition") ~typ:(returning bool)
let isInWillRotateCallback self = msg_send ~self ~cmd:(selector "isInWillRotateCallback") ~typ:(returning bool)
let isModalInPopover self = msg_send ~self ~cmd:(selector "isModalInPopover") ~typ:(returning bool)
let isModalInPresentation self = msg_send ~self ~cmd:(selector "isModalInPresentation") ~typ:(returning bool)
let isMovingFromParentViewController self = msg_send ~self ~cmd:(selector "isMovingFromParentViewController") ~typ:(returning bool)
let isMovingToParentViewController self = msg_send ~self ~cmd:(selector "isMovingToParentViewController") ~typ:(returning bool)
let isPerformingModalTransition self = msg_send ~self ~cmd:(selector "isPerformingModalTransition") ~typ:(returning bool)
let isSettingAppearState self = msg_send ~self ~cmd:(selector "isSettingAppearState") ~typ:(returning bool)
let isSheet self = msg_send ~self ~cmd:(selector "isSheet") ~typ:(returning bool)
let isUsingLegacyContainment self = msg_send ~self ~cmd:(selector "isUsingLegacyContainment") ~typ:(returning bool)
let isViewControllerModallyPresented self = msg_send ~self ~cmd:(selector "isViewControllerModallyPresented") ~typ:(returning bool)
let isViewLoaded self = msg_send ~self ~cmd:(selector "isViewLoaded") ~typ:(returning bool)
let keyCommands self = msg_send ~self ~cmd:(selector "keyCommands") ~typ:(returning id)
let leadingPreviewAction self = msg_send ~self ~cmd:(selector "leadingPreviewAction") ~typ:(returning id)
let loadView self = msg_send ~self ~cmd:(selector "loadView") ~typ:(returning void)
let loadViewIfNeeded self = msg_send ~self ~cmd:(selector "loadViewIfNeeded") ~typ:(returning void)
let loadViewIfRequired self = msg_send ~self ~cmd:(selector "loadViewIfRequired") ~typ:(returning void)
let modalInPopover self = msg_send ~self ~cmd:(selector "modalInPopover") ~typ:(returning bool)
let modalPresentationCapturesStatusBarAppearance self = msg_send ~self ~cmd:(selector "modalPresentationCapturesStatusBarAppearance") ~typ:(returning bool)
let modalPresentationStyle self = msg_send ~self ~cmd:(selector "modalPresentationStyle") ~typ:(returning llong)
let modalTransitionStyle self = msg_send ~self ~cmd:(selector "modalTransitionStyle") ~typ:(returning llong)
let modalViewController self = msg_send ~self ~cmd:(selector "modalViewController") ~typ:(returning id)
let moreListImage self = msg_send ~self ~cmd:(selector "moreListImage") ~typ:(returning id)
let moreListSelectedImage self = msg_send ~self ~cmd:(selector "moreListSelectedImage") ~typ:(returning id)
let moreListTableCell self = msg_send ~self ~cmd:(selector "moreListTableCell") ~typ:(returning id)
let mutableChildViewControllers self = msg_send ~self ~cmd:(selector "mutableChildViewControllers") ~typ:(returning id)
let navigationController self = msg_send ~self ~cmd:(selector "navigationController") ~typ:(returning id)
let navigationInsetAdjustment self = msg_send ~self ~cmd:(selector "navigationInsetAdjustment") ~typ:(returning id)
let navigationItem self = msg_send ~self ~cmd:(selector "navigationItem") ~typ:(returning id)
let needsDidMoveCleanup self = msg_send ~self ~cmd:(selector "needsDidMoveCleanup") ~typ:(returning bool)
let nextResponder self = msg_send ~self ~cmd:(selector "nextResponder") ~typ:(returning id)
let nibBundle self = msg_send ~self ~cmd:(selector "nibBundle") ~typ:(returning id)
let nibName self = msg_send ~self ~cmd:(selector "nibName") ~typ:(returning id)
let overrideTraitCollection self = msg_send ~self ~cmd:(selector "overrideTraitCollection") ~typ:(returning id)
let overrideTraitCollectionForChildViewController x self = msg_send ~self ~cmd:(selector "overrideTraitCollectionForChildViewController:") ~typ:(id @-> returning id) x
let overrideUserInterfaceStyle self = msg_send ~self ~cmd:(selector "overrideUserInterfaceStyle") ~typ:(returning llong)
let parentFocusEnvironment self = msg_send ~self ~cmd:(selector "parentFocusEnvironment") ~typ:(returning id)
let parentModalViewController self = msg_send ~self ~cmd:(selector "parentModalViewController") ~typ:(returning id)
let parentViewController self = msg_send ~self ~cmd:(selector "parentViewController") ~typ:(returning id)
let performSegueWithIdentifier x ~sender self = msg_send ~self ~cmd:(selector "performSegueWithIdentifier:sender:") ~typ:(id @-> id @-> returning void) x sender
let performsActionsWhilePresentingModally self = msg_send ~self ~cmd:(selector "performsActionsWhilePresentingModally") ~typ:(returning bool)
let popoverPresentationController self = msg_send ~self ~cmd:(selector "popoverPresentationController") ~typ:(returning id)
let popoverPresentationController' x self = msg_send ~self ~cmd:(selector "popoverPresentationController:") ~typ:(bool @-> returning id) x
let preferredContentSize self = msg_send_stret ~self ~cmd:(selector "preferredContentSize") ~typ:(returning CGSize.t) ~return_type:CGSize.t
let preferredContentSizeDidChangeForChildContentContainer x self = msg_send ~self ~cmd:(selector "preferredContentSizeDidChangeForChildContentContainer:") ~typ:(id @-> returning void) x
let preferredFocusEnvironments self = msg_send ~self ~cmd:(selector "preferredFocusEnvironments") ~typ:(returning id)
let preferredFocusedItem self = msg_send ~self ~cmd:(selector "preferredFocusedItem") ~typ:(returning id)
let preferredFocusedView self = msg_send ~self ~cmd:(selector "preferredFocusedView") ~typ:(returning id)
let preferredInterfaceOrientationForPresentation self = msg_send ~self ~cmd:(selector "preferredInterfaceOrientationForPresentation") ~typ:(returning llong)
let preferredScreenEdgesDeferringSystemGestures self = msg_send ~self ~cmd:(selector "preferredScreenEdgesDeferringSystemGestures") ~typ:(returning ullong)
let preferredStatusBarStyle self = msg_send ~self ~cmd:(selector "preferredStatusBarStyle") ~typ:(returning llong)
let preferredStatusBarUpdateAnimation self = msg_send ~self ~cmd:(selector "preferredStatusBarUpdateAnimation") ~typ:(returning llong)
let preferredUserInterfaceStyle self = msg_send ~self ~cmd:(selector "preferredUserInterfaceStyle") ~typ:(returning llong)
let preferredWhitePointAdaptivityStyle self = msg_send ~self ~cmd:(selector "preferredWhitePointAdaptivityStyle") ~typ:(returning llong)
let prefersHomeIndicatorAutoHidden self = msg_send ~self ~cmd:(selector "prefersHomeIndicatorAutoHidden") ~typ:(returning bool)
let prefersPointerLocked self = msg_send ~self ~cmd:(selector "prefersPointerLocked") ~typ:(returning bool)
let prefersStatusBarHidden self = msg_send ~self ~cmd:(selector "prefersStatusBarHidden") ~typ:(returning bool)
let prepareForSegue x ~sender self = msg_send ~self ~cmd:(selector "prepareForSegue:sender:") ~typ:(id @-> id @-> returning void) x sender
let presentModalViewController x ~animated self = msg_send ~self ~cmd:(selector "presentModalViewController:animated:") ~typ:(id @-> bool @-> returning void) x animated
let presentModalViewController' x ~withTransition self = msg_send ~self ~cmd:(selector "presentModalViewController:withTransition:") ~typ:(id @-> int @-> returning void) x withTransition
let presentMoviePlayerViewControllerAnimated x self = msg_send ~self ~cmd:(selector "presentMoviePlayerViewControllerAnimated:") ~typ:(id @-> returning void) x
let presentViewController x ~animated ~completion self = msg_send ~self ~cmd:(selector "presentViewController:animated:completion:") ~typ:(id @-> bool @-> (ptr void) @-> returning void) x animated completion
let presentViewController' x ~withTransition ~completion self = msg_send ~self ~cmd:(selector "presentViewController:withTransition:completion:") ~typ:(id @-> int @-> (ptr void) @-> returning void) x withTransition completion
let presentationController self = msg_send ~self ~cmd:(selector "presentationController") ~typ:(returning id)
let presentedViewController self = msg_send ~self ~cmd:(selector "presentedViewController") ~typ:(returning id)
let presentingViewController self = msg_send ~self ~cmd:(selector "presentingViewController") ~typ:(returning id)
let previewActionItems self = msg_send ~self ~cmd:(selector "previewActionItems") ~typ:(returning id)
let previewActions self = msg_send ~self ~cmd:(selector "previewActions") ~typ:(returning id)
let previewMenuItems self = msg_send ~self ~cmd:(selector "previewMenuItems") ~typ:(returning id)
let providesPresentationContextTransitionStyle self = msg_send ~self ~cmd:(selector "providesPresentationContextTransitionStyle") ~typ:(returning bool)
let purgeMemoryForReason x self = msg_send ~self ~cmd:(selector "purgeMemoryForReason:") ~typ:(int @-> returning void) x
let registerForPreviewingWithDelegate x ~sourceView self = msg_send ~self ~cmd:(selector "registerForPreviewingWithDelegate:sourceView:") ~typ:(id @-> id @-> returning id) x sourceView
let registerPreviewSourceView x ~previewingDelegate self = msg_send ~self ~cmd:(selector "registerPreviewSourceView:previewingDelegate:") ~typ:(id @-> id @-> returning void) x previewingDelegate
let release self = msg_send ~self ~cmd:(selector "release") ~typ:(returning void)
let removeChildViewController x self = msg_send ~self ~cmd:(selector "removeChildViewController:") ~typ:(id @-> returning void) x
let removeChildViewController' x ~notifyDidMove self = msg_send ~self ~cmd:(selector "removeChildViewController:notifyDidMove:") ~typ:(id @-> bool @-> returning void) x notifyDidMove
let removeFromParentViewController self = msg_send ~self ~cmd:(selector "removeFromParentViewController") ~typ:(returning void)
let removeKeyCommand x self = msg_send ~self ~cmd:(selector "removeKeyCommand:") ~typ:(id @-> returning void) x
let restorationClass self = msg_send ~self ~cmd:(selector "restorationClass") ~typ:(returning _Class)
let restoreUserActivityState x self = msg_send ~self ~cmd:(selector "restoreUserActivityState:") ~typ:(id @-> returning void) x
let restoresFocusAfterTransition self = msg_send ~self ~cmd:(selector "restoresFocusAfterTransition") ~typ:(returning bool)
let retain self = msg_send ~self ~cmd:(selector "retain") ~typ:(returning id)
let retainCount self = msg_send ~self ~cmd:(selector "retainCount") ~typ:(returning ullong)
let rotatingContentViewForWindow x self = msg_send ~self ~cmd:(selector "rotatingContentViewForWindow:") ~typ:(id @-> returning id) x
let rotatingFooterView self = msg_send ~self ~cmd:(selector "rotatingFooterView") ~typ:(returning id)
let rotatingFooterViewForWindow x self = msg_send ~self ~cmd:(selector "rotatingFooterViewForWindow:") ~typ:(id @-> returning id) x
let rotatingHeaderView self = msg_send ~self ~cmd:(selector "rotatingHeaderView") ~typ:(returning id)
let rotatingHeaderViewForWindow x self = msg_send ~self ~cmd:(selector "rotatingHeaderViewForWindow:") ~typ:(id @-> returning id) x
let rotatingSnapshotViewForWindow x self = msg_send ~self ~cmd:(selector "rotatingSnapshotViewForWindow:") ~typ:(id @-> returning id) x
let safeAreaLayoutGuide self = msg_send ~self ~cmd:(selector "safeAreaLayoutGuide") ~typ:(returning id)
let savedHeaderSuperview self = msg_send ~self ~cmd:(selector "savedHeaderSuperview") ~typ:(returning id)
let searchBarHidNavBar self = msg_send ~self ~cmd:(selector "searchBarHidNavBar") ~typ:(returning bool)
let searchDisplayController self = msg_send ~self ~cmd:(selector "searchDisplayController") ~typ:(returning id)
let segueForUnwindingToViewController x ~fromViewController ~identifier self = msg_send ~self ~cmd:(selector "segueForUnwindingToViewController:fromViewController:identifier:") ~typ:(id @-> id @-> id @-> returning id) x fromViewController identifier
let separateSecondaryViewControllerForSplitViewController x self = msg_send ~self ~cmd:(selector "separateSecondaryViewControllerForSplitViewController:") ~typ:(id @-> returning id) x
let setAccessibilityIdentifier x self = msg_send ~self ~cmd:(selector "setAccessibilityIdentifier:") ~typ:(id @-> returning void) x
let setAdditionalSafeAreaInsets x self = msg_send ~self ~cmd:(selector "setAdditionalSafeAreaInsets:") ~typ:(UIEdgeInsets.t @-> returning void) x
let setAfterAppearanceBlock x self = msg_send ~self ~cmd:(selector "setAfterAppearanceBlock:") ~typ:((ptr void) @-> returning void) x
let setAppearanceTransitionsAreDisabled x self = msg_send ~self ~cmd:(selector "setAppearanceTransitionsAreDisabled:") ~typ:(bool @-> returning void) x
let setAutomaticallyAdjustsScrollViewInsets x self = msg_send ~self ~cmd:(selector "setAutomaticallyAdjustsScrollViewInsets:") ~typ:(bool @-> returning void) x
let setAutoresizesArchivedViewToFullSize x self = msg_send ~self ~cmd:(selector "setAutoresizesArchivedViewToFullSize:") ~typ:(bool @-> returning void) x
let setChildModalViewController x self = msg_send ~self ~cmd:(selector "setChildModalViewController:") ~typ:(id @-> returning void) x
let setContainmentSupport x self = msg_send ~self ~cmd:(selector "setContainmentSupport:") ~typ:(bool @-> returning void) x
let setContentAlpha x self = msg_send ~self ~cmd:(selector "setContentAlpha:") ~typ:(double @-> returning void) x
let setContentScrollView x ~forEdge self = msg_send ~self ~cmd:(selector "setContentScrollView:forEdge:") ~typ:(id @-> ullong @-> returning void) x (ULLong.of_int forEdge)
let setContentSizeForViewInPopover x self = msg_send ~self ~cmd:(selector "setContentSizeForViewInPopover:") ~typ:(CGSize.t @-> returning void) x
let setContentVisibility x self = msg_send ~self ~cmd:(selector "setContentVisibility:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setCustomNavigationInteractiveTransitionDuration x self = msg_send ~self ~cmd:(selector "setCustomNavigationInteractiveTransitionDuration:") ~typ:(double @-> returning void) x
let setCustomNavigationInteractiveTransitionPercentComplete x self = msg_send ~self ~cmd:(selector "setCustomNavigationInteractiveTransitionPercentComplete:") ~typ:(double @-> returning void) x
let setCustomTransitioningView x self = msg_send ~self ~cmd:(selector "setCustomTransitioningView:") ~typ:(id @-> returning void) x
let setDefinesPresentationContext x self = msg_send ~self ~cmd:(selector "setDefinesPresentationContext:") ~typ:(bool @-> returning void) x
let setDisablesAutomaticKeyboardDismissal x self = msg_send ~self ~cmd:(selector "setDisablesAutomaticKeyboardDismissal:") ~typ:(bool @-> returning void) x
let setDropShadowView x self = msg_send ~self ~cmd:(selector "setDropShadowView:") ~typ:(id @-> returning void) x
let setEdgesForExtendedLayout x self = msg_send ~self ~cmd:(selector "setEdgesForExtendedLayout:") ~typ:(ullong @-> returning void) (ULLong.of_int x)
let setEditing x self = msg_send ~self ~cmd:(selector "setEditing:") ~typ:(bool @-> returning void) x
let setEditing' x ~animated self = msg_send ~self ~cmd:(selector "setEditing:animated:") ~typ:(bool @-> bool @-> returning void) x animated
let setExtendedLayoutIncludesOpaqueBars x self = msg_send ~self ~cmd:(selector "setExtendedLayoutIncludesOpaqueBars:") ~typ:(bool @-> returning void) x
let setFinishingModalTransition x self = msg_send ~self ~cmd:(selector "setFinishingModalTransition:") ~typ:(bool @-> returning void) x
let setFocusGroupIdentifier x self = msg_send ~self ~cmd:(selector "setFocusGroupIdentifier:") ~typ:(id @-> returning void) x
let setFormSheetSize x self = msg_send ~self ~cmd:(selector "setFormSheetSize:") ~typ:(CGSize.t @-> returning void) x
let setHidesBottomBarWhenPushed x self = msg_send ~self ~cmd:(selector "setHidesBottomBarWhenPushed:") ~typ:(bool @-> returning void) x
let setIgnoresParentMargins x self = msg_send ~self ~cmd:(selector "setIgnoresParentMargins:") ~typ:(bool @-> returning void) x
let setInAnimatedVCTransition x self = msg_send ~self ~cmd:(selector "setInAnimatedVCTransition:") ~typ:(bool @-> returning void) x
let setInWillRotateCallback x self = msg_send ~self ~cmd:(selector "setInWillRotateCallback:") ~typ:(bool @-> returning void) x
let setInterfaceOrientation x self = msg_send ~self ~cmd:(selector "setInterfaceOrientation:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setIsSheet x self = msg_send ~self ~cmd:(selector "setIsSheet:") ~typ:(bool @-> returning void) x
let setModalInPopover x self = msg_send ~self ~cmd:(selector "setModalInPopover:") ~typ:(bool @-> returning void) x
let setModalInPresentation x self = msg_send ~self ~cmd:(selector "setModalInPresentation:") ~typ:(bool @-> returning void) x
let setModalPresentationCapturesStatusBarAppearance x self = msg_send ~self ~cmd:(selector "setModalPresentationCapturesStatusBarAppearance:") ~typ:(bool @-> returning void) x
let setModalPresentationStyle x self = msg_send ~self ~cmd:(selector "setModalPresentationStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setModalTransitionStyle x self = msg_send ~self ~cmd:(selector "setModalTransitionStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setMutableChildViewControllers x self = msg_send ~self ~cmd:(selector "setMutableChildViewControllers:") ~typ:(id @-> returning void) x
let setNavigationInsetAdjustment x self = msg_send ~self ~cmd:(selector "setNavigationInsetAdjustment:") ~typ:(id @-> returning void) x
let setNeedsDidMoveCleanup x self = msg_send ~self ~cmd:(selector "setNeedsDidMoveCleanup:") ~typ:(bool @-> returning void) x
let setNeedsFocusUpdate self = msg_send ~self ~cmd:(selector "setNeedsFocusUpdate") ~typ:(returning void)
let setNeedsStatusBarAppearanceUpdate self = msg_send ~self ~cmd:(selector "setNeedsStatusBarAppearanceUpdate") ~typ:(returning void)
let setNeedsTouchBarUpdate self = msg_send ~self ~cmd:(selector "setNeedsTouchBarUpdate") ~typ:(returning void)
let setNeedsUpdateOfHomeIndicatorAutoHidden self = msg_send ~self ~cmd:(selector "setNeedsUpdateOfHomeIndicatorAutoHidden") ~typ:(returning void)
let setNeedsUpdateOfPrefersPointerLocked self = msg_send ~self ~cmd:(selector "setNeedsUpdateOfPrefersPointerLocked") ~typ:(returning void)
let setNeedsUpdateOfScreenEdgesDeferringSystemGestures self = msg_send ~self ~cmd:(selector "setNeedsUpdateOfScreenEdgesDeferringSystemGestures") ~typ:(returning void)
let setNeedsUserInterfaceAppearanceUpdate self = msg_send ~self ~cmd:(selector "setNeedsUserInterfaceAppearanceUpdate") ~typ:(returning void)
let setNeedsWhitePointAdaptivityStyleUpdate self = msg_send ~self ~cmd:(selector "setNeedsWhitePointAdaptivityStyleUpdate") ~typ:(returning void)
let setNibBundle x self = msg_send ~self ~cmd:(selector "setNibBundle:") ~typ:(id @-> returning void) x
let setNibName x self = msg_send ~self ~cmd:(selector "setNibName:") ~typ:(id @-> returning void) x
let setOverrideTraitCollection x self = msg_send ~self ~cmd:(selector "setOverrideTraitCollection:") ~typ:(id @-> returning void) x
let setOverrideTraitCollection' x ~forChildViewController self = msg_send ~self ~cmd:(selector "setOverrideTraitCollection:forChildViewController:") ~typ:(id @-> id @-> returning void) x forChildViewController
let setOverrideUserInterfaceStyle x self = msg_send ~self ~cmd:(selector "setOverrideUserInterfaceStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setParentModalViewController x self = msg_send ~self ~cmd:(selector "setParentModalViewController:") ~typ:(id @-> returning void) x
let setParentViewController x self = msg_send ~self ~cmd:(selector "setParentViewController:") ~typ:(id @-> returning void) x
let setPerformingModalTransition x self = msg_send ~self ~cmd:(selector "setPerformingModalTransition:") ~typ:(bool @-> returning void) x
let setPreferredContentSize x self = msg_send ~self ~cmd:(selector "setPreferredContentSize:") ~typ:(CGSize.t @-> returning void) x
let setPreferredFocusedItem x self = msg_send ~self ~cmd:(selector "setPreferredFocusedItem:") ~typ:(id @-> returning void) x
let setPreferredFocusedView x self = msg_send ~self ~cmd:(selector "setPreferredFocusedView:") ~typ:(id @-> returning void) x
let setPreferredUserInterfaceStyle x self = msg_send ~self ~cmd:(selector "setPreferredUserInterfaceStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setProvidesPresentationContextTransitionStyle x self = msg_send ~self ~cmd:(selector "setProvidesPresentationContextTransitionStyle:") ~typ:(bool @-> returning void) x
let setRestorationClass x self = msg_send ~self ~cmd:(selector "setRestorationClass:") ~typ:(_Class @-> returning void) x
let setRestoresFocusAfterTransition x self = msg_send ~self ~cmd:(selector "setRestoresFocusAfterTransition:") ~typ:(bool @-> returning void) x
let setSearchBarHidNavBar x self = msg_send ~self ~cmd:(selector "setSearchBarHidNavBar:") ~typ:(bool @-> returning void) x
let setSearchDisplayController x self = msg_send ~self ~cmd:(selector "setSearchDisplayController:") ~typ:(id @-> returning void) x
let setShouldForceNonAnimatedTransition x self = msg_send ~self ~cmd:(selector "setShouldForceNonAnimatedTransition:") ~typ:(bool @-> returning void) x
let setStoryboardIdentifier x self = msg_send ~self ~cmd:(selector "setStoryboardIdentifier:") ~typ:(id @-> returning void) x
let setTabBarItem x self = msg_send ~self ~cmd:(selector "setTabBarItem:") ~typ:(id @-> returning void) x
let setTitle x self = msg_send ~self ~cmd:(selector "setTitle:") ~typ:(id @-> returning void) x
let setToolbarItems x self = msg_send ~self ~cmd:(selector "setToolbarItems:") ~typ:(id @-> returning void) x
let setToolbarItems' x ~animated self = msg_send ~self ~cmd:(selector "setToolbarItems:animated:") ~typ:(id @-> bool @-> returning void) x animated
let setTransitioningDelegate x self = msg_send ~self ~cmd:(selector "setTransitioningDelegate:") ~typ:(id @-> returning void) x
let setUseLegacyContainment x self = msg_send ~self ~cmd:(selector "setUseLegacyContainment:") ~typ:(bool @-> returning void) x
let setUserActivity x self = msg_send ~self ~cmd:(selector "setUserActivity:") ~typ:(id @-> returning void) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let setView x self = msg_send ~self ~cmd:(selector "setView:") ~typ:(id @-> returning void) x
let setViewRespectsSystemMinimumLayoutMargins x self = msg_send ~self ~cmd:(selector "setViewRespectsSystemMinimumLayoutMargins:") ~typ:(bool @-> returning void) x
let setWantsFullScreenLayout x self = msg_send ~self ~cmd:(selector "setWantsFullScreenLayout:") ~typ:(bool @-> returning void) x
let sheetPresentationController self = msg_send ~self ~cmd:(selector "sheetPresentationController") ~typ:(returning id)
let shouldAutomaticallyForwardAppearanceMethods self = msg_send ~self ~cmd:(selector "shouldAutomaticallyForwardAppearanceMethods") ~typ:(returning bool)
let shouldAutomaticallyForwardRotationMethods self = msg_send ~self ~cmd:(selector "shouldAutomaticallyForwardRotationMethods") ~typ:(returning bool)
let shouldAutorotate self = msg_send ~self ~cmd:(selector "shouldAutorotate") ~typ:(returning bool)
let shouldAutorotateToInterfaceOrientation x self = msg_send ~self ~cmd:(selector "shouldAutorotateToInterfaceOrientation:") ~typ:(llong @-> returning bool) (LLong.of_int x)
let shouldPerformSegueWithIdentifier x ~sender self = msg_send ~self ~cmd:(selector "shouldPerformSegueWithIdentifier:sender:") ~typ:(id @-> id @-> returning bool) x sender
let shouldUpdateFocusInContext x self = msg_send ~self ~cmd:(selector "shouldUpdateFocusInContext:") ~typ:(id @-> returning bool) x
let shouldWindowUseOnePartInterfaceRotationAnimation x self = msg_send ~self ~cmd:(selector "shouldWindowUseOnePartInterfaceRotationAnimation:") ~typ:(id @-> returning bool) x
let showDetailViewController x ~sender self = msg_send ~self ~cmd:(selector "showDetailViewController:sender:") ~typ:(id @-> id @-> returning void) x sender
let showViewController x ~sender self = msg_send ~self ~cmd:(selector "showViewController:sender:") ~typ:(id @-> id @-> returning void) x sender
let sizeForChildContentContainer x ~withParentContainerSize self = msg_send_stret ~self ~cmd:(selector "sizeForChildContentContainer:withParentContainerSize:") ~typ:(id @-> CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x withParentContainerSize
let splitViewController self = msg_send ~self ~cmd:(selector "splitViewController") ~typ:(returning id)
let storyboard self = msg_send ~self ~cmd:(selector "storyboard") ~typ:(returning id)
let storyboardCommitSegueTemplates self = msg_send ~self ~cmd:(selector "storyboardCommitSegueTemplates") ~typ:(returning id)
let storyboardIdentifier self = msg_send ~self ~cmd:(selector "storyboardIdentifier") ~typ:(returning id)
let storyboardPreviewSegueTemplates self = msg_send ~self ~cmd:(selector "storyboardPreviewSegueTemplates") ~typ:(returning id)
let storyboardPreviewingRegistrants self = msg_send ~self ~cmd:(selector "storyboardPreviewingRegistrants") ~typ:(returning id)
let storyboardSegueTemplates self = msg_send ~self ~cmd:(selector "storyboardSegueTemplates") ~typ:(returning id)
let supportedInterfaceOrientations self = msg_send ~self ~cmd:(selector "supportedInterfaceOrientations") ~typ:(returning ullong)
let systemLayoutFittingSizeDidChangeForChildContentContainer x self = msg_send ~self ~cmd:(selector "systemLayoutFittingSizeDidChangeForChildContentContainer:") ~typ:(id @-> returning void) x
let systemLayoutFittingSizeDidChangeForChildViewController x self = msg_send ~self ~cmd:(selector "systemLayoutFittingSizeDidChangeForChildViewController:") ~typ:(id @-> returning void) x
let systemMinimumLayoutMargins self = msg_send_stret ~self ~cmd:(selector "systemMinimumLayoutMargins") ~typ:(returning NSDirectionalEdgeInsets.t) ~return_type:NSDirectionalEdgeInsets.t
let tabBarController self = msg_send ~self ~cmd:(selector "tabBarController") ~typ:(returning id)
let tabBarItem self = msg_send ~self ~cmd:(selector "tabBarItem") ~typ:(returning id)
let targetViewControllerForAction x ~sender self = msg_send ~self ~cmd:(selector "targetViewControllerForAction:sender:") ~typ:(_SEL @-> id @-> returning id) x sender
let title self = msg_send ~self ~cmd:(selector "title") ~typ:(returning id)
let toolbarItems self = msg_send ~self ~cmd:(selector "toolbarItems") ~typ:(returning id)
let topLayoutGuide self = msg_send ~self ~cmd:(selector "topLayoutGuide") ~typ:(returning id)
let trailingPreviewAction self = msg_send ~self ~cmd:(selector "trailingPreviewAction") ~typ:(returning id)
let traitCollection self = msg_send ~self ~cmd:(selector "traitCollection") ~typ:(returning id)
let traitCollectionDidChange x self = msg_send ~self ~cmd:(selector "traitCollectionDidChange:") ~typ:(id @-> returning void) x
let traitCollectionForChildViewController x self = msg_send ~self ~cmd:(selector "traitCollectionForChildViewController:") ~typ:(id @-> returning id) x
let tranformForScreenOriginRotation x self = msg_send_stret ~self ~cmd:(selector "tranformForScreenOriginRotation:") ~typ:(float @-> returning CGAffineTransform.t) ~return_type:CGAffineTransform.t x
let transitionCoordinator self = msg_send ~self ~cmd:(selector "transitionCoordinator") ~typ:(returning id)
let transitionFromViewController x ~toViewController ~duration ~options ~animations ~completion self = msg_send ~self ~cmd:(selector "transitionFromViewController:toViewController:duration:options:animations:completion:") ~typ:(id @-> id @-> double @-> ullong @-> (ptr void) @-> (ptr void) @-> returning void) x toViewController duration (ULLong.of_int options) animations completion
let transitionViewShouldUseViewControllerCallbacks self = msg_send ~self ~cmd:(selector "transitionViewShouldUseViewControllerCallbacks") ~typ:(returning bool)
let transitioningDelegate self = msg_send ~self ~cmd:(selector "transitioningDelegate") ~typ:(returning id)
let unloadView self = msg_send ~self ~cmd:(selector "unloadView") ~typ:(returning void)
let unloadViewForced x self = msg_send ~self ~cmd:(selector "unloadViewForced:") ~typ:(bool @-> returning void) x
let unloadViewIfReloadable self = msg_send ~self ~cmd:(selector "unloadViewIfReloadable") ~typ:(returning void)
let unregisterForPreviewingWithContext x self = msg_send ~self ~cmd:(selector "unregisterForPreviewingWithContext:") ~typ:(id @-> returning void) x
let unregisterPreviewSourceView x self = msg_send ~self ~cmd:(selector "unregisterPreviewSourceView:") ~typ:(id @-> returning void) x
let unregisterPreviewing x self = msg_send ~self ~cmd:(selector "unregisterPreviewing:") ~typ:(id @-> returning void) x
let unwindForSegue x ~towardsViewController self = msg_send ~self ~cmd:(selector "unwindForSegue:towardsViewController:") ~typ:(id @-> id @-> returning void) x towardsViewController
let updateFocusIfNeeded self = msg_send ~self ~cmd:(selector "updateFocusIfNeeded") ~typ:(returning void)
let updateTabBarItemForViewController x self = msg_send ~self ~cmd:(selector "updateTabBarItemForViewController:") ~typ:(id @-> returning void) x
let updateTitleForViewController x self = msg_send ~self ~cmd:(selector "updateTitleForViewController:") ~typ:(id @-> returning void) x
let updateUserActivityState x self = msg_send ~self ~cmd:(selector "updateUserActivityState:") ~typ:(id @-> returning void) x
let updateViewConstraints self = msg_send ~self ~cmd:(selector "updateViewConstraints") ~typ:(returning void)
let useLayoutToLayoutNavigationTransitions self = msg_send ~self ~cmd:(selector "useLayoutToLayoutNavigationTransitions") ~typ:(returning bool)
let view self = msg_send ~self ~cmd:(selector "view") ~typ:(returning id)
let viewControllerForRotation self = msg_send ~self ~cmd:(selector "viewControllerForRotation") ~typ:(returning id)
let viewControllerForUnwindSegueAction x ~fromViewController ~withSender self = msg_send ~self ~cmd:(selector "viewControllerForUnwindSegueAction:fromViewController:withSender:") ~typ:(_SEL @-> id @-> id @-> returning id) x fromViewController withSender
let viewDidAppear x self = msg_send ~self ~cmd:(selector "viewDidAppear:") ~typ:(bool @-> returning void) x
let viewDidDisappear x self = msg_send ~self ~cmd:(selector "viewDidDisappear:") ~typ:(bool @-> returning void) x
let viewDidLayoutSubviews self = msg_send ~self ~cmd:(selector "viewDidLayoutSubviews") ~typ:(returning void)
let viewDidLoad self = msg_send ~self ~cmd:(selector "viewDidLoad") ~typ:(returning void)
let viewDidMoveToWindow x ~shouldAppearOrDisappear self = msg_send ~self ~cmd:(selector "viewDidMoveToWindow:shouldAppearOrDisappear:") ~typ:(id @-> bool @-> returning void) x shouldAppearOrDisappear
let viewDidUnload self = msg_send ~self ~cmd:(selector "viewDidUnload") ~typ:(returning void)
let viewIfLoaded self = msg_send ~self ~cmd:(selector "viewIfLoaded") ~typ:(returning id)
let viewIsAppearing x self = msg_send ~self ~cmd:(selector "viewIsAppearing:") ~typ:(bool @-> returning void) x
let viewLayoutMarginsDidChange self = msg_send ~self ~cmd:(selector "viewLayoutMarginsDidChange") ~typ:(returning void)
let viewRespectsSystemMinimumLayoutMargins self = msg_send ~self ~cmd:(selector "viewRespectsSystemMinimumLayoutMargins") ~typ:(returning bool)
let viewSafeAreaInsetsDidChange self = msg_send ~self ~cmd:(selector "viewSafeAreaInsetsDidChange") ~typ:(returning void)
let viewWillAppear x self = msg_send ~self ~cmd:(selector "viewWillAppear:") ~typ:(bool @-> returning void) x
let viewWillDisappear x self = msg_send ~self ~cmd:(selector "viewWillDisappear:") ~typ:(bool @-> returning void) x
let viewWillLayoutSubviews self = msg_send ~self ~cmd:(selector "viewWillLayoutSubviews") ~typ:(returning void)
let viewWillMoveToWindow x self = msg_send ~self ~cmd:(selector "viewWillMoveToWindow:") ~typ:(id @-> returning void) x
let viewWillTransitionToSize x ~withTransitionCoordinator self = msg_send ~self ~cmd:(selector "viewWillTransitionToSize:withTransitionCoordinator:") ~typ:(CGSize.t @-> id @-> returning void) x withTransitionCoordinator
let viewWillUnload self = msg_send ~self ~cmd:(selector "viewWillUnload") ~typ:(returning void)
let wantsFullScreenLayout self = msg_send ~self ~cmd:(selector "wantsFullScreenLayout") ~typ:(returning bool)
let willAnimateFirstHalfOfRotationToInterfaceOrientation x ~duration self = msg_send ~self ~cmd:(selector "willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:") ~typ:(llong @-> double @-> returning void) (LLong.of_int x) duration
let willAnimateRotationToInterfaceOrientation x ~duration self = msg_send ~self ~cmd:(selector "willAnimateRotationToInterfaceOrientation:duration:") ~typ:(llong @-> double @-> returning void) (LLong.of_int x) duration
let willAnimateSecondHalfOfRotationFromInterfaceOrientation x ~duration self = msg_send ~self ~cmd:(selector "willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:") ~typ:(llong @-> double @-> returning void) (LLong.of_int x) duration
let willMoveToParentViewController x self = msg_send ~self ~cmd:(selector "willMoveToParentViewController:") ~typ:(id @-> returning void) x
let willRotateToInterfaceOrientation x ~duration self = msg_send ~self ~cmd:(selector "willRotateToInterfaceOrientation:duration:") ~typ:(llong @-> double @-> returning void) (LLong.of_int x) duration
let willTransitionToTraitCollection x ~withTransitionCoordinator self = msg_send ~self ~cmd:(selector "willTransitionToTraitCollection:withTransitionCoordinator:") ~typ:(id @-> id @-> returning void) x withTransitionCoordinator
let window x ~didAnimateFirstHalfOfRotationToInterfaceOrientation self = msg_send ~self ~cmd:(selector "window:didAnimateFirstHalfOfRotationToInterfaceOrientation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int didAnimateFirstHalfOfRotationToInterfaceOrientation)
let window1 x ~didRotateFromInterfaceOrientation self = msg_send ~self ~cmd:(selector "window:didRotateFromInterfaceOrientation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int didRotateFromInterfaceOrientation)
let window2 x ~resizeFromOrientation self = msg_send ~self ~cmd:(selector "window:resizeFromOrientation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int resizeFromOrientation)
let window3 x ~setupWithInterfaceOrientation self = msg_send ~self ~cmd:(selector "window:setupWithInterfaceOrientation:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int setupWithInterfaceOrientation)
let window4 x ~didRotateFromInterfaceOrientation ~oldSize self = msg_send ~self ~cmd:(selector "window:didRotateFromInterfaceOrientation:oldSize:") ~typ:(id @-> llong @-> CGSize.t @-> returning void) x (LLong.of_int didRotateFromInterfaceOrientation) oldSize
let window5 x ~statusBarWillChangeFromHeight ~toHeight self = msg_send ~self ~cmd:(selector "window:statusBarWillChangeFromHeight:toHeight:") ~typ:(id @-> double @-> double @-> returning void) x statusBarWillChangeFromHeight toHeight
let window6 x ~willAnimateFirstHalfOfRotationToInterfaceOrientation ~duration self = msg_send ~self ~cmd:(selector "window:willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:") ~typ:(id @-> llong @-> double @-> returning void) x (LLong.of_int willAnimateFirstHalfOfRotationToInterfaceOrientation) duration
let window7 x ~willAnimateFromContentFrame ~toContentFrame self = msg_send ~self ~cmd:(selector "window:willAnimateFromContentFrame:toContentFrame:") ~typ:(id @-> CGRect.t @-> CGRect.t @-> returning void) x willAnimateFromContentFrame toContentFrame
let window8 x ~willAnimateRotationToInterfaceOrientation ~duration self = msg_send ~self ~cmd:(selector "window:willAnimateRotationToInterfaceOrientation:duration:") ~typ:(id @-> llong @-> double @-> returning void) x (LLong.of_int willAnimateRotationToInterfaceOrientation) duration
let window9 x ~willAnimateSecondHalfOfRotationFromInterfaceOrientation ~duration self = msg_send ~self ~cmd:(selector "window:willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:") ~typ:(id @-> llong @-> double @-> returning void) x (LLong.of_int willAnimateSecondHalfOfRotationFromInterfaceOrientation) duration
let window10 x ~willRotateToInterfaceOrientation ~duration self = msg_send ~self ~cmd:(selector "window:willRotateToInterfaceOrientation:duration:") ~typ:(id @-> llong @-> double @-> returning void) x (LLong.of_int willRotateToInterfaceOrientation) duration
let window11 x ~statusBarWillChangeFromHeight ~toHeight ~windowSizedViewController self = msg_send ~self ~cmd:(selector "window:statusBarWillChangeFromHeight:toHeight:windowSizedViewController:") ~typ:(id @-> double @-> double @-> id @-> returning void) x statusBarWillChangeFromHeight toHeight windowSizedViewController
let window12 x ~willAnimateRotationToInterfaceOrientation ~duration ~newSize self = msg_send ~self ~cmd:(selector "window:willAnimateRotationToInterfaceOrientation:duration:newSize:") ~typ:(id @-> llong @-> double @-> CGSize.t @-> returning void) x (LLong.of_int willAnimateRotationToInterfaceOrientation) duration newSize
let window13 x ~willRotateToInterfaceOrientation ~duration ~newSize self = msg_send ~self ~cmd:(selector "window:willRotateToInterfaceOrientation:duration:newSize:") ~typ:(id @-> llong @-> double @-> CGSize.t @-> returning void) x (LLong.of_int willRotateToInterfaceOrientation) duration newSize