(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation
open CoreText

(** Apple docs: {{:https://developer.apple.com/documentation/uikit/uikbautofillcontroller?language=objc}UIKBAutofillController} *)

let self = get_class "UIKBAutofillController"

let accessibilityLoginKeywordList self = msg_send ~self ~cmd:(selector "accessibilityLoginKeywordList") ~typ:(returning id)
let accessibilitySignupKeywordList self = msg_send ~self ~cmd:(selector "accessibilitySignupKeywordList") ~typ:(returning id)
let addTemporaryTextColorToTextField x self = msg_send ~self ~cmd:(selector "addTemporaryTextColorToTextField:") ~typ:(id @-> returning void) x
let addressKeywordSet self = msg_send ~self ~cmd:(selector "addressKeywordSet") ~typ:(returning id)
let autofillContextForInputDelegate x self = msg_send ~self ~cmd:(selector "autofillContextForInputDelegate:") ~typ:(id @-> returning id) x
let autofillGroup self = msg_send ~self ~cmd:(selector "autofillGroup") ~typ:(returning id)
let clearASPInPasswordFields self = msg_send ~self ~cmd:(selector "clearASPInPasswordFields") ~typ:(returning void)
let clearASPVisualEffectsInTextField x self = msg_send ~self ~cmd:(selector "clearASPVisualEffectsInTextField:") ~typ:(id @-> returning void) x
let clearAutofillGroup self = msg_send ~self ~cmd:(selector "clearAutofillGroup") ~typ:(returning void)
let clearFallbackAutofillGroup self = msg_send ~self ~cmd:(selector "clearFallbackAutofillGroup") ~typ:(returning void)
let contactAutoFillKeywordsForKey x ~value ~localizedKeywords self = msg_send ~self ~cmd:(selector "contactAutoFillKeywordsForKey:value:localizedKeywords:") ~typ:(id @-> id @-> id @-> returning id) x value localizedKeywords
let contactAutofillModeWithAutofillGroup x ~responders self = msg_send ~self ~cmd:(selector "contactAutofillModeWithAutofillGroup:responders:") ~typ:(id @-> id @-> returning llong) x responders
let containsIndicationInText x ~withAccessibilityHints self = msg_send ~self ~cmd:(selector "containsIndicationInText:withAccessibilityHints:") ~typ:(id @-> bool @-> returning llong) x withAccessibilityHints
let containsUsernamePasswordPairsInAutofillGroup x self = msg_send ~self ~cmd:(selector "containsUsernamePasswordPairsInAutofillGroup:") ~typ:(id @-> returning bool) x
let delegateNeedsAutofillMode self = msg_send ~self ~cmd:(selector "delegateNeedsAutofillMode") ~typ:(returning llong)
let didOptOutOfAutofillSignup self = msg_send ~self ~cmd:(selector "didOptOutOfAutofillSignup") ~typ:(returning void)
let doTraits x ~matchTextContentType self = msg_send ~self ~cmd:(selector "doTraits:matchTextContentType:") ~typ:(id @-> id @-> returning llong) x matchTextContentType
let emailKeywordSet self = msg_send ~self ~cmd:(selector "emailKeywordSet") ~typ:(returning id)
let enumeratePasswordFieldsUsingBlock x self = msg_send ~self ~cmd:(selector "enumeratePasswordFieldsUsingBlock:") ~typ:((ptr void) @-> returning void) x
let fallbackAutofillGroup self = msg_send ~self ~cmd:(selector "fallbackAutofillGroup") ~typ:(returning id)
let handleAutofillCredentialSaveIfNeeded x ~fromASP self = msg_send ~self ~cmd:(selector "handleAutofillCredentialSaveIfNeeded:fromASP:") ~typ:(id @-> bool @-> returning void) x fromASP
let handleWebviewCredentialsSaveForResponder x ~_WebsiteURL ~user ~password ~passwordIsAutoGenerated self = msg_send ~self ~cmd:(selector "handleWebviewCredentialsSaveForResponder:WebsiteURL:user:password:passwordIsAutoGenerated:") ~typ:(id @-> id @-> id @-> id @-> bool @-> returning void) x _WebsiteURL user password passwordIsAutoGenerated
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let loginKeywordList self = msg_send ~self ~cmd:(selector "loginKeywordList") ~typ:(returning id)
let needAutofillCandidate x ~delegateAsResponder ~keyboardState self = msg_send ~self ~cmd:(selector "needAutofillCandidate:delegateAsResponder:keyboardState:") ~typ:(id @-> id @-> id @-> returning llong) x delegateAsResponder keyboardState
let optOutASPInTextField self = msg_send ~self ~cmd:(selector "optOutASPInTextField") ~typ:(returning void)
let phoneKeywordSet self = msg_send ~self ~cmd:(selector "phoneKeywordSet") ~typ:(returning id)
let preferFallbackAutofillGroup self = msg_send ~self ~cmd:(selector "preferFallbackAutofillGroup") ~typ:(returning bool)
let processLocalizedString x self = msg_send ~self ~cmd:(selector "processLocalizedString:") ~typ:(id @-> returning id) x
let removeTemporaryTextColorFromTextField x self = msg_send ~self ~cmd:(selector "removeTemporaryTextColorFromTextField:") ~typ:(id @-> returning void) x
let searchKeywordSet self = msg_send ~self ~cmd:(selector "searchKeywordSet") ~typ:(returning id)
let setDelegateNeedsAutofillMode x self = msg_send ~self ~cmd:(selector "setDelegateNeedsAutofillMode:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setFallbackAutofillGroup x self = msg_send ~self ~cmd:(selector "setFallbackAutofillGroup:") ~typ:(id @-> returning void) x
let setShouldSaveAutofill x self = msg_send ~self ~cmd:(selector "setShouldSaveAutofill:") ~typ:(bool @-> returning void) x
let setTextFieldOrigColor x self = msg_send ~self ~cmd:(selector "setTextFieldOrigColor:") ~typ:(id @-> returning void) x
let shouldLoadASPForResponder x self = msg_send ~self ~cmd:(selector "shouldLoadASPForResponder:") ~typ:(id @-> returning bool) x
let shouldSaveAutofill self = msg_send ~self ~cmd:(selector "shouldSaveAutofill") ~typ:(returning bool)
let showASPInTextField x ~isRightToLeft self = msg_send ~self ~cmd:(selector "showASPInTextField:isRightToLeft:") ~typ:(id @-> bool @-> returning void) x isRightToLeft
let signUpSignalFromButton x self = msg_send ~self ~cmd:(selector "signUpSignalFromButton:") ~typ:(id @-> returning llong) x
let signUpSignalFromNavBarItem x self = msg_send ~self ~cmd:(selector "signUpSignalFromNavBarItem:") ~typ:(id @-> returning llong) x
let signUpSignalFromViewControllerHierarchy x self = msg_send ~self ~cmd:(selector "signUpSignalFromViewControllerHierarchy:") ~typ:(id @-> returning llong) x
let signupHintForUsername x ~password ~responder self = msg_send ~self ~cmd:(selector "signupHintForUsername:password:responder:") ~typ:(id @-> id @-> id @-> returning bool) x password responder
let signupKeywordList self = msg_send ~self ~cmd:(selector "signupKeywordList") ~typ:(returning id)
let textFieldOrigColor self = msg_send ~self ~cmd:(selector "textFieldOrigColor") ~typ:(returning id)
let textSignalsForResponder x self = msg_send ~self ~cmd:(selector "textSignalsForResponder:") ~typ:(id @-> returning id) x
let trackResponderForAutofillIfNeeded x self = msg_send ~self ~cmd:(selector "trackResponderForAutofillIfNeeded:") ~typ:(id @-> returning void) x
let updateAutofillContextForInputDelegate x self = msg_send ~self ~cmd:(selector "updateAutofillContextForInputDelegate:") ~typ:(id @-> returning void) x