(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation
open CoreAnimation
open CoreText

(** Apple docs: {{:https://developer.apple.com/documentation/uikit/uisplitviewcontrollerpanelimpl?language=objc}UISplitViewControllerPanelImpl} *)

let self = get_class "UISplitViewControllerPanelImpl"

let allowedDisplayModeForCurrentSplitBehaviorGivenDisplayMode x self = msg_send ~self ~cmd:(selector "allowedDisplayModeForCurrentSplitBehaviorGivenDisplayMode:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let allowsSecondaryOnlyShortcutButton self = msg_send ~self ~cmd:(selector "allowsSecondaryOnlyShortcutButton") ~typ:(returning bool)
let animateToRequest x self = msg_send ~self ~cmd:(selector "animateToRequest:") ~typ:(id @-> returning void) x
let callDeprecatedWillHideDelegateCallbackIfNecessary self = msg_send ~self ~cmd:(selector "callDeprecatedWillHideDelegateCallbackIfNecessary") ~typ:(returning void)
let callDeprecatedWillShowDelegateCallbackIfNecessary self = msg_send ~self ~cmd:(selector "callDeprecatedWillShowDelegateCallbackIfNecessary") ~typ:(returning void)
let childViewControllerForStatusBarStyle self = msg_send ~self ~cmd:(selector "childViewControllerForStatusBarStyle") ~typ:(returning id)
let configuration self = msg_send ~self ~cmd:(selector "configuration") ~typ:(returning id)
let currentState self = msg_send ~self ~cmd:(selector "currentState") ~typ:(returning id)
let decodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "decodeRestorableStateWithCoder:") ~typ:(id @-> returning void) x
let defaultDisplayModeForSize x self = msg_send ~self ~cmd:(selector "defaultDisplayModeForSize:") ~typ:(CGSize.t @-> returning llong) x
let defaultDisplayModeForSplitBehavior x self = msg_send ~self ~cmd:(selector "defaultDisplayModeForSplitBehavior:") ~typ:(llong @-> returning llong) (LLong.of_int x)
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning id)
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let detailViewController self = msg_send ~self ~cmd:(selector "detailViewController") ~typ:(returning id)
let didRotateFromInterfaceOrientation x self = msg_send ~self ~cmd:(selector "didRotateFromInterfaceOrientation:") ~typ:(llong @-> returning void) (LLong.of_int x)
let dimmingViewWasTapped x self = msg_send ~self ~cmd:(selector "dimmingViewWasTapped:") ~typ:(id @-> returning void) x
let displayMode self = msg_send ~self ~cmd:(selector "displayMode") ~typ:(returning llong)
let displayModeButtonItem self = msg_send ~self ~cmd:(selector "displayModeButtonItem") ~typ:(returning id)
let displayModeButtonVisibility self = msg_send ~self ~cmd:(selector "displayModeButtonVisibility") ~typ:(returning llong)
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning void) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let gestureRecognizer x ~shouldBeRequiredToFailByGestureRecognizer self = msg_send ~self ~cmd:(selector "gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:") ~typ:(id @-> id @-> returning bool) x shouldBeRequiredToFailByGestureRecognizer
let gestureRecognizer1 x ~shouldReceiveTouch self = msg_send ~self ~cmd:(selector "gestureRecognizer:shouldReceiveTouch:") ~typ:(id @-> id @-> returning bool) x shouldReceiveTouch
let gestureRecognizer2 x ~shouldRequireFailureOfGestureRecognizer self = msg_send ~self ~cmd:(selector "gestureRecognizer:shouldRequireFailureOfGestureRecognizer:") ~typ:(id @-> id @-> returning bool) x shouldRequireFailureOfGestureRecognizer
let gestureRecognizerShouldBegin x self = msg_send ~self ~cmd:(selector "gestureRecognizerShouldBegin:") ~typ:(id @-> returning bool) x
let getPrimaryColumnWidth x ~supplementaryColumnWidth ~forSize ~displayMode ~shouldUseOverlay self = msg_send ~self ~cmd:(selector "getPrimaryColumnWidth:supplementaryColumnWidth:forSize:displayMode:shouldUseOverlay:") ~typ:((ptr double) @-> (ptr double) @-> CGSize.t @-> llong @-> bool @-> returning void) x supplementaryColumnWidth forSize (LLong.of_int displayMode) shouldUseOverlay
let getPrimaryColumnWidth' x ~supplementaryColumnWidth ~forSize ~displayMode ~isCompact ~shouldUseOverlay self = msg_send ~self ~cmd:(selector "getPrimaryColumnWidth:supplementaryColumnWidth:forSize:displayMode:isCompact:shouldUseOverlay:") ~typ:((ptr double) @-> (ptr double) @-> CGSize.t @-> llong @-> bool @-> bool @-> returning void) x supplementaryColumnWidth forSize (LLong.of_int displayMode) isCompact shouldUseOverlay
let gutterWidth self = msg_send ~self ~cmd:(selector "gutterWidth") ~typ:(returning float)
let hideColumn x self = msg_send ~self ~cmd:(selector "hideColumn:") ~typ:(llong @-> returning void) (LLong.of_int x)
let hidesMasterViewInPortrait self = msg_send ~self ~cmd:(selector "hidesMasterViewInPortrait") ~typ:(returning bool)
let inCollapsingToProposedTopColumnCallback self = msg_send ~self ~cmd:(selector "inCollapsingToProposedTopColumnCallback") ~typ:(returning bool)
let initWithSplitViewController x self = msg_send ~self ~cmd:(selector "initWithSplitViewController:") ~typ:(id @-> returning id) x
let isCollapsed self = msg_send ~self ~cmd:(selector "isCollapsed") ~typ:(returning bool)
let loadView self = msg_send ~self ~cmd:(selector "loadView") ~typ:(returning void)
let lockedForDelegateCallback self = msg_send ~self ~cmd:(selector "lockedForDelegateCallback") ~typ:(returning bool)
let masterViewController self = msg_send ~self ~cmd:(selector "masterViewController") ~typ:(returning id)
let maximumPrimaryColumnWidth self = msg_send ~self ~cmd:(selector "maximumPrimaryColumnWidth") ~typ:(returning double)
let maximumSupplementaryColumnWidth self = msg_send ~self ~cmd:(selector "maximumSupplementaryColumnWidth") ~typ:(returning double)
let minimumPrimaryColumnWidth self = msg_send ~self ~cmd:(selector "minimumPrimaryColumnWidth") ~typ:(returning double)
let minimumSupplementaryColumnWidth self = msg_send ~self ~cmd:(selector "minimumSupplementaryColumnWidth") ~typ:(returning double)
let panelController self = msg_send ~self ~cmd:(selector "panelController") ~typ:(returning id)
let panelController1 x ~collapseOntoPrimaryViewController self = msg_send ~self ~cmd:(selector "panelController:collapseOntoPrimaryViewController:") ~typ:(id @-> id @-> returning bool) x collapseOntoPrimaryViewController
let panelController2 x ~didEndAnimatedTransitionToStateRequest self = msg_send ~self ~cmd:(selector "panelController:didEndAnimatedTransitionToStateRequest:") ~typ:(id @-> id @-> returning void) x didEndAnimatedTransitionToStateRequest
let panelController3 x ~didEndResizingColumn self = msg_send ~self ~cmd:(selector "panelController:didEndResizingColumn:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int didEndResizingColumn)
let panelController4 x ~expectedWidthForColumnForViewController self = msg_send ~self ~cmd:(selector "panelController:expectedWidthForColumnForViewController:") ~typ:(id @-> id @-> returning double) x expectedWidthForColumnForViewController
let panelController5 x ~navigationBarForViewController self = msg_send ~self ~cmd:(selector "panelController:navigationBarForViewController:") ~typ:(id @-> id @-> returning id) x navigationBarForViewController
let panelController6 x ~separateSecondaryViewControllerFromPrimaryViewController self = msg_send ~self ~cmd:(selector "panelController:separateSecondaryViewControllerFromPrimaryViewController:") ~typ:(id @-> id @-> returning id) x separateSecondaryViewControllerFromPrimaryViewController
let panelController7 x ~separateSupplementaryViewControllerFromPrimaryViewController self = msg_send ~self ~cmd:(selector "panelController:separateSupplementaryViewControllerFromPrimaryViewController:") ~typ:(id @-> id @-> returning id) x separateSupplementaryViewControllerFromPrimaryViewController
let panelController8 x ~unspecifiedStyleSeparateSecondaryViewControllerFromPrimaryViewController self = msg_send ~self ~cmd:(selector "panelController:unspecifiedStyleSeparateSecondaryViewControllerFromPrimaryViewController:") ~typ:(id @-> id @-> returning id) x unspecifiedStyleSeparateSecondaryViewControllerFromPrimaryViewController
let panelController9 x ~willBeginResizingColumn self = msg_send ~self ~cmd:(selector "panelController:willBeginResizingColumn:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int willBeginResizingColumn)
let panelController10 x ~willChangeToState self = msg_send ~self ~cmd:(selector "panelController:willChangeToState:") ~typ:(id @-> id @-> returning void) x willChangeToState
let panelController11 x ~adjustLeadingViewController ~forKeyboardInfo self = msg_send ~self ~cmd:(selector "panelController:adjustLeadingViewController:forKeyboardInfo:") ~typ:(id @-> id @-> id @-> returning void) x adjustLeadingViewController forKeyboardInfo
let panelController12 x ~adjustTrailingViewController ~forKeyboardInfo self = msg_send ~self ~cmd:(selector "panelController:adjustTrailingViewController:forKeyboardInfo:") ~typ:(id @-> id @-> id @-> returning void) x adjustTrailingViewController forKeyboardInfo
let panelController13 x ~didChangeToState ~withSize self = msg_send ~self ~cmd:(selector "panelController:didChangeToState:withSize:") ~typ:(id @-> id @-> CGSize.t @-> returning void) x didChangeToState withSize
let panelController14 x ~requestResizeColumn ~toWidth self = msg_send ~self ~cmd:(selector "panelController:requestResizeColumn:toWidth:") ~typ:(id @-> llong @-> double @-> returning void) x (LLong.of_int requestResizeColumn) toWidth
let panelController15 x ~animateTransitionToStateRequest ~predictedEndState ~predictedDuration self = msg_send ~self ~cmd:(selector "panelController:animateTransitionToStateRequest:predictedEndState:predictedDuration:") ~typ:(id @-> id @-> id @-> double @-> returning void) x animateTransitionToStateRequest predictedEndState predictedDuration
let panelController16 x ~collapsePrimaryViewController ~withFallbackSecondaryViewController ~transitionCoordinator self = msg_send ~self ~cmd:(selector "panelController:collapsePrimaryViewController:withFallbackSecondaryViewController:transitionCoordinator:") ~typ:(id @-> id @-> id @-> id @-> returning void) x collapsePrimaryViewController withFallbackSecondaryViewController transitionCoordinator
let panelController17 x ~willBeginAnimatedTransitionToStateRequest ~predictedEndState ~predictedDuration self = msg_send ~self ~cmd:(selector "panelController:willBeginAnimatedTransitionToStateRequest:predictedEndState:predictedDuration:") ~typ:(id @-> id @-> id @-> double @-> returning void) x willBeginAnimatedTransitionToStateRequest predictedEndState predictedDuration
let panelController18 x ~willBeginAnimationToPrimarySize ~supplementarySize ~secondarySize self = msg_send ~self ~cmd:(selector "panelController:willBeginAnimationToPrimarySize:supplementarySize:secondarySize:") ~typ:(id @-> CGSize.t @-> CGSize.t @-> CGSize.t @-> returning void) x willBeginAnimationToPrimarySize supplementarySize secondarySize
let panelController19 x ~collapsePrimaryViewController ~withFallbackSecondaryViewController ~onTopOfSupplementaryViewController ~transitionCoordinator self = msg_send ~self ~cmd:(selector "panelController:collapsePrimaryViewController:withFallbackSecondaryViewController:onTopOfSupplementaryViewController:transitionCoordinator:") ~typ:(id @-> id @-> id @-> id @-> id @-> returning bool) x collapsePrimaryViewController withFallbackSecondaryViewController onTopOfSupplementaryViewController transitionCoordinator
let panelControllerDidCollapse x self = msg_send ~self ~cmd:(selector "panelControllerDidCollapse:") ~typ:(id @-> returning void) x
let panelControllerDidExpand x self = msg_send ~self ~cmd:(selector "panelControllerDidExpand:") ~typ:(id @-> returning void) x
let panelControllerWillUpdate x self = msg_send ~self ~cmd:(selector "panelControllerWillUpdate:") ~typ:(id @-> returning (ptr void)) x
let possibleStates self = msg_send ~self ~cmd:(selector "possibleStates") ~typ:(returning id)
let preferredCenterStatusBarStyle self = msg_send ~self ~cmd:(selector "preferredCenterStatusBarStyle") ~typ:(returning llong)
let preferredContentSizeDidChangeForChildContentContainer x self = msg_send ~self ~cmd:(selector "preferredContentSizeDidChangeForChildContentContainer:") ~typ:(id @-> returning void) x
let preferredDisplayMode self = msg_send ~self ~cmd:(selector "preferredDisplayMode") ~typ:(returning llong)
let preferredFocusEnvironments self = msg_send ~self ~cmd:(selector "preferredFocusEnvironments") ~typ:(returning id)
let preferredFocusedView self = msg_send ~self ~cmd:(selector "preferredFocusedView") ~typ:(returning id)
let preferredInterfaceOrientationForPresentation self = msg_send ~self ~cmd:(selector "preferredInterfaceOrientationForPresentation") ~typ:(returning llong)
let preferredLeadingStatusBarStyle self = msg_send ~self ~cmd:(selector "preferredLeadingStatusBarStyle") ~typ:(returning llong)
let preferredPrimaryColumnWidth self = msg_send ~self ~cmd:(selector "preferredPrimaryColumnWidth") ~typ:(returning double)
let preferredPrimaryColumnWidthFraction self = msg_send ~self ~cmd:(selector "preferredPrimaryColumnWidthFraction") ~typ:(returning double)
let preferredSplitBehavior self = msg_send ~self ~cmd:(selector "preferredSplitBehavior") ~typ:(returning llong)
let preferredSupplementaryColumnWidth self = msg_send ~self ~cmd:(selector "preferredSupplementaryColumnWidth") ~typ:(returning double)
let preferredSupplementaryColumnWidthFraction self = msg_send ~self ~cmd:(selector "preferredSupplementaryColumnWidthFraction") ~typ:(returning double)
let preferredTrailingStatusBarStyle self = msg_send ~self ~cmd:(selector "preferredTrailingStatusBarStyle") ~typ:(returning llong)
let prefersOverlayInRegularWidthPhone self = msg_send ~self ~cmd:(selector "prefersOverlayInRegularWidthPhone") ~typ:(returning bool)
let preparePanelControllerForCollapse self = msg_send ~self ~cmd:(selector "preparePanelControllerForCollapse") ~typ:(returning void)
let presentsWithGesture self = msg_send ~self ~cmd:(selector "presentsWithGesture") ~typ:(returning bool)
let primaryBackgroundStyle self = msg_send ~self ~cmd:(selector "primaryBackgroundStyle") ~typ:(returning llong)
let primaryColumnWidth self = msg_send ~self ~cmd:(selector "primaryColumnWidth") ~typ:(returning double)
let primaryEdge self = msg_send ~self ~cmd:(selector "primaryEdge") ~typ:(returning llong)
let primaryViewControllerForCollapsingPanelController x self = msg_send ~self ~cmd:(selector "primaryViewControllerForCollapsingPanelController:") ~typ:(id @-> returning id) x
let primaryViewControllerForExpandingPanelController x self = msg_send ~self ~cmd:(selector "primaryViewControllerForExpandingPanelController:") ~typ:(id @-> returning id) x
let removeChildViewController x self = msg_send ~self ~cmd:(selector "removeChildViewController:") ~typ:(id @-> returning void) x
let sendColumnShowHideNotificationsForNewState x ~newDisplayMode ~oldDisplayMode self = msg_send ~self ~cmd:(selector "sendColumnShowHideNotificationsForNewState:newDisplayMode:oldDisplayMode:") ~typ:(id @-> llong @-> llong @-> returning void) x (LLong.of_int newDisplayMode) (LLong.of_int oldDisplayMode)
let sendWillHideColumn x self = msg_send ~self ~cmd:(selector "sendWillHideColumn:") ~typ:(llong @-> returning void) (LLong.of_int x)
let sendWillShowColumn x self = msg_send ~self ~cmd:(selector "sendWillShowColumn:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setConfiguration x self = msg_send ~self ~cmd:(selector "setConfiguration:") ~typ:(id @-> returning void) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning void) x
let setDisplayModeButtonVisibility x self = msg_send ~self ~cmd:(selector "setDisplayModeButtonVisibility:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setGutterWidth x self = msg_send ~self ~cmd:(selector "setGutterWidth:") ~typ:(float @-> returning void) x
let setHidesMasterViewInPortrait x self = msg_send ~self ~cmd:(selector "setHidesMasterViewInPortrait:") ~typ:(bool @-> returning void) x
let setMaximumPrimaryColumnWidth x self = msg_send ~self ~cmd:(selector "setMaximumPrimaryColumnWidth:") ~typ:(double @-> returning void) x
let setMaximumSupplementaryColumnWidth x self = msg_send ~self ~cmd:(selector "setMaximumSupplementaryColumnWidth:") ~typ:(double @-> returning void) x
let setMinimumPrimaryColumnWidth x self = msg_send ~self ~cmd:(selector "setMinimumPrimaryColumnWidth:") ~typ:(double @-> returning void) x
let setMinimumSupplementaryColumnWidth x self = msg_send ~self ~cmd:(selector "setMinimumSupplementaryColumnWidth:") ~typ:(double @-> returning void) x
let setPanelController x self = msg_send ~self ~cmd:(selector "setPanelController:") ~typ:(id @-> returning void) x
let setPreferredDisplayMode x self = msg_send ~self ~cmd:(selector "setPreferredDisplayMode:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setPreferredPrimaryColumnWidth x self = msg_send ~self ~cmd:(selector "setPreferredPrimaryColumnWidth:") ~typ:(double @-> returning void) x
let setPreferredPrimaryColumnWidthFraction x self = msg_send ~self ~cmd:(selector "setPreferredPrimaryColumnWidthFraction:") ~typ:(double @-> returning void) x
let setPreferredSplitBehavior x self = msg_send ~self ~cmd:(selector "setPreferredSplitBehavior:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setPreferredSupplementaryColumnWidth x self = msg_send ~self ~cmd:(selector "setPreferredSupplementaryColumnWidth:") ~typ:(double @-> returning void) x
let setPreferredSupplementaryColumnWidthFraction x self = msg_send ~self ~cmd:(selector "setPreferredSupplementaryColumnWidthFraction:") ~typ:(double @-> returning void) x
let setPrefersOverlayInRegularWidthPhone x self = msg_send ~self ~cmd:(selector "setPrefersOverlayInRegularWidthPhone:") ~typ:(bool @-> returning void) x
let setPresentsWithGesture x self = msg_send ~self ~cmd:(selector "setPresentsWithGesture:") ~typ:(bool @-> returning void) x
let setPrimaryBackgroundStyle x self = msg_send ~self ~cmd:(selector "setPrimaryBackgroundStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setPrimaryEdge x self = msg_send ~self ~cmd:(selector "setPrimaryEdge:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setShowsSecondaryOnlyButton x self = msg_send ~self ~cmd:(selector "setShowsSecondaryOnlyButton:") ~typ:(bool @-> returning void) x
let setStateRequest x self = msg_send ~self ~cmd:(selector "setStateRequest:") ~typ:(id @-> returning void) x
let setStyle x self = msg_send ~self ~cmd:(selector "setStyle:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setUserGeneratedDisplayMode x self = msg_send ~self ~cmd:(selector "setUserGeneratedDisplayMode:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setUsesDeviceOverlayPreferences x self = msg_send ~self ~cmd:(selector "setUsesDeviceOverlayPreferences:") ~typ:(bool @-> returning void) x
let setViewController x ~forColumn self = msg_send ~self ~cmd:(selector "setViewController:forColumn:") ~typ:(id @-> llong @-> returning void) x (LLong.of_int forColumn)
let setViewControllers x self = msg_send ~self ~cmd:(selector "setViewControllers:") ~typ:(id @-> returning void) x
let shouldAutorotateToInterfaceOrientation x self = msg_send ~self ~cmd:(selector "shouldAutorotateToInterfaceOrientation:") ~typ:(llong @-> returning bool) (LLong.of_int x)
let shouldUpdateFocusInContext x self = msg_send ~self ~cmd:(selector "shouldUpdateFocusInContext:") ~typ:(id @-> returning bool) x
let showColumn x self = msg_send ~self ~cmd:(selector "showColumn:") ~typ:(llong @-> returning void) (LLong.of_int x)
let showDetailViewController x ~sender self = msg_send ~self ~cmd:(selector "showDetailViewController:sender:") ~typ:(id @-> id @-> returning void) x sender
let showViewController x ~sender self = msg_send ~self ~cmd:(selector "showViewController:sender:") ~typ:(id @-> id @-> returning void) x sender
let showsSecondaryOnlyButton self = msg_send ~self ~cmd:(selector "showsSecondaryOnlyButton") ~typ:(returning bool)
let sidebarBlurEffectForPanelController x self = msg_send ~self ~cmd:(selector "sidebarBlurEffectForPanelController:") ~typ:(id @-> returning id) x
let sizeForChildContentContainer x ~withParentContainerSize self = msg_send_stret ~self ~cmd:(selector "sizeForChildContentContainer:withParentContainerSize:") ~typ:(id @-> CGSize.t @-> returning CGSize.t) ~return_type:CGSize.t x withParentContainerSize
let splitBehavior self = msg_send ~self ~cmd:(selector "splitBehavior") ~typ:(returning llong)
let splitBehaviorForSize x self = msg_send ~self ~cmd:(selector "splitBehaviorForSize:") ~typ:(CGSize.t @-> returning llong) x
let splitBehaviorInCurrentEnvironment self = msg_send ~self ~cmd:(selector "splitBehaviorInCurrentEnvironment") ~typ:(returning llong)
let stateRequest self = msg_send ~self ~cmd:(selector "stateRequest") ~typ:(returning id)
let style self = msg_send ~self ~cmd:(selector "style") ~typ:(returning llong)
let supplementaryColumnWidth self = msg_send ~self ~cmd:(selector "supplementaryColumnWidth") ~typ:(returning double)
let supportedInterfaceOrientations self = msg_send ~self ~cmd:(selector "supportedInterfaceOrientations") ~typ:(returning ullong)
let toggleMasterVisible x self = msg_send ~self ~cmd:(selector "toggleMasterVisible:") ~typ:(id @-> returning void) x
let topColumnForCollapsingPanelController x self = msg_send ~self ~cmd:(selector "topColumnForCollapsingPanelController:") ~typ:(id @-> returning llong) x
let traitCollectionDidChange x self = msg_send ~self ~cmd:(selector "traitCollectionDidChange:") ~typ:(id @-> returning void) x
let transitionCoordinator self = msg_send ~self ~cmd:(selector "transitionCoordinator") ~typ:(returning id)
let unloadViewForced x self = msg_send ~self ~cmd:(selector "unloadViewForced:") ~typ:(bool @-> returning void) x
let updateDisplayModeButtonItem self = msg_send ~self ~cmd:(selector "updateDisplayModeButtonItem") ~typ:(returning void)
let updatePanelControllerForViewControllerChangeInColumn x self = msg_send ~self ~cmd:(selector "updatePanelControllerForViewControllerChangeInColumn:") ~typ:(llong @-> returning void) (LLong.of_int x)
let updatePanelControllerForViewControllerChangeInColumn' x ~alwaysAnimate self = msg_send ~self ~cmd:(selector "updatePanelControllerForViewControllerChangeInColumn:alwaysAnimate:") ~typ:(llong @-> bool @-> returning void) (LLong.of_int x) alwaysAnimate
let userGeneratedDisplayMode self = msg_send ~self ~cmd:(selector "userGeneratedDisplayMode") ~typ:(returning llong)
let usesDeviceOverlayPreferences self = msg_send ~self ~cmd:(selector "usesDeviceOverlayPreferences") ~typ:(returning bool)
let validDisplayModeWithAllColumns self = msg_send ~self ~cmd:(selector "validDisplayModeWithAllColumns") ~typ:(returning llong)
let viewClassForPanelController x self = msg_send ~self ~cmd:(selector "viewClassForPanelController:") ~typ:(id @-> returning _Class) x
let viewControllerForColumn x self = msg_send ~self ~cmd:(selector "viewControllerForColumn:") ~typ:(llong @-> returning id) (LLong.of_int x)
let viewControllers self = msg_send ~self ~cmd:(selector "viewControllers") ~typ:(returning id)
let viewDidAppear x self = msg_send ~self ~cmd:(selector "viewDidAppear:") ~typ:(bool @-> returning void) x
let viewDidDisappear x self = msg_send ~self ~cmd:(selector "viewDidDisappear:") ~typ:(bool @-> returning void) x
let viewDidLayoutSubviews self = msg_send ~self ~cmd:(selector "viewDidLayoutSubviews") ~typ:(returning void)
let viewWillAppear x self = msg_send ~self ~cmd:(selector "viewWillAppear:") ~typ:(bool @-> returning void) x
let viewWillDisappear x self = msg_send ~self ~cmd:(selector "viewWillDisappear:") ~typ:(bool @-> returning void) x
let viewWillTransitionToSize x ~withTransitionCoordinator self = msg_send ~self ~cmd:(selector "viewWillTransitionToSize:withTransitionCoordinator:") ~typ:(CGSize.t @-> id @-> returning void) x withTransitionCoordinator
let willAnimateRotationToInterfaceOrientation x ~duration self = msg_send ~self ~cmd:(selector "willAnimateRotationToInterfaceOrientation:duration:") ~typ:(llong @-> double @-> returning void) (LLong.of_int x) duration
let willRotateToInterfaceOrientation x ~duration self = msg_send ~self ~cmd:(selector "willRotateToInterfaceOrientation:duration:") ~typ:(llong @-> double @-> returning void) (LLong.of_int x) duration
let willTransitionToTraitCollection x ~withTransitionCoordinator self = msg_send ~self ~cmd:(selector "willTransitionToTraitCollection:withTransitionCoordinator:") ~typ:(id @-> id @-> returning void) x withTransitionCoordinator