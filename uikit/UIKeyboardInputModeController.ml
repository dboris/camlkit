(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UIKeyboardInputModeController"

module C = struct
  let _ASCIICapableInputModeIdentifierForPreferredLanguages self = msg_send ~self ~cmd:(selector "ASCIICapableInputModeIdentifierForPreferredLanguages") ~typ:(returning (id))
  let dictationInputModeIsFunctional self = msg_send ~self ~cmd:(selector "dictationInputModeIsFunctional") ~typ:(returning (bool))
  let disallowedDictationLanguagesForDeviceLanguage self = msg_send ~self ~cmd:(selector "disallowedDictationLanguagesForDeviceLanguage") ~typ:(returning (id))
  let inputModeIdentifierForPreferredLanguages x ~passingTest self = msg_send ~self ~cmd:(selector "inputModeIdentifierForPreferredLanguages:passingTest:") ~typ:(id @-> ptr void @-> returning (id)) x passingTest
  let sharedInputModeController self = msg_send ~self ~cmd:(selector "sharedInputModeController") ~typ:(returning (id))
end

let activeDictationLanguages self = msg_send ~self ~cmd:(selector "activeDictationLanguages") ~typ:(returning (id))
let activeDictationSupportedInputModeIdentifiers self = msg_send ~self ~cmd:(selector "activeDictationSupportedInputModeIdentifiers") ~typ:(returning (id))
let activeInputModeIdentifiers self = msg_send ~self ~cmd:(selector "activeInputModeIdentifiers") ~typ:(returning (id))
let activeInputModes self = msg_send ~self ~cmd:(selector "activeInputModes") ~typ:(returning (id))
let activeUserSelectableInputModeIdentifiers self = msg_send ~self ~cmd:(selector "activeUserSelectableInputModeIdentifiers") ~typ:(returning (id))
let activeUserSelectableInputModes self = msg_send ~self ~cmd:(selector "activeUserSelectableInputModes") ~typ:(returning (id))
let additionalTextInputLocales self = msg_send ~self ~cmd:(selector "additionalTextInputLocales") ~typ:(returning (id))
let allowedExtensions self = msg_send ~self ~cmd:(selector "allowedExtensions") ~typ:(returning (id))
let appendPasscodeInputModes x self = msg_send ~self ~cmd:(selector "appendPasscodeInputModes:") ~typ:(id @-> returning (id)) x
let changePreferredEmojiSearchInputModeForInputDelegate x self = msg_send ~self ~cmd:(selector "changePreferredEmojiSearchInputModeForInputDelegate:") ~typ:(id @-> returning (void)) x
let clearNextInputModeToUse self = msg_send ~self ~cmd:(selector "clearNextInputModeToUse") ~typ:(returning (void))
let containsDictationSupportedInputMode self = msg_send ~self ~cmd:(selector "containsDictationSupportedInputMode") ~typ:(returning (bool))
let containsEmojiInputMode self = msg_send ~self ~cmd:(selector "containsEmojiInputMode") ~typ:(returning (bool))
let currentInputMode self = msg_send ~self ~cmd:(selector "currentInputMode") ~typ:(returning (id))
let currentInputModeInPreference self = msg_send ~self ~cmd:(selector "currentInputModeInPreference") ~typ:(returning (id))
let currentLinguisticInputMode self = msg_send ~self ~cmd:(selector "currentLinguisticInputMode") ~typ:(returning (id))
let currentLocaleRequiresExtendedSetup self = msg_send ~self ~cmd:(selector "currentLocaleRequiresExtendedSetup") ~typ:(returning (bool))
let currentPublicInputMode self = msg_send ~self ~cmd:(selector "currentPublicInputMode") ~typ:(returning (id))
let currentSystemInputMode self = msg_send ~self ~cmd:(selector "currentSystemInputMode") ~typ:(returning (id))
let currentSystemInputModeExcludingEmoji x self = msg_send ~self ~cmd:(selector "currentSystemInputModeExcludingEmoji:") ~typ:(bool @-> returning (id)) x
let currentUsedInputMode self = msg_send ~self ~cmd:(selector "currentUsedInputMode") ~typ:(returning (id))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let defaultDictationLanguages x self = msg_send ~self ~cmd:(selector "defaultDictationLanguages:") ~typ:(id @-> returning (id)) x
let defaultEnabledInputModesForCurrentLocale x self = msg_send ~self ~cmd:(selector "defaultEnabledInputModesForCurrentLocale:") ~typ:(bool @-> returning (id)) x
let defaultInputModes self = msg_send ~self ~cmd:(selector "defaultInputModes") ~typ:(returning (id))
let defaultKeyboardInputModes self = msg_send ~self ~cmd:(selector "defaultKeyboardInputModes") ~typ:(returning (id))
let defaultNormalizedInputModes self = msg_send ~self ~cmd:(selector "defaultNormalizedInputModes") ~typ:(returning (id))
let defaultRawInputModes self = msg_send ~self ~cmd:(selector "defaultRawInputModes") ~typ:(returning (id))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let deviceStateIsLocked self = msg_send ~self ~cmd:(selector "deviceStateIsLocked") ~typ:(returning (bool))
let didAcceptAddKeyboardInputMode self = msg_send ~self ~cmd:(selector "didAcceptAddKeyboardInputMode") ~typ:(returning (void))
let didEnterBackground x self = msg_send ~self ~cmd:(selector "didEnterBackground:") ~typ:(id @-> returning (void)) x
let disableFloatingKeyboardFilter self = msg_send ~self ~cmd:(selector "disableFloatingKeyboardFilter") ~typ:(returning (bool))
let disablesUpdateLastUsedInputModeTimer self = msg_send ~self ~cmd:(selector "disablesUpdateLastUsedInputModeTimer") ~typ:(returning (bool))
let documentInputMode self = msg_send ~self ~cmd:(selector "documentInputMode") ~typ:(returning (id))
let enabledDictationLanguages self = msg_send ~self ~cmd:(selector "enabledDictationLanguages") ~typ:(returning (id))
let enabledInputModeIdentifiers self = msg_send ~self ~cmd:(selector "enabledInputModeIdentifiers") ~typ:(returning (id))
let enabledInputModeIdentifiers' x self = msg_send ~self ~cmd:(selector "enabledInputModeIdentifiers:") ~typ:(bool @-> returning (id)) x
let enabledInputModeLanguages self = msg_send ~self ~cmd:(selector "enabledInputModeLanguages") ~typ:(returning (id))
let enabledInputModes self = msg_send ~self ~cmd:(selector "enabledInputModes") ~typ:(returning (id))
let extensionInputModes self = msg_send ~self ~cmd:(selector "extensionInputModes") ~typ:(returning (id))
let extensionMatchingContext self = msg_send ~self ~cmd:(selector "extensionMatchingContext") ~typ:(returning (id))
let fallbackCurrentInputModeForFilteredInputMode x ~fromInputModes self = msg_send ~self ~cmd:(selector "fallbackCurrentInputModeForFilteredInputMode:fromInputModes:") ~typ:(id @-> id @-> returning (id)) x fromInputModes
let fallbackCurrentInputModeForFilteredInputModeIdentifier x ~fromInputModeIdentifiers self = msg_send ~self ~cmd:(selector "fallbackCurrentInputModeForFilteredInputModeIdentifier:fromInputModeIdentifiers:") ~typ:(id @-> id @-> returning (id)) x fromInputModeIdentifiers
let filteredInputModesForSiriLanguageFromInputModes x self = msg_send ~self ~cmd:(selector "filteredInputModesForSiriLanguageFromInputModes:") ~typ:(id @-> returning (id)) x
let filteredPadInputModesFromInputModes x ~withRules self = msg_send ~self ~cmd:(selector "filteredPadInputModesFromInputModes:withRules:") ~typ:(id @-> id @-> returning (id)) x withRules
let filteredTVInputModesFromInputModes x self = msg_send ~self ~cmd:(selector "filteredTVInputModesFromInputModes:") ~typ:(id @-> returning (id)) x
let forceDictationReturnToKeyboardInputMode self = msg_send ~self ~cmd:(selector "forceDictationReturnToKeyboardInputMode") ~typ:(returning (void))
let fullInputModeFromIdentifier x ~hardwareKeyboardLanguage self = msg_send ~self ~cmd:(selector "fullInputModeFromIdentifier:hardwareKeyboardLanguage:") ~typ:(id @-> id @-> returning (id)) x hardwareKeyboardLanguage
let getDictationSLSLanguagesEnabled self = msg_send ~self ~cmd:(selector "getDictationSLSLanguagesEnabled") ~typ:(returning (id))
let getHardwareKeyboardLanguage x ~countryCode self = msg_send ~self ~cmd:(selector "getHardwareKeyboardLanguage:countryCode:") ~typ:(ptr (id) @-> ptr (id) @-> returning (void)) x countryCode
let handleLastUsedInputMode x ~withNewInputMode self = msg_send ~self ~cmd:(selector "handleLastUsedInputMode:withNewInputMode:") ~typ:(id @-> id @-> returning (void)) x withNewInputMode
let handleSpecificHardwareKeyboard x self = msg_send ~self ~cmd:(selector "handleSpecificHardwareKeyboard:") ~typ:(id @-> returning (void)) x
let hardwareInputMode self = msg_send ~self ~cmd:(selector "hardwareInputMode") ~typ:(returning (id))
let hardwareLayoutToUseForInputMode x self = msg_send ~self ~cmd:(selector "hardwareLayoutToUseForInputMode:") ~typ:(id @-> returning (id)) x
let hardwareLayoutToUseForInputMode' x ~hardwareKeyboardLanguage ~countryCode self = msg_send ~self ~cmd:(selector "hardwareLayoutToUseForInputMode:hardwareKeyboardLanguage:countryCode:") ~typ:(id @-> id @-> id @-> returning (id)) x hardwareKeyboardLanguage countryCode
let identifierIsValidSystemInputMode x self = msg_send ~self ~cmd:(selector "identifierIsValidSystemInputMode:") ~typ:(id @-> returning (bool)) x
let identifiersFromInputModes x self = msg_send ~self ~cmd:(selector "identifiersFromInputModes:") ~typ:(id @-> returning (id)) x
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let inputModeByReplacingSoftwareLayoutWithSoftwareLayout x ~inInputMode self = msg_send ~self ~cmd:(selector "inputModeByReplacingSoftwareLayoutWithSoftwareLayout:inInputMode:") ~typ:(id @-> id @-> returning (id)) x inInputMode
let inputModeContextIdentifier self = msg_send ~self ~cmd:(selector "inputModeContextIdentifier") ~typ:(returning (id))
let inputModeForASCIIToggleWithTraits x self = msg_send ~self ~cmd:(selector "inputModeForASCIIToggleWithTraits:") ~typ:(id @-> returning (id)) x
let inputModeIdentifierLastUsedForLanguage x self = msg_send ~self ~cmd:(selector "inputModeIdentifierLastUsedForLanguage:") ~typ:(id @-> returning (id)) x
let inputModeIdentifierLastUsedForLanguage' x ~includingExtensions self = msg_send ~self ~cmd:(selector "inputModeIdentifierLastUsedForLanguage:includingExtensions:") ~typ:(id @-> bool @-> returning (id)) x includingExtensions
let inputModeLastUsedForLanguage x self = msg_send ~self ~cmd:(selector "inputModeLastUsedForLanguage:") ~typ:(id @-> returning (id)) x
let inputModeLastUsedForLanguage' x ~includingExtensions self = msg_send ~self ~cmd:(selector "inputModeLastUsedForLanguage:includingExtensions:") ~typ:(id @-> bool @-> returning (id)) x includingExtensions
let inputModeToAddForKeyboardLanguage x ~countryCode ~activeModes self = msg_send ~self ~cmd:(selector "inputModeToAddForKeyboardLanguage:countryCode:activeModes:") ~typ:(id @-> id @-> id @-> returning (id)) x countryCode activeModes
let inputModeWithIdentifier x self = msg_send ~self ~cmd:(selector "inputModeWithIdentifier:") ~typ:(id @-> returning (id)) x
let inputModesByAppendingApplicationLanguagesToInputModes x self = msg_send ~self ~cmd:(selector "inputModesByAppendingApplicationLanguagesToInputModes:") ~typ:(id @-> returning (id)) x
let inputModesFromIdentifiers x self = msg_send ~self ~cmd:(selector "inputModesFromIdentifiers:") ~typ:(id @-> returning (id)) x
let inputModesWithoutHardwareSupport self = msg_send ~self ~cmd:(selector "inputModesWithoutHardwareSupport") ~typ:(returning (id))
let isDictationLanguageEnabled x self = msg_send ~self ~cmd:(selector "isDictationLanguageEnabled:") ~typ:(id @-> returning (bool)) x
let isLockscreenPasscodeKeyboard self = msg_send ~self ~cmd:(selector "isLockscreenPasscodeKeyboard") ~typ:(returning (bool))
let keyboardInputModeIdentifiers self = msg_send ~self ~cmd:(selector "keyboardInputModeIdentifiers") ~typ:(returning (id))
let keyboardInputModes self = msg_send ~self ~cmd:(selector "keyboardInputModes") ~typ:(returning (id))
let keyboardLanguageForDictationLanguage x self = msg_send ~self ~cmd:(selector "keyboardLanguageForDictationLanguage:") ~typ:(id @-> returning (id)) x
let keyboardsPreferencesChanged x self = msg_send ~self ~cmd:(selector "keyboardsPreferencesChanged:") ~typ:(id @-> returning (void)) x
let lastInputModeSwitchTriggeredByASCIIToggle self = msg_send ~self ~cmd:(selector "lastInputModeSwitchTriggeredByASCIIToggle") ~typ:(returning (bool))
let lastUsedInputMode self = msg_send ~self ~cmd:(selector "lastUsedInputMode") ~typ:(returning (id))
let lastUsedInputModeForCurrentContext self = msg_send ~self ~cmd:(selector "lastUsedInputModeForCurrentContext") ~typ:(returning (id))
let lastUsedInputModeForTextInputMode x self = msg_send ~self ~cmd:(selector "lastUsedInputModeForTextInputMode:") ~typ:(id @-> returning (id)) x
let loadSuggestedInputModesForSiriLanguage self = msg_send ~self ~cmd:(selector "loadSuggestedInputModesForSiriLanguage") ~typ:(returning (void))
let nextInputModeFromList x ~withFilter ~withTraits self = msg_send ~self ~cmd:(selector "nextInputModeFromList:withFilter:withTraits:") ~typ:(id @-> ullong @-> id @-> returning (id)) x (ULLong.of_int withFilter) withTraits
let nextInputModeInPreferenceListForTraits x self = msg_send ~self ~cmd:(selector "nextInputModeInPreferenceListForTraits:") ~typ:(id @-> returning (id)) x
let nextInputModeInPreferenceListForTraits1 x ~updatePreference self = msg_send ~self ~cmd:(selector "nextInputModeInPreferenceListForTraits:updatePreference:") ~typ:(id @-> bool @-> returning (id)) x updatePreference
let nextInputModeInPreferenceListForTraits2 x ~updatePreference ~skipEmoji self = msg_send ~self ~cmd:(selector "nextInputModeInPreferenceListForTraits:updatePreference:skipEmoji:") ~typ:(id @-> bool @-> bool @-> returning (id)) x updatePreference skipEmoji
let nextInputModeToUse self = msg_send ~self ~cmd:(selector "nextInputModeToUse") ~typ:(returning (id))
let nextInputModeToUseForTraits x self = msg_send ~self ~cmd:(selector "nextInputModeToUseForTraits:") ~typ:(id @-> returning (id)) x
let nextInputModeToUseForTraits' x ~updatePreference self = msg_send ~self ~cmd:(selector "nextInputModeToUseForTraits:updatePreference:") ~typ:(id @-> bool @-> returning (id)) x updatePreference
let normalizedEnabledInputModeIdentifiers self = msg_send ~self ~cmd:(selector "normalizedEnabledInputModeIdentifiers") ~typ:(returning (id))
let normalizedInputModes self = msg_send ~self ~cmd:(selector "normalizedInputModes") ~typ:(returning (id))
let performWithForcedExtensionInputModes x self = msg_send ~self ~cmd:(selector "performWithForcedExtensionInputModes:") ~typ:(ptr void @-> returning (void)) x
let performWithoutExtensionInputModes x self = msg_send ~self ~cmd:(selector "performWithoutExtensionInputModes:") ~typ:(ptr void @-> returning (void)) x
let releaseAddKeyboardNotification self = msg_send ~self ~cmd:(selector "releaseAddKeyboardNotification") ~typ:(returning (void))
let saveDeviceUnlockPasscodeInputModes self = msg_send ~self ~cmd:(selector "saveDeviceUnlockPasscodeInputModes") ~typ:(returning (void))
let setAdditionalTextInputLocales x self = msg_send ~self ~cmd:(selector "setAdditionalTextInputLocales:") ~typ:(id @-> returning (void)) x
let setCurrentInputMode x self = msg_send ~self ~cmd:(selector "setCurrentInputMode:") ~typ:(id @-> returning (void)) x
let setCurrentInputModeInPreference x self = msg_send ~self ~cmd:(selector "setCurrentInputModeInPreference:") ~typ:(id @-> returning (void)) x
let setCurrentUsedInputMode x self = msg_send ~self ~cmd:(selector "setCurrentUsedInputMode:") ~typ:(id @-> returning (void)) x
let setDefaultInputModes x self = msg_send ~self ~cmd:(selector "setDefaultInputModes:") ~typ:(id @-> returning (void)) x
let setDefaultKeyboardInputModes x self = msg_send ~self ~cmd:(selector "setDefaultKeyboardInputModes:") ~typ:(id @-> returning (void)) x
let setDefaultNormalizedInputModes x self = msg_send ~self ~cmd:(selector "setDefaultNormalizedInputModes:") ~typ:(id @-> returning (void)) x
let setDefaultRawInputModes x self = msg_send ~self ~cmd:(selector "setDefaultRawInputModes:") ~typ:(id @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDictationSLSLanguagesEnabled x self = msg_send ~self ~cmd:(selector "setDictationSLSLanguagesEnabled:") ~typ:(id @-> returning (void)) x
let setDisableFloatingKeyboardFilter x self = msg_send ~self ~cmd:(selector "setDisableFloatingKeyboardFilter:") ~typ:(bool @-> returning (void)) x
let setDisablesUpdateLastUsedInputModeTimer x self = msg_send ~self ~cmd:(selector "setDisablesUpdateLastUsedInputModeTimer:") ~typ:(bool @-> returning (void)) x
let setDocumentInputMode x self = msg_send ~self ~cmd:(selector "setDocumentInputMode:") ~typ:(id @-> returning (void)) x
let setEnabledInputModes x self = msg_send ~self ~cmd:(selector "setEnabledInputModes:") ~typ:(id @-> returning (void)) x
let setExtensionMatchingContext x self = msg_send ~self ~cmd:(selector "setExtensionMatchingContext:") ~typ:(id @-> returning (void)) x
let setInputModeContextIdentifier x self = msg_send ~self ~cmd:(selector "setInputModeContextIdentifier:") ~typ:(id @-> returning (void)) x
let setKeyboardInputModeIdentifiers x self = msg_send ~self ~cmd:(selector "setKeyboardInputModeIdentifiers:") ~typ:(id @-> returning (void)) x
let setKeyboardInputModes x self = msg_send ~self ~cmd:(selector "setKeyboardInputModes:") ~typ:(id @-> returning (void)) x
let setLastInputModeSwitchTriggeredByASCIIToggle x self = msg_send ~self ~cmd:(selector "setLastInputModeSwitchTriggeredByASCIIToggle:") ~typ:(bool @-> returning (void)) x
let setLastUsedInputMode x self = msg_send ~self ~cmd:(selector "setLastUsedInputMode:") ~typ:(id @-> returning (void)) x
let setNextInputModeToUse x self = msg_send ~self ~cmd:(selector "setNextInputModeToUse:") ~typ:(id @-> returning (void)) x
let setNormalizedInputModes x self = msg_send ~self ~cmd:(selector "setNormalizedInputModes:") ~typ:(id @-> returning (void)) x
let setShouldRunContinuousDiscovery x self = msg_send ~self ~cmd:(selector "setShouldRunContinuousDiscovery:") ~typ:(bool @-> returning (void)) x
let setSuggestedInputModesForSiriLanguage x self = msg_send ~self ~cmd:(selector "setSuggestedInputModesForSiriLanguage:") ~typ:(id @-> returning (void)) x
let setUserSelectableKeyboardInputModeIdentifiers x self = msg_send ~self ~cmd:(selector "setUserSelectableKeyboardInputModeIdentifiers:") ~typ:(id @-> returning (void)) x
let setUserSelectableKeyboardInputModes x self = msg_send ~self ~cmd:(selector "setUserSelectableKeyboardInputModes:") ~typ:(id @-> returning (void)) x
let shouldRunContinuousDiscovery self = msg_send ~self ~cmd:(selector "shouldRunContinuousDiscovery") ~typ:(returning (bool))
let showAddKeyboardAlertForInputModeIdentifier x self = msg_send ~self ~cmd:(selector "showAddKeyboardAlertForInputModeIdentifier:") ~typ:(id @-> returning (void)) x
let startConnectionForFileAtURL x ~forInputModeIdentifier self = msg_send ~self ~cmd:(selector "startConnectionForFileAtURL:forInputModeIdentifier:") ~typ:(id @-> id @-> returning (void)) x forInputModeIdentifier
let startDictationConnectionForFileAtURL x ~forInputModeIdentifier self = msg_send ~self ~cmd:(selector "startDictationConnectionForFileAtURL:forInputModeIdentifier:") ~typ:(id @-> id @-> returning (void)) x forInputModeIdentifier
let stopDictation self = msg_send ~self ~cmd:(selector "stopDictation") ~typ:(returning (void))
let stopDictationAndResignFirstResponder self = msg_send ~self ~cmd:(selector "stopDictationAndResignFirstResponder") ~typ:(returning (void))
let suggestedDictationLanguagesForDeviceLanguage self = msg_send ~self ~cmd:(selector "suggestedDictationLanguagesForDeviceLanguage") ~typ:(returning (id))
let suggestedInputModesForCurrentHardwareKeyboardAndSuggestedInputModes x self = msg_send ~self ~cmd:(selector "suggestedInputModesForCurrentHardwareKeyboardAndSuggestedInputModes:") ~typ:(id @-> returning (id)) x
let suggestedInputModesForCurrentLocale self = msg_send ~self ~cmd:(selector "suggestedInputModesForCurrentLocale") ~typ:(returning (id))
let suggestedInputModesForCurrentLocale' x ~fallbackToDefaultInputModes self = msg_send ~self ~cmd:(selector "suggestedInputModesForCurrentLocale:fallbackToDefaultInputModes:") ~typ:(bool @-> bool @-> returning (id)) x fallbackToDefaultInputModes
let suggestedInputModesForHardwareKeyboardLanguage x ~countryCode ~inputModes self = msg_send ~self ~cmd:(selector "suggestedInputModesForHardwareKeyboardLanguage:countryCode:inputModes:") ~typ:(id @-> id @-> id @-> returning (id)) x countryCode inputModes
let suggestedInputModesForLocales x self = msg_send ~self ~cmd:(selector "suggestedInputModesForLocales:") ~typ:(id @-> returning (id)) x
let suggestedInputModesForPreferredLanguages self = msg_send ~self ~cmd:(selector "suggestedInputModesForPreferredLanguages") ~typ:(returning (id))
let suggestedInputModesForSiriLanguage self = msg_send ~self ~cmd:(selector "suggestedInputModesForSiriLanguage") ~typ:(returning (id))
let supportedFullModesForHardwareKeyboard x ~countryCode ~activeModes ~matchedMode self = msg_send ~self ~cmd:(selector "supportedFullModesForHardwareKeyboard:countryCode:activeModes:matchedMode:") ~typ:(id @-> id @-> id @-> ptr (id) @-> returning (id)) x countryCode activeModes matchedMode
let supportedInputModeIdentifiers self = msg_send ~self ~cmd:(selector "supportedInputModeIdentifiers") ~typ:(returning (id))
let supportedInputModesFromArray x self = msg_send ~self ~cmd:(selector "supportedInputModesFromArray:") ~typ:(id @-> returning (id)) x
let switchToCurrentSystemInputMode self = msg_send ~self ~cmd:(selector "switchToCurrentSystemInputMode") ~typ:(returning (void))
let switchToDictationInputMode self = msg_send ~self ~cmd:(selector "switchToDictationInputMode") ~typ:(returning (void))
let switchToDictationInputModeWithOptions x self = msg_send ~self ~cmd:(selector "switchToDictationInputModeWithOptions:") ~typ:(id @-> returning (void)) x
let textInputModeForResponder x self = msg_send ~self ~cmd:(selector "textInputModeForResponder:") ~typ:(id @-> returning (id)) x
let updateCurrentAndNextInputModes self = msg_send ~self ~cmd:(selector "updateCurrentAndNextInputModes") ~typ:(returning (void))
let updateCurrentInputMode x self = msg_send ~self ~cmd:(selector "updateCurrentInputMode:") ~typ:(id @-> returning (void)) x
let updateDefaultInputModesIfNecessaryForIdiom self = msg_send ~self ~cmd:(selector "updateDefaultInputModesIfNecessaryForIdiom") ~typ:(returning (void))
let updateEnabledDictationAndSLSLanguagesWithCompletionBlock x self = msg_send ~self ~cmd:(selector "updateEnabledDictationAndSLSLanguagesWithCompletionBlock:") ~typ:(ptr void @-> returning (void)) x
let updateEnabledDictationLanguages x self = msg_send ~self ~cmd:(selector "updateEnabledDictationLanguages:") ~typ:(bool @-> returning (id)) x
let updateLastUsedInputMode x self = msg_send ~self ~cmd:(selector "updateLastUsedInputMode:") ~typ:(id @-> returning (void)) x
let updateUserSelectableInputModes self = msg_send ~self ~cmd:(selector "updateUserSelectableInputModes") ~typ:(returning (void))
let userSelectableInputModeIdentifiersFromInputModeIdentifiers x self = msg_send ~self ~cmd:(selector "userSelectableInputModeIdentifiersFromInputModeIdentifiers:") ~typ:(id @-> returning (id)) x
let userSelectableInputModesFromInputModes x self = msg_send ~self ~cmd:(selector "userSelectableInputModesFromInputModes:") ~typ:(id @-> returning (id)) x
let userSelectableKeyboardInputModeIdentifiers self = msg_send ~self ~cmd:(selector "userSelectableKeyboardInputModeIdentifiers") ~typ:(returning (id))
let userSelectableKeyboardInputModes self = msg_send ~self ~cmd:(selector "userSelectableKeyboardInputModes") ~typ:(returning (id))
let verifyKeyboardExtensionsWithApp self = msg_send ~self ~cmd:(selector "verifyKeyboardExtensionsWithApp") ~typ:(returning (bool))
let willEnterForeground x self = msg_send ~self ~cmd:(selector "willEnterForeground:") ~typ:(id @-> returning (void)) x