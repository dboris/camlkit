(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UIKeyboardLayoutStar"

module C = struct
  let accessibilitySensitivityChanged self = msg_send ~self ~cmd:(selector "accessibilitySensitivityChanged") ~typ:(returning (void))
  let keyboardFromFactoryWithName x ~screenTraits self = msg_send ~self ~cmd:(selector "keyboardFromFactoryWithName:screenTraits:") ~typ:(id @-> id @-> returning (id)) x screenTraits
  let keyboardSizeForInputMode x ~screenTraits ~keyboardType self = msg_send_stret ~self ~cmd:(selector "keyboardSizeForInputMode:screenTraits:keyboardType:") ~typ:(id @-> id @-> llong @-> returning (CGSize.t)) ~return_type:CGSize.t x screenTraits (LLong.of_int keyboardType)
  let keyboardWithName x ~screenTraits self = msg_send ~self ~cmd:(selector "keyboardWithName:screenTraits:") ~typ:(id @-> id @-> returning (id)) x screenTraits
  let sharedPunctuationCharacterSet self = msg_send ~self ~cmd:(selector "sharedPunctuationCharacterSet") ~typ:(returning (id))
  let sharedRivenKeyplaneGenerator self = msg_send ~self ~cmd:(selector "sharedRivenKeyplaneGenerator") ~typ:(returning (id))
end

let accessibilitySensitivityChanged self = msg_send ~self ~cmd:(selector "accessibilitySensitivityChanged") ~typ:(returning (void))
let activationIndicatorView self = msg_send ~self ~cmd:(selector "activationIndicatorView") ~typ:(returning (id))
let activeKey self = msg_send ~self ~cmd:(selector "activeKey") ~typ:(returning (id))
let activeMultitapCompleteKey self = msg_send ~self ~cmd:(selector "activeMultitapCompleteKey") ~typ:(returning (id))
let activeTouchInfoForShift self = msg_send ~self ~cmd:(selector "activeTouchInfoForShift") ~typ:(returning (id))
let addContinuousPathPoint x ~withTimestamp self = msg_send ~self ~cmd:(selector "addContinuousPathPoint:withTimestamp:") ~typ:(CGPoint.t @-> double @-> returning (void)) x withTimestamp
let allKeyplanesHaveSameHeight self = msg_send ~self ~cmd:(selector "allKeyplanesHaveSameHeight") ~typ:(returning (bool))
let annotateKeysWithDeveloperPunctuation self = msg_send ~self ~cmd:(selector "annotateKeysWithDeveloperPunctuation") ~typ:(returning (void))
let annotateWriteboardDisplayTypeHintForKeyIfNeeded self = msg_send ~self ~cmd:(selector "annotateWriteboardDisplayTypeHintForKeyIfNeeded") ~typ:(returning (void))
let applyError x ~toKey self = msg_send_stret ~self ~cmd:(selector "applyError:toKey:") ~typ:(CGPoint.t @-> id @-> returning (CGPoint.t)) ~return_type:CGPoint.t x toKey
let autoShift self = msg_send ~self ~cmd:(selector "autoShift") ~typ:(returning (bool))
let baseKeyForString x self = msg_send ~self ~cmd:(selector "baseKeyForString:") ~typ:(id @-> returning (id)) x
let biasedKeyboardWidthRatio self = msg_send ~self ~cmd:(selector "biasedKeyboardWidthRatio") ~typ:(returning (double))
let blinkAssertion self = msg_send ~self ~cmd:(selector "blinkAssertion") ~typ:(returning (id))
let cacheIdentifierForKeyplaneNamed x self = msg_send ~self ~cmd:(selector "cacheIdentifierForKeyplaneNamed:") ~typ:(id @-> returning (id)) x
let cacheTokenForKeyplane x ~caseAlternates self = msg_send ~self ~cmd:(selector "cacheTokenForKeyplane:caseAlternates:") ~typ:(id @-> bool @-> returning (id)) x caseAlternates
let cachedCompositeImageWithCacheKey x self = msg_send ~self ~cmd:(selector "cachedCompositeImageWithCacheKey:") ~typ:(id @-> returning (id)) x
let calculateReachabilityScoreWithKey x ~keyError self = msg_send ~self ~cmd:(selector "calculateReachabilityScoreWithKey:keyError:") ~typ:(id @-> CGPoint.t @-> returning (void)) x keyError
let canAddRomanSwitchKey self = msg_send ~self ~cmd:(selector "canAddRomanSwitchKey") ~typ:(returning (bool))
let canForceTouchUUIDCommit x ~inWindow self = msg_send ~self ~cmd:(selector "canForceTouchUUIDCommit:inWindow:") ~typ:(id @-> id @-> returning (bool)) x inWindow
let canMultitap self = msg_send ~self ~cmd:(selector "canMultitap") ~typ:(returning (bool))
let canProduceString x self = msg_send ~self ~cmd:(selector "canProduceString:") ~typ:(id @-> returning (bool)) x
let canReuseKeyplaneView self = msg_send ~self ~cmd:(selector "canReuseKeyplaneView") ~typ:(returning (bool))
let cancelDelayedCentroidUpdate self = msg_send ~self ~cmd:(selector "cancelDelayedCentroidUpdate") ~typ:(returning (void))
let cancelMultitapTimer self = msg_send ~self ~cmd:(selector "cancelMultitapTimer") ~typ:(returning (void))
let cancelTouchIfNecessaryForInfo x ~forResting self = msg_send ~self ~cmd:(selector "cancelTouchIfNecessaryForInfo:forResting:") ~typ:(id @-> bool @-> returning (void)) x forResting
let cancelTouchesForTwoFingerTapGesture x self = msg_send ~self ~cmd:(selector "cancelTouchesForTwoFingerTapGesture:") ~typ:(id @-> returning (void)) x
let candidateList self = msg_send ~self ~cmd:(selector "candidateList") ~typ:(returning (id))
let changeToKeyplane x self = msg_send ~self ~cmd:(selector "changeToKeyplane:") ~typ:(id @-> returning (void)) x
let cleanupPreviousKeyboardWithNewInputTraits x self = msg_send ~self ~cmd:(selector "cleanupPreviousKeyboardWithNewInputTraits:") ~typ:(id @-> returning (void)) x
let clearAllTouchInfo self = msg_send ~self ~cmd:(selector "clearAllTouchInfo") ~typ:(returning (void))
let clearContinuousPathView self = msg_send ~self ~cmd:(selector "clearContinuousPathView") ~typ:(returning (void))
let clearHandwritingStrokesIfNeededAndNotify x self = msg_send ~self ~cmd:(selector "clearHandwritingStrokesIfNeededAndNotify:") ~typ:(bool @-> returning (void)) x
let clearInfoForTouch x self = msg_send ~self ~cmd:(selector "clearInfoForTouch:") ~typ:(id @-> returning (void)) x
let clearInfoForTouch' x ~forResting self = msg_send ~self ~cmd:(selector "clearInfoForTouch:forResting:") ~typ:(id @-> bool @-> returning (void)) x forResting
let clearKeyAnnotationsIfNecessary self = msg_send ~self ~cmd:(selector "clearKeyAnnotationsIfNecessary") ~typ:(returning (void))
let clearTransientState self = msg_send ~self ~cmd:(selector "clearTransientState") ~typ:(returning (void))
let clearUnusedObjects x self = msg_send ~self ~cmd:(selector "clearUnusedObjects:") ~typ:(bool @-> returning (void)) x
let completeCommitTouchesPrecedingTouchDownWithKey x ~withActions ~executionContext self = msg_send ~self ~cmd:(selector "completeCommitTouchesPrecedingTouchDownWithKey:withActions:executionContext:") ~typ:(id @-> ullong @-> id @-> returning (void)) x (ULLong.of_int withActions) executionContext
let completeDeleteActionForTouchDownWithActions x ~executionContext self = msg_send ~self ~cmd:(selector "completeDeleteActionForTouchDownWithActions:executionContext:") ~typ:(ullong @-> id @-> returning (void)) (ULLong.of_int x) executionContext
let completeHitTestForTouchDown x ~executionContext self = msg_send ~self ~cmd:(selector "completeHitTestForTouchDown:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let completeHitTestForTouchDragged x ~hitKey self = msg_send ~self ~cmd:(selector "completeHitTestForTouchDragged:hitKey:") ~typ:(id @-> id @-> returning (void)) x hitKey
let completeRetestForTouchUp x ~timestamp ~interval ~executionContext self = msg_send ~self ~cmd:(selector "completeRetestForTouchUp:timestamp:interval:executionContext:") ~typ:(id @-> double @-> double @-> id @-> returning (void)) x timestamp interval executionContext
let completeSendStringActionForTouchDownWithKey x ~withActions ~executionContext self = msg_send ~self ~cmd:(selector "completeSendStringActionForTouchDownWithKey:withActions:executionContext:") ~typ:(id @-> ullong @-> id @-> returning (void)) x (ULLong.of_int withActions) executionContext
let completeSendStringActionForTouchUp x ~withActions ~timestamp ~interval ~didLongPress ~prevActions ~executionContext self = msg_send ~self ~cmd:(selector "completeSendStringActionForTouchUp:withActions:timestamp:interval:didLongPress:prevActions:executionContext:") ~typ:(id @-> ullong @-> double @-> double @-> bool @-> ullong @-> id @-> returning (void)) x (ULLong.of_int withActions) timestamp interval didLongPress (ULLong.of_int prevActions) executionContext
let continueFromInternationalActionForTouchUp x ~withActions ~timestamp ~interval ~didLongPress ~prevActions ~executionContext self = msg_send ~self ~cmd:(selector "continueFromInternationalActionForTouchUp:withActions:timestamp:interval:didLongPress:prevActions:executionContext:") ~typ:(id @-> ullong @-> double @-> double @-> bool @-> ullong @-> id @-> returning (void)) x (ULLong.of_int withActions) timestamp interval didLongPress (ULLong.of_int prevActions) executionContext
let createKeyEventForStringAction x ~forKey ~inputFlags self = msg_send ~self ~cmd:(selector "createKeyEventForStringAction:forKey:inputFlags:") ~typ:(id @-> id @-> int @-> returning (id)) x forKey inputFlags
let createKeyEventForStringAction' x ~forKey ~touchInfo ~inputFlags self = msg_send ~self ~cmd:(selector "createKeyEventForStringAction:forKey:touchInfo:inputFlags:") ~typ:(id @-> id @-> id @-> int @-> returning (id)) x forKey touchInfo inputFlags
let currentHandBias self = msg_send ~self ~cmd:(selector "currentHandBias") ~typ:(returning (llong))
let currentKeyplane self = msg_send ~self ~cmd:(selector "currentKeyplane") ~typ:(returning (id))
let currentKeyplaneView self = msg_send ~self ~cmd:(selector "currentKeyplaneView") ~typ:(returning (id))
let currentRepresentedStringForDualDisplayKey x self = msg_send ~self ~cmd:(selector "currentRepresentedStringForDualDisplayKey:") ~typ:(id @-> returning (id)) x
let deactivateActiveKey self = msg_send ~self ~cmd:(selector "deactivateActiveKey") ~typ:(returning (void))
let deactivateActiveKeys self = msg_send ~self ~cmd:(selector "deactivateActiveKeys") ~typ:(returning (void))
let deactivateActiveKeysClearingTouchInfo x ~clearingDimming self = msg_send ~self ~cmd:(selector "deactivateActiveKeysClearingTouchInfo:clearingDimming:") ~typ:(bool @-> bool @-> returning (void)) x clearingDimming
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let defaultKeyplaneForKeyplane x self = msg_send ~self ~cmd:(selector "defaultKeyplaneForKeyplane:") ~typ:(id @-> returning (id)) x
let defaultNameForKeyplaneName x self = msg_send ~self ~cmd:(selector "defaultNameForKeyplaneName:") ~typ:(id @-> returning (id)) x
let defaultSelectedVariantIndexForKey x ~withActions self = msg_send ~self ~cmd:(selector "defaultSelectedVariantIndexForKey:withActions:") ~typ:(id @-> ullong @-> returning (llong)) x (ULLong.of_int withActions)
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let deleteHandwritingStrokesAtIndexes x self = msg_send ~self ~cmd:(selector "deleteHandwritingStrokesAtIndexes:") ~typ:(id @-> returning (void)) x
let diacriticForwardCompose self = msg_send ~self ~cmd:(selector "diacriticForwardCompose") ~typ:(returning (bool))
let didBeginContinuousPath self = msg_send ~self ~cmd:(selector "didBeginContinuousPath") ~typ:(returning (void))
let didClearInput self = msg_send ~self ~cmd:(selector "didClearInput") ~typ:(returning (void))
let didDetectPinchWithSeparation x self = msg_send ~self ~cmd:(selector "didDetectPinchWithSeparation:") ~typ:(double @-> returning (void)) x
let didEndIndirectSelectionGesture self = msg_send ~self ~cmd:(selector "didEndIndirectSelectionGesture") ~typ:(returning (void))
let didEndIndirectSelectionGesture' x self = msg_send ~self ~cmd:(selector "didEndIndirectSelectionGesture:") ~typ:(bool @-> returning (void)) x
let didLongPress self = msg_send ~self ~cmd:(selector "didLongPress") ~typ:(returning (bool))
let didMoveToWindow self = msg_send ~self ~cmd:(selector "didMoveToWindow") ~typ:(returning (void))
let didRotate self = msg_send ~self ~cmd:(selector "didRotate") ~typ:(returning (void))
let didTriggerDestructiveRenderConfigChange self = msg_send ~self ~cmd:(selector "didTriggerDestructiveRenderConfigChange") ~typ:(returning (void))
let dismissGestureKeyboardIntroduction self = msg_send ~self ~cmd:(selector "dismissGestureKeyboardIntroduction") ~typ:(returning (void))
let displayTypeHintForMoreKey self = msg_send ~self ~cmd:(selector "displayTypeHintForMoreKey") ~typ:(returning (int))
let displayTypeHintForShiftKey self = msg_send ~self ~cmd:(selector "displayTypeHintForShiftKey") ~typ:(returning (int))
let divideKeysIntoLeft x ~right self = msg_send ~self ~cmd:(selector "divideKeysIntoLeft:right:") ~typ:(id @-> id @-> returning (void)) x right
let downActionFlagsForKey x self = msg_send ~self ~cmd:(selector "downActionFlagsForKey:") ~typ:(id @-> returning (ullong)) x
let downActionShiftWithKey x self = msg_send ~self ~cmd:(selector "downActionShiftWithKey:") ~typ:(id @-> returning (void)) x
let dragGestureRectInView x self = msg_send_stret ~self ~cmd:(selector "dragGestureRectInView:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let emojiKeyManager self = msg_send ~self ~cmd:(selector "emojiKeyManager") ~typ:(returning (id))
let endMultitapForKey x self = msg_send ~self ~cmd:(selector "endMultitapForKey:") ~typ:(id @-> returning (void)) x
let fadeWithInvocation x self = msg_send ~self ~cmd:(selector "fadeWithInvocation:") ~typ:(id @-> returning (void)) x
let finishContinuousPathView x self = msg_send ~self ~cmd:(selector "finishContinuousPathView:") ~typ:(bool @-> returning (void)) x
let finishSliderBehaviorFeedback self = msg_send ~self ~cmd:(selector "finishSliderBehaviorFeedback") ~typ:(returning (void))
let finishSplitTransition self = msg_send ~self ~cmd:(selector "finishSplitTransition") ~typ:(returning (void))
let finishSplitTransitionWithCompletion x self = msg_send ~self ~cmd:(selector "finishSplitTransitionWithCompletion:") ~typ:(ptr void @-> returning (void)) x
let finishSplitTransitionWithProgress x self = msg_send ~self ~cmd:(selector "finishSplitTransitionWithProgress:") ~typ:(double @-> returning (void)) x
let finishSplitWithCompletion x self = msg_send ~self ~cmd:(selector "finishSplitWithCompletion:") ~typ:(ptr void @-> returning (void)) x
let flickPopupStringForKey x ~withString self = msg_send ~self ~cmd:(selector "flickPopupStringForKey:withString:") ~typ:(id @-> id @-> returning (id)) x withString
let flickStringForInputKey x ~direction self = msg_send ~self ~cmd:(selector "flickStringForInputKey:direction:") ~typ:(id @-> llong @-> returning (id)) x (LLong.of_int direction)
let flushKeyCache x self = msg_send ~self ~cmd:(selector "flushKeyCache:") ~typ:(id @-> returning (void)) x
let frameForKeyWithRepresentedString x self = msg_send_stret ~self ~cmd:(selector "frameForKeyWithRepresentedString:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let frameForKeylayoutName x self = msg_send_stret ~self ~cmd:(selector "frameForKeylayoutName:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let frameForKeylayoutName' x ~onKeyplaneName self = msg_send_stret ~self ~cmd:(selector "frameForKeylayoutName:onKeyplaneName:") ~typ:(id @-> id @-> returning (CGRect.t)) ~return_type:CGRect.t x onKeyplaneName
let frameForLastKeyWithRepresentedString x self = msg_send_stret ~self ~cmd:(selector "frameForLastKeyWithRepresentedString:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let generateInfoForTouch x self = msg_send ~self ~cmd:(selector "generateInfoForTouch:") ~typ:(id @-> returning (id)) x
let gestureRecognizer x ~shouldReceiveTouch self = msg_send ~self ~cmd:(selector "gestureRecognizer:shouldReceiveTouch:") ~typ:(id @-> id @-> returning (bool)) x shouldReceiveTouch
let gestureRecognizerShouldBegin x self = msg_send ~self ~cmd:(selector "gestureRecognizerShouldBegin:") ~typ:(id @-> returning (bool)) x
let getCenterForKeyUnderLeftIndexFinger self = msg_send_stret ~self ~cmd:(selector "getCenterForKeyUnderLeftIndexFinger") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let getCenterForKeyUnderRightIndexFinger self = msg_send_stret ~self ~cmd:(selector "getCenterForKeyUnderRightIndexFinger") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let getHandRestRecognizerState self = msg_send ~self ~cmd:(selector "getHandRestRecognizerState") ~typ:(returning (bool))
let getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow x self = msg_send ~self ~cmd:(selector "getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:") ~typ:(llong @-> returning (id)) (LLong.of_int x)
let getSortedKeysForDisplayRowHint x self = msg_send ~self ~cmd:(selector "getSortedKeysForDisplayRowHint:") ~typ:(int @-> returning (id)) x
let globeKeyDisplaysAsEmojiKey self = msg_send ~self ~cmd:(selector "globeKeyDisplaysAsEmojiKey") ~typ:(returning (bool))
let handRestRecognizerGetHomeRowHint self = msg_send ~self ~cmd:(selector "handRestRecognizerGetHomeRowHint") ~typ:(returning (id))
let handRestRecognizerNotifyRestForBegin x ~location ~timestamp ~pathIndex ~touchUUID ~context self = msg_send ~self ~cmd:(selector "handRestRecognizerNotifyRestForBegin:location:timestamp:pathIndex:touchUUID:context:") ~typ:(bool @-> CGPoint.t @-> double @-> int @-> id @-> id @-> returning (void)) x location timestamp pathIndex touchUUID context
let handRestRecognizerShouldNeverIgnoreTouchState x ~fromPoint ~toPoint ~forRestingState ~otherRestedTouchLocations self = msg_send ~self ~cmd:(selector "handRestRecognizerShouldNeverIgnoreTouchState:fromPoint:toPoint:forRestingState:otherRestedTouchLocations:") ~typ:(id @-> CGPoint.t @-> CGPoint.t @-> ullong @-> id @-> returning (bool)) x fromPoint toPoint (ULLong.of_int forRestingState) otherRestedTouchLocations
let handRestRecognizerSilenceNextTouchDown self = msg_send ~self ~cmd:(selector "handRestRecognizerSilenceNextTouchDown") ~typ:(returning (ptr void))
let handRestRecognizerStandardKeyPixelSize self = msg_send_stret ~self ~cmd:(selector "handRestRecognizerStandardKeyPixelSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let handleDelayedCentroidUpdate self = msg_send ~self ~cmd:(selector "handleDelayedCentroidUpdate") ~typ:(returning (void))
let handleDismissFlickView self = msg_send ~self ~cmd:(selector "handleDismissFlickView") ~typ:(returning (void))
let handleDismissFlickView' x self = msg_send ~self ~cmd:(selector "handleDismissFlickView:") ~typ:(id @-> returning (void)) x
let handleFlick x self = msg_send ~self ~cmd:(selector "handleFlick:") ~typ:(id @-> returning (bool)) x
let handleKeyboardMenusForTouch x self = msg_send ~self ~cmd:(selector "handleKeyboardMenusForTouch:") ~typ:(id @-> returning (void)) x
let handleMultitapTimerFired self = msg_send ~self ~cmd:(selector "handleMultitapTimerFired") ~typ:(returning (void))
let handlePopupView self = msg_send ~self ~cmd:(selector "handlePopupView") ~typ:(returning (void))
let handlePopupView' x self = msg_send ~self ~cmd:(selector "handlePopupView:") ~typ:(id @-> returning (void)) x
let handlerForNotification x self = msg_send ~self ~cmd:(selector "handlerForNotification:") ~typ:(id @-> returning (_SEL)) x
let hasAccentKey self = msg_send ~self ~cmd:(selector "hasAccentKey") ~typ:(returning (bool))
let hasActiveContinuousPathInput self = msg_send ~self ~cmd:(selector "hasActiveContinuousPathInput") ~typ:(returning (bool))
let hasActiveKeys self = msg_send ~self ~cmd:(selector "hasActiveKeys") ~typ:(returning (bool))
let hasCandidateKeys self = msg_send ~self ~cmd:(selector "hasCandidateKeys") ~typ:(returning (bool))
let highlightedVariantListForStylingKey x self = msg_send ~self ~cmd:(selector "highlightedVariantListForStylingKey:") ~typ:(id @-> returning (id)) x
let hitBuffer self = msg_send ~self ~cmd:(selector "hitBuffer") ~typ:(returning (double))
let hitTest x ~withEvent self = msg_send ~self ~cmd:(selector "hitTest:withEvent:") ~typ:(CGPoint.t @-> id @-> returning (id)) x withEvent
let hostViewForResizingKeyplane x self = msg_send ~self ~cmd:(selector "hostViewForResizingKeyplane:") ~typ:(id @-> returning (id)) x
let ignoreWriteboard self = msg_send ~self ~cmd:(selector "ignoreWriteboard") ~typ:(returning (bool))
let ignoresShiftState self = msg_send ~self ~cmd:(selector "ignoresShiftState") ~typ:(returning (bool))
let incrementPunctuationIfNeeded x self = msg_send ~self ~cmd:(selector "incrementPunctuationIfNeeded:") ~typ:(id @-> returning (void)) x
let infoForTouch x self = msg_send ~self ~cmd:(selector "infoForTouch:") ~typ:(id @-> returning (id)) x
let infoForTouchUUID x self = msg_send ~self ~cmd:(selector "infoForTouchUUID:") ~typ:(id @-> returning (id)) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning (id)) x
let initialKeyplaneNameWithKBStarName x self = msg_send ~self ~cmd:(selector "initialKeyplaneNameWithKBStarName:") ~typ:(id @-> returning (id)) x
let inputModeToMergeCapsLockKey self = msg_send ~self ~cmd:(selector "inputModeToMergeCapsLockKey") ~typ:(returning (id))
let installGestureRecognizers self = msg_send ~self ~cmd:(selector "installGestureRecognizers") ~typ:(returning (void))
let internationalKeyDisplayStringOnEmojiKeyboard self = msg_send ~self ~cmd:(selector "internationalKeyDisplayStringOnEmojiKeyboard") ~typ:(returning (id))
let is10KeyRendering self = msg_send ~self ~cmd:(selector "is10KeyRendering") ~typ:(returning (bool))
let isAlphabeticPlane self = msg_send ~self ~cmd:(selector "isAlphabeticPlane") ~typ:(returning (bool))
let isDeadkeyInput x self = msg_send ~self ~cmd:(selector "isDeadkeyInput:") ~typ:(id @-> returning (bool)) x
let isDeveloperGestureKeybaord self = msg_send ~self ~cmd:(selector "isDeveloperGestureKeybaord") ~typ:(returning (bool))
let isEmojiKeyplane self = msg_send ~self ~cmd:(selector "isEmojiKeyplane") ~typ:(returning (bool))
let isGeometricShiftOrMoreKeyForTouch x self = msg_send ~self ~cmd:(selector "isGeometricShiftOrMoreKeyForTouch:") ~typ:(id @-> returning (bool)) x
let isHandwritingPlane self = msg_send ~self ~cmd:(selector "isHandwritingPlane") ~typ:(returning (bool))
let isKanaPlane self = msg_send ~self ~cmd:(selector "isKanaPlane") ~typ:(returning (bool))
let isKeyScriptSwitchKey x self = msg_send ~self ~cmd:(selector "isKeyScriptSwitchKey:") ~typ:(id @-> returning (bool)) x
let isLongPressedKey x self = msg_send ~self ~cmd:(selector "isLongPressedKey:") ~typ:(id @-> returning (bool)) x
let isMultitapKey x self = msg_send ~self ~cmd:(selector "isMultitapKey:") ~typ:(id @-> returning (bool)) x
let isResized self = msg_send ~self ~cmd:(selector "isResized") ~typ:(returning (bool))
let isResizing self = msg_send ~self ~cmd:(selector "isResizing") ~typ:(returning (bool))
let isRotating self = msg_send ~self ~cmd:(selector "isRotating") ~typ:(returning (bool))
let isShiftKeyBeingHeld self = msg_send ~self ~cmd:(selector "isShiftKeyBeingHeld") ~typ:(returning (bool))
let isShiftKeyPlaneChooser self = msg_send ~self ~cmd:(selector "isShiftKeyPlaneChooser") ~typ:(returning (bool))
let isTrackpadMode self = msg_send ~self ~cmd:(selector "isTrackpadMode") ~typ:(returning (bool))
let keyForKeyboardName x ~screenTraits self = msg_send ~self ~cmd:(selector "keyForKeyboardName:screenTraits:") ~typ:(id @-> id @-> returning (id)) x screenTraits
let keyHasAccentedVariants x self = msg_send ~self ~cmd:(selector "keyHasAccentedVariants:") ~typ:(id @-> returning (bool)) x
let keyHitTest x self = msg_send ~self ~cmd:(selector "keyHitTest:") ~typ:(CGPoint.t @-> returning (id)) x
let keyHitTestClosestToPoint x self = msg_send ~self ~cmd:(selector "keyHitTestClosestToPoint:") ~typ:(CGPoint.t @-> returning (id)) x
let keyHitTestClosestToPoint' x ~inKeys self = msg_send ~self ~cmd:(selector "keyHitTestClosestToPoint:inKeys:") ~typ:(CGPoint.t @-> id @-> returning (id)) x inKeys
let keyHitTestContainingPoint x self = msg_send ~self ~cmd:(selector "keyHitTestContainingPoint:") ~typ:(CGPoint.t @-> returning (id)) x
let keyHitTestWithoutCharging x self = msg_send ~self ~cmd:(selector "keyHitTestWithoutCharging:") ~typ:(CGPoint.t @-> returning (id)) x
let keyViewAnimator self = msg_send ~self ~cmd:(selector "keyViewAnimator") ~typ:(returning (id))
let keyViewAnimatorClassForCurrentKeyboardLayout self = msg_send ~self ~cmd:(selector "keyViewAnimatorClassForCurrentKeyboardLayout") ~typ:(returning (_Class))
let keyViewHitTestForPoint x self = msg_send ~self ~cmd:(selector "keyViewHitTestForPoint:") ~typ:(CGPoint.t @-> returning (id)) x
let keyWithRepresentedString x self = msg_send ~self ~cmd:(selector "keyWithRepresentedString:") ~typ:(id @-> returning (id)) x
let keyboard self = msg_send ~self ~cmd:(selector "keyboard") ~typ:(returning (id))
let keyboardName self = msg_send ~self ~cmd:(selector "keyboardName") ~typ:(returning (id))
let keycodeForKey x self = msg_send ~self ~cmd:(selector "keycodeForKey:") ~typ:(id @-> returning (int)) x
let keylistContainingKey x self = msg_send ~self ~cmd:(selector "keylistContainingKey:") ~typ:(id @-> returning (id)) x
let keyplane self = msg_send ~self ~cmd:(selector "keyplane") ~typ:(returning (id))
let keyplaneContainsDismissKey self = msg_send ~self ~cmd:(selector "keyplaneContainsDismissKey") ~typ:(returning (bool))
let keyplaneContainsEmojiKey self = msg_send ~self ~cmd:(selector "keyplaneContainsEmojiKey") ~typ:(returning (bool))
let keyplaneForKey x self = msg_send ~self ~cmd:(selector "keyplaneForKey:") ~typ:(id @-> returning (id)) x
let keyplaneName self = msg_send ~self ~cmd:(selector "keyplaneName") ~typ:(returning (id))
let keyplaneNameForRevertAfterTouch self = msg_send ~self ~cmd:(selector "keyplaneNameForRevertAfterTouch") ~typ:(returning (id))
let keyplaneNamed x self = msg_send ~self ~cmd:(selector "keyplaneNamed:") ~typ:(id @-> returning (id)) x
let keyplaneShiftState self = msg_send ~self ~cmd:(selector "keyplaneShiftState") ~typ:(returning (ullong))
let keyplaneSupportsResizingGesture self = msg_send ~self ~cmd:(selector "keyplaneSupportsResizingGesture") ~typ:(returning (bool))
let keyplaneUsesResizingOffset self = msg_send ~self ~cmd:(selector "keyplaneUsesResizingOffset") ~typ:(returning (bool))
let keyplaneView x ~containingViewForActiveKey self = msg_send ~self ~cmd:(selector "keyplaneView:containingViewForActiveKey:") ~typ:(id @-> id @-> returning (id)) x containingViewForActiveKey
let lastTouchDownTimestamp self = msg_send ~self ~cmd:(selector "lastTouchDownTimestamp") ~typ:(returning (double))
let lastTouchUpTimestamp self = msg_send ~self ~cmd:(selector "lastTouchUpTimestamp") ~typ:(returning (double))
let lastTwoFingerTapTimestamp self = msg_send ~self ~cmd:(selector "lastTwoFingerTapTimestamp") ~typ:(returning (double))
let layoutSubviews self = msg_send ~self ~cmd:(selector "layoutSubviews") ~typ:(returning (void))
let layoutTag self = msg_send ~self ~cmd:(selector "layoutTag") ~typ:(returning (id))
let localizedInputKey self = msg_send ~self ~cmd:(selector "localizedInputKey") ~typ:(returning (id))
let localizedInputMode self = msg_send ~self ~cmd:(selector "localizedInputMode") ~typ:(returning (id))
let logHandwritingData self = msg_send ~self ~cmd:(selector "logHandwritingData") ~typ:(returning (void))
let longPressAction self = msg_send ~self ~cmd:(selector "longPressAction") ~typ:(returning (void))
let mergeKeysIfNeeded self = msg_send ~self ~cmd:(selector "mergeKeysIfNeeded") ~typ:(returning (void))
let modalDisplayView self = msg_send ~self ~cmd:(selector "modalDisplayView") ~typ:(returning (id))
let multitapCompleteKeys self = msg_send ~self ~cmd:(selector "multitapCompleteKeys") ~typ:(returning (id))
let multitapExpired self = msg_send ~self ~cmd:(selector "multitapExpired") ~typ:(returning (void))
let multitapForwardKeys self = msg_send ~self ~cmd:(selector "multitapForwardKeys") ~typ:(returning (id))
let multitapInterrupted self = msg_send ~self ~cmd:(selector "multitapInterrupted") ~typ:(returning (void))
let muteNextKeyClickSound self = msg_send ~self ~cmd:(selector "muteNextKeyClickSound") ~typ:(returning (bool))
let nextToUseInputModeDidChange x self = msg_send ~self ~cmd:(selector "nextToUseInputModeDidChange:") ~typ:(id @-> returning (void)) x
let pathEffectView self = msg_send ~self ~cmd:(selector "pathEffectView") ~typ:(returning (id))
let performHitTestForTouchInfo x ~touchStage ~executionContextPassingUIKBTree self = msg_send ~self ~cmd:(selector "performHitTestForTouchInfo:touchStage:executionContextPassingUIKBTree:") ~typ:(id @-> int @-> id @-> returning (void)) x touchStage executionContextPassingUIKBTree
let performReturnAction self = msg_send ~self ~cmd:(selector "performReturnAction") ~typ:(returning (bool))
let performSpaceAction self = msg_send ~self ~cmd:(selector "performSpaceAction") ~typ:(returning (bool))
let pinchCanBeginWithTouches x ~andScale self = msg_send ~self ~cmd:(selector "pinchCanBeginWithTouches:andScale:") ~typ:(id @-> double @-> returning (bool)) x andScale
let pinchDetected self = msg_send ~self ~cmd:(selector "pinchDetected") ~typ:(returning (bool))
let pinchDidConsumeTouch x self = msg_send ~self ~cmd:(selector "pinchDidConsumeTouch:") ~typ:(id @-> returning (void)) x
let pinchHandler x self = msg_send ~self ~cmd:(selector "pinchHandler:") ~typ:(id @-> returning (void)) x
let pinchSplitGestureEnabled self = msg_send ~self ~cmd:(selector "pinchSplitGestureEnabled") ~typ:(returning (bool))
let playKeyClickSoundForKey x self = msg_send ~self ~cmd:(selector "playKeyClickSoundForKey:") ~typ:(id @-> returning (void)) x
let playKeyClickSoundOn self = msg_send ~self ~cmd:(selector "playKeyClickSoundOn") ~typ:(returning (int))
let playKeyClickSoundOnDownForKey x self = msg_send ~self ~cmd:(selector "playKeyClickSoundOnDownForKey:") ~typ:(id @-> returning (void)) x
let playKeyClickSoundOnUpForKey x self = msg_send ~self ~cmd:(selector "playKeyClickSoundOnUpForKey:") ~typ:(id @-> returning (void)) x
let playKeyReleaseSoundForKey x self = msg_send ~self ~cmd:(selector "playKeyReleaseSoundForKey:") ~typ:(id @-> returning (void)) x
let pointInside x ~forEvent self = msg_send ~self ~cmd:(selector "pointInside:forEvent:") ~typ:(CGPoint.t @-> ptr void @-> returning (bool)) x forEvent
let pointInside' x ~withEvent self = msg_send ~self ~cmd:(selector "pointInside:withEvent:") ~typ:(CGPoint.t @-> id @-> returning (bool)) x withEvent
let populateFlickPopupsForKey x self = msg_send ~self ~cmd:(selector "populateFlickPopupsForKey:") ~typ:(id @-> returning (void)) x
let popupKeyViews self = msg_send ~self ~cmd:(selector "popupKeyViews") ~typ:(returning (id))
let preTouchKeyplaneName self = msg_send ~self ~cmd:(selector "preTouchKeyplaneName") ~typ:(returning (id))
let prepareForFloatingTransition x self = msg_send ~self ~cmd:(selector "prepareForFloatingTransition:") ~typ:(bool @-> returning (void)) x
let prepareForSplitTransition self = msg_send ~self ~cmd:(selector "prepareForSplitTransition") ~typ:(returning (void))
let prepareSliderBehaviorFeedback self = msg_send ~self ~cmd:(selector "prepareSliderBehaviorFeedback") ~typ:(returning (void))
let presentModalDisplayForKey x self = msg_send ~self ~cmd:(selector "presentModalDisplayForKey:") ~typ:(id @-> returning (void)) x
let preventPaddlesForPointerTouches self = msg_send ~self ~cmd:(selector "preventPaddlesForPointerTouches") ~typ:(returning (bool))
let provideSliderBehaviorFeedback self = msg_send ~self ~cmd:(selector "provideSliderBehaviorFeedback") ~typ:(returning (void))
let rebuildSplitTransitionView self = msg_send ~self ~cmd:(selector "rebuildSplitTransitionView") ~typ:(returning (void))
let refreshDualStringKeys self = msg_send ~self ~cmd:(selector "refreshDualStringKeys") ~typ:(returning (void))
let refreshForDictationAvailablityDidChange self = msg_send ~self ~cmd:(selector "refreshForDictationAvailablityDidChange") ~typ:(returning (void))
let refreshForRivenPreferences self = msg_send ~self ~cmd:(selector "refreshForRivenPreferences") ~typ:(returning (void))
let refreshGhostKeyState self = msg_send ~self ~cmd:(selector "refreshGhostKeyState") ~typ:(returning (void))
let relayoutForWriteboardKey self = msg_send ~self ~cmd:(selector "relayoutForWriteboardKey") ~typ:(returning (void))
let reloadCurrentKeyplane self = msg_send ~self ~cmd:(selector "reloadCurrentKeyplane") ~typ:(returning (void))
let reloadKeyboardWithInputTraits x ~screenTraits ~splitTraits self = msg_send ~self ~cmd:(selector "reloadKeyboardWithInputTraits:screenTraits:splitTraits:") ~typ:(id @-> id @-> id @-> returning (void)) x screenTraits splitTraits
let removeFromSuperview self = msg_send ~self ~cmd:(selector "removeFromSuperview") ~typ:(returning (void))
let removePathEffectViewConstraintsIfNeeded self = msg_send ~self ~cmd:(selector "removePathEffectViewConstraintsIfNeeded") ~typ:(returning (void))
let renderConfig self = msg_send ~self ~cmd:(selector "renderConfig") ~typ:(returning (id))
let renderedImageWithStateFallbacksForToken x self = msg_send ~self ~cmd:(selector "renderedImageWithStateFallbacksForToken:") ~typ:(id @-> returning (id)) x
let renderedImageWithToken x self = msg_send ~self ~cmd:(selector "renderedImageWithToken:") ~typ:(id @-> returning (id)) x
let renderedKeyplaneWithToken x ~split self = msg_send ~self ~cmd:(selector "renderedKeyplaneWithToken:split:") ~typ:(id @-> bool @-> returning (id)) x split
let resetHRRLayoutState self = msg_send ~self ~cmd:(selector "resetHRRLayoutState") ~typ:(returning (void))
let resetPanAlternativesForEndedTouch x self = msg_send ~self ~cmd:(selector "resetPanAlternativesForEndedTouch:") ~typ:(id @-> returning (void)) x
let resizeKeyplaneAndRedraw x self = msg_send ~self ~cmd:(selector "resizeKeyplaneAndRedraw:") ~typ:(bool @-> returning (void)) x
let restoreDefaultsForAllKeys self = msg_send ~self ~cmd:(selector "restoreDefaultsForAllKeys") ~typ:(returning (void))
let restoreDefaultsForKey x self = msg_send ~self ~cmd:(selector "restoreDefaultsForKey:") ~typ:(id @-> returning (void)) x
let setAction x ~forKey self = msg_send ~self ~cmd:(selector "setAction:forKey:") ~typ:(_SEL @-> id @-> returning (void)) x forKey
let setActiveKey x self = msg_send ~self ~cmd:(selector "setActiveKey:") ~typ:(id @-> returning (void)) x
let setAutoShift x self = msg_send ~self ~cmd:(selector "setAutoShift:") ~typ:(bool @-> returning (void)) x
let setAutoshift x self = msg_send ~self ~cmd:(selector "setAutoshift:") ~typ:(bool @-> returning (void)) x
let setBlinkAssertion x self = msg_send ~self ~cmd:(selector "setBlinkAssertion:") ~typ:(id @-> returning (void)) x
let setCurrencyKeysForCurrentLocaleOnKeyplane x self = msg_send ~self ~cmd:(selector "setCurrencyKeysForCurrentLocaleOnKeyplane:") ~typ:(id @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDidLongPress x self = msg_send ~self ~cmd:(selector "setDidLongPress:") ~typ:(bool @-> returning (void)) x
let setDisableInteraction x self = msg_send ~self ~cmd:(selector "setDisableInteraction:") ~typ:(bool @-> returning (void)) x
let setHideKeysUnderIndicator x self = msg_send ~self ~cmd:(selector "setHideKeysUnderIndicator:") ~typ:(bool @-> returning (void)) x
let setKeyForTouchInfo x ~key self = msg_send ~self ~cmd:(selector "setKeyForTouchInfo:key:") ~typ:(id @-> id @-> returning (void)) x key
let setKeyboardAppearance x self = msg_send ~self ~cmd:(selector "setKeyboardAppearance:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setKeyboardBias x self = msg_send ~self ~cmd:(selector "setKeyboardBias:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setKeyboardDim x self = msg_send ~self ~cmd:(selector "setKeyboardDim:") ~typ:(bool @-> returning (void)) x
let setKeyboardDim' x ~amount ~withDuration self = msg_send ~self ~cmd:(selector "setKeyboardDim:amount:withDuration:") ~typ:(bool @-> double @-> double @-> returning (void)) x amount withDuration
let setKeyboardName x self = msg_send ~self ~cmd:(selector "setKeyboardName:") ~typ:(id @-> returning (void)) x
let setKeyboardName' x ~appearance self = msg_send ~self ~cmd:(selector "setKeyboardName:appearance:") ~typ:(id @-> llong @-> returning (void)) x (LLong.of_int appearance)
let setKeyplaneName x self = msg_send ~self ~cmd:(selector "setKeyplaneName:") ~typ:(id @-> returning (void)) x
let setLabel x ~forKey self = msg_send ~self ~cmd:(selector "setLabel:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let setLastTwoFingerTapTimestamp x self = msg_send ~self ~cmd:(selector "setLastTwoFingerTapTimestamp:") ~typ:(double @-> returning (void)) x
let setLayoutTag x self = msg_send ~self ~cmd:(selector "setLayoutTag:") ~typ:(id @-> returning (void)) x
let setLocalizedInputKey x self = msg_send ~self ~cmd:(selector "setLocalizedInputKey:") ~typ:(id @-> returning (void)) x
let setLongPressAction x ~forKey self = msg_send ~self ~cmd:(selector "setLongPressAction:forKey:") ~typ:(_SEL @-> id @-> returning (void)) x forKey
let setModalDisplayView x self = msg_send ~self ~cmd:(selector "setModalDisplayView:") ~typ:(id @-> returning (void)) x
let setMultitapReverseKeyState self = msg_send ~self ~cmd:(selector "setMultitapReverseKeyState") ~typ:(returning (void))
let setMuteNextKeyClickSound x self = msg_send ~self ~cmd:(selector "setMuteNextKeyClickSound:") ~typ:(bool @-> returning (void)) x
let setNeedsVirtualDriftUpdate self = msg_send ~self ~cmd:(selector "setNeedsVirtualDriftUpdate") ~typ:(returning (void))
let setPasscodeOutlineAlpha x self = msg_send ~self ~cmd:(selector "setPasscodeOutlineAlpha:") ~typ:(double @-> returning (void)) x
let setPathEffectView x self = msg_send ~self ~cmd:(selector "setPathEffectView:") ~typ:(id @-> returning (void)) x
let setPercentSignKeysForCurrentLocaleOnKeyplane x self = msg_send ~self ~cmd:(selector "setPercentSignKeysForCurrentLocaleOnKeyplane:") ~typ:(id @-> returning (void)) x
let setPlayKeyClickSoundOn x self = msg_send ~self ~cmd:(selector "setPlayKeyClickSoundOn:") ~typ:(int @-> returning (void)) x
let setPreTouchKeyplaneName x self = msg_send ~self ~cmd:(selector "setPreTouchKeyplaneName:") ~typ:(id @-> returning (void)) x
let setPreferredHeight x self = msg_send ~self ~cmd:(selector "setPreferredHeight:") ~typ:(double @-> returning (void)) x
let setPreventPaddlesForPointerTouches x self = msg_send ~self ~cmd:(selector "setPreventPaddlesForPointerTouches:") ~typ:(bool @-> returning (void)) x
let setRenderConfig x self = msg_send ~self ~cmd:(selector "setRenderConfig:") ~typ:(id @-> returning (void)) x
let setRenderConfig' x ~updateKeyplane self = msg_send ~self ~cmd:(selector "setRenderConfig:updateKeyplane:") ~typ:(id @-> bool @-> returning (void)) x updateKeyplane
let setReturnKeyEnabled x ~withDisplayName ~withType self = msg_send ~self ~cmd:(selector "setReturnKeyEnabled:withDisplayName:withType:") ~typ:(bool @-> id @-> int @-> returning (void)) x withDisplayName withType
let setShift x self = msg_send ~self ~cmd:(selector "setShift:") ~typ:(bool @-> returning (void)) x
let setSlideBehaviour x self = msg_send ~self ~cmd:(selector "setSlideBehaviour:") ~typ:(id @-> returning (void)) x
let setSplit x ~animated self = msg_send ~self ~cmd:(selector "setSplit:animated:") ~typ:(bool @-> bool @-> returning (void)) x animated
let setSplitProgress x self = msg_send ~self ~cmd:(selector "setSplitProgress:") ~typ:(double @-> returning (void)) x
let setState x ~forKey self = msg_send ~self ~cmd:(selector "setState:forKey:") ~typ:(int @-> id @-> returning (void)) x forKey
let setTarget x ~forKey self = msg_send ~self ~cmd:(selector "setTarget:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let setTextEditingTraits x self = msg_send ~self ~cmd:(selector "setTextEditingTraits:") ~typ:(id @-> returning (void)) x
let setToInitialKeyplane self = msg_send ~self ~cmd:(selector "setToInitialKeyplane") ~typ:(returning (void))
let setTwoFingerTapTimestamp x self = msg_send ~self ~cmd:(selector "setTwoFingerTapTimestamp:") ~typ:(double @-> returning (void)) x
let shift self = msg_send ~self ~cmd:(selector "shift") ~typ:(returning (bool))
let shouldAllowCurrentKeyplaneReload self = msg_send ~self ~cmd:(selector "shouldAllowCurrentKeyplaneReload") ~typ:(returning (bool))
let shouldAllowSelectionGestures x ~atPoint ~toBegin self = msg_send ~self ~cmd:(selector "shouldAllowSelectionGestures:atPoint:toBegin:") ~typ:(bool @-> CGPoint.t @-> bool @-> returning (bool)) x atPoint toBegin
let shouldCommitPrecedingTouchesForTouchDownWithActions x self = msg_send ~self ~cmd:(selector "shouldCommitPrecedingTouchesForTouchDownWithActions:") ~typ:(ullong @-> returning (bool)) (ULLong.of_int x)
let shouldDeactivateWithoutWindow self = msg_send ~self ~cmd:(selector "shouldDeactivateWithoutWindow") ~typ:(returning (bool))
let shouldHitTestKey x self = msg_send ~self ~cmd:(selector "shouldHitTestKey:") ~typ:(id @-> returning (bool)) x
let shouldIgnoreContinuousPathRequirements self = msg_send ~self ~cmd:(selector "shouldIgnoreContinuousPathRequirements") ~typ:(returning (bool))
let shouldIgnoreDistantKey self = msg_send ~self ~cmd:(selector "shouldIgnoreDistantKey") ~typ:(returning (bool))
let shouldMatchCaseForDomainKeys self = msg_send ~self ~cmd:(selector "shouldMatchCaseForDomainKeys") ~typ:(returning (bool))
let shouldMergeAssistantBarWithKeyboardLayout self = msg_send ~self ~cmd:(selector "shouldMergeAssistantBarWithKeyboardLayout") ~typ:(returning (bool))
let shouldMergeKey x self = msg_send ~self ~cmd:(selector "shouldMergeKey:") ~typ:(id @-> returning (bool)) x
let shouldPreventInputManagerHitTestingForKey x self = msg_send ~self ~cmd:(selector "shouldPreventInputManagerHitTestingForKey:") ~typ:(id @-> returning (bool)) x
let shouldRetestKey x ~slidOffKey ~withKeyplane self = msg_send ~self ~cmd:(selector "shouldRetestKey:slidOffKey:withKeyplane:") ~typ:(id @-> id @-> id @-> returning (bool)) x slidOffKey withKeyplane
let shouldRetestTouchDraggedFromKey x self = msg_send ~self ~cmd:(selector "shouldRetestTouchDraggedFromKey:") ~typ:(id @-> returning (bool)) x
let shouldRetestTouchUp x self = msg_send ~self ~cmd:(selector "shouldRetestTouchUp:") ~typ:(id @-> returning (bool)) x
let shouldSendStringForFlick x self = msg_send ~self ~cmd:(selector "shouldSendStringForFlick:") ~typ:(id @-> returning (bool)) x
let shouldSendTouchUpToInputManager x self = msg_send ~self ~cmd:(selector "shouldSendTouchUpToInputManager:") ~typ:(id @-> returning (bool)) x
let shouldShowDictationKey self = msg_send ~self ~cmd:(selector "shouldShowDictationKey") ~typ:(returning (bool))
let shouldShowGestureKeyboardIntroduction self = msg_send ~self ~cmd:(selector "shouldShowGestureKeyboardIntroduction") ~typ:(returning (bool))
let shouldShowIndicator self = msg_send ~self ~cmd:(selector "shouldShowIndicator") ~typ:(returning (bool))
let shouldShowInternationalMenuForKey x self = msg_send ~self ~cmd:(selector "shouldShowInternationalMenuForKey:") ~typ:(id @-> returning (bool)) x
let shouldSkipResponseToGlobeKey x ~atPoint self = msg_send ~self ~cmd:(selector "shouldSkipResponseToGlobeKey:atPoint:") ~typ:(id @-> CGPoint.t @-> returning (bool)) x atPoint
let shouldUseDefaultShiftStateFromLayout self = msg_send ~self ~cmd:(selector "shouldUseDefaultShiftStateFromLayout") ~typ:(returning (bool))
let shouldYieldToControlCenterForFlickWithInitialPoint x ~finalPoint self = msg_send ~self ~cmd:(selector "shouldYieldToControlCenterForFlickWithInitialPoint:finalPoint:") ~typ:(CGPoint.t @-> CGPoint.t @-> returning (bool)) x finalPoint
let showFlickView x ~withKey ~flickString self = msg_send ~self ~cmd:(selector "showFlickView:withKey:flickString:") ~typ:(llong @-> id @-> id @-> returning (void)) (LLong.of_int x) withKey flickString
let showGestureKeyboardIntroductionIfNeeded self = msg_send ~self ~cmd:(selector "showGestureKeyboardIntroductionIfNeeded") ~typ:(returning (bool))
let showKeyboardWithInputMode x ~renderConfig ~inputTraits ~screenTraits ~splitTraits self = msg_send ~self ~cmd:(selector "showKeyboardWithInputMode:renderConfig:inputTraits:screenTraits:splitTraits:") ~typ:(id @-> id @-> id @-> id @-> id @-> returning (void)) x renderConfig inputTraits screenTraits splitTraits
let showKeyboardWithInputMode' x ~renderConfig ~inputTraits ~screenTraits ~splitTraits ~reload self = msg_send ~self ~cmd:(selector "showKeyboardWithInputMode:renderConfig:inputTraits:screenTraits:splitTraits:reload:") ~typ:(id @-> id @-> id @-> id @-> id @-> bool @-> returning (void)) x renderConfig inputTraits screenTraits splitTraits reload
let showKeyboardWithInputTraits x ~screenTraits ~splitTraits self = msg_send ~self ~cmd:(selector "showKeyboardWithInputTraits:screenTraits:splitTraits:") ~typ:(id @-> id @-> id @-> returning (void)) x screenTraits splitTraits
let showMenu x ~forKey self = msg_send ~self ~cmd:(selector "showMenu:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let showPopupVariantsForKey x self = msg_send ~self ~cmd:(selector "showPopupVariantsForKey:") ~typ:(id @-> returning (void)) x
let showPopupView x ~withKey ~popupInfo ~force self = msg_send ~self ~cmd:(selector "showPopupView:withKey:popupInfo:force:") ~typ:(llong @-> id @-> id @-> bool @-> returning (void)) (LLong.of_int x) withKey popupInfo force
let showSplitTransitionView x self = msg_send ~self ~cmd:(selector "showSplitTransitionView:") ~typ:(bool @-> returning (void)) x
let showsDedicatedEmojiKeyAlongsideGlobeButton self = msg_send ~self ~cmd:(selector "showsDedicatedEmojiKeyAlongsideGlobeButton") ~typ:(returning (bool))
let showsDictationKey self = msg_send ~self ~cmd:(selector "showsDictationKey") ~typ:(returning (bool))
let showsInternationalKey self = msg_send ~self ~cmd:(selector "showsInternationalKey") ~typ:(returning (bool))
let simulateTouch x self = msg_send ~self ~cmd:(selector "simulateTouch:") ~typ:(CGPoint.t @-> returning (id)) x
let simulateTouchForCharacter x ~errorVector ~shouldTypeVariants ~baseKeyForVariants self = msg_send ~self ~cmd:(selector "simulateTouchForCharacter:errorVector:shouldTypeVariants:baseKeyForVariants:") ~typ:(id @-> CGPoint.t @-> bool @-> bool @-> returning (id)) x errorVector shouldTypeVariants baseKeyForVariants
let sizeForKeyplane x self = msg_send_stret ~self ~cmd:(selector "sizeForKeyplane:") ~typ:(id @-> returning (CGSize.t)) ~return_type:CGSize.t x
let slideBehaviour self = msg_send ~self ~cmd:(selector "slideBehaviour") ~typ:(returning (id))
let splitNameForKeyplane x self = msg_send ~self ~cmd:(selector "splitNameForKeyplane:") ~typ:(id @-> returning (id)) x
let splitNameForKeyplaneName x self = msg_send ~self ~cmd:(selector "splitNameForKeyplaneName:") ~typ:(id @-> returning (id)) x
let stateForCandidateListKey x self = msg_send ~self ~cmd:(selector "stateForCandidateListKey:") ~typ:(id @-> returning (int)) x
let stateForDictationKey x self = msg_send ~self ~cmd:(selector "stateForDictationKey:") ~typ:(id @-> returning (int)) x
let stateForKey x self = msg_send ~self ~cmd:(selector "stateForKey:") ~typ:(id @-> returning (int)) x
let stateForKeyplaneSwitchKey x self = msg_send ~self ~cmd:(selector "stateForKeyplaneSwitchKey:") ~typ:(id @-> returning (int)) x
let stateForManipulationKey x self = msg_send ~self ~cmd:(selector "stateForManipulationKey:") ~typ:(id @-> returning (int)) x
let stateForMultitapForwardKey x self = msg_send ~self ~cmd:(selector "stateForMultitapForwardKey:") ~typ:(id @-> returning (int)) x
let stateForMultitapReverseKey x self = msg_send ~self ~cmd:(selector "stateForMultitapReverseKey:") ~typ:(id @-> returning (int)) x
let stateForShiftKey x self = msg_send ~self ~cmd:(selector "stateForShiftKey:") ~typ:(id @-> returning (int)) x
let stateForStylingKey x self = msg_send ~self ~cmd:(selector "stateForStylingKey:") ~typ:(id @-> returning (int)) x
let stretchFactor self = msg_send_stret ~self ~cmd:(selector "stretchFactor") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let stretchFactorHeight self = msg_send ~self ~cmd:(selector "stretchFactorHeight") ~typ:(returning (double))
let stretchKeyboardToFit self = msg_send ~self ~cmd:(selector "stretchKeyboardToFit") ~typ:(returning (bool))
let stretchKeyboardToFitKeyplane x self = msg_send ~self ~cmd:(selector "stretchKeyboardToFitKeyplane:") ~typ:(id @-> returning (bool)) x
let supportStylingWithKey x self = msg_send ~self ~cmd:(selector "supportStylingWithKey:") ~typ:(id @-> returning (bool)) x
let supportsContinuousPath self = msg_send ~self ~cmd:(selector "supportsContinuousPath") ~typ:(returning (bool))
let supportsEmoji self = msg_send ~self ~cmd:(selector "supportsEmoji") ~typ:(returning (bool))
let swipeDetected x self = msg_send ~self ~cmd:(selector "swipeDetected:") ~typ:(id @-> returning (void)) x
let synthesizeTouchUpEventForKey x self = msg_send ~self ~cmd:(selector "synthesizeTouchUpEventForKey:") ~typ:(id @-> returning (id)) x
let targetEdgesForScreenGestureRecognition self = msg_send ~self ~cmd:(selector "targetEdgesForScreenGestureRecognition") ~typ:(returning (ullong))
let tearDownSplitTransitionView self = msg_send ~self ~cmd:(selector "tearDownSplitTransitionView") ~typ:(returning (void))
let textEditingKeyMask self = msg_send ~self ~cmd:(selector "textEditingKeyMask") ~typ:(returning (ullong))
let touchCancelled x ~executionContext self = msg_send ~self ~cmd:(selector "touchCancelled:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let touchCancelled' x ~forResting ~executionContext self = msg_send ~self ~cmd:(selector "touchCancelled:forResting:executionContext:") ~typ:(id @-> bool @-> id @-> returning (void)) x forResting executionContext
let touchChanged x ~executionContext self = msg_send ~self ~cmd:(selector "touchChanged:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let touchDown x ~executionContext self = msg_send ~self ~cmd:(selector "touchDown:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let touchDownWithKey x ~withTouchInfo ~atPoint ~executionContext self = msg_send ~self ~cmd:(selector "touchDownWithKey:withTouchInfo:atPoint:executionContext:") ~typ:(id @-> id @-> CGPoint.t @-> id @-> returning (void)) x withTouchInfo atPoint executionContext
let touchDragged x self = msg_send ~self ~cmd:(selector "touchDragged:") ~typ:(id @-> returning (void)) x
let touchDragged' x ~executionContext self = msg_send ~self ~cmd:(selector "touchDragged:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let touchInfoForKey x self = msg_send ~self ~cmd:(selector "touchInfoForKey:") ~typ:(id @-> returning (id)) x
let touchMultitapTimer self = msg_send ~self ~cmd:(selector "touchMultitapTimer") ~typ:(returning (void))
let touchPassesDragThreshold x self = msg_send ~self ~cmd:(selector "touchPassesDragThreshold:") ~typ:(id @-> returning (bool)) x
let touchUp x ~executionContext self = msg_send ~self ~cmd:(selector "touchUp:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let traitCollectionDidChange self = msg_send ~self ~cmd:(selector "traitCollectionDidChange") ~typ:(returning (void))
let transitionToModalContinuousPathKeyplane self = msg_send ~self ~cmd:(selector "transitionToModalContinuousPathKeyplane") ~typ:(returning (void))
let transitionToPunctuationKeysVisible x self = msg_send ~self ~cmd:(selector "transitionToPunctuationKeysVisible:") ~typ:(bool @-> returning (void)) x
let triggerSpaceKeyplaneSwitchIfNecessary self = msg_send ~self ~cmd:(selector "triggerSpaceKeyplaneSwitchIfNecessary") ~typ:(returning (void))
let typingStyleEstimator x ~didChangeTypingStyleEstimate self = msg_send ~self ~cmd:(selector "typingStyleEstimator:didChangeTypingStyleEstimate:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int didChangeTypingStyleEstimate)
let uninstallGestureRecognizers self = msg_send ~self ~cmd:(selector "uninstallGestureRecognizers") ~typ:(returning (void))
let unprocessedTouchEventsForTouchInfo x ~touchStage ~forcedKeyCode self = msg_send ~self ~cmd:(selector "unprocessedTouchEventsForTouchInfo:touchStage:forcedKeyCode:") ~typ:(id @-> int @-> int @-> returning (id)) x touchStage forcedKeyCode
let upActionFlagsForKey x self = msg_send ~self ~cmd:(selector "upActionFlagsForKey:") ~typ:(id @-> returning (ullong)) x
let upActionShift self = msg_send ~self ~cmd:(selector "upActionShift") ~typ:(returning (void))
let updateAutolocalizedKeysForKeyplane x self = msg_send ~self ~cmd:(selector "updateAutolocalizedKeysForKeyplane:") ~typ:(id @-> returning (void)) x
let updateBackgroundCorners self = msg_send ~self ~cmd:(selector "updateBackgroundCorners") ~typ:(returning (void))
let updateBackgroundIfNeeded self = msg_send ~self ~cmd:(selector "updateBackgroundIfNeeded") ~typ:(returning (void))
let updateCachedKeyplaneKeycaps self = msg_send ~self ~cmd:(selector "updateCachedKeyplaneKeycaps") ~typ:(returning (void))
let updateCurrencySymbolForKey x ~withCurrencyString self = msg_send ~self ~cmd:(selector "updateCurrencySymbolForKey:withCurrencyString:") ~typ:(id @-> id @-> returning (void)) x withCurrencyString
let updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView x self = msg_send ~self ~cmd:(selector "updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:") ~typ:(id @-> returning (void)) x
let updateGlobeKeyDisplayString self = msg_send ~self ~cmd:(selector "updateGlobeKeyDisplayString") ~typ:(returning (void))
let updateInputModeLocalizedKeysForKeyplane x self = msg_send ~self ~cmd:(selector "updateInputModeLocalizedKeysForKeyplane:") ~typ:(id @-> returning (void)) x
let updateKeyCentroids self = msg_send ~self ~cmd:(selector "updateKeyCentroids") ~typ:(returning (void))
let updateKeyboardForKeyplane x self = msg_send ~self ~cmd:(selector "updateKeyboardForKeyplane:") ~typ:(id @-> returning (void)) x
let updateLayoutTags self = msg_send ~self ~cmd:(selector "updateLayoutTags") ~typ:(returning (void))
let updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane x ~withInputMode self = msg_send ~self ~cmd:(selector "updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane:withInputMode:") ~typ:(id @-> id @-> returning (void)) x withInputMode
let updateLocalizedDisplayStringsForKeys x self = msg_send ~self ~cmd:(selector "updateLocalizedDisplayStringsForKeys:") ~typ:(id @-> returning (void)) x
let updateLocalizedKeys x self = msg_send ~self ~cmd:(selector "updateLocalizedKeys:") ~typ:(bool @-> returning (void)) x
let updateLocalizedKeysForKeyplane x ~updateAllKeyplanes self = msg_send ~self ~cmd:(selector "updateLocalizedKeysForKeyplane:updateAllKeyplanes:") ~typ:(id @-> bool @-> returning (void)) x updateAllKeyplanes
let updateLocalizedKeysOnKeyplane x self = msg_send ~self ~cmd:(selector "updateLocalizedKeysOnKeyplane:") ~typ:(id @-> returning (void)) x
let updateMoreAndInternationalKeys self = msg_send ~self ~cmd:(selector "updateMoreAndInternationalKeys") ~typ:(returning (void))
let updatePanAlternativesForTouchInfo x self = msg_send ~self ~cmd:(selector "updatePanAlternativesForTouchInfo:") ~typ:(id @-> returning (void)) x
let updatePhysicalKeyboardEvent x ~withMarkedInput self = msg_send ~self ~cmd:(selector "updatePhysicalKeyboardEvent:withMarkedInput:") ~typ:(id @-> id @-> returning (void)) x withMarkedInput
let updateReturnKeysIfNeeded self = msg_send ~self ~cmd:(selector "updateReturnKeysIfNeeded") ~typ:(returning (void))
let updateSelectedVariantIndexForKey x ~withActions ~withPoint self = msg_send ~self ~cmd:(selector "updateSelectedVariantIndexForKey:withActions:withPoint:") ~typ:(id @-> ullong @-> CGPoint.t @-> returning (void)) x (ULLong.of_int withActions) withPoint
let updateShiftKeyState self = msg_send ~self ~cmd:(selector "updateShiftKeyState") ~typ:(returning (void))
let updateState x ~forKey self = msg_send ~self ~cmd:(selector "updateState:forKey:") ~typ:(int @-> id @-> returning (void)) x forKey
let updateTransitionWithFlags x self = msg_send ~self ~cmd:(selector "updateTransitionWithFlags:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let updateUndoKeyState self = msg_send ~self ~cmd:(selector "updateUndoKeyState") ~typ:(returning (void))
let useDismissForMessagesWriteboard self = msg_send ~self ~cmd:(selector "useDismissForMessagesWriteboard") ~typ:(returning (bool))
let useUndoForMessagesWriteboard self = msg_send ~self ~cmd:(selector "useUndoForMessagesWriteboard") ~typ:(returning (bool))
let usesAutoShift self = msg_send ~self ~cmd:(selector "usesAutoShift") ~typ:(returning (bool))
let visualStyleForKeyboardIfSplit x self = msg_send ~self ~cmd:(selector "visualStyleForKeyboardIfSplit:") ~typ:(bool @-> returning (int)) x
let willBeginIndirectSelectionGesture self = msg_send ~self ~cmd:(selector "willBeginIndirectSelectionGesture") ~typ:(returning (void))
let willBeginIndirectSelectionGesture' x self = msg_send ~self ~cmd:(selector "willBeginIndirectSelectionGesture:") ~typ:(bool @-> returning (void)) x
let willMoveToWindow x self = msg_send ~self ~cmd:(selector "willMoveToWindow:") ~typ:(id @-> returning (void)) x
let willRotate self = msg_send ~self ~cmd:(selector "willRotate") ~typ:(returning (void))