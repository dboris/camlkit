(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UIImage"

module Class = struct
  let actionsImage self = msg_send ~self ~cmd:(selector "actionsImage") ~typ:(returning (id))
  let actionsImageWithConfiguration x self = msg_send ~self ~cmd:(selector "actionsImageWithConfiguration:") ~typ:(id @-> returning (id)) x
  let addImage self = msg_send ~self ~cmd:(selector "addImage") ~typ:(returning (id))
  let addImageWithConfiguration x self = msg_send ~self ~cmd:(selector "addImageWithConfiguration:") ~typ:(id @-> returning (id)) x
  let akImageNamed x self = msg_send ~self ~cmd:(selector "akImageNamed:") ~typ:(id @-> returning (id)) x
  let animatedImageNamed x ~duration self = msg_send ~self ~cmd:(selector "animatedImageNamed:duration:") ~typ:(id @-> double @-> returning (id)) x duration
  let animatedImageWithImages x ~duration self = msg_send ~self ~cmd:(selector "animatedImageWithImages:duration:") ~typ:(id @-> double @-> returning (id)) x duration
  let checkmarkImage self = msg_send ~self ~cmd:(selector "checkmarkImage") ~typ:(returning (id))
  let checkmarkImageWithConfiguration x self = msg_send ~self ~cmd:(selector "checkmarkImageWithConfiguration:") ~typ:(id @-> returning (id)) x
  let imageAtPath x self = msg_send ~self ~cmd:(selector "imageAtPath:") ~typ:(id @-> returning (id)) x
  let imageFromAlbumArtData x ~height ~width ~bytesPerRow ~cache self = msg_send ~self ~cmd:(selector "imageFromAlbumArtData:height:width:bytesPerRow:cache:") ~typ:(id @-> int @-> int @-> int @-> bool @-> returning (id)) x height width bytesPerRow cache
  let imageNamed x self = msg_send ~self ~cmd:(selector "imageNamed:") ~typ:(id @-> returning (id)) x
  let imageNamed1 x ~inBundle self = msg_send ~self ~cmd:(selector "imageNamed:inBundle:") ~typ:(id @-> id @-> returning (id)) x inBundle
  let imageNamed2 x ~withConfiguration self = msg_send ~self ~cmd:(selector "imageNamed:withConfiguration:") ~typ:(id @-> id @-> returning (id)) x withConfiguration
  let imageNamed3 x ~inBundle ~compatibleWithTraitCollection self = msg_send ~self ~cmd:(selector "imageNamed:inBundle:compatibleWithTraitCollection:") ~typ:(id @-> id @-> id @-> returning (id)) x inBundle compatibleWithTraitCollection
  let imageNamed4 x ~inBundle ~withConfiguration self = msg_send ~self ~cmd:(selector "imageNamed:inBundle:withConfiguration:") ~typ:(id @-> id @-> id @-> returning (id)) x inBundle withConfiguration
  let imageWithCGImage x self = msg_send ~self ~cmd:(selector "imageWithCGImage:") ~typ:(id @-> returning (id)) x
  let imageWithCGImage' x ~scale ~orientation self = msg_send ~self ~cmd:(selector "imageWithCGImage:scale:orientation:") ~typ:(id @-> double @-> llong @-> returning (id)) x scale orientation
  let imageWithCIImage x self = msg_send ~self ~cmd:(selector "imageWithCIImage:") ~typ:(id @-> returning (id)) x
  let imageWithCIImage' x ~scale ~orientation self = msg_send ~self ~cmd:(selector "imageWithCIImage:scale:orientation:") ~typ:(id @-> double @-> llong @-> returning (id)) x scale orientation
  let imageWithContentsOfCPBitmapFile x ~flags self = msg_send ~self ~cmd:(selector "imageWithContentsOfCPBitmapFile:flags:") ~typ:(id @-> int @-> returning (id)) x flags
  let imageWithContentsOfFile x self = msg_send ~self ~cmd:(selector "imageWithContentsOfFile:") ~typ:(id @-> returning (id)) x
  let imageWithData x self = msg_send ~self ~cmd:(selector "imageWithData:") ~typ:(id @-> returning (id)) x
  let imageWithData' x ~scale self = msg_send ~self ~cmd:(selector "imageWithData:scale:") ~typ:(id @-> double @-> returning (id)) x scale
  let initialize self = msg_send ~self ~cmd:(selector "initialize") ~typ:(returning (void))
  let kitImageNamed x self = msg_send ~self ~cmd:(selector "kitImageNamed:") ~typ:(id @-> returning (id)) x
  let load self = msg_send ~self ~cmd:(selector "load") ~typ:(returning (void))
  let objectWithItemProviderData x ~typeIdentifier ~error self = msg_send ~self ~cmd:(selector "objectWithItemProviderData:typeIdentifier:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (id)) x typeIdentifier error
  let preferredSymbolImageNamed x self = msg_send ~self ~cmd:(selector "preferredSymbolImageNamed:") ~typ:(id @-> returning (id)) x
  let preferredSymbolImageNamed1 x ~size ~compatibleWithTextStyle self = msg_send ~self ~cmd:(selector "preferredSymbolImageNamed:size:compatibleWithTextStyle:") ~typ:(id @-> llong @-> id @-> returning (id)) x size compatibleWithTextStyle
  let preferredSymbolImageNamed2 x ~size ~compatibleWithTextStyle ~traitCollection ~inBundle self = msg_send ~self ~cmd:(selector "preferredSymbolImageNamed:size:compatibleWithTextStyle:traitCollection:inBundle:") ~typ:(id @-> llong @-> id @-> id @-> id @-> returning (id)) x size compatibleWithTextStyle traitCollection inBundle
  let readableTypeIdentifiersForItemProvider self = msg_send ~self ~cmd:(selector "readableTypeIdentifiersForItemProvider") ~typ:(returning (id))
  let removeImage self = msg_send ~self ~cmd:(selector "removeImage") ~typ:(returning (id))
  let removeImageWithConfiguration x self = msg_send ~self ~cmd:(selector "removeImageWithConfiguration:") ~typ:(id @-> returning (id)) x
  let strokedCheckmarkImage self = msg_send ~self ~cmd:(selector "strokedCheckmarkImage") ~typ:(returning (id))
  let strokedCheckmarkImageWithConfiguration x self = msg_send ~self ~cmd:(selector "strokedCheckmarkImageWithConfiguration:") ~typ:(id @-> returning (id)) x
  let supportsSecureCoding self = msg_send ~self ~cmd:(selector "supportsSecureCoding") ~typ:(returning (bool))
  let symbolImageNamed x self = msg_send ~self ~cmd:(selector "symbolImageNamed:") ~typ:(id @-> returning (id)) x
  let symbolImageNamed1 x ~size ~compatibleWithFont self = msg_send ~self ~cmd:(selector "symbolImageNamed:size:compatibleWithFont:") ~typ:(id @-> llong @-> id @-> returning (id)) x size compatibleWithFont
  let symbolImageNamed2 x ~size ~weight ~compatibleWithFontSize self = msg_send ~self ~cmd:(selector "symbolImageNamed:size:weight:compatibleWithFontSize:") ~typ:(id @-> llong @-> llong @-> double @-> returning (id)) x size weight compatibleWithFontSize
  let symbolImageNamed3 x ~size ~compatibleWithFont ~traitCollection ~inBundle self = msg_send ~self ~cmd:(selector "symbolImageNamed:size:compatibleWithFont:traitCollection:inBundle:") ~typ:(id @-> llong @-> id @-> id @-> id @-> returning (id)) x size compatibleWithFont traitCollection inBundle
  let symbolImageNamed4 x ~size ~weight ~compatibleWithFontSize ~traitCollection ~inBundle self = msg_send ~self ~cmd:(selector "symbolImageNamed:size:weight:compatibleWithFontSize:traitCollection:inBundle:") ~typ:(id @-> llong @-> llong @-> double @-> id @-> id @-> returning (id)) x size weight compatibleWithFontSize traitCollection inBundle
  let systemImageNamed x self = msg_send ~self ~cmd:(selector "systemImageNamed:") ~typ:(id @-> returning (id)) x
  let systemImageNamed1 x ~compatibleWithTraitCollection self = msg_send ~self ~cmd:(selector "systemImageNamed:compatibleWithTraitCollection:") ~typ:(id @-> id @-> returning (id)) x compatibleWithTraitCollection
  let systemImageNamed2 x ~withConfiguration self = msg_send ~self ~cmd:(selector "systemImageNamed:withConfiguration:") ~typ:(id @-> id @-> returning (id)) x withConfiguration
  let writableTypeIdentifiersForItemProvider self = msg_send ~self ~cmd:(selector "writableTypeIdentifiersForItemProvider") ~typ:(returning (id))
end

let _CGImage self = msg_send ~self ~cmd:(selector "CGImage") ~typ:(returning (id))
let _CIImage self = msg_send ~self ~cmd:(selector "CIImage") ~typ:(returning (id))
let akCGImage self = msg_send ~self ~cmd:(selector "akCGImage") ~typ:(returning (id))
let artworkCatalogBackingFileURL self = msg_send ~self ~cmd:(selector "artworkCatalogBackingFileURL") ~typ:(returning (id))
let badgeImageToDisplayWithScreenScale x ~nightMode self = msg_send ~self ~cmd:(selector "badgeImageToDisplayWithScreenScale:nightMode:") ~typ:(double @-> bool @-> returning (id)) x nightMode
let baselineOffsetFromBottom self = msg_send ~self ~cmd:(selector "baselineOffsetFromBottom") ~typ:(returning (double))
let compositeToPoint x ~operation self = msg_send ~self ~cmd:(selector "compositeToPoint:operation:") ~typ:(CGPoint.t @-> int @-> returning (void)) x operation
let compositeToPoint1 x ~operation ~fraction self = msg_send ~self ~cmd:(selector "compositeToPoint:operation:fraction:") ~typ:(CGPoint.t @-> int @-> double @-> returning (void)) x operation fraction
let compositeToPoint2 x ~fromRect ~operation ~fraction self = msg_send ~self ~cmd:(selector "compositeToPoint:fromRect:operation:fraction:") ~typ:(CGPoint.t @-> CGRect.t @-> int @-> double @-> returning (void)) x fromRect operation fraction
let compositeToRect x ~fromRect ~operation ~fraction self = msg_send ~self ~cmd:(selector "compositeToRect:fromRect:operation:fraction:") ~typ:(CGRect.t @-> CGRect.t @-> int @-> double @-> returning (void)) x fromRect operation fraction
let configuration self = msg_send ~self ~cmd:(selector "configuration") ~typ:(returning (id))
let content self = msg_send ~self ~cmd:(selector "content") ~typ:(returning (id))
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let draw1PartImageInRect x self = msg_send ~self ~cmd:(selector "draw1PartImageInRect:") ~typ:(CGRect.t @-> returning (void)) x
let draw1PartImageInRect1 x ~fraction self = msg_send ~self ~cmd:(selector "draw1PartImageInRect:fraction:") ~typ:(CGRect.t @-> double @-> returning (void)) x fraction
let draw1PartImageInRect2 x ~fraction ~operation self = msg_send ~self ~cmd:(selector "draw1PartImageInRect:fraction:operation:") ~typ:(CGRect.t @-> double @-> int @-> returning (void)) x fraction operation
let drawAsPatternInRect x self = msg_send ~self ~cmd:(selector "drawAsPatternInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawAtPoint x self = msg_send ~self ~cmd:(selector "drawAtPoint:") ~typ:(CGPoint.t @-> returning (void)) x
let drawAtPoint' x ~blendMode ~alpha self = msg_send ~self ~cmd:(selector "drawAtPoint:blendMode:alpha:") ~typ:(CGPoint.t @-> int @-> double @-> returning (void)) x blendMode alpha
let drawInRect x self = msg_send ~self ~cmd:(selector "drawInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawInRect' x ~blendMode ~alpha self = msg_send ~self ~cmd:(selector "drawInRect:blendMode:alpha:") ~typ:(CGRect.t @-> int @-> double @-> returning (void)) x blendMode alpha
let duration self = msg_send ~self ~cmd:(selector "duration") ~typ:(returning (double))
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let flattenedImageWithColor x self = msg_send ~self ~cmd:(selector "flattenedImageWithColor:") ~typ:(id @-> returning (id)) x
let flipsForRightToLeftLayoutDirection self = msg_send ~self ~cmd:(selector "flipsForRightToLeftLayoutDirection") ~typ:(returning (bool))
let hasBaseline self = msg_send ~self ~cmd:(selector "hasBaseline") ~typ:(returning (bool))
let hasContentInsets self = msg_send ~self ~cmd:(selector "hasContentInsets") ~typ:(returning (bool))
let hasMidline self = msg_send ~self ~cmd:(selector "hasMidline") ~typ:(returning (bool))
let hasPadding self = msg_send ~self ~cmd:(selector "hasPadding") ~typ:(returning (bool))
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong))
let imageAsset self = msg_send ~self ~cmd:(selector "imageAsset") ~typ:(returning (id))
let imageByApplyingSymbolConfiguration x self = msg_send ~self ~cmd:(selector "imageByApplyingSymbolConfiguration:") ~typ:(id @-> returning (id)) x
let imageByPreparingForDisplay self = msg_send ~self ~cmd:(selector "imageByPreparingForDisplay") ~typ:(returning (id))
let imageByPreparingThumbnailOfSize x self = msg_send ~self ~cmd:(selector "imageByPreparingThumbnailOfSize:") ~typ:(CGSize.t @-> returning (id)) x
let imageFlippedForRightToLeftLayoutDirection self = msg_send ~self ~cmd:(selector "imageFlippedForRightToLeftLayoutDirection") ~typ:(returning (id))
let imageOrientation self = msg_send ~self ~cmd:(selector "imageOrientation") ~typ:(returning (llong))
let imageRef self = msg_send ~self ~cmd:(selector "imageRef") ~typ:(returning (id))
let imageRendererFormat self = msg_send ~self ~cmd:(selector "imageRendererFormat") ~typ:(returning (id))
let imageToDisplayWithScreenScale x ~nightMode self = msg_send ~self ~cmd:(selector "imageToDisplayWithScreenScale:nightMode:") ~typ:(double @-> bool @-> returning (id)) x nightMode
let imageWithBaselineOffsetFromBottom x self = msg_send ~self ~cmd:(selector "imageWithBaselineOffsetFromBottom:") ~typ:(double @-> returning (id)) x
let imageWithConfiguration x self = msg_send ~self ~cmd:(selector "imageWithConfiguration:") ~typ:(id @-> returning (id)) x
let imageWithEtchedBorderOfColor x ~radius self = msg_send ~self ~cmd:(selector "imageWithEtchedBorderOfColor:radius:") ~typ:(id @-> double @-> returning (id)) x radius
let imageWithHorizontallyFlippedOrientation self = msg_send ~self ~cmd:(selector "imageWithHorizontallyFlippedOrientation") ~typ:(returning (id))
let imageWithMidlineOffsetFromCenter x self = msg_send ~self ~cmd:(selector "imageWithMidlineOffsetFromCenter:") ~typ:(double @-> returning (id)) x
let imageWithRenderingMode x self = msg_send ~self ~cmd:(selector "imageWithRenderingMode:") ~typ:(llong @-> returning (id)) x
let imageWithRoundedCornersOfRadius x self = msg_send ~self ~cmd:(selector "imageWithRoundedCornersOfRadius:") ~typ:(double @-> returning (id)) x
let imageWithShadow x self = msg_send ~self ~cmd:(selector "imageWithShadow:") ~typ:(id @-> returning (id)) x
let imageWithSymbolConfiguration x self = msg_send ~self ~cmd:(selector "imageWithSymbolConfiguration:") ~typ:(id @-> returning (id)) x
let imageWithTintColor x self = msg_send ~self ~cmd:(selector "imageWithTintColor:") ~typ:(id @-> returning (id)) x
let imageWithTintColor' x ~renderingMode self = msg_send ~self ~cmd:(selector "imageWithTintColor:renderingMode:") ~typ:(id @-> llong @-> returning (id)) x renderingMode
let imageWithoutBaseline self = msg_send ~self ~cmd:(selector "imageWithoutBaseline") ~typ:(returning (id))
let imageWithoutMidline self = msg_send ~self ~cmd:(selector "imageWithoutMidline") ~typ:(returning (id))
let images self = msg_send ~self ~cmd:(selector "images") ~typ:(returning (id))
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let initWithCGImage x self = msg_send ~self ~cmd:(selector "initWithCGImage:") ~typ:(id @-> returning (id)) x
let initWithCGImage1 x ~imageOrientation self = msg_send ~self ~cmd:(selector "initWithCGImage:imageOrientation:") ~typ:(id @-> llong @-> returning (id)) x imageOrientation
let initWithCGImage2 x ~scale ~orientation self = msg_send ~self ~cmd:(selector "initWithCGImage:scale:orientation:") ~typ:(id @-> double @-> llong @-> returning (id)) x scale orientation
let initWithCIImage x self = msg_send ~self ~cmd:(selector "initWithCIImage:") ~typ:(id @-> returning (id)) x
let initWithCIImage' x ~scale ~orientation self = msg_send ~self ~cmd:(selector "initWithCIImage:scale:orientation:") ~typ:(id @-> double @-> llong @-> returning (id)) x scale orientation
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithContentsOfExactFilePath x self = msg_send ~self ~cmd:(selector "initWithContentsOfExactFilePath:") ~typ:(id @-> returning (id)) x
let initWithContentsOfFile x self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:") ~typ:(id @-> returning (id)) x
let initWithContentsOfFile' x ~cache self = msg_send ~self ~cmd:(selector "initWithContentsOfFile:cache:") ~typ:(id @-> bool @-> returning (id)) x cache
let initWithData x self = msg_send ~self ~cmd:(selector "initWithData:") ~typ:(id @-> returning (id)) x
let initWithData1 x ~cache self = msg_send ~self ~cmd:(selector "initWithData:cache:") ~typ:(id @-> bool @-> returning (id)) x cache
let initWithData2 x ~scale self = msg_send ~self ~cmd:(selector "initWithData:scale:") ~typ:(id @-> double @-> returning (id)) x scale
let initWithIOSurface x self = msg_send ~self ~cmd:(selector "initWithIOSurface:") ~typ:(ptr void @-> returning (id)) x
let initWithItemProviderData x ~typeIdentifier ~error self = msg_send ~self ~cmd:(selector "initWithItemProviderData:typeIdentifier:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (id)) x typeIdentifier error
let ioSurface self = msg_send ~self ~cmd:(selector "ioSurface") ~typ:(returning (ptr void))
let isEqual x self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning (bool)) x
let isFromStatusBarImageProvider self = msg_send ~self ~cmd:(selector "isFromStatusBarImageProvider") ~typ:(returning (bool))
let isSymbolImage self = msg_send ~self ~cmd:(selector "isSymbolImage") ~typ:(returning (bool))
let leftCapWidth self = msg_send ~self ~cmd:(selector "leftCapWidth") ~typ:(returning (llong))
let loadDataWithTypeIdentifier x ~forItemProviderCompletionHandler self = msg_send ~self ~cmd:(selector "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:") ~typ:(id @-> ptr void @-> returning (id)) x forItemProviderCompletionHandler
let midlineOffsetFromCenter self = msg_send ~self ~cmd:(selector "midlineOffsetFromCenter") ~typ:(returning (double))
let patternColor self = msg_send ~self ~cmd:(selector "patternColor") ~typ:(returning (id))
let preferredPresentationSizeForItemProvider self = msg_send_stret ~self ~cmd:(selector "preferredPresentationSizeForItemProvider") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let prepareForDisplayWithCompletionHandler x self = msg_send ~self ~cmd:(selector "prepareForDisplayWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let prepareThumbnailOfSize x ~completionHandler self = msg_send ~self ~cmd:(selector "prepareThumbnailOfSize:completionHandler:") ~typ:(CGSize.t @-> ptr void @-> returning (void)) x completionHandler
let renderingMode self = msg_send ~self ~cmd:(selector "renderingMode") ~typ:(returning (llong))
let resizingMode self = msg_send ~self ~cmd:(selector "resizingMode") ~typ:(returning (llong))
let scale self = msg_send ~self ~cmd:(selector "scale") ~typ:(returning (double))
let setFlipsForRightToLeftLayoutDirection x self = msg_send ~self ~cmd:(selector "setFlipsForRightToLeftLayoutDirection:") ~typ:(bool @-> returning (void)) x
let size self = msg_send_stret ~self ~cmd:(selector "size") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let stretchableImageWithLeftCapWidth x ~topCapHeight self = msg_send ~self ~cmd:(selector "stretchableImageWithLeftCapWidth:topCapHeight:") ~typ:(llong @-> llong @-> returning (id)) x topCapHeight
let symbolConfiguration self = msg_send ~self ~cmd:(selector "symbolConfiguration") ~typ:(returning (id))
let topCapHeight self = msg_send ~self ~cmd:(selector "topCapHeight") ~typ:(returning (llong))
let traitCollection self = msg_send ~self ~cmd:(selector "traitCollection") ~typ:(returning (id))
let writeToCPBitmapFile x ~flags self = msg_send ~self ~cmd:(selector "writeToCPBitmapFile:flags:") ~typ:(id @-> int @-> returning (bool)) x flags