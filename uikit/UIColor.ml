(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UIColor"

module Class = struct
  let akBoxBorderColor self = msg_send ~self ~cmd:(selector "akBoxBorderColor") ~typ:(returning (id))
  let akBubbleFillColor self = msg_send ~self ~cmd:(selector "akBubbleFillColor") ~typ:(returning (id))
  let akButtonHoverStateColor self = msg_send ~self ~cmd:(selector "akButtonHoverStateColor") ~typ:(returning (id))
  let akColorPickerBlue self = msg_send ~self ~cmd:(selector "akColorPickerBlue") ~typ:(returning (id))
  let akColorPickerGreen self = msg_send ~self ~cmd:(selector "akColorPickerGreen") ~typ:(returning (id))
  let akColorPickerOrange self = msg_send ~self ~cmd:(selector "akColorPickerOrange") ~typ:(returning (id))
  let akColorPickerPurple self = msg_send ~self ~cmd:(selector "akColorPickerPurple") ~typ:(returning (id))
  let akColorPickerRed self = msg_send ~self ~cmd:(selector "akColorPickerRed") ~typ:(returning (id))
  let akColorPickerYellow self = msg_send ~self ~cmd:(selector "akColorPickerYellow") ~typ:(returning (id))
  let akColorWithCIColor x self = msg_send ~self ~cmd:(selector "akColorWithCIColor:") ~typ:(id @-> returning (id)) x
  let akColorWithSRGBRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "akColorWithSRGBRed:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
  let akColorWithWhite x ~alpha self = msg_send ~self ~cmd:(selector "akColorWithWhite:alpha:") ~typ:(double @-> double @-> returning (id)) x alpha
  let akRowSeparatorColor self = msg_send ~self ~cmd:(selector "akRowSeparatorColor") ~typ:(returning (id))
  let akSystemBlueColor self = msg_send ~self ~cmd:(selector "akSystemBlueColor") ~typ:(returning (id))
  let akSystemGreenColor self = msg_send ~self ~cmd:(selector "akSystemGreenColor") ~typ:(returning (id))
  let akSystemPinkColor self = msg_send ~self ~cmd:(selector "akSystemPinkColor") ~typ:(returning (id))
  let akSystemPurpleColor self = msg_send ~self ~cmd:(selector "akSystemPurpleColor") ~typ:(returning (id))
  let akSystemRedColor self = msg_send ~self ~cmd:(selector "akSystemRedColor") ~typ:(returning (id))
  let akSystemYellowColor self = msg_send ~self ~cmd:(selector "akSystemYellowColor") ~typ:(returning (id))
  let allocWithZone x self = msg_send ~self ~cmd:(selector "allocWithZone:") ~typ:(id @-> returning (id)) x
  let blackColor self = msg_send ~self ~cmd:(selector "blackColor") ~typ:(returning (id))
  let blueColor self = msg_send ~self ~cmd:(selector "blueColor") ~typ:(returning (id))
  let brownColor self = msg_send ~self ~cmd:(selector "brownColor") ~typ:(returning (id))
  let classFallbacksForKeyedArchiver self = msg_send ~self ~cmd:(selector "classFallbacksForKeyedArchiver") ~typ:(returning (id))
  let clearColor self = msg_send ~self ~cmd:(selector "clearColor") ~typ:(returning (id))
  let colorNamed x self = msg_send ~self ~cmd:(selector "colorNamed:") ~typ:(id @-> returning (id)) x
  let colorNamed' x ~inBundle ~compatibleWithTraitCollection self = msg_send ~self ~cmd:(selector "colorNamed:inBundle:compatibleWithTraitCollection:") ~typ:(id @-> id @-> id @-> returning (id)) x inBundle compatibleWithTraitCollection
  let colorWithCGColor x self = msg_send ~self ~cmd:(selector "colorWithCGColor:") ~typ:(ptr void @-> returning (id)) x
  let colorWithCIColor x self = msg_send ~self ~cmd:(selector "colorWithCIColor:") ~typ:(id @-> returning (id)) x
  let colorWithDisplayP3Red x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "colorWithDisplayP3Red:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
  let colorWithDynamicProvider x self = msg_send ~self ~cmd:(selector "colorWithDynamicProvider:") ~typ:(ptr void @-> returning (id)) x
  let colorWithHue x ~saturation ~brightness ~alpha self = msg_send ~self ~cmd:(selector "colorWithHue:saturation:brightness:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x saturation brightness alpha
  let colorWithPatternImage x self = msg_send ~self ~cmd:(selector "colorWithPatternImage:") ~typ:(id @-> returning (id)) x
  let colorWithRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "colorWithRed:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
  let colorWithWhite x ~alpha self = msg_send ~self ~cmd:(selector "colorWithWhite:alpha:") ~typ:(double @-> double @-> returning (id)) x alpha
  let cyanColor self = msg_send ~self ~cmd:(selector "cyanColor") ~typ:(returning (id))
  let darkDisabledSelectionHighlightColor self = msg_send ~self ~cmd:(selector "darkDisabledSelectionHighlightColor") ~typ:(returning (id))
  let darkGrayColor self = msg_send ~self ~cmd:(selector "darkGrayColor") ~typ:(returning (id))
  let darkInactiveSidebarBackgroundColor self = msg_send ~self ~cmd:(selector "darkInactiveSidebarBackgroundColor") ~typ:(returning (id))
  let darkInactiveSidebarHighlightColor self = msg_send ~self ~cmd:(selector "darkInactiveSidebarHighlightColor") ~typ:(returning (id))
  let darkInsertionPointColor self = msg_send ~self ~cmd:(selector "darkInsertionPointColor") ~typ:(returning (id))
  let darkOpaqueDisabledSelectionHighlightColor self = msg_send ~self ~cmd:(selector "darkOpaqueDisabledSelectionHighlightColor") ~typ:(returning (id))
  let darkOpaqueSelectionHighlightColor self = msg_send ~self ~cmd:(selector "darkOpaqueSelectionHighlightColor") ~typ:(returning (id))
  let darkSelectionHighlightColor self = msg_send ~self ~cmd:(selector "darkSelectionHighlightColor") ~typ:(returning (id))
  let darkSelectionMaterialTintColor self = msg_send ~self ~cmd:(selector "darkSelectionMaterialTintColor") ~typ:(returning (id))
  let darkTableHighlightColor self = msg_send ~self ~cmd:(selector "darkTableHighlightColor") ~typ:(returning (id))
  let darkTextColor self = msg_send ~self ~cmd:(selector "darkTextColor") ~typ:(returning (id))
  let disabledSelectionHighlightColor self = msg_send ~self ~cmd:(selector "disabledSelectionHighlightColor") ~typ:(returning (id))
  let externalSystemGreenColor self = msg_send ~self ~cmd:(selector "externalSystemGreenColor") ~typ:(returning (id))
  let externalSystemRedColor self = msg_send ~self ~cmd:(selector "externalSystemRedColor") ~typ:(returning (id))
  let externalSystemTealColor self = msg_send ~self ~cmd:(selector "externalSystemTealColor") ~typ:(returning (id))
  let grayColor self = msg_send ~self ~cmd:(selector "grayColor") ~typ:(returning (id))
  let greenColor self = msg_send ~self ~cmd:(selector "greenColor") ~typ:(returning (id))
  let groupTableViewBackgroundColor self = msg_send ~self ~cmd:(selector "groupTableViewBackgroundColor") ~typ:(returning (id))
  let inactiveSidebarBackgroundColor self = msg_send ~self ~cmd:(selector "inactiveSidebarBackgroundColor") ~typ:(returning (id))
  let inactiveSidebarHighlightColor self = msg_send ~self ~cmd:(selector "inactiveSidebarHighlightColor") ~typ:(returning (id))
  let infoTextOverPinStripeTextColor self = msg_send ~self ~cmd:(selector "infoTextOverPinStripeTextColor") ~typ:(returning (id))
  let initialize self = msg_send ~self ~cmd:(selector "initialize") ~typ:(returning (void))
  let insertionPointColor self = msg_send ~self ~cmd:(selector "insertionPointColor") ~typ:(returning (id))
  let keyboardFocusIndicatorColor self = msg_send ~self ~cmd:(selector "keyboardFocusIndicatorColor") ~typ:(returning (id))
  let labelColor self = msg_send ~self ~cmd:(selector "labelColor") ~typ:(returning (id))
  let lightGrayColor self = msg_send ~self ~cmd:(selector "lightGrayColor") ~typ:(returning (id))
  let lightTextColor self = msg_send ~self ~cmd:(selector "lightTextColor") ~typ:(returning (id))
  let linkColor self = msg_send ~self ~cmd:(selector "linkColor") ~typ:(returning (id))
  let magentaColor self = msg_send ~self ~cmd:(selector "magentaColor") ~typ:(returning (id))
  let noContentDarkGradientBackgroundColor self = msg_send ~self ~cmd:(selector "noContentDarkGradientBackgroundColor") ~typ:(returning (id))
  let noContentLightGradientBackgroundColor self = msg_send ~self ~cmd:(selector "noContentLightGradientBackgroundColor") ~typ:(returning (id))
  let objectWithItemProviderData x ~typeIdentifier ~error self = msg_send ~self ~cmd:(selector "objectWithItemProviderData:typeIdentifier:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (id)) x typeIdentifier error
  let opaqueDisabledSelectionHighlightColor self = msg_send ~self ~cmd:(selector "opaqueDisabledSelectionHighlightColor") ~typ:(returning (id))
  let opaqueSelectionHighlightColor self = msg_send ~self ~cmd:(selector "opaqueSelectionHighlightColor") ~typ:(returning (id))
  let opaqueSeparatorColor self = msg_send ~self ~cmd:(selector "opaqueSeparatorColor") ~typ:(returning (id))
  let orangeColor self = msg_send ~self ~cmd:(selector "orangeColor") ~typ:(returning (id))
  let pinStripeColor self = msg_send ~self ~cmd:(selector "pinStripeColor") ~typ:(returning (id))
  let pkaxHueNameForValue x self = msg_send ~self ~cmd:(selector "pkaxHueNameForValue:") ~typ:(double @-> returning (id)) x
  let placeholderTextColor self = msg_send ~self ~cmd:(selector "placeholderTextColor") ~typ:(returning (id))
  let purpleColor self = msg_send ~self ~cmd:(selector "purpleColor") ~typ:(returning (id))
  let quaternaryLabelColor self = msg_send ~self ~cmd:(selector "quaternaryLabelColor") ~typ:(returning (id))
  let quaternarySystemFillColor self = msg_send ~self ~cmd:(selector "quaternarySystemFillColor") ~typ:(returning (id))
  let readableTypeIdentifiersForItemProvider self = msg_send ~self ~cmd:(selector "readableTypeIdentifiersForItemProvider") ~typ:(returning (id))
  let redColor self = msg_send ~self ~cmd:(selector "redColor") ~typ:(returning (id))
  let scrollViewTexturedBackgroundColor self = msg_send ~self ~cmd:(selector "scrollViewTexturedBackgroundColor") ~typ:(returning (id))
  let secondaryLabelColor self = msg_send ~self ~cmd:(selector "secondaryLabelColor") ~typ:(returning (id))
  let secondarySystemBackgroundColor self = msg_send ~self ~cmd:(selector "secondarySystemBackgroundColor") ~typ:(returning (id))
  let secondarySystemFillColor self = msg_send ~self ~cmd:(selector "secondarySystemFillColor") ~typ:(returning (id))
  let secondarySystemGroupedBackgroundColor self = msg_send ~self ~cmd:(selector "secondarySystemGroupedBackgroundColor") ~typ:(returning (id))
  let sectionHeaderBackgroundColor self = msg_send ~self ~cmd:(selector "sectionHeaderBackgroundColor") ~typ:(returning (id))
  let sectionHeaderBorderColor self = msg_send ~self ~cmd:(selector "sectionHeaderBorderColor") ~typ:(returning (id))
  let sectionHeaderOpaqueBackgroundColor self = msg_send ~self ~cmd:(selector "sectionHeaderOpaqueBackgroundColor") ~typ:(returning (id))
  let sectionListBorderColor self = msg_send ~self ~cmd:(selector "sectionListBorderColor") ~typ:(returning (id))
  let selectionGrabberColor self = msg_send ~self ~cmd:(selector "selectionGrabberColor") ~typ:(returning (id))
  let selectionHighlightColor self = msg_send ~self ~cmd:(selector "selectionHighlightColor") ~typ:(returning (id))
  let selectionMaterialTintColor self = msg_send ~self ~cmd:(selector "selectionMaterialTintColor") ~typ:(returning (id))
  let separatorColor self = msg_send ~self ~cmd:(selector "separatorColor") ~typ:(returning (id))
  let supportsSecureCoding self = msg_send ~self ~cmd:(selector "supportsSecureCoding") ~typ:(returning (bool))
  let systemBackgroundColor self = msg_send ~self ~cmd:(selector "systemBackgroundColor") ~typ:(returning (id))
  let systemBlackColor self = msg_send ~self ~cmd:(selector "systemBlackColor") ~typ:(returning (id))
  let systemBlueColor self = msg_send ~self ~cmd:(selector "systemBlueColor") ~typ:(returning (id))
  let systemBrownColor self = msg_send ~self ~cmd:(selector "systemBrownColor") ~typ:(returning (id))
  let systemCyanColor self = msg_send ~self ~cmd:(selector "systemCyanColor") ~typ:(returning (id))
  let systemDarkBlueColor self = msg_send ~self ~cmd:(selector "systemDarkBlueColor") ~typ:(returning (id))
  let systemDarkExtraLightGrayColor self = msg_send ~self ~cmd:(selector "systemDarkExtraLightGrayColor") ~typ:(returning (id))
  let systemDarkExtraLightGrayTintColor self = msg_send ~self ~cmd:(selector "systemDarkExtraLightGrayTintColor") ~typ:(returning (id))
  let systemDarkGrayColor self = msg_send ~self ~cmd:(selector "systemDarkGrayColor") ~typ:(returning (id))
  let systemDarkGrayTintColor self = msg_send ~self ~cmd:(selector "systemDarkGrayTintColor") ~typ:(returning (id))
  let systemDarkGreenColor self = msg_send ~self ~cmd:(selector "systemDarkGreenColor") ~typ:(returning (id))
  let systemDarkLightGrayColor self = msg_send ~self ~cmd:(selector "systemDarkLightGrayColor") ~typ:(returning (id))
  let systemDarkLightGrayTintColor self = msg_send ~self ~cmd:(selector "systemDarkLightGrayTintColor") ~typ:(returning (id))
  let systemDarkLightMidGrayColor self = msg_send ~self ~cmd:(selector "systemDarkLightMidGrayColor") ~typ:(returning (id))
  let systemDarkLightMidGrayTintColor self = msg_send ~self ~cmd:(selector "systemDarkLightMidGrayTintColor") ~typ:(returning (id))
  let systemDarkMidGrayColor self = msg_send ~self ~cmd:(selector "systemDarkMidGrayColor") ~typ:(returning (id))
  let systemDarkMidGrayTintColor self = msg_send ~self ~cmd:(selector "systemDarkMidGrayTintColor") ~typ:(returning (id))
  let systemDarkOrangeColor self = msg_send ~self ~cmd:(selector "systemDarkOrangeColor") ~typ:(returning (id))
  let systemDarkPinkColor self = msg_send ~self ~cmd:(selector "systemDarkPinkColor") ~typ:(returning (id))
  let systemDarkPurpleColor self = msg_send ~self ~cmd:(selector "systemDarkPurpleColor") ~typ:(returning (id))
  let systemDarkRedColor self = msg_send ~self ~cmd:(selector "systemDarkRedColor") ~typ:(returning (id))
  let systemDarkTealColor self = msg_send ~self ~cmd:(selector "systemDarkTealColor") ~typ:(returning (id))
  let systemDarkUserInterfaceStyleDarkPrimaryTextColor self = msg_send ~self ~cmd:(selector "systemDarkUserInterfaceStyleDarkPrimaryTextColor") ~typ:(returning (id))
  let systemDarkUserInterfaceStyleDarkSecondaryTextColor self = msg_send ~self ~cmd:(selector "systemDarkUserInterfaceStyleDarkSecondaryTextColor") ~typ:(returning (id))
  let systemDarkYellowColor self = msg_send ~self ~cmd:(selector "systemDarkYellowColor") ~typ:(returning (id))
  let systemExtraLightGrayColor self = msg_send ~self ~cmd:(selector "systemExtraLightGrayColor") ~typ:(returning (id))
  let systemExtraLightGrayTintColor self = msg_send ~self ~cmd:(selector "systemExtraLightGrayTintColor") ~typ:(returning (id))
  let systemFillColor self = msg_send ~self ~cmd:(selector "systemFillColor") ~typ:(returning (id))
  let systemGray2Color self = msg_send ~self ~cmd:(selector "systemGray2Color") ~typ:(returning (id))
  let systemGray3Color self = msg_send ~self ~cmd:(selector "systemGray3Color") ~typ:(returning (id))
  let systemGray4Color self = msg_send ~self ~cmd:(selector "systemGray4Color") ~typ:(returning (id))
  let systemGray5Color self = msg_send ~self ~cmd:(selector "systemGray5Color") ~typ:(returning (id))
  let systemGray6Color self = msg_send ~self ~cmd:(selector "systemGray6Color") ~typ:(returning (id))
  let systemGrayColor self = msg_send ~self ~cmd:(selector "systemGrayColor") ~typ:(returning (id))
  let systemGrayTintColor self = msg_send ~self ~cmd:(selector "systemGrayTintColor") ~typ:(returning (id))
  let systemGreenColor self = msg_send ~self ~cmd:(selector "systemGreenColor") ~typ:(returning (id))
  let systemGroupedBackgroundColor self = msg_send ~self ~cmd:(selector "systemGroupedBackgroundColor") ~typ:(returning (id))
  let systemIndigoColor self = msg_send ~self ~cmd:(selector "systemIndigoColor") ~typ:(returning (id))
  let systemLightGrayColor self = msg_send ~self ~cmd:(selector "systemLightGrayColor") ~typ:(returning (id))
  let systemLightGrayTintColor self = msg_send ~self ~cmd:(selector "systemLightGrayTintColor") ~typ:(returning (id))
  let systemLightMidGrayColor self = msg_send ~self ~cmd:(selector "systemLightMidGrayColor") ~typ:(returning (id))
  let systemLightMidGrayTintColor self = msg_send ~self ~cmd:(selector "systemLightMidGrayTintColor") ~typ:(returning (id))
  let systemMidGrayColor self = msg_send ~self ~cmd:(selector "systemMidGrayColor") ~typ:(returning (id))
  let systemMidGrayTintColor self = msg_send ~self ~cmd:(selector "systemMidGrayTintColor") ~typ:(returning (id))
  let systemMintColor self = msg_send ~self ~cmd:(selector "systemMintColor") ~typ:(returning (id))
  let systemOrangeColor self = msg_send ~self ~cmd:(selector "systemOrangeColor") ~typ:(returning (id))
  let systemPinkColor self = msg_send ~self ~cmd:(selector "systemPinkColor") ~typ:(returning (id))
  let systemPurpleColor self = msg_send ~self ~cmd:(selector "systemPurpleColor") ~typ:(returning (id))
  let systemRedColor self = msg_send ~self ~cmd:(selector "systemRedColor") ~typ:(returning (id))
  let systemTealColor self = msg_send ~self ~cmd:(selector "systemTealColor") ~typ:(returning (id))
  let systemUserInterfaceStyleDarkPrimaryTextColor self = msg_send ~self ~cmd:(selector "systemUserInterfaceStyleDarkPrimaryTextColor") ~typ:(returning (id))
  let systemUserInterfaceStyleDarkSecondaryTextColor self = msg_send ~self ~cmd:(selector "systemUserInterfaceStyleDarkSecondaryTextColor") ~typ:(returning (id))
  let systemWhiteColor self = msg_send ~self ~cmd:(selector "systemWhiteColor") ~typ:(returning (id))
  let systemYellowColor self = msg_send ~self ~cmd:(selector "systemYellowColor") ~typ:(returning (id))
  let tableBackgroundColor self = msg_send ~self ~cmd:(selector "tableBackgroundColor") ~typ:(returning (id))
  let tableCellBackgroundColor self = msg_send ~self ~cmd:(selector "tableCellBackgroundColor") ~typ:(returning (id))
  let tableCellBlueTextColor self = msg_send ~self ~cmd:(selector "tableCellBlueTextColor") ~typ:(returning (id))
  let tableCellDefaultSelectionTintColor self = msg_send ~self ~cmd:(selector "tableCellDefaultSelectionTintColor") ~typ:(returning (id))
  let tableCellDisabledBackgroundColor self = msg_send ~self ~cmd:(selector "tableCellDisabledBackgroundColor") ~typ:(returning (id))
  let tableCellFocusedBackgroundColor self = msg_send ~self ~cmd:(selector "tableCellFocusedBackgroundColor") ~typ:(returning (id))
  let tableCellGrayTextColor self = msg_send ~self ~cmd:(selector "tableCellGrayTextColor") ~typ:(returning (id))
  let tableCellGroupedBackgroundColor self = msg_send ~self ~cmd:(selector "tableCellGroupedBackgroundColor") ~typ:(returning (id))
  let tableCellGroupedBackgroundColorLegacyWhite self = msg_send ~self ~cmd:(selector "tableCellGroupedBackgroundColorLegacyWhite") ~typ:(returning (id))
  let tableCellGroupedSelectedBackgroundColor self = msg_send ~self ~cmd:(selector "tableCellGroupedSelectedBackgroundColor") ~typ:(returning (id))
  let tableCellHighlightedBackgroundColor self = msg_send ~self ~cmd:(selector "tableCellHighlightedBackgroundColor") ~typ:(returning (id))
  let tableCellPlainBackgroundColor self = msg_send ~self ~cmd:(selector "tableCellPlainBackgroundColor") ~typ:(returning (id))
  let tableCellPlainSelectedBackgroundColor self = msg_send ~self ~cmd:(selector "tableCellPlainSelectedBackgroundColor") ~typ:(returning (id))
  let tableCellValue1BlueColor self = msg_send ~self ~cmd:(selector "tableCellValue1BlueColor") ~typ:(returning (id))
  let tableCellValue2BlueColor self = msg_send ~self ~cmd:(selector "tableCellValue2BlueColor") ~typ:(returning (id))
  let tableCellbackgroundColorCarPlay self = msg_send ~self ~cmd:(selector "tableCellbackgroundColorCarPlay") ~typ:(returning (id))
  let tableGroupedSeparatorLightColor self = msg_send ~self ~cmd:(selector "tableGroupedSeparatorLightColor") ~typ:(returning (id))
  let tableGroupedTopShadowColor self = msg_send ~self ~cmd:(selector "tableGroupedTopShadowColor") ~typ:(returning (id))
  let tableHighlightColor self = msg_send ~self ~cmd:(selector "tableHighlightColor") ~typ:(returning (id))
  let tablePlainHeaderFooterBackgroundColor self = msg_send ~self ~cmd:(selector "tablePlainHeaderFooterBackgroundColor") ~typ:(returning (id))
  let tablePlainHeaderFooterFloatingBackgroundColor self = msg_send ~self ~cmd:(selector "tablePlainHeaderFooterFloatingBackgroundColor") ~typ:(returning (id))
  let tableSelectionColor self = msg_send ~self ~cmd:(selector "tableSelectionColor") ~typ:(returning (id))
  let tableSelectionGradientEndColor self = msg_send ~self ~cmd:(selector "tableSelectionGradientEndColor") ~typ:(returning (id))
  let tableSelectionGradientStartColor self = msg_send ~self ~cmd:(selector "tableSelectionGradientStartColor") ~typ:(returning (id))
  let tableSeparatorColor self = msg_send ~self ~cmd:(selector "tableSeparatorColor") ~typ:(returning (id))
  let tableSeparatorDarkColor self = msg_send ~self ~cmd:(selector "tableSeparatorDarkColor") ~typ:(returning (id))
  let tableSeparatorLightColor self = msg_send ~self ~cmd:(selector "tableSeparatorLightColor") ~typ:(returning (id))
  let tableShadowColor self = msg_send ~self ~cmd:(selector "tableShadowColor") ~typ:(returning (id))
  let tertiaryLabelColor self = msg_send ~self ~cmd:(selector "tertiaryLabelColor") ~typ:(returning (id))
  let tertiarySystemBackgroundColor self = msg_send ~self ~cmd:(selector "tertiarySystemBackgroundColor") ~typ:(returning (id))
  let tertiarySystemFillColor self = msg_send ~self ~cmd:(selector "tertiarySystemFillColor") ~typ:(returning (id))
  let tertiarySystemGroupedBackgroundColor self = msg_send ~self ~cmd:(selector "tertiarySystemGroupedBackgroundColor") ~typ:(returning (id))
  let textCorrectionIndicatorColorSR self = msg_send ~self ~cmd:(selector "textCorrectionIndicatorColorSR") ~typ:(returning (id))
  let textFieldAtomBlueColor self = msg_send ~self ~cmd:(selector "textFieldAtomBlueColor") ~typ:(returning (id))
  let textFieldAtomPurpleColor self = msg_send ~self ~cmd:(selector "textFieldAtomPurpleColor") ~typ:(returning (id))
  let textGrammarIndicatorColor self = msg_send ~self ~cmd:(selector "textGrammarIndicatorColor") ~typ:(returning (id))
  let textSpellingIndicatorColor self = msg_send ~self ~cmd:(selector "textSpellingIndicatorColor") ~typ:(returning (id))
  let tintColor self = msg_send ~self ~cmd:(selector "tintColor") ~typ:(returning (id))
  let underPageBackgroundColor self = msg_send ~self ~cmd:(selector "underPageBackgroundColor") ~typ:(returning (id))
  let viewFlipsideBackgroundColor self = msg_send ~self ~cmd:(selector "viewFlipsideBackgroundColor") ~typ:(returning (id))
  let whiteColor self = msg_send ~self ~cmd:(selector "whiteColor") ~typ:(returning (id))
  let writableTypeIdentifiersForItemProvider self = msg_send ~self ~cmd:(selector "writableTypeIdentifiersForItemProvider") ~typ:(returning (id))
  let yellowColor self = msg_send ~self ~cmd:(selector "yellowColor") ~typ:(returning (id))
end

let _CGColor self = msg_send ~self ~cmd:(selector "CGColor") ~typ:(returning (ptr void))
let _CIColor self = msg_send ~self ~cmd:(selector "CIColor") ~typ:(returning (id))
let accessibilityName self = msg_send ~self ~cmd:(selector "accessibilityName") ~typ:(returning (id))
let akAlphaComponent self = msg_send ~self ~cmd:(selector "akAlphaComponent") ~typ:(returning (double))
let akBlendedColorWithFraction x ~ofColor self = msg_send ~self ~cmd:(selector "akBlendedColorWithFraction:ofColor:") ~typ:(double @-> id @-> returning (id)) x ofColor
let akDistanceFromColor x self = msg_send ~self ~cmd:(selector "akDistanceFromColor:") ~typ:(id @-> returning (double)) x
let akHasHueEqualToColor x ~withTolerance self = msg_send ~self ~cmd:(selector "akHasHueEqualToColor:withTolerance:") ~typ:(id @-> double @-> returning (bool)) x withTolerance
let akIsEqualToColor x self = msg_send ~self ~cmd:(selector "akIsEqualToColor:") ~typ:(id @-> returning (bool)) x
let alphaComponent self = msg_send ~self ~cmd:(selector "alphaComponent") ~typ:(returning (double))
let cgColor self = msg_send ~self ~cmd:(selector "cgColor") ~typ:(returning (ptr void))
let classForCoder self = msg_send ~self ~cmd:(selector "classForCoder") ~typ:(returning (_Class))
let colorSpaceName self = msg_send ~self ~cmd:(selector "colorSpaceName") ~typ:(returning (id))
let colorUsingSRGBColorSpace self = msg_send ~self ~cmd:(selector "colorUsingSRGBColorSpace") ~typ:(returning (id))
let colorWithAlphaComponent x self = msg_send ~self ~cmd:(selector "colorWithAlphaComponent:") ~typ:(double @-> returning (id)) x
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:(id @-> returning (id)) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let getHue x ~saturation ~brightness ~alpha self = msg_send ~self ~cmd:(selector "getHue:saturation:brightness:alpha:") ~typ:(ptr (double) @-> ptr (double) @-> ptr (double) @-> ptr (double) @-> returning (bool)) x saturation brightness alpha
let getL x ~a ~b self = msg_send ~self ~cmd:(selector "getL:a:b:") ~typ:(ptr (double) @-> ptr (double) @-> ptr (double) @-> returning (void)) x a b
let getRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "getRed:green:blue:alpha:") ~typ:(ptr (double) @-> ptr (double) @-> ptr (double) @-> ptr (double) @-> returning (bool)) x green blue alpha
let getWhite x ~alpha self = msg_send ~self ~cmd:(selector "getWhite:alpha:") ~typ:(ptr (double) @-> ptr (double) @-> returning (bool)) x alpha
let hash self = msg_send ~self ~cmd:(selector "hash") ~typ:(returning (ullong))
let initWithCGColor x self = msg_send ~self ~cmd:(selector "initWithCGColor:") ~typ:(ptr void @-> returning (id)) x
let initWithCIColor x self = msg_send ~self ~cmd:(selector "initWithCIColor:") ~typ:(id @-> returning (id)) x
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithDisplayP3Red x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "initWithDisplayP3Red:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
let initWithDynamicProvider x self = msg_send ~self ~cmd:(selector "initWithDynamicProvider:") ~typ:(ptr void @-> returning (id)) x
let initWithHue x ~saturation ~brightness ~alpha self = msg_send ~self ~cmd:(selector "initWithHue:saturation:brightness:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x saturation brightness alpha
let initWithItemProviderData x ~typeIdentifier ~error self = msg_send ~self ~cmd:(selector "initWithItemProviderData:typeIdentifier:error:") ~typ:(id @-> id @-> ptr (id) @-> returning (id)) x typeIdentifier error
let initWithPatternImage x self = msg_send ~self ~cmd:(selector "initWithPatternImage:") ~typ:(id @-> returning (id)) x
let initWithRed x ~green ~blue ~alpha self = msg_send ~self ~cmd:(selector "initWithRed:green:blue:alpha:") ~typ:(double @-> double @-> double @-> double @-> returning (id)) x green blue alpha
let initWithWhite x ~alpha self = msg_send ~self ~cmd:(selector "initWithWhite:alpha:") ~typ:(double @-> double @-> returning (id)) x alpha
let isEqual x self = msg_send ~self ~cmd:(selector "isEqual:") ~typ:(id @-> returning (bool)) x
let isPatternColor self = msg_send ~self ~cmd:(selector "isPatternColor") ~typ:(returning (bool))
let loadDataWithTypeIdentifier x ~forItemProviderCompletionHandler self = msg_send ~self ~cmd:(selector "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:") ~typ:(id @-> ptr void @-> returning (id)) x forItemProviderCompletionHandler
let pkaxApproximateColorDescription self = msg_send ~self ~cmd:(selector "pkaxApproximateColorDescription") ~typ:(returning (id))
let pkaxDescriptionWithLuma self = msg_send ~self ~cmd:(selector "pkaxDescriptionWithLuma") ~typ:(returning (id))
let pkaxHue self = msg_send ~self ~cmd:(selector "pkaxHue") ~typ:(returning (double))
let pkaxHueName self = msg_send ~self ~cmd:(selector "pkaxHueName") ~typ:(returning (id))
let pkaxLightnessModifier self = msg_send ~self ~cmd:(selector "pkaxLightnessModifier") ~typ:(returning (id))
let pkaxLuma self = msg_send ~self ~cmd:(selector "pkaxLuma") ~typ:(returning (double))
let pkaxSaturation self = msg_send ~self ~cmd:(selector "pkaxSaturation") ~typ:(returning (double))
let pkaxSaturationModifier self = msg_send ~self ~cmd:(selector "pkaxSaturationModifier") ~typ:(returning (id))
let resolvedColorWithTraitCollection x self = msg_send ~self ~cmd:(selector "resolvedColorWithTraitCollection:") ~typ:(id @-> returning (id)) x
let set self = msg_send ~self ~cmd:(selector "set") ~typ:(returning (void))
let setFill self = msg_send ~self ~cmd:(selector "setFill") ~typ:(returning (void))
let setStroke self = msg_send ~self ~cmd:(selector "setStroke") ~typ:(returning (void))
let styleString self = msg_send ~self ~cmd:(selector "styleString") ~typ:(returning (id))
let writableTypeIdentifiersForItemProvider self = msg_send ~self ~cmd:(selector "writableTypeIdentifiersForItemProvider") ~typ:(returning (id))