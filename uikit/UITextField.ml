(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UITextField"

let actualFont self = msg_send ~self ~cmd:(selector "actualFont") ~typ:(returning (id))
let actualMinimumFontSize self = msg_send ~self ~cmd:(selector "actualMinimumFontSize") ~typ:(returning (double))
let addGhostedRange x self = msg_send ~self ~cmd:(selector "addGhostedRange:") ~typ:(id @-> returning (void)) x
let addInvisibleRange x self = msg_send ~self ~cmd:(selector "addInvisibleRange:") ~typ:(id @-> returning (void)) x
let adjustedCaretRectForCaretRect x self = msg_send_stret ~self ~cmd:(selector "adjustedCaretRectForCaretRect:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let adjustsFontForContentSizeCategory self = msg_send ~self ~cmd:(selector "adjustsFontForContentSizeCategory") ~typ:(returning (bool))
let adjustsFontSizeToFitWidth self = msg_send ~self ~cmd:(selector "adjustsFontSizeToFitWidth") ~typ:(returning (bool))
let allowsAttachments self = msg_send ~self ~cmd:(selector "allowsAttachments") ~typ:(returning (bool))
let allowsDraggingAttachments self = msg_send ~self ~cmd:(selector "allowsDraggingAttachments") ~typ:(returning (bool))
let allowsEditingTextAttributes self = msg_send ~self ~cmd:(selector "allowsEditingTextAttributes") ~typ:(returning (bool))
let annotatedSubstringForRange x self = msg_send ~self ~cmd:(selector "annotatedSubstringForRange:") ~typ:(id @-> returning (id)) x
let attributedPlaceholder self = msg_send ~self ~cmd:(selector "attributedPlaceholder") ~typ:(returning (id))
let attributedText self = msg_send ~self ~cmd:(selector "attributedText") ~typ:(returning (id))
let attributedTextInRange x self = msg_send ~self ~cmd:(selector "attributedTextInRange:") ~typ:(id @-> returning (id)) x
let automaticallySelectedOverlay self = msg_send ~self ~cmd:(selector "automaticallySelectedOverlay") ~typ:(returning (id))
let background self = msg_send ~self ~cmd:(selector "background") ~typ:(returning (id))
let backgroundColor self = msg_send ~self ~cmd:(selector "backgroundColor") ~typ:(returning (id))
let baseWritingDirectionForPosition x ~inDirection self = msg_send ~self ~cmd:(selector "baseWritingDirectionForPosition:inDirection:") ~typ:(id @-> llong @-> returning (llong)) x inDirection
let becomeDropResponder self = msg_send ~self ~cmd:(selector "becomeDropResponder") ~typ:(returning (void))
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning (bool))
let beginFloatingCursorAtPoint x self = msg_send ~self ~cmd:(selector "beginFloatingCursorAtPoint:") ~typ:(CGPoint.t @-> returning (void)) x
let beginSelectionChange self = msg_send ~self ~cmd:(selector "beginSelectionChange") ~typ:(returning (void))
let beginTrackingWithTouch x ~withEvent self = msg_send ~self ~cmd:(selector "beginTrackingWithTouch:withEvent:") ~typ:(id @-> id @-> returning (bool)) x withEvent
let beginningOfDocument self = msg_send ~self ~cmd:(selector "beginningOfDocument") ~typ:(returning (id))
let borderRectForBounds x self = msg_send_stret ~self ~cmd:(selector "borderRectForBounds:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let borderStyle self = msg_send ~self ~cmd:(selector "borderStyle") ~typ:(returning (llong))
let canBecomeDropResponder self = msg_send ~self ~cmd:(selector "canBecomeDropResponder") ~typ:(returning (bool))
let canBecomeFirstResponder self = msg_send ~self ~cmd:(selector "canBecomeFirstResponder") ~typ:(returning (bool))
let canBecomeFocused self = msg_send ~self ~cmd:(selector "canBecomeFocused") ~typ:(returning (bool))
let canPerformAction x ~withSender self = msg_send ~self ~cmd:(selector "canPerformAction:withSender:") ~typ:(_SEL @-> id @-> returning (bool)) x withSender
let canResignFirstResponder self = msg_send ~self ~cmd:(selector "canResignFirstResponder") ~typ:(returning (bool))
let cancelAutoscroll self = msg_send ~self ~cmd:(selector "cancelAutoscroll") ~typ:(returning (void))
let cancelTrackingWithEvent x self = msg_send ~self ~cmd:(selector "cancelTrackingWithEvent:") ~typ:(id @-> returning (void)) x
let capitalizeWord x self = msg_send ~self ~cmd:(selector "capitalizeWord:") ~typ:(id @-> returning (void)) x
let captureTextFromCamera x self = msg_send ~self ~cmd:(selector "captureTextFromCamera:") ~typ:(id @-> returning (void)) x
let caretRectForPosition x self = msg_send_stret ~self ~cmd:(selector "caretRectForPosition:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let characterRangeAtPoint x self = msg_send ~self ~cmd:(selector "characterRangeAtPoint:") ~typ:(CGPoint.t @-> returning (id)) x
let characterRangeByExtendingPosition x ~inDirection self = msg_send ~self ~cmd:(selector "characterRangeByExtendingPosition:inDirection:") ~typ:(id @-> llong @-> returning (id)) x inDirection
let clearButton self = msg_send ~self ~cmd:(selector "clearButton") ~typ:(returning (id))
let clearButtonMode self = msg_send ~self ~cmd:(selector "clearButtonMode") ~typ:(returning (llong))
let clearButtonOffset self = msg_send_stret ~self ~cmd:(selector "clearButtonOffset") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let clearButtonRect self = msg_send_stret ~self ~cmd:(selector "clearButtonRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let clearButtonRectForBounds x self = msg_send_stret ~self ~cmd:(selector "clearButtonRectForBounds:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let clearText self = msg_send ~self ~cmd:(selector "clearText") ~typ:(returning (void))
let clearingBehavior self = msg_send ~self ~cmd:(selector "clearingBehavior") ~typ:(returning (llong))
let clearsOnBeginEditing self = msg_send ~self ~cmd:(selector "clearsOnBeginEditing") ~typ:(returning (bool))
let clearsOnInsertion self = msg_send ~self ~cmd:(selector "clearsOnInsertion") ~typ:(returning (bool))
let clearsPlaceholderOnBeginEditing self = msg_send ~self ~cmd:(selector "clearsPlaceholderOnBeginEditing") ~typ:(returning (bool))
let closestCaretRectInMarkedTextRangeForPoint x self = msg_send_stret ~self ~cmd:(selector "closestCaretRectInMarkedTextRangeForPoint:") ~typ:(CGPoint.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let closestPositionToPoint x self = msg_send ~self ~cmd:(selector "closestPositionToPoint:") ~typ:(CGPoint.t @-> returning (id)) x
let closestPositionToPoint' x ~withinRange self = msg_send ~self ~cmd:(selector "closestPositionToPoint:withinRange:") ~typ:(CGPoint.t @-> id @-> returning (id)) x withinRange
let comparePosition x ~toPosition self = msg_send ~self ~cmd:(selector "comparePosition:toPosition:") ~typ:(id @-> id @-> returning (llong)) x toPosition
let constrainedPoint x self = msg_send_stret ~self ~cmd:(selector "constrainedPoint:") ~typ:(CGPoint.t @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let contentOffsetForSameViewDrops self = msg_send_stret ~self ~cmd:(selector "contentOffsetForSameViewDrops") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let continueTrackingWithTouch x ~withEvent self = msg_send ~self ~cmd:(selector "continueTrackingWithTouch:withEvent:") ~typ:(id @-> id @-> returning (bool)) x withEvent
let controlSize self = msg_send ~self ~cmd:(selector "controlSize") ~typ:(returning (int))
let copy x self = msg_send ~self ~cmd:(selector "copy:") ~typ:(id @-> returning (void)) x
let createPlaceholderIfNecessary self = msg_send ~self ~cmd:(selector "createPlaceholderIfNecessary") ~typ:(returning (void))
let createPlaceholderLabelWithFont x ~andTextAlignment self = msg_send ~self ~cmd:(selector "createPlaceholderLabelWithFont:andTextAlignment:") ~typ:(id @-> llong @-> returning (id)) x andTextAlignment
let createTextLabelWithTextColor x self = msg_send ~self ~cmd:(selector "createTextLabelWithTextColor:") ~typ:(id @-> returning (id)) x
let customOverlayContainer self = msg_send ~self ~cmd:(selector "customOverlayContainer") ~typ:(returning (id))
let cut x self = msg_send ~self ~cmd:(selector "cut:") ~typ:(id @-> returning (void)) x
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let debugDescription self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning (id))
let decodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "decodeRestorableStateWithCoder:") ~typ:(id @-> returning (void)) x
let decodeRestorableStateWithCoder' x ~includingSelectedTextAndDisplayedViewControllers self = msg_send ~self ~cmd:(selector "decodeRestorableStateWithCoder:includingSelectedTextAndDisplayedViewControllers:") ~typ:(id @-> bool @-> returning (void)) x includingSelectedTextAndDisplayedViewControllers
let decreaseSize x self = msg_send ~self ~cmd:(selector "decreaseSize:") ~typ:(id @-> returning (void)) x
let defaultClearButtonImageForState x self = msg_send ~self ~cmd:(selector "defaultClearButtonImageForState:") ~typ:(ullong @-> returning (id)) x
let defaultTextAttributes self = msg_send ~self ~cmd:(selector "defaultTextAttributes") ~typ:(returning (id))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let deleteBackward self = msg_send ~self ~cmd:(selector "deleteBackward") ~typ:(returning (void))
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let didAddTextAttachmentViews x self = msg_send ~self ~cmd:(selector "didAddTextAttachmentViews:") ~typ:(id @-> returning (void)) x
let didGenerateCancelPreview x self = msg_send ~self ~cmd:(selector "didGenerateCancelPreview:") ~typ:(id @-> returning (void)) x
let didLayoutTextAttachmentView x ~inFragmentRect self = msg_send ~self ~cmd:(selector "didLayoutTextAttachmentView:inFragmentRect:") ~typ:(id @-> CGRect.t @-> returning (void)) x inFragmentRect
let didMoveToWindow self = msg_send ~self ~cmd:(selector "didMoveToWindow") ~typ:(returning (void))
let didRemoveTextAttachmentViews x self = msg_send ~self ~cmd:(selector "didRemoveTextAttachmentViews:") ~typ:(id @-> returning (void)) x
let didUpdateFocusInContext x ~withAnimationCoordinator self = msg_send ~self ~cmd:(selector "didUpdateFocusInContext:withAnimationCoordinator:") ~typ:(id @-> id @-> returning (void)) x withAnimationCoordinator
let disableClearsOnInsertion self = msg_send ~self ~cmd:(selector "disableClearsOnInsertion") ~typ:(returning (void))
let disabledBackground self = msg_send ~self ~cmd:(selector "disabledBackground") ~typ:(returning (id))
let documentFragmentForPasteboardItemAtIndex x self = msg_send ~self ~cmd:(selector "documentFragmentForPasteboardItemAtIndex:") ~typ:(llong @-> returning (id)) x
let draggingFinished x self = msg_send ~self ~cmd:(selector "draggingFinished:") ~typ:(id @-> returning (void)) x
let draggingStarted self = msg_send ~self ~cmd:(selector "draggingStarted") ~typ:(returning (void))
let drawPlaceholderInRect x self = msg_send ~self ~cmd:(selector "drawPlaceholderInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawPrefixInRect x self = msg_send ~self ~cmd:(selector "drawPrefixInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawRect x self = msg_send ~self ~cmd:(selector "drawRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawSuffixInRect x self = msg_send ~self ~cmd:(selector "drawSuffixInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawTextInRect x self = msg_send ~self ~cmd:(selector "drawTextInRect:") ~typ:(CGRect.t @-> returning (void)) x
let drawTextInRectIfNeeded x self = msg_send ~self ~cmd:(selector "drawTextInRectIfNeeded:") ~typ:(CGRect.t @-> returning (bool)) x
let drawingScale self = msg_send_stret ~self ~cmd:(selector "drawingScale") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let droppingFinished self = msg_send ~self ~cmd:(selector "droppingFinished") ~typ:(returning (void))
let droppingStarted self = msg_send ~self ~cmd:(selector "droppingStarted") ~typ:(returning (void))
let editRect self = msg_send_stret ~self ~cmd:(selector "editRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let editingRectForBounds x self = msg_send_stret ~self ~cmd:(selector "editingRectForBounds:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning (void)) x
let encodeRestorableStateWithCoder' x ~includingSelectedTextAndDisplayedViewControllers self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:includingSelectedTextAndDisplayedViewControllers:") ~typ:(id @-> bool @-> returning (void)) x includingSelectedTextAndDisplayedViewControllers
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let endFloatingCursor self = msg_send ~self ~cmd:(selector "endFloatingCursor") ~typ:(returning (void))
let endOfDocument self = msg_send ~self ~cmd:(selector "endOfDocument") ~typ:(returning (id))
let endSelectionChange self = msg_send ~self ~cmd:(selector "endSelectionChange") ~typ:(returning (void))
let endTrackingWithTouch x ~withEvent self = msg_send ~self ~cmd:(selector "endTrackingWithTouch:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let fieldEditor x ~shouldInsertText ~replacingRange self = msg_send ~self ~cmd:(selector "fieldEditor:shouldInsertText:replacingRange:") ~typ:(id @-> id @-> NSRange.t @-> returning (bool)) x shouldInsertText replacingRange
let fieldEditor' x ~willChangeSelectionFromCharacterRange ~toCharacterRange self = msg_send_stret ~self ~cmd:(selector "fieldEditor:willChangeSelectionFromCharacterRange:toCharacterRange:") ~typ:(id @-> NSRange.t @-> NSRange.t @-> returning (NSRange.t)) ~return_type:NSRange.t x willChangeSelectionFromCharacterRange toCharacterRange
let fieldEditorDidChange x self = msg_send ~self ~cmd:(selector "fieldEditorDidChange:") ~typ:(id @-> returning (void)) x
let fieldEditorDidChangeSelection x self = msg_send ~self ~cmd:(selector "fieldEditorDidChangeSelection:") ~typ:(id @-> returning (void)) x
let fieldEditorShouldExtendCaretHeight x self = msg_send ~self ~cmd:(selector "fieldEditorShouldExtendCaretHeight:") ~typ:(id @-> returning (bool)) x
let finishedSettingPlaceholder self = msg_send ~self ~cmd:(selector "finishedSettingPlaceholder") ~typ:(returning (void))
let finishedSettingTextOrAttributedText self = msg_send ~self ~cmd:(selector "finishedSettingTextOrAttributedText") ~typ:(returning (void))
let firstRectForRange x self = msg_send_stret ~self ~cmd:(selector "firstRectForRange:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let floatingContentView x ~isTransitioningFromState ~toState self = msg_send ~self ~cmd:(selector "floatingContentView:isTransitioningFromState:toState:") ~typ:(id @-> ullong @-> ullong @-> returning (void)) x isTransitioningFromState toState
let font self = msg_send ~self ~cmd:(selector "font") ~typ:(returning (id))
let forwardingTargetForSelector x self = msg_send ~self ~cmd:(selector "forwardingTargetForSelector:") ~typ:(_SEL @-> returning (id)) x
let frameForDictationResultPlaceholder x self = msg_send_stret ~self ~cmd:(selector "frameForDictationResultPlaceholder:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let gestureRecognizerShouldBegin x self = msg_send ~self ~cmd:(selector "gestureRecognizerShouldBegin:") ~typ:(id @-> returning (bool)) x
let hasMarkedText self = msg_send ~self ~cmd:(selector "hasMarkedText") ~typ:(returning (bool))
let hasSelection self = msg_send ~self ~cmd:(selector "hasSelection") ~typ:(returning (bool))
let hasText self = msg_send ~self ~cmd:(selector "hasText") ~typ:(returning (bool))
let hasTextItemsOfType x ~inTextRange self = msg_send ~self ~cmd:(selector "hasTextItemsOfType:inTextRange:") ~typ:(llong @-> id @-> returning (bool)) x inTextRange
let hitTest x ~withEvent self = msg_send ~self ~cmd:(selector "hitTest:withEvent:") ~typ:(CGPoint.t @-> id @-> returning (id)) x withEvent
let iconRect self = msg_send_stret ~self ~cmd:(selector "iconRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let increaseSize x self = msg_send ~self ~cmd:(selector "increaseSize:") ~typ:(id @-> returning (void)) x
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning (id)) x
let inputAccessoryView self = msg_send ~self ~cmd:(selector "inputAccessoryView") ~typ:(returning (id))
let inputDelegate self = msg_send ~self ~cmd:(selector "inputDelegate") ~typ:(returning (id))
let inputView self = msg_send ~self ~cmd:(selector "inputView") ~typ:(returning (id))
let insertAttributedText x self = msg_send ~self ~cmd:(selector "insertAttributedText:") ~typ:(id @-> returning (void)) x
let insertDictationResultPlaceholder self = msg_send ~self ~cmd:(selector "insertDictationResultPlaceholder") ~typ:(returning (id))
let insertFilteredText x self = msg_send_stret ~self ~cmd:(selector "insertFilteredText:") ~typ:(id @-> returning (NSRange.t)) ~return_type:NSRange.t x
let insertText x self = msg_send ~self ~cmd:(selector "insertText:") ~typ:(id @-> returning (void)) x
let insertText1 x ~alternatives ~style self = msg_send ~self ~cmd:(selector "insertText:alternatives:style:") ~typ:(id @-> id @-> llong @-> returning (void)) x alternatives style
let insertText2 x ~style ~alternatives self = msg_send ~self ~cmd:(selector "insertText:style:alternatives:") ~typ:(id @-> llong @-> id @-> returning (void)) x style alternatives
let insertTextPlaceholderWithSize x self = msg_send ~self ~cmd:(selector "insertTextPlaceholderWithSize:") ~typ:(CGSize.t @-> returning (id)) x
let interactionAssistant self = msg_send ~self ~cmd:(selector "interactionAssistant") ~typ:(returning (id))
let interactionState self = msg_send ~self ~cmd:(selector "interactionState") ~typ:(returning (id))
let interactionTintColorDidChange self = msg_send ~self ~cmd:(selector "interactionTintColorDidChange") ~typ:(returning (void))
let invalidateDropCaret self = msg_send ~self ~cmd:(selector "invalidateDropCaret") ~typ:(returning (void))
let isAccessibilityElementByDefault self = msg_send ~self ~cmd:(selector "isAccessibilityElementByDefault") ~typ:(returning (bool))
let isEditable self = msg_send ~self ~cmd:(selector "isEditable") ~typ:(returning (bool))
let isEditing self = msg_send ~self ~cmd:(selector "isEditing") ~typ:(returning (bool))
let isElementAccessibilityExposedToInterfaceBuilder self = msg_send ~self ~cmd:(selector "isElementAccessibilityExposedToInterfaceBuilder") ~typ:(returning (bool))
let isTextDragActive self = msg_send ~self ~cmd:(selector "isTextDragActive") ~typ:(returning (bool))
let isTextDropActive self = msg_send ~self ~cmd:(selector "isTextDropActive") ~typ:(returning (bool))
let isUndoEnabled self = msg_send ~self ~cmd:(selector "isUndoEnabled") ~typ:(returning (bool))
let keyboardInput x ~shouldInsertText ~isMarkedText self = msg_send ~self ~cmd:(selector "keyboardInput:shouldInsertText:isMarkedText:") ~typ:(id @-> id @-> bool @-> returning (bool)) x shouldInsertText isMarkedText
let keyboardInput' x ~shouldReplaceTextInRange ~replacementText self = msg_send ~self ~cmd:(selector "keyboardInput:shouldReplaceTextInRange:replacementText:") ~typ:(id @-> NSRange.t @-> id @-> returning (bool)) x shouldReplaceTextInRange replacementText
let keyboardInputChanged x self = msg_send ~self ~cmd:(selector "keyboardInputChanged:") ~typ:(id @-> returning (bool)) x
let keyboardInputChangedSelection x self = msg_send ~self ~cmd:(selector "keyboardInputChangedSelection:") ~typ:(id @-> returning (void)) x
let keyboardInputShouldDelete x self = msg_send ~self ~cmd:(selector "keyboardInputShouldDelete:") ~typ:(id @-> returning (bool)) x
let largeContentTitle self = msg_send ~self ~cmd:(selector "largeContentTitle") ~typ:(returning (id))
let layoutSubviews self = msg_send ~self ~cmd:(selector "layoutSubviews") ~typ:(returning (void))
let layoutTilesNow self = msg_send ~self ~cmd:(selector "layoutTilesNow") ~typ:(returning (void))
let leftView self = msg_send ~self ~cmd:(selector "leftView") ~typ:(returning (id))
let leftViewMode self = msg_send ~self ~cmd:(selector "leftViewMode") ~typ:(returning (llong))
let leftViewRectForBounds x self = msg_send_stret ~self ~cmd:(selector "leftViewRectForBounds:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let linkTextAttributes self = msg_send ~self ~cmd:(selector "linkTextAttributes") ~typ:(returning (id))
let lowercaseWord x self = msg_send ~self ~cmd:(selector "lowercaseWord:") ~typ:(id @-> returning (void)) x
let makeTextWritingDirectionLeftToRight x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionLeftToRight:") ~typ:(id @-> returning (void)) x
let makeTextWritingDirectionNatural x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionNatural:") ~typ:(id @-> returning (void)) x
let makeTextWritingDirectionRightToLeft x self = msg_send ~self ~cmd:(selector "makeTextWritingDirectionRightToLeft:") ~typ:(id @-> returning (void)) x
let markedTextRange self = msg_send ~self ~cmd:(selector "markedTextRange") ~typ:(returning (id))
let markedTextStyle self = msg_send ~self ~cmd:(selector "markedTextStyle") ~typ:(returning (id))
let metadataDictionariesForDictationResults self = msg_send ~self ~cmd:(selector "metadataDictionariesForDictationResults") ~typ:(returning (id))
let methodSignatureForSelector x self = msg_send ~self ~cmd:(selector "methodSignatureForSelector:") ~typ:(_SEL @-> returning (id)) x
let minimumFontSize self = msg_send ~self ~cmd:(selector "minimumFontSize") ~typ:(returning (double))
let nonEditingLinebreakMode self = msg_send ~self ~cmd:(selector "nonEditingLinebreakMode") ~typ:(returning (llong))
let observeValueForKeyPath x ~ofObject ~change ~context self = msg_send ~self ~cmd:(selector "observeValueForKeyPath:ofObject:change:context:") ~typ:(id @-> id @-> id @-> ptr (void) @-> returning (void)) x ofObject change context
let offsetFromPosition x ~toPosition self = msg_send ~self ~cmd:(selector "offsetFromPosition:toPosition:") ~typ:(id @-> id @-> returning (llong)) x toPosition
let offsetInMarkedTextForSelection x self = msg_send ~self ~cmd:(selector "offsetInMarkedTextForSelection:") ~typ:(id @-> returning (ullong)) x
let paddingBottom self = msg_send ~self ~cmd:(selector "paddingBottom") ~typ:(returning (float))
let paddingLeft self = msg_send ~self ~cmd:(selector "paddingLeft") ~typ:(returning (float))
let paddingRight self = msg_send ~self ~cmd:(selector "paddingRight") ~typ:(returning (float))
let paddingTop self = msg_send ~self ~cmd:(selector "paddingTop") ~typ:(returning (float))
let paste x self = msg_send ~self ~cmd:(selector "paste:") ~typ:(id @-> returning (void)) x
let pasteAndMatchStyle x self = msg_send ~self ~cmd:(selector "pasteAndMatchStyle:") ~typ:(id @-> returning (void)) x
let pasteDelegate self = msg_send ~self ~cmd:(selector "pasteDelegate") ~typ:(returning (id))
let pasteItemProviders x self = msg_send ~self ~cmd:(selector "pasteItemProviders:") ~typ:(id @-> returning (void)) x
let performCancelAnimations self = msg_send ~self ~cmd:(selector "performCancelAnimations") ~typ:(returning (void))
let placeholder self = msg_send ~self ~cmd:(selector "placeholder") ~typ:(returning (id))
let placeholderRectForBounds x self = msg_send_stret ~self ~cmd:(selector "placeholderRectForBounds:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let pointerInteraction x ~styleForRegion self = msg_send ~self ~cmd:(selector "pointerInteraction:styleForRegion:") ~typ:(id @-> id @-> returning (id)) x styleForRegion
let pointerInteraction1 x ~regionForRequest ~defaultRegion self = msg_send ~self ~cmd:(selector "pointerInteraction:regionForRequest:defaultRegion:") ~typ:(id @-> id @-> id @-> returning (id)) x regionForRequest defaultRegion
let pointerInteraction2 x ~willEnterRegion ~animator self = msg_send ~self ~cmd:(selector "pointerInteraction:willEnterRegion:animator:") ~typ:(id @-> id @-> id @-> returning (void)) x willEnterRegion animator
let pointerInteraction3 x ~willExitRegion ~animator self = msg_send ~self ~cmd:(selector "pointerInteraction:willExitRegion:animator:") ~typ:(id @-> id @-> id @-> returning (void)) x willExitRegion animator
let positionFromPosition x ~offset self = msg_send ~self ~cmd:(selector "positionFromPosition:offset:") ~typ:(id @-> llong @-> returning (id)) x offset
let positionFromPosition' x ~inDirection ~offset self = msg_send ~self ~cmd:(selector "positionFromPosition:inDirection:offset:") ~typ:(id @-> llong @-> llong @-> returning (id)) x inDirection offset
let positionWithinRange x ~farthestInDirection self = msg_send ~self ~cmd:(selector "positionWithinRange:farthestInDirection:") ~typ:(id @-> llong @-> returning (id)) x farthestInDirection
let pressesBegan x ~withEvent self = msg_send ~self ~cmd:(selector "pressesBegan:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let pressesCancelled x ~withEvent self = msg_send ~self ~cmd:(selector "pressesCancelled:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let pressesChanged x ~withEvent self = msg_send ~self ~cmd:(selector "pressesChanged:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let pressesEnded x ~withEvent self = msg_send ~self ~cmd:(selector "pressesEnded:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let rangeWithTextAlternatives x ~atPosition self = msg_send ~self ~cmd:(selector "rangeWithTextAlternatives:atPosition:") ~typ:(ptr (id) @-> id @-> returning (id)) x atPosition
let recentsAccessoryView self = msg_send ~self ~cmd:(selector "recentsAccessoryView") ~typ:(returning (id))
let removeAllGhostedRanges self = msg_send ~self ~cmd:(selector "removeAllGhostedRanges") ~typ:(returning (void))
let removeAnnotation x ~forRange self = msg_send ~self ~cmd:(selector "removeAnnotation:forRange:") ~typ:(id @-> id @-> returning (void)) x forRange
let removeDictationResultPlaceholder x ~willInsertResult self = msg_send ~self ~cmd:(selector "removeDictationResultPlaceholder:willInsertResult:") ~typ:(id @-> bool @-> returning (void)) x willInsertResult
let removeFromSuperview self = msg_send ~self ~cmd:(selector "removeFromSuperview") ~typ:(returning (void))
let removeInvisibleRange x self = msg_send ~self ~cmd:(selector "removeInvisibleRange:") ~typ:(id @-> returning (void)) x
let removeTextPlaceholder x self = msg_send ~self ~cmd:(selector "removeTextPlaceholder:") ~typ:(id @-> returning (void)) x
let replace x self = msg_send ~self ~cmd:(selector "replace:") ~typ:(id @-> returning (void)) x
let replaceRange x ~withAttributedText self = msg_send ~self ~cmd:(selector "replaceRange:withAttributedText:") ~typ:(id @-> id @-> returning (void)) x withAttributedText
let replaceRange1 x ~withText self = msg_send ~self ~cmd:(selector "replaceRange:withText:") ~typ:(id @-> id @-> returning (void)) x withText
let replaceRange2 x ~withAnnotatedString ~relativeReplacementRange self = msg_send ~self ~cmd:(selector "replaceRange:withAnnotatedString:relativeReplacementRange:") ~typ:(id @-> id @-> NSRange.t @-> returning (void)) x withAnnotatedString relativeReplacementRange
let replaceRangeWithTextWithoutClosingTyping x ~replacementText self = msg_send ~self ~cmd:(selector "replaceRangeWithTextWithoutClosingTyping:replacementText:") ~typ:(id @-> id @-> returning (void)) x replacementText
let resignDropResponderWithDropPerformed x self = msg_send ~self ~cmd:(selector "resignDropResponderWithDropPerformed:") ~typ:(bool @-> returning (void)) x
let resignFirstResponder self = msg_send ~self ~cmd:(selector "resignFirstResponder") ~typ:(returning (bool))
let respondsToSelector x self = msg_send ~self ~cmd:(selector "respondsToSelector:") ~typ:(_SEL @-> returning (bool)) x
let rightView self = msg_send ~self ~cmd:(selector "rightView") ~typ:(returning (id))
let rightViewMode self = msg_send ~self ~cmd:(selector "rightViewMode") ~typ:(returning (llong))
let rightViewRectForBounds x self = msg_send_stret ~self ~cmd:(selector "rightViewRectForBounds:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let sanitizeAttributedText x self = msg_send ~self ~cmd:(selector "sanitizeAttributedText:") ~typ:(id @-> returning (void)) x
let scrollTextFieldToVisibleIfNecessary self = msg_send ~self ~cmd:(selector "scrollTextFieldToVisibleIfNecessary") ~typ:(returning (void))
let searchText self = msg_send ~self ~cmd:(selector "searchText") ~typ:(returning (id))
let select x self = msg_send ~self ~cmd:(selector "select:") ~typ:(id @-> returning (void)) x
let selectAll self = msg_send ~self ~cmd:(selector "selectAll") ~typ:(returning (void))
let selectAll' x self = msg_send ~self ~cmd:(selector "selectAll:") ~typ:(id @-> returning (void)) x
let selectedAttributedText self = msg_send ~self ~cmd:(selector "selectedAttributedText") ~typ:(returning (id))
let selectedText self = msg_send ~self ~cmd:(selector "selectedText") ~typ:(returning (id))
let selectedTextRange self = msg_send ~self ~cmd:(selector "selectedTextRange") ~typ:(returning (id))
let selectionContainerView self = msg_send ~self ~cmd:(selector "selectionContainerView") ~typ:(returning (id))
let selectionRange self = msg_send_stret ~self ~cmd:(selector "selectionRange") ~typ:(returning (NSRange.t)) ~return_type:NSRange.t
let selectionRectsForRange x self = msg_send ~self ~cmd:(selector "selectionRectsForRange:") ~typ:(id @-> returning (id)) x
let selectionView self = msg_send ~self ~cmd:(selector "selectionView") ~typ:(returning (id))
let setAdjustsFontForContentSizeCategory x self = msg_send ~self ~cmd:(selector "setAdjustsFontForContentSizeCategory:") ~typ:(bool @-> returning (void)) x
let setAdjustsFontSizeToFitWidth x self = msg_send ~self ~cmd:(selector "setAdjustsFontSizeToFitWidth:") ~typ:(bool @-> returning (void)) x
let setAllowsAttachments x self = msg_send ~self ~cmd:(selector "setAllowsAttachments:") ~typ:(bool @-> returning (void)) x
let setAllowsEditingTextAttributes x self = msg_send ~self ~cmd:(selector "setAllowsEditingTextAttributes:") ~typ:(bool @-> returning (void)) x
let setAttributedMarkedText x ~selectedRange self = msg_send ~self ~cmd:(selector "setAttributedMarkedText:selectedRange:") ~typ:(id @-> NSRange.t @-> returning (void)) x selectedRange
let setAttributedPlaceholder x self = msg_send ~self ~cmd:(selector "setAttributedPlaceholder:") ~typ:(id @-> returning (void)) x
let setAttributedText x self = msg_send ~self ~cmd:(selector "setAttributedText:") ~typ:(id @-> returning (void)) x
let setAttributes x ~range self = msg_send ~self ~cmd:(selector "setAttributes:range:") ~typ:(id @-> NSRange.t @-> returning (void)) x range
let setAutoresizesTextToFit x self = msg_send ~self ~cmd:(selector "setAutoresizesTextToFit:") ~typ:(bool @-> returning (void)) x
let setBackground x self = msg_send ~self ~cmd:(selector "setBackground:") ~typ:(id @-> returning (void)) x
let setBackgroundColor x self = msg_send ~self ~cmd:(selector "setBackgroundColor:") ~typ:(id @-> returning (void)) x
let setBaseWritingDirection x ~forRange self = msg_send ~self ~cmd:(selector "setBaseWritingDirection:forRange:") ~typ:(llong @-> id @-> returning (void)) x forRange
let setBecomesFirstResponderOnClearButtonTap x self = msg_send ~self ~cmd:(selector "setBecomesFirstResponderOnClearButtonTap:") ~typ:(bool @-> returning (void)) x
let setBorderStyle x self = msg_send ~self ~cmd:(selector "setBorderStyle:") ~typ:(llong @-> returning (void)) x
let setBounds x self = msg_send ~self ~cmd:(selector "setBounds:") ~typ:(CGRect.t @-> returning (void)) x
let setClearButtonMode x self = msg_send ~self ~cmd:(selector "setClearButtonMode:") ~typ:(llong @-> returning (void)) x
let setClearButtonOffset x self = msg_send ~self ~cmd:(selector "setClearButtonOffset:") ~typ:(CGSize.t @-> returning (void)) x
let setClearButtonStyle x self = msg_send ~self ~cmd:(selector "setClearButtonStyle:") ~typ:(llong @-> returning (void)) x
let setClearingBehavior x self = msg_send ~self ~cmd:(selector "setClearingBehavior:") ~typ:(llong @-> returning (void)) x
let setClearsOnBeginEditing x self = msg_send ~self ~cmd:(selector "setClearsOnBeginEditing:") ~typ:(bool @-> returning (void)) x
let setClearsOnInsertion x self = msg_send ~self ~cmd:(selector "setClearsOnInsertion:") ~typ:(bool @-> returning (void)) x
let setClearsPlaceholderOnBeginEditing x self = msg_send ~self ~cmd:(selector "setClearsPlaceholderOnBeginEditing:") ~typ:(bool @-> returning (void)) x
let setClipsToBounds x self = msg_send ~self ~cmd:(selector "setClipsToBounds:") ~typ:(bool @-> returning (void)) x
let setContentOffsetForSameViewDrops x self = msg_send ~self ~cmd:(selector "setContentOffsetForSameViewDrops:") ~typ:(CGPoint.t @-> returning (void)) x
let setContentVerticalAlignment x self = msg_send ~self ~cmd:(selector "setContentVerticalAlignment:") ~typ:(llong @-> returning (void)) x
let setContinuousSpellCheckingEnabled x self = msg_send ~self ~cmd:(selector "setContinuousSpellCheckingEnabled:") ~typ:(bool @-> returning (void)) x
let setControlSize x self = msg_send ~self ~cmd:(selector "setControlSize:") ~typ:(int @-> returning (void)) x
let setDefaultTextAttributes x self = msg_send ~self ~cmd:(selector "setDefaultTextAttributes:") ~typ:(id @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDevicePasscodeEntry x self = msg_send ~self ~cmd:(selector "setDevicePasscodeEntry:") ~typ:(bool @-> returning (void)) x
let setDisabledBackground x self = msg_send ~self ~cmd:(selector "setDisabledBackground:") ~typ:(id @-> returning (void)) x
let setDisplaySecureEditsUsingPlainText x self = msg_send ~self ~cmd:(selector "setDisplaySecureEditsUsingPlainText:") ~typ:(bool @-> returning (void)) x
let setDisplaySecureTextUsingPlainText x self = msg_send ~self ~cmd:(selector "setDisplaySecureTextUsingPlainText:") ~typ:(bool @-> returning (void)) x
let setEnabled x self = msg_send ~self ~cmd:(selector "setEnabled:") ~typ:(bool @-> returning (void)) x
let setFont x self = msg_send ~self ~cmd:(selector "setFont:") ~typ:(id @-> returning (void)) x
let setFont1 x ~fullFontSize self = msg_send ~self ~cmd:(selector "setFont:fullFontSize:") ~typ:(id @-> id @-> returning (void)) x fullFontSize
let setFont2 x ~fullFontSize ~ambientOnly self = msg_send ~self ~cmd:(selector "setFont:fullFontSize:ambientOnly:") ~typ:(id @-> id @-> bool @-> returning (void)) x fullFontSize ambientOnly
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning (void)) x
let setHighlighted x self = msg_send ~self ~cmd:(selector "setHighlighted:") ~typ:(bool @-> returning (void)) x
let setIcon x self = msg_send ~self ~cmd:(selector "setIcon:") ~typ:(id @-> returning (void)) x
let setInputAccessoryView x self = msg_send ~self ~cmd:(selector "setInputAccessoryView:") ~typ:(id @-> returning (void)) x
let setInputDelegate x self = msg_send ~self ~cmd:(selector "setInputDelegate:") ~typ:(id @-> returning (void)) x
let setInputView x self = msg_send ~self ~cmd:(selector "setInputView:") ~typ:(id @-> returning (void)) x
let setInteractionState x self = msg_send ~self ~cmd:(selector "setInteractionState:") ~typ:(id @-> returning (void)) x
let setKeyboardAppearance x self = msg_send ~self ~cmd:(selector "setKeyboardAppearance:") ~typ:(llong @-> returning (void)) x
let setLabel x self = msg_send ~self ~cmd:(selector "setLabel:") ~typ:(id @-> returning (void)) x
let setLabelOffset x self = msg_send ~self ~cmd:(selector "setLabelOffset:") ~typ:(float @-> returning (void)) x
let setLeftView x self = msg_send ~self ~cmd:(selector "setLeftView:") ~typ:(id @-> returning (void)) x
let setLeftViewMode x self = msg_send ~self ~cmd:(selector "setLeftViewMode:") ~typ:(llong @-> returning (void)) x
let setLinkTextAttributes x self = msg_send ~self ~cmd:(selector "setLinkTextAttributes:") ~typ:(id @-> returning (void)) x
let setMarkedText x ~selectedRange self = msg_send ~self ~cmd:(selector "setMarkedText:selectedRange:") ~typ:(id @-> NSRange.t @-> returning (void)) x selectedRange
let setMarkedTextStyle x self = msg_send ~self ~cmd:(selector "setMarkedTextStyle:") ~typ:(id @-> returning (void)) x
let setMinimumFontSize x self = msg_send ~self ~cmd:(selector "setMinimumFontSize:") ~typ:(double @-> returning (void)) x
let setNeedsLayout self = msg_send ~self ~cmd:(selector "setNeedsLayout") ~typ:(returning (void))
let setNonEditingLinebreakMode x self = msg_send ~self ~cmd:(selector "setNonEditingLinebreakMode:") ~typ:(llong @-> returning (void)) x
let setPaddingLeft x self = msg_send ~self ~cmd:(selector "setPaddingLeft:") ~typ:(float @-> returning (void)) x
let setPaddingRight x self = msg_send ~self ~cmd:(selector "setPaddingRight:") ~typ:(float @-> returning (void)) x
let setPaddingTop x ~paddingLeft self = msg_send ~self ~cmd:(selector "setPaddingTop:paddingLeft:") ~typ:(float @-> float @-> returning (void)) x paddingLeft
let setPasswordRules x self = msg_send ~self ~cmd:(selector "setPasswordRules:") ~typ:(id @-> returning (void)) x
let setPasteDelegate x self = msg_send ~self ~cmd:(selector "setPasteDelegate:") ~typ:(id @-> returning (void)) x
let setPlaceholder x self = msg_send ~self ~cmd:(selector "setPlaceholder:") ~typ:(id @-> returning (void)) x
let setProgress x self = msg_send ~self ~cmd:(selector "setProgress:") ~typ:(float @-> returning (void)) x
let setRecentsAccessoryView x self = msg_send ~self ~cmd:(selector "setRecentsAccessoryView:") ~typ:(id @-> returning (void)) x
let setRightView x self = msg_send ~self ~cmd:(selector "setRightView:") ~typ:(id @-> returning (void)) x
let setRightViewMode x self = msg_send ~self ~cmd:(selector "setRightViewMode:") ~typ:(llong @-> returning (void)) x
let setSecureTextEntry x self = msg_send ~self ~cmd:(selector "setSecureTextEntry:") ~typ:(bool @-> returning (void)) x
let setSelectedTextRange x self = msg_send ~self ~cmd:(selector "setSelectedTextRange:") ~typ:(id @-> returning (void)) x
let setSelectionRange x self = msg_send ~self ~cmd:(selector "setSelectionRange:") ~typ:(NSRange.t @-> returning (void)) x
let setSemanticContentAttribute x self = msg_send ~self ~cmd:(selector "setSemanticContentAttribute:") ~typ:(llong @-> returning (void)) x
let setShadowBlur x self = msg_send ~self ~cmd:(selector "setShadowBlur:") ~typ:(double @-> returning (void)) x
let setShadowColor x self = msg_send ~self ~cmd:(selector "setShadowColor:") ~typ:(id @-> returning (void)) x
let setShadowOffset x self = msg_send ~self ~cmd:(selector "setShadowOffset:") ~typ:(CGSize.t @-> returning (void)) x
let setText x self = msg_send ~self ~cmd:(selector "setText:") ~typ:(id @-> returning (void)) x
let setTextAlignment x self = msg_send ~self ~cmd:(selector "setTextAlignment:") ~typ:(llong @-> returning (void)) x
let setTextCentersHorizontally x self = msg_send ~self ~cmd:(selector "setTextCentersHorizontally:") ~typ:(bool @-> returning (void)) x
let setTextCentersVertically x self = msg_send ~self ~cmd:(selector "setTextCentersVertically:") ~typ:(bool @-> returning (void)) x
let setTextColor x self = msg_send ~self ~cmd:(selector "setTextColor:") ~typ:(id @-> returning (void)) x
let setTextDragDelegate x self = msg_send ~self ~cmd:(selector "setTextDragDelegate:") ~typ:(id @-> returning (void)) x
let setTextDragOptions x self = msg_send ~self ~cmd:(selector "setTextDragOptions:") ~typ:(llong @-> returning (void)) x
let setTextDropDelegate x self = msg_send ~self ~cmd:(selector "setTextDropDelegate:") ~typ:(id @-> returning (void)) x
let setTextSelectionBehavior x self = msg_send ~self ~cmd:(selector "setTextSelectionBehavior:") ~typ:(int @-> returning (void)) x
let setTypingAttributes x self = msg_send ~self ~cmd:(selector "setTypingAttributes:") ~typ:(id @-> returning (void)) x
let setUndoEnabled x self = msg_send ~self ~cmd:(selector "setUndoEnabled:") ~typ:(bool @-> returning (void)) x
let setVisualStyle x self = msg_send ~self ~cmd:(selector "setVisualStyle:") ~typ:(id @-> returning (void)) x
let shadowBlur self = msg_send ~self ~cmd:(selector "shadowBlur") ~typ:(returning (double))
let shadowColor self = msg_send ~self ~cmd:(selector "shadowColor") ~typ:(returning (id))
let shadowOffset self = msg_send_stret ~self ~cmd:(selector "shadowOffset") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let sizeThatFits x self = msg_send_stret ~self ~cmd:(selector "sizeThatFits:") ~typ:(CGSize.t @-> returning (CGSize.t)) ~return_type:CGSize.t x
let startAutoscroll x self = msg_send ~self ~cmd:(selector "startAutoscroll:") ~typ:(CGPoint.t @-> returning (void)) x
let supportedPasteboardTypesForCurrentSelection self = msg_send ~self ~cmd:(selector "supportedPasteboardTypesForCurrentSelection") ~typ:(returning (id))
let takeTraitsFrom x self = msg_send ~self ~cmd:(selector "takeTraitsFrom:") ~typ:(id @-> returning (void)) x
let text self = msg_send ~self ~cmd:(selector "text") ~typ:(returning (id))
let textAlignment self = msg_send ~self ~cmd:(selector "textAlignment") ~typ:(returning (llong))
let textColor self = msg_send ~self ~cmd:(selector "textColor") ~typ:(returning (id))
let textContainer self = msg_send ~self ~cmd:(selector "textContainer") ~typ:(returning (id))
let textContainerOrigin self = msg_send_stret ~self ~cmd:(selector "textContainerOrigin") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let textContainerUsageDidChangeToBounds x self = msg_send ~self ~cmd:(selector "textContainerUsageDidChangeToBounds:") ~typ:(CGRect.t @-> returning (void)) x
let textDragDelegate self = msg_send ~self ~cmd:(selector "textDragDelegate") ~typ:(returning (id))
let textDragInteraction self = msg_send ~self ~cmd:(selector "textDragInteraction") ~typ:(returning (id))
let textDragOptions self = msg_send ~self ~cmd:(selector "textDragOptions") ~typ:(returning (llong))
let textDropDelegate self = msg_send ~self ~cmd:(selector "textDropDelegate") ~typ:(returning (id))
let textDropInteraction self = msg_send ~self ~cmd:(selector "textDropInteraction") ~typ:(returning (id))
let textInRange x self = msg_send ~self ~cmd:(selector "textInRange:") ~typ:(id @-> returning (id)) x
let textInputTraits self = msg_send ~self ~cmd:(selector "textInputTraits") ~typ:(returning (id))
let textInputView self = msg_send ~self ~cmd:(selector "textInputView") ~typ:(returning (id))
let textItemCoordinateSpace self = msg_send ~self ~cmd:(selector "textItemCoordinateSpace") ~typ:(returning (id))
let textItemsOfType x ~inTextRange self = msg_send ~self ~cmd:(selector "textItemsOfType:inTextRange:") ~typ:(llong @-> id @-> returning (id)) x inTextRange
let textLabel self = msg_send ~self ~cmd:(selector "textLabel") ~typ:(returning (id))
let textLayoutController self = msg_send ~self ~cmd:(selector "textLayoutController") ~typ:(returning (id))
let textRangeFromPosition x ~toPosition self = msg_send ~self ~cmd:(selector "textRangeFromPosition:toPosition:") ~typ:(id @-> id @-> returning (id)) x toPosition
let textRectForBounds x self = msg_send_stret ~self ~cmd:(selector "textRectForBounds:") ~typ:(CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x
let textSelectionBehavior self = msg_send ~self ~cmd:(selector "textSelectionBehavior") ~typ:(returning (int))
let textStorage self = msg_send ~self ~cmd:(selector "textStorage") ~typ:(returning (id))
let textStylingAtPosition x ~inDirection self = msg_send ~self ~cmd:(selector "textStylingAtPosition:inDirection:") ~typ:(id @-> llong @-> returning (id)) x inDirection
let tintColorDidChange self = msg_send ~self ~cmd:(selector "tintColorDidChange") ~typ:(returning (void))
let toggleBoldface x self = msg_send ~self ~cmd:(selector "toggleBoldface:") ~typ:(id @-> returning (void)) x
let toggleItalics x self = msg_send ~self ~cmd:(selector "toggleItalics:") ~typ:(id @-> returning (void)) x
let toggleSmartInsertDelete x self = msg_send ~self ~cmd:(selector "toggleSmartInsertDelete:") ~typ:(id @-> returning (void)) x
let toggleUnderline x self = msg_send ~self ~cmd:(selector "toggleUnderline:") ~typ:(id @-> returning (void)) x
let tokenizer self = msg_send ~self ~cmd:(selector "tokenizer") ~typ:(returning (id))
let touchesCancelled x ~withEvent self = msg_send ~self ~cmd:(selector "touchesCancelled:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let touchesEnded x ~withEvent self = msg_send ~self ~cmd:(selector "touchesEnded:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let traitCollectionDidChange x self = msg_send ~self ~cmd:(selector "traitCollectionDidChange:") ~typ:(id @-> returning (void)) x
let typingAttributes self = msg_send ~self ~cmd:(selector "typingAttributes") ~typ:(returning (id))
let undoManager self = msg_send ~self ~cmd:(selector "undoManager") ~typ:(returning (id))
let unmarkText self = msg_send ~self ~cmd:(selector "unmarkText") ~typ:(returning (void))
let updateFloatingCursorAtPoint x self = msg_send ~self ~cmd:(selector "updateFloatingCursorAtPoint:") ~typ:(CGPoint.t @-> returning (void)) x
let updateFloatingCursorAtPoint' x ~velocity self = msg_send ~self ~cmd:(selector "updateFloatingCursorAtPoint:velocity:") ~typ:(CGPoint.t @-> CGPoint.t @-> returning (void)) x velocity
let uppercaseWord x self = msg_send ~self ~cmd:(selector "uppercaseWord:") ~typ:(id @-> returning (void)) x
let validateCommand x self = msg_send ~self ~cmd:(selector "validateCommand:") ~typ:(id @-> returning (void)) x
let valueForKey x self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning (id)) x
let valueForUndefinedKey x self = msg_send ~self ~cmd:(selector "valueForUndefinedKey:") ~typ:(id @-> returning (id)) x
let visibleTextRange self = msg_send ~self ~cmd:(selector "visibleTextRange") ~typ:(returning (id))
let visualStyle self = msg_send ~self ~cmd:(selector "visualStyle") ~typ:(returning (id))
let webView self = msg_send ~self ~cmd:(selector "webView") ~typ:(returning (id))
let willGenerateCancelPreview self = msg_send ~self ~cmd:(selector "willGenerateCancelPreview") ~typ:(returning (id))
let willMoveToWindow x self = msg_send ~self ~cmd:(selector "willMoveToWindow:") ~typ:(id @-> returning (void)) x