(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UIApplication"

module C = struct
  let displayIdentifier self = msg_send ~self ~cmd:(selector "displayIdentifier") ~typ:(returning (id))
  let displayManagerObserver self = msg_send ~self ~cmd:(selector "displayManagerObserver") ~typ:(returning (id))
  let interfaceOrientationForString x self = msg_send ~self ~cmd:(selector "interfaceOrientationForString:") ~typ:(id @-> returning (llong)) x
  let isRunningEventPump self = msg_send ~self ~cmd:(selector "isRunningEventPump") ~typ:(returning (bool))
  let isRunningInStoreDemoMode self = msg_send ~self ~cmd:(selector "isRunningInStoreDemoMode") ~typ:(returning (bool))
  let registerAsSystemApp self = msg_send ~self ~cmd:(selector "registerAsSystemApp") ~typ:(returning (bool))
  let registerObjectForStateRestoration x ~restorationIdentifier self = msg_send ~self ~cmd:(selector "registerObjectForStateRestoration:restorationIdentifier:") ~typ:(id @-> id @-> returning (void)) x restorationIdentifier
  let rendersLocally self = msg_send ~self ~cmd:(selector "rendersLocally") ~typ:(returning (bool))
  let runStatusBarServer self = msg_send ~self ~cmd:(selector "runStatusBarServer") ~typ:(returning (bool))
  let runningInStoreDemoModeFProgramNumber self = msg_send ~self ~cmd:(selector "runningInStoreDemoModeFProgramNumber") ~typ:(returning (llong))
  let sharedApplication self = msg_send ~self ~cmd:(selector "sharedApplication") ~typ:(returning (id))
  let shouldBackgroundMainThreadOnSuspendedLaunch self = msg_send ~self ~cmd:(selector "shouldBackgroundMainThreadOnSuspendedLaunch") ~typ:(returning (bool))
  let shouldMakeUIForDefaultPNG self = msg_send ~self ~cmd:(selector "shouldMakeUIForDefaultPNG") ~typ:(returning (bool))
  let statusBarStyleForString x self = msg_send ~self ~cmd:(selector "statusBarStyleForString:") ~typ:(id @-> returning (llong)) x
  let stringForInterfaceOrientation x self = msg_send ~self ~cmd:(selector "stringForInterfaceOrientation:") ~typ:(llong @-> returning (id)) (LLong.of_int x)
  let stringForStatusBarStyle x self = msg_send ~self ~cmd:(selector "stringForStatusBarStyle:") ~typ:(llong @-> returning (id)) (LLong.of_int x)
  let stringForStatusBarStyleOverrides x self = msg_send ~self ~cmd:(selector "stringForStatusBarStyleOverrides:") ~typ:(ullong @-> returning (id)) (ULLong.of_int x)
end

let _GSKeyboardForHWLayout x ~forceRebuild self = msg_send ~self ~cmd:(selector "GSKeyboardForHWLayout:forceRebuild:") ~typ:(id @-> bool @-> returning (ptr void)) x forceRebuild
let _GSKeyboardForHWLayout1 x ~forceRebuild ~createIfNeeded self = msg_send ~self ~cmd:(selector "GSKeyboardForHWLayout:forceRebuild:createIfNeeded:") ~typ:(id @-> bool @-> bool @-> returning (ptr void)) x forceRebuild createIfNeeded
let _GSKeyboardForHWLayout2 x ~senderID ~forceRebuild ~createIfNeeded self = msg_send ~self ~cmd:(selector "GSKeyboardForHWLayout:senderID:forceRebuild:createIfNeeded:") ~typ:(id @-> ullong @-> bool @-> bool @-> returning (ptr void)) x (ULLong.of_int senderID) forceRebuild createIfNeeded
let acceleratedInX x ~_Y ~_Z self = msg_send ~self ~cmd:(selector "acceleratedInX:Y:Z:") ~typ:(float @-> float @-> float @-> returning (void)) x _Y _Z
let accessoryKeyStateChanged x self = msg_send ~self ~cmd:(selector "accessoryKeyStateChanged:") ~typ:(ptr void @-> returning (void)) x
let activeInterfaceOrientation self = msg_send ~self ~cmd:(selector "activeInterfaceOrientation") ~typ:(returning (llong))
let activityContinuationManager x ~configureProgressUIWithError self = msg_send ~self ~cmd:(selector "activityContinuationManager:configureProgressUIWithError:") ~typ:(id @-> id @-> returning (void)) x configureProgressUIWithError
let activityContinuationManager1 x ~continueUserActivity self = msg_send ~self ~cmd:(selector "activityContinuationManager:continueUserActivity:") ~typ:(id @-> id @-> returning (bool)) x continueUserActivity
let activityContinuationManager2 x ~didUpdateUserActivity self = msg_send ~self ~cmd:(selector "activityContinuationManager:didUpdateUserActivity:") ~typ:(id @-> id @-> returning (void)) x didUpdateUserActivity
let activityContinuationManager3 x ~hideProgressUIWithCompletion self = msg_send ~self ~cmd:(selector "activityContinuationManager:hideProgressUIWithCompletion:") ~typ:(id @-> ptr void @-> returning (void)) x hideProgressUIWithCompletion
let activityContinuationManager4 x ~willContinueUserActivityWithType self = msg_send ~self ~cmd:(selector "activityContinuationManager:willContinueUserActivityWithType:") ~typ:(id @-> id @-> returning (bool)) x willContinueUserActivityWithType
let activityContinuationManager5 x ~didFailToContinueUserActivityWithType ~error self = msg_send ~self ~cmd:(selector "activityContinuationManager:didFailToContinueUserActivityWithType:error:") ~typ:(id @-> id @-> id @-> returning (void)) x didFailToContinueUserActivityWithType error
let activityContinuationManager6 x ~displayProgressUI ~dismissalHandler self = msg_send ~self ~cmd:(selector "activityContinuationManager:displayProgressUI:dismissalHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x displayProgressUI dismissalHandler
let activityContinuationManagerHandleErrorsByConfiguringProgressUI x self = msg_send ~self ~cmd:(selector "activityContinuationManagerHandleErrorsByConfiguringProgressUI:") ~typ:(id @-> returning (bool)) x
let activityContinuationManagerUserCancelledError x self = msg_send ~self ~cmd:(selector "activityContinuationManagerUserCancelledError:") ~typ:(id @-> returning (id)) x
let addStatusBarItem x self = msg_send ~self ~cmd:(selector "addStatusBarItem:") ~typ:(int @-> returning (void)) x
let addStatusBarItem' x ~removeOnExit self = msg_send ~self ~cmd:(selector "addStatusBarItem:removeOnExit:") ~typ:(int @-> bool @-> returning (void)) x removeOnExit
let addWebClipToHomeScreen x self = msg_send ~self ~cmd:(selector "addWebClipToHomeScreen:") ~typ:(id @-> returning (void)) x
let alertInterfaceOrientation self = msg_send ~self ~cmd:(selector "alertInterfaceOrientation") ~typ:(returning (llong))
let alternateIconName self = msg_send ~self ~cmd:(selector "alternateIconName") ~typ:(returning (id))
let applicationDidBeginSuspendAnimation self = msg_send ~self ~cmd:(selector "applicationDidBeginSuspendAnimation") ~typ:(returning (void))
let applicationDidEndResumeAnimation self = msg_send ~self ~cmd:(selector "applicationDidEndResumeAnimation") ~typ:(returning (void))
let applicationDidResume self = msg_send ~self ~cmd:(selector "applicationDidResume") ~typ:(returning (void))
let applicationDidResumeForEventsOnly self = msg_send ~self ~cmd:(selector "applicationDidResumeForEventsOnly") ~typ:(returning (void))
let applicationDidResumeFromUnderLock self = msg_send ~self ~cmd:(selector "applicationDidResumeFromUnderLock") ~typ:(returning (void))
let applicationIconBadgeNumber self = msg_send ~self ~cmd:(selector "applicationIconBadgeNumber") ~typ:(returning (llong))
let applicationOpenToShortCut x self = msg_send ~self ~cmd:(selector "applicationOpenToShortCut:") ~typ:(id @-> returning (void)) x
let applicationOpenURL x self = msg_send ~self ~cmd:(selector "applicationOpenURL:") ~typ:(id @-> returning (void)) x
let applicationState self = msg_send ~self ~cmd:(selector "applicationState") ~typ:(returning (llong))
let applicationSupportsShakeToEdit self = msg_send ~self ~cmd:(selector "applicationSupportsShakeToEdit") ~typ:(returning (bool))
let applicationSuspend self = msg_send ~self ~cmd:(selector "applicationSuspend") ~typ:(returning (void))
let applicationWillSuspend self = msg_send ~self ~cmd:(selector "applicationWillSuspend") ~typ:(returning (void))
let applicationWillSuspendForEventsOnly self = msg_send ~self ~cmd:(selector "applicationWillSuspendForEventsOnly") ~typ:(returning (void))
let applicationWillSuspendUnderLock self = msg_send ~self ~cmd:(selector "applicationWillSuspendUnderLock") ~typ:(returning (void))
let applicationWillTerminate self = msg_send ~self ~cmd:(selector "applicationWillTerminate") ~typ:(returning (void))
let backgroundRefreshStatus self = msg_send ~self ~cmd:(selector "backgroundRefreshStatus") ~typ:(returning (llong))
let backgroundTimeRemaining self = msg_send ~self ~cmd:(selector "backgroundTimeRemaining") ~typ:(returning (double))
let backlightLevel self = msg_send ~self ~cmd:(selector "backlightLevel") ~typ:(returning (float))
let batteryStatusDidChange x self = msg_send ~self ~cmd:(selector "batteryStatusDidChange:") ~typ:(id @-> returning (void)) x
let becomeFirstResponder self = msg_send ~self ~cmd:(selector "becomeFirstResponder") ~typ:(returning (bool))
let beginBackgroundTaskWithExpirationHandler x self = msg_send ~self ~cmd:(selector "beginBackgroundTaskWithExpirationHandler:") ~typ:(ptr void @-> returning (ullong)) x
let beginBackgroundTaskWithName x ~expirationHandler self = msg_send ~self ~cmd:(selector "beginBackgroundTaskWithName:expirationHandler:") ~typ:(id @-> ptr void @-> returning (ullong)) x expirationHandler
let beginIgnoringInteractionEvents self = msg_send ~self ~cmd:(selector "beginIgnoringInteractionEvents") ~typ:(returning (void))
let beginReceivingRemoteControlEvents self = msg_send ~self ~cmd:(selector "beginReceivingRemoteControlEvents") ~typ:(returning (void))
let beginRemoteSheetController x ~delegate ~didEndSelector ~contextInfo ~requireTopApplication ~opaque ~presentAnimated self = msg_send ~self ~cmd:(selector "beginRemoteSheetController:delegate:didEndSelector:contextInfo:requireTopApplication:opaque:presentAnimated:") ~typ:(id @-> id @-> _SEL @-> ptr (void) @-> bool @-> bool @-> bool @-> returning (void)) x delegate didEndSelector contextInfo requireTopApplication opaque presentAnimated
let blockInteractionEventsCount self = msg_send ~self ~cmd:(selector "blockInteractionEventsCount") ~typ:(returning (ullong))
let buildMenuWithBuilder x self = msg_send ~self ~cmd:(selector "buildMenuWithBuilder:") ~typ:(id @-> returning (void)) x
let canOpenURL x self = msg_send ~self ~cmd:(selector "canOpenURL:") ~typ:(id @-> returning (bool)) x
let canPerformAction x ~withSender self = msg_send ~self ~cmd:(selector "canPerformAction:withSender:") ~typ:(_SEL @-> id @-> returning (bool)) x withSender
let cancelAllLocalNotifications self = msg_send ~self ~cmd:(selector "cancelAllLocalNotifications") ~typ:(returning (void))
let cancelLocalNotification x self = msg_send ~self ~cmd:(selector "cancelLocalNotification:") ~typ:(id @-> returning (void)) x
let clearHardwareKeyboardState self = msg_send ~self ~cmd:(selector "clearHardwareKeyboardState") ~typ:(returning (void))
let clearKeepAliveTimeout self = msg_send ~self ~cmd:(selector "clearKeepAliveTimeout") ~typ:(returning (void))
let completeStateRestoration self = msg_send ~self ~cmd:(selector "completeStateRestoration") ~typ:(returning (void))
let connectedScenes self = msg_send ~self ~cmd:(selector "connectedScenes") ~typ:(returning (id))
let currentUserNotificationSettings self = msg_send ~self ~cmd:(selector "currentUserNotificationSettings") ~typ:(returning (id))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let defaultImageSnapshotExpiration self = msg_send ~self ~cmd:(selector "defaultImageSnapshotExpiration") ~typ:(returning (double))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let didDismissMiniAlert self = msg_send ~self ~cmd:(selector "didDismissMiniAlert") ~typ:(returning (void))
let didReceiveMemoryWarning self = msg_send ~self ~cmd:(selector "didReceiveMemoryWarning") ~typ:(returning (void))
let disablesFrontBoardImplicitWindowScenes self = msg_send ~self ~cmd:(selector "disablesFrontBoardImplicitWindowScenes") ~typ:(returning (bool))
let emitPPTEndTracePointForSubTestName x ~identifier self = msg_send ~self ~cmd:(selector "emitPPTEndTracePointForSubTestName:identifier:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int identifier)
let emitPPTEndTracePointForTestName x ~identifier self = msg_send ~self ~cmd:(selector "emitPPTEndTracePointForTestName:identifier:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int identifier)
let emitPPTStartTracePointForSubTestName x ~identifier ~testIdentifier self = msg_send ~self ~cmd:(selector "emitPPTStartTracePointForSubTestName:identifier:testIdentifier:") ~typ:(id @-> ullong @-> ullong @-> returning (void)) x (ULLong.of_int identifier) (ULLong.of_int testIdentifier)
let emitPPTStartTracePointForTestName x ~identifier self = msg_send ~self ~cmd:(selector "emitPPTStartTracePointForTestName:identifier:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int identifier)
let enabledRemoteNotificationTypes self = msg_send ~self ~cmd:(selector "enabledRemoteNotificationTypes") ~typ:(returning (ullong))
let endBackgroundTask x self = msg_send ~self ~cmd:(selector "endBackgroundTask:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let endIgnoringInteractionEvents self = msg_send ~self ~cmd:(selector "endIgnoringInteractionEvents") ~typ:(returning (void))
let endReceivingRemoteControlEvents self = msg_send ~self ~cmd:(selector "endReceivingRemoteControlEvents") ~typ:(returning (void))
let endRemoteSheet x self = msg_send ~self ~cmd:(selector "endRemoteSheet:") ~typ:(id @-> returning (void)) x
let extendSnapshotContext x ~forSnapshotAction self = msg_send ~self ~cmd:(selector "extendSnapshotContext:forSnapshotAction:") ~typ:(id @-> id @-> returning (void)) x forSnapshotAction
let extendStateRestoration self = msg_send ~self ~cmd:(selector "extendStateRestoration") ~typ:(returning (void))
let failedTest x self = msg_send ~self ~cmd:(selector "failedTest:") ~typ:(id @-> returning (void)) x
let failedTest1 x ~withFailure self = msg_send ~self ~cmd:(selector "failedTest:withFailure:") ~typ:(id @-> id @-> returning (void)) x withFailure
let failedTest2 x ~withResults self = msg_send ~self ~cmd:(selector "failedTest:withResults:") ~typ:(id @-> id @-> returning (void)) x withResults
let failedTest3 x ~withFailure ~withResults self = msg_send ~self ~cmd:(selector "failedTest:withFailure:withResults:") ~typ:(id @-> id @-> id @-> returning (void)) x withFailure withResults
let finishedIPTest x self = msg_send ~self ~cmd:(selector "finishedIPTest:") ~typ:(id @-> returning (void)) x
let finishedIPTest1 x ~extraResults self = msg_send ~self ~cmd:(selector "finishedIPTest:extraResults:") ~typ:(id @-> id @-> returning (void)) x extraResults
let finishedIPTest2 x ~extraResults ~withTeardownBlock self = msg_send ~self ~cmd:(selector "finishedIPTest:extraResults:withTeardownBlock:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x extraResults withTeardownBlock
let finishedIPTest3 x ~waitForCommit ~extraResults ~withTeardownBlock self = msg_send ~self ~cmd:(selector "finishedIPTest:waitForCommit:extraResults:withTeardownBlock:") ~typ:(id @-> bool @-> id @-> ptr void @-> returning (void)) x waitForCommit extraResults withTeardownBlock
let finishedSubTest x ~forTest self = msg_send ~self ~cmd:(selector "finishedSubTest:forTest:") ~typ:(id @-> id @-> returning (void)) x forTest
let finishedSubTest' x ~forTest ~waitForCommit self = msg_send ~self ~cmd:(selector "finishedSubTest:forTest:waitForCommit:") ~typ:(id @-> id @-> bool @-> returning (void)) x forTest waitForCommit
let finishedTest x self = msg_send ~self ~cmd:(selector "finishedTest:") ~typ:(id @-> returning (void)) x
let finishedTest1 x ~extraResults self = msg_send ~self ~cmd:(selector "finishedTest:extraResults:") ~typ:(id @-> id @-> returning (void)) x extraResults
let finishedTest2 x ~extraResults ~waitForNotification self = msg_send ~self ~cmd:(selector "finishedTest:extraResults:waitForNotification:") ~typ:(id @-> id @-> id @-> returning (void)) x extraResults waitForNotification
let finishedTest3 x ~extraResults ~withTeardownBlock self = msg_send ~self ~cmd:(selector "finishedTest:extraResults:withTeardownBlock:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x extraResults withTeardownBlock
let finishedTest4 x ~waitForCommit ~extraResults self = msg_send ~self ~cmd:(selector "finishedTest:waitForCommit:extraResults:") ~typ:(id @-> bool @-> id @-> returning (void)) x waitForCommit extraResults
let finishedTest5 x ~extraResults ~waitForNotification ~withTeardownBlock self = msg_send ~self ~cmd:(selector "finishedTest:extraResults:waitForNotification:withTeardownBlock:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x extraResults waitForNotification withTeardownBlock
let finishedTest6 x ~waitForCommit ~extraResults ~withTeardownBlock self = msg_send ~self ~cmd:(selector "finishedTest:waitForCommit:extraResults:withTeardownBlock:") ~typ:(id @-> bool @-> id @-> ptr void @-> returning (void)) x waitForCommit extraResults withTeardownBlock
let handleDoubleHeightStatusBarTapWithStyleOverride x self = msg_send ~self ~cmd:(selector "handleDoubleHeightStatusBarTapWithStyleOverride:") ~typ:(ullong @-> returning (bool)) (ULLong.of_int x)
let handleEvent x self = msg_send ~self ~cmd:(selector "handleEvent:") ~typ:(ptr void @-> returning (bool)) x
let handleEvent' x ~withNewEvent self = msg_send ~self ~cmd:(selector "handleEvent:withNewEvent:") ~typ:(ptr void @-> id @-> returning (bool)) x withNewEvent
let handleKeyCommand x ~repeatable ~beforeKeyEvent self = msg_send ~self ~cmd:(selector "handleKeyCommand:repeatable:beforeKeyEvent:") ~typ:(id @-> bool @-> bool @-> returning (bool)) x repeatable beforeKeyEvent
let handleKeyEvent x self = msg_send ~self ~cmd:(selector "handleKeyEvent:") ~typ:(ptr void @-> returning (void)) x
let handleKeyHIDEvent x self = msg_send ~self ~cmd:(selector "handleKeyHIDEvent:") ~typ:(ptr void @-> returning (void)) x
let handleKeyUIEvent x self = msg_send ~self ~cmd:(selector "handleKeyUIEvent:") ~typ:(id @-> returning (void)) x
let handleKeyUpCommand x self = msg_send ~self ~cmd:(selector "handleKeyUpCommand:") ~typ:(id @-> returning (bool)) x
let handleStatusBarHoverActionForRegion x self = msg_send ~self ~cmd:(selector "handleStatusBarHoverActionForRegion:") ~typ:(llong @-> returning (bool)) (LLong.of_int x)
let handleTestURL x self = msg_send ~self ~cmd:(selector "handleTestURL:") ~typ:(id @-> returning (bool)) x
let headsetAvailabilityChanged x self = msg_send ~self ~cmd:(selector "headsetAvailabilityChanged:") ~typ:(ptr void @-> returning (void)) x
let headsetButtonDown x self = msg_send ~self ~cmd:(selector "headsetButtonDown:") ~typ:(ptr void @-> returning (void)) x
let headsetButtonUp x self = msg_send ~self ~cmd:(selector "headsetButtonUp:") ~typ:(ptr void @-> returning (void)) x
let hidUsageFromUIKeyInput x self = msg_send ~self ~cmd:(selector "hidUsageFromUIKeyInput:") ~typ:(id @-> returning (llong)) x
let idleTimerDisabledReasons self = msg_send ~self ~cmd:(selector "idleTimerDisabledReasons") ~typ:(returning (id))
let ignoreSnapshotOnNextApplicationLaunch self = msg_send ~self ~cmd:(selector "ignoreSnapshotOnNextApplicationLaunch") ~typ:(returning (void))
let ignoresInteractionEvents self = msg_send ~self ~cmd:(selector "ignoresInteractionEvents") ~typ:(returning (bool))
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning (id))
let installCACommitCompletionBlock x self = msg_send ~self ~cmd:(selector "installCACommitCompletionBlock:") ~typ:(ptr void @-> returning (void)) x
let installNotificationObserverForNotificationName x ~forOneNotification ~usingBlock self = msg_send ~self ~cmd:(selector "installNotificationObserverForNotificationName:forOneNotification:usingBlock:") ~typ:(id @-> bool @-> ptr void @-> returning (void)) x forOneNotification usingBlock
let interfaceOrientation self = msg_send ~self ~cmd:(selector "interfaceOrientation") ~typ:(returning (llong))
let isFrontBoard self = msg_send ~self ~cmd:(selector "isFrontBoard") ~typ:(returning (bool))
let isHandlingOpenShortCut self = msg_send ~self ~cmd:(selector "isHandlingOpenShortCut") ~typ:(returning (bool))
let isHandlingURL self = msg_send ~self ~cmd:(selector "isHandlingURL") ~typ:(returning (bool))
let isIdleTimerDisabled self = msg_send ~self ~cmd:(selector "isIdleTimerDisabled") ~typ:(returning (bool))
let isIgnoringInteractionEvents self = msg_send ~self ~cmd:(selector "isIgnoringInteractionEvents") ~typ:(returning (bool))
let isKeyCommand x self = msg_send ~self ~cmd:(selector "isKeyCommand:") ~typ:(id @-> returning (bool)) x
let isLaunchTest x self = msg_send ~self ~cmd:(selector "isLaunchTest:") ~typ:(id @-> returning (bool)) x
let isLocked self = msg_send ~self ~cmd:(selector "isLocked") ~typ:(returning (bool))
let isNetworkActivityIndicatorVisible self = msg_send ~self ~cmd:(selector "isNetworkActivityIndicatorVisible") ~typ:(returning (bool))
let isPPTAvailable self = msg_send ~self ~cmd:(selector "isPPTAvailable") ~typ:(returning (bool))
let isPasscodeRequiredToUnlock self = msg_send ~self ~cmd:(selector "isPasscodeRequiredToUnlock") ~typ:(returning (bool))
let isProtectedDataAvailable self = msg_send ~self ~cmd:(selector "isProtectedDataAvailable") ~typ:(returning (bool))
let isProximitySensingEnabled self = msg_send ~self ~cmd:(selector "isProximitySensingEnabled") ~typ:(returning (bool))
let isRegisteredForRemoteNotifications self = msg_send ~self ~cmd:(selector "isRegisteredForRemoteNotifications") ~typ:(returning (bool))
let isRunningInTaskSwitcher self = msg_send ~self ~cmd:(selector "isRunningInTaskSwitcher") ~typ:(returning (bool))
let isRunningQuitTest self = msg_send ~self ~cmd:(selector "isRunningQuitTest") ~typ:(returning (bool))
let isRunningSuspendTest self = msg_send ~self ~cmd:(selector "isRunningSuspendTest") ~typ:(returning (bool))
let isRunningTest self = msg_send ~self ~cmd:(selector "isRunningTest") ~typ:(returning (bool))
let isRunningTest' x self = msg_send ~self ~cmd:(selector "isRunningTest:") ~typ:(id @-> returning (bool)) x
let isStatusBarHidden self = msg_send ~self ~cmd:(selector "isStatusBarHidden") ~typ:(returning (bool))
let isSuspended self = msg_send ~self ~cmd:(selector "isSuspended") ~typ:(returning (bool))
let isSuspendedEventsOnly self = msg_send ~self ~cmd:(selector "isSuspendedEventsOnly") ~typ:(returning (bool))
let isSuspendedUnderLock self = msg_send ~self ~cmd:(selector "isSuspendedUnderLock") ~typ:(returning (bool))
let keyCommands self = msg_send ~self ~cmd:(selector "keyCommands") ~typ:(returning (id))
let keyWindow self = msg_send ~self ~cmd:(selector "keyWindow") ~typ:(returning (id))
let launchApplicationWithIdentifier x ~suspended self = msg_send ~self ~cmd:(selector "launchApplicationWithIdentifier:suspended:") ~typ:(id @-> bool @-> returning (bool)) x suspended
let launchedToTest self = msg_send ~self ~cmd:(selector "launchedToTest") ~typ:(returning (bool))
let layoutMonitor x ~didUpdateDisplayLayout ~withContext self = msg_send ~self ~cmd:(selector "layoutMonitor:didUpdateDisplayLayout:withContext:") ~typ:(id @-> id @-> id @-> returning (void)) x didUpdateDisplayLayout withContext
let lockButtonDown x self = msg_send ~self ~cmd:(selector "lockButtonDown:") ~typ:(ptr void @-> returning (void)) x
let lockButtonUp x self = msg_send ~self ~cmd:(selector "lockButtonUp:") ~typ:(ptr void @-> returning (void)) x
let lockDevice x self = msg_send ~self ~cmd:(selector "lockDevice:") ~typ:(ptr void @-> returning (void)) x
let mediaKeyDown x self = msg_send ~self ~cmd:(selector "mediaKeyDown:") ~typ:(ptr void @-> returning (void)) x
let mediaKeyUp x self = msg_send ~self ~cmd:(selector "mediaKeyUp:") ~typ:(ptr void @-> returning (void)) x
let menuButtonDown x self = msg_send ~self ~cmd:(selector "menuButtonDown:") ~typ:(ptr void @-> returning (void)) x
let menuButtonUp x self = msg_send ~self ~cmd:(selector "menuButtonUp:") ~typ:(ptr void @-> returning (void)) x
let motionBegan x ~withEvent self = msg_send ~self ~cmd:(selector "motionBegan:withEvent:") ~typ:(llong @-> id @-> returning (void)) (LLong.of_int x) withEvent
let motionCancelled x ~withEvent self = msg_send ~self ~cmd:(selector "motionCancelled:withEvent:") ~typ:(llong @-> id @-> returning (void)) (LLong.of_int x) withEvent
let motionEnded x ~withEvent self = msg_send ~self ~cmd:(selector "motionEnded:withEvent:") ~typ:(llong @-> id @-> returning (void)) (LLong.of_int x) withEvent
let nameOfDefaultImageToUpdateAtSuspension self = msg_send ~self ~cmd:(selector "nameOfDefaultImageToUpdateAtSuspension") ~typ:(returning (id))
let nextResponder self = msg_send ~self ~cmd:(selector "nextResponder") ~typ:(returning (id))
let noteActiveInterfaceOrientationDidChangeToOrientation x ~willAnimateWithSettings ~fromOrientation self = msg_send ~self ~cmd:(selector "noteActiveInterfaceOrientationDidChangeToOrientation:willAnimateWithSettings:fromOrientation:") ~typ:(llong @-> id @-> llong @-> returning (void)) (LLong.of_int x) willAnimateWithSettings (LLong.of_int fromOrientation)
let noteActiveInterfaceOrientationWillChangeToOrientation x self = msg_send ~self ~cmd:(selector "noteActiveInterfaceOrientationWillChangeToOrientation:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let noteNewRecentDocumentURL x self = msg_send ~self ~cmd:(selector "noteNewRecentDocumentURL:") ~typ:(id @-> returning (void)) x
let openSessions self = msg_send ~self ~cmd:(selector "openSessions") ~typ:(returning (id))
let openURL x self = msg_send ~self ~cmd:(selector "openURL:") ~typ:(id @-> returning (bool)) x
let openURL1 x ~withCompletionHandler self = msg_send ~self ~cmd:(selector "openURL:withCompletionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x withCompletionHandler
let openURL2 x ~options ~completionHandler self = msg_send ~self ~cmd:(selector "openURL:options:completionHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x options completionHandler
let orderFrontCharacterPalette x self = msg_send ~self ~cmd:(selector "orderFrontCharacterPalette:") ~typ:(id @-> returning (void)) x
let overriddenRequestedStyleFromStyle x self = msg_send ~self ~cmd:(selector "overriddenRequestedStyleFromStyle:") ~typ:(llong @-> returning (llong)) (LLong.of_int x)
let pathToDefaultImageNamed x ~forScreen self = msg_send ~self ~cmd:(selector "pathToDefaultImageNamed:forScreen:") ~typ:(id @-> id @-> returning (id)) x forScreen
let popRunLoopMode x self = msg_send ~self ~cmd:(selector "popRunLoopMode:") ~typ:(id @-> returning (void)) x
let popRunLoopMode' x ~requester self = msg_send ~self ~cmd:(selector "popRunLoopMode:requester:") ~typ:(id @-> id @-> returning (void)) x requester
let preferredContentSizeCategory self = msg_send ~self ~cmd:(selector "preferredContentSizeCategory") ~typ:(returning (id))
let prepareForDefaultImageSnapshot self = msg_send ~self ~cmd:(selector "prepareForDefaultImageSnapshot") ~typ:(returning (void))
let prepareForDefaultImageSnapshotForScreen x self = msg_send ~self ~cmd:(selector "prepareForDefaultImageSnapshotForScreen:") ~typ:(id @-> returning (void)) x
let prepareSnapshotsWithAction x ~forScene ~completion self = msg_send ~self ~cmd:(selector "prepareSnapshotsWithAction:forScene:completion:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x forScene completion
let presentLocalNotificationNow x self = msg_send ~self ~cmd:(selector "presentLocalNotificationNow:") ~typ:(id @-> returning (void)) x
let pressesBegan x ~withEvent self = msg_send ~self ~cmd:(selector "pressesBegan:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let pressesCancelled x ~withEvent self = msg_send ~self ~cmd:(selector "pressesCancelled:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let pressesEnded x ~withEvent self = msg_send ~self ~cmd:(selector "pressesEnded:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let proximityStateChanged x self = msg_send ~self ~cmd:(selector "proximityStateChanged:") ~typ:(bool @-> returning (void)) x
let pureUserInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "pureUserInterfaceLayoutDirection") ~typ:(returning (llong))
let pushRegistry x ~didInvalidatePushTokenForType ~error self = msg_send ~self ~cmd:(selector "pushRegistry:didInvalidatePushTokenForType:error:") ~typ:(id @-> id @-> id @-> returning (void)) x didInvalidatePushTokenForType error
let pushRegistry1 x ~didUpdatePushCredentials ~forType self = msg_send ~self ~cmd:(selector "pushRegistry:didUpdatePushCredentials:forType:") ~typ:(id @-> id @-> id @-> returning (void)) x didUpdatePushCredentials forType
let pushRegistry2 x ~didReceiveIncomingPushWithPayload ~forType ~withCompletionHandler self = msg_send ~self ~cmd:(selector "pushRegistry:didReceiveIncomingPushWithPayload:forType:withCompletionHandler:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x didReceiveIncomingPushWithPayload forType withCompletionHandler
let pushRunLoopMode x self = msg_send ~self ~cmd:(selector "pushRunLoopMode:") ~typ:(id @-> returning (void)) x
let pushRunLoopMode' x ~requester self = msg_send ~self ~cmd:(selector "pushRunLoopMode:requester:") ~typ:(id @-> id @-> returning (void)) x requester
let registerForRemoteNotificationTypes x self = msg_send ~self ~cmd:(selector "registerForRemoteNotificationTypes:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let registerForRemoteNotifications self = msg_send ~self ~cmd:(selector "registerForRemoteNotifications") ~typ:(returning (void))
let registerPlatformSpecificLaunchOptions x ~transitionContext self = msg_send ~self ~cmd:(selector "registerPlatformSpecificLaunchOptions:transitionContext:") ~typ:(ptr void @-> id @-> returning (void)) x transitionContext
let registerUserNotificationSettings x self = msg_send ~self ~cmd:(selector "registerUserNotificationSettings:") ~typ:(id @-> returning (void)) x
let removeApplicationPreservationStateWithSessionIdentifier x self = msg_send ~self ~cmd:(selector "removeApplicationPreservationStateWithSessionIdentifier:") ~typ:(id @-> returning (void)) x
let removeDefaultImage x self = msg_send ~self ~cmd:(selector "removeDefaultImage:") ~typ:(id @-> returning (bool)) x
let removeDefaultImage' x ~forScreen self = msg_send ~self ~cmd:(selector "removeDefaultImage:forScreen:") ~typ:(id @-> id @-> returning (bool)) x forScreen
let removeStatusBarItem x self = msg_send ~self ~cmd:(selector "removeStatusBarItem:") ~typ:(int @-> returning (void)) x
let repeatedActionWillInvokeWithObject x ~forPhase self = msg_send ~self ~cmd:(selector "repeatedActionWillInvokeWithObject:forPhase:") ~typ:(id @-> ullong @-> returning (id)) x (ULLong.of_int forPhase)
let reportApplicationSuspended self = msg_send ~self ~cmd:(selector "reportApplicationSuspended") ~typ:(returning (bool))
let requestNewScene x self = msg_send ~self ~cmd:(selector "requestNewScene:") ~typ:(id @-> returning (void)) x
let requestSceneSessionActivation x ~userActivity ~options ~errorHandler self = msg_send ~self ~cmd:(selector "requestSceneSessionActivation:userActivity:options:errorHandler:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x userActivity options errorHandler
let requestSceneSessionDestruction x ~options ~errorHandler self = msg_send ~self ~cmd:(selector "requestSceneSessionDestruction:options:errorHandler:") ~typ:(id @-> id @-> ptr void @-> returning (void)) x options errorHandler
let requestSceneSessionRefresh x self = msg_send ~self ~cmd:(selector "requestSceneSessionRefresh:") ~typ:(id @-> returning (void)) x
let resetIdleTimerAndUndim self = msg_send ~self ~cmd:(selector "resetIdleTimerAndUndim") ~typ:(returning (void))
let restoreApplicationPreservationStateWithSessionIdentifier x ~viewController ~beginHandler ~completionHandler self = msg_send ~self ~cmd:(selector "restoreApplicationPreservationStateWithSessionIdentifier:viewController:beginHandler:completionHandler:") ~typ:(id @-> id @-> ptr void @-> ptr void @-> returning (void)) x viewController beginHandler completionHandler
let resultsForTest x self = msg_send ~self ~cmd:(selector "resultsForTest:") ~typ:(id @-> returning (id)) x
let ringerChanged x self = msg_send ~self ~cmd:(selector "ringerChanged:") ~typ:(int @-> returning (void)) x
let rotateIfNeeded x self = msg_send ~self ~cmd:(selector "rotateIfNeeded:") ~typ:(llong @-> returning (bool)) (LLong.of_int x)
let rotateIfNeeded1 x ~completion self = msg_send ~self ~cmd:(selector "rotateIfNeeded:completion:") ~typ:(llong @-> ptr void @-> returning (void)) (LLong.of_int x) completion
let rotateIfNeeded2 x ~before ~after self = msg_send ~self ~cmd:(selector "rotateIfNeeded:before:after:") ~typ:(llong @-> ptr void @-> ptr void @-> returning (void)) (LLong.of_int x) before after
let runModal x self = msg_send ~self ~cmd:(selector "runModal:") ~typ:(id @-> returning (void)) x
let runTest x ~forAnimation self = msg_send ~self ~cmd:(selector "runTest:forAnimation:") ~typ:(id @-> id @-> returning (void)) x forAnimation
let runTest1 x ~options self = msg_send ~self ~cmd:(selector "runTest:options:") ~typ:(id @-> id @-> returning (bool)) x options
let runTest2 x ~startingBeforeAnimation ~stoppingAfterAnimation self = msg_send ~self ~cmd:(selector "runTest:startingBeforeAnimation:stoppingAfterAnimation:") ~typ:(id @-> id @-> id @-> returning (void)) x startingBeforeAnimation stoppingAfterAnimation
let runTestForKeyboardBringupAndDismissalWithName x ~withShowKeyboardBlock ~withHideKeyboardBlock ~withExtraResultsBlock ~withCleanupBlock self = msg_send ~self ~cmd:(selector "runTestForKeyboardBringupAndDismissalWithName:withShowKeyboardBlock:withHideKeyboardBlock:withExtraResultsBlock:withCleanupBlock:") ~typ:(id @-> ptr void @-> ptr void @-> ptr void @-> ptr void @-> returning (void)) x withShowKeyboardBlock withHideKeyboardBlock withExtraResultsBlock withCleanupBlock
let runTestForKeyboardRotationWithName x ~fromOrientation ~withShowKeyboardBlock ~withExtraResultsBlock ~withCleanupBlock self = msg_send ~self ~cmd:(selector "runTestForKeyboardRotationWithName:fromOrientation:withShowKeyboardBlock:withExtraResultsBlock:withCleanupBlock:") ~typ:(id @-> llong @-> ptr void @-> ptr void @-> ptr void @-> returning (void)) x (LLong.of_int fromOrientation) withShowKeyboardBlock withExtraResultsBlock withCleanupBlock
let runTestForKeyboardSplitAndMergeWithName x ~withShowKeyboardBlock ~withExtraResultsBlock ~withCleanupBlock self = msg_send ~self ~cmd:(selector "runTestForKeyboardSplitAndMergeWithName:withShowKeyboardBlock:withExtraResultsBlock:withCleanupBlock:") ~typ:(id @-> ptr void @-> ptr void @-> ptr void @-> returning (void)) x withShowKeyboardBlock withExtraResultsBlock withCleanupBlock
let saveApplicationPreservationStateWithSessionIdentifier x ~viewController ~beginHandler ~completionHandler self = msg_send ~self ~cmd:(selector "saveApplicationPreservationStateWithSessionIdentifier:viewController:beginHandler:completionHandler:") ~typ:(id @-> id @-> ptr void @-> ptr void @-> returning (void)) x viewController beginHandler completionHandler
let scheduleLocalNotification x self = msg_send ~self ~cmd:(selector "scheduleLocalNotification:") ~typ:(id @-> returning (void)) x
let scheduledLocalNotifications self = msg_send ~self ~cmd:(selector "scheduledLocalNotifications") ~typ:(returning (id))
let sendAction x ~to_ ~from ~forEvent self = msg_send ~self ~cmd:(selector "sendAction:to:from:forEvent:") ~typ:(_SEL @-> id @-> id @-> id @-> returning (bool)) x to_ from forEvent
let sendAction' x ~toTarget ~fromSender ~forEvent self = msg_send ~self ~cmd:(selector "sendAction:toTarget:fromSender:forEvent:") ~typ:(_SEL @-> id @-> id @-> id @-> returning (bool)) x toTarget fromSender forEvent
let sendEvent x self = msg_send ~self ~cmd:(selector "sendEvent:") ~typ:(id @-> returning (void)) x
let setAlternateIconName x ~completionHandler self = msg_send ~self ~cmd:(selector "setAlternateIconName:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let setApplicationBadgeString x self = msg_send ~self ~cmd:(selector "setApplicationBadgeString:") ~typ:(id @-> returning (void)) x
let setApplicationIconBadgeNumber x self = msg_send ~self ~cmd:(selector "setApplicationIconBadgeNumber:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setApplicationSupportsShakeToEdit x self = msg_send ~self ~cmd:(selector "setApplicationSupportsShakeToEdit:") ~typ:(bool @-> returning (void)) x
let setBacklightLevel x self = msg_send ~self ~cmd:(selector "setBacklightLevel:") ~typ:(float @-> returning (void)) x
let setCapsLockDelayOverride x self = msg_send ~self ~cmd:(selector "setCapsLockDelayOverride:") ~typ:(double @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDoubleHeightPrefixText x self = msg_send ~self ~cmd:(selector "setDoubleHeightPrefixText:") ~typ:(id @-> returning (void)) x
let setDoubleHeightStatusText x self = msg_send ~self ~cmd:(selector "setDoubleHeightStatusText:") ~typ:(id @-> returning (void)) x
let setDoubleHeightStatusText' x ~forStyle self = msg_send ~self ~cmd:(selector "setDoubleHeightStatusText:forStyle:") ~typ:(id @-> llong @-> returning (void)) x (LLong.of_int forStyle)
let setExpectsFaceContact x self = msg_send ~self ~cmd:(selector "setExpectsFaceContact:") ~typ:(bool @-> returning (void)) x
let setExpectsFaceContact' x ~inLandscape self = msg_send ~self ~cmd:(selector "setExpectsFaceContact:inLandscape:") ~typ:(bool @-> bool @-> returning (void)) x inLandscape
let setGlowAnimationEnabled x ~forStyle self = msg_send ~self ~cmd:(selector "setGlowAnimationEnabled:forStyle:") ~typ:(bool @-> llong @-> returning (void)) x (LLong.of_int forStyle)
let setHardwareKeyboardLayoutName x self = msg_send ~self ~cmd:(selector "setHardwareKeyboardLayoutName:") ~typ:(id @-> returning (void)) x
let setHardwareKeyboardLayoutName' x ~forceRebuild self = msg_send ~self ~cmd:(selector "setHardwareKeyboardLayoutName:forceRebuild:") ~typ:(id @-> bool @-> returning (void)) x forceRebuild
let setIdleTimerDisabled x self = msg_send ~self ~cmd:(selector "setIdleTimerDisabled:") ~typ:(bool @-> returning (void)) x
let setIgnoresInteractionEvents x self = msg_send ~self ~cmd:(selector "setIgnoresInteractionEvents:") ~typ:(bool @-> returning (void)) x
let setKeepAliveTimeout x ~handler self = msg_send ~self ~cmd:(selector "setKeepAliveTimeout:handler:") ~typ:(double @-> ptr void @-> returning (bool)) x handler
let setMinimumBackgroundFetchInterval x self = msg_send ~self ~cmd:(selector "setMinimumBackgroundFetchInterval:") ~typ:(double @-> returning (void)) x
let setNetworkActivityIndicatorVisible x self = msg_send ~self ~cmd:(selector "setNetworkActivityIndicatorVisible:") ~typ:(bool @-> returning (void)) x
let setNewsstandIconImage x self = msg_send ~self ~cmd:(selector "setNewsstandIconImage:") ~typ:(id @-> returning (void)) x
let setProximityEventsEnabled x self = msg_send ~self ~cmd:(selector "setProximityEventsEnabled:") ~typ:(bool @-> returning (void)) x
let setProximitySensingEnabled x self = msg_send ~self ~cmd:(selector "setProximitySensingEnabled:") ~typ:(bool @-> returning (void)) x
let setReceivesMemoryWarnings x self = msg_send ~self ~cmd:(selector "setReceivesMemoryWarnings:") ~typ:(bool @-> returning (void)) x
let setScheduledLocalNotifications x self = msg_send ~self ~cmd:(selector "setScheduledLocalNotifications:") ~typ:(id @-> returning (void)) x
let setShortcutItems x self = msg_send ~self ~cmd:(selector "setShortcutItems:") ~typ:(id @-> returning (void)) x
let setStatusBarHidden x self = msg_send ~self ~cmd:(selector "setStatusBarHidden:") ~typ:(bool @-> returning (void)) x
let setStatusBarHidden1 x ~animated self = msg_send ~self ~cmd:(selector "setStatusBarHidden:animated:") ~typ:(bool @-> bool @-> returning (void)) x animated
let setStatusBarHidden2 x ~animationParameters self = msg_send ~self ~cmd:(selector "setStatusBarHidden:animationParameters:") ~typ:(bool @-> id @-> returning (void)) x animationParameters
let setStatusBarHidden3 x ~duration self = msg_send ~self ~cmd:(selector "setStatusBarHidden:duration:") ~typ:(bool @-> double @-> returning (void)) x duration
let setStatusBarHidden4 x ~withAnimation self = msg_send ~self ~cmd:(selector "setStatusBarHidden:withAnimation:") ~typ:(bool @-> llong @-> returning (void)) x (LLong.of_int withAnimation)
let setStatusBarHidden5 x ~animationParameters ~changeApplicationFlag self = msg_send ~self ~cmd:(selector "setStatusBarHidden:animationParameters:changeApplicationFlag:") ~typ:(bool @-> id @-> bool @-> returning (void)) x animationParameters changeApplicationFlag
let setStatusBarHidden6 x ~duration ~changeApplicationFlag self = msg_send ~self ~cmd:(selector "setStatusBarHidden:duration:changeApplicationFlag:") ~typ:(bool @-> double @-> bool @-> returning (void)) x duration changeApplicationFlag
let setStatusBarOrientation x self = msg_send ~self ~cmd:(selector "setStatusBarOrientation:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setStatusBarOrientation1 x ~animated self = msg_send ~self ~cmd:(selector "setStatusBarOrientation:animated:") ~typ:(llong @-> bool @-> returning (void)) (LLong.of_int x) animated
let setStatusBarOrientation2 x ~animationParameters self = msg_send ~self ~cmd:(selector "setStatusBarOrientation:animationParameters:") ~typ:(llong @-> id @-> returning (void)) (LLong.of_int x) animationParameters
let setStatusBarOrientation3 x ~animation ~duration self = msg_send ~self ~cmd:(selector "setStatusBarOrientation:animation:duration:") ~typ:(llong @-> int @-> double @-> returning (void)) (LLong.of_int x) animation duration
let setStatusBarOrientation4 x ~fromOrientation ~windowScene ~animationParameters ~updateBlock self = msg_send ~self ~cmd:(selector "setStatusBarOrientation:fromOrientation:windowScene:animationParameters:updateBlock:") ~typ:(llong @-> llong @-> id @-> id @-> ptr void @-> returning (void)) (LLong.of_int x) (LLong.of_int fromOrientation) windowScene animationParameters updateBlock
let setStatusBarShowsProgress x self = msg_send ~self ~cmd:(selector "setStatusBarShowsProgress:") ~typ:(bool @-> returning (void)) x
let setStatusBarStyle x self = msg_send ~self ~cmd:(selector "setStatusBarStyle:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setStatusBarStyle1 x ~animated self = msg_send ~self ~cmd:(selector "setStatusBarStyle:animated:") ~typ:(llong @-> bool @-> returning (void)) (LLong.of_int x) animated
let setStatusBarStyle2 x ~animation self = msg_send ~self ~cmd:(selector "setStatusBarStyle:animation:") ~typ:(llong @-> int @-> returning (void)) (LLong.of_int x) animation
let setStatusBarStyle3 x ~animationParameters self = msg_send ~self ~cmd:(selector "setStatusBarStyle:animationParameters:") ~typ:(llong @-> id @-> returning (void)) (LLong.of_int x) animationParameters
let setStatusBarStyle4 x ~duration self = msg_send ~self ~cmd:(selector "setStatusBarStyle:duration:") ~typ:(llong @-> double @-> returning (void)) (LLong.of_int x) duration
let setStatusBarStyle5 x ~animation ~startTime ~duration ~curve self = msg_send ~self ~cmd:(selector "setStatusBarStyle:animation:startTime:duration:curve:") ~typ:(llong @-> int @-> double @-> double @-> llong @-> returning (void)) (LLong.of_int x) animation startTime duration (LLong.of_int curve)
let setSuspensionAnimationDelay x self = msg_send ~self ~cmd:(selector "setSuspensionAnimationDelay:") ~typ:(double @-> returning (void)) x
let setSystemVolumeHUDEnabled x self = msg_send ~self ~cmd:(selector "setSystemVolumeHUDEnabled:") ~typ:(bool @-> returning (void)) x
let setSystemVolumeHUDEnabled' x ~forAudioCategory self = msg_send ~self ~cmd:(selector "setSystemVolumeHUDEnabled:forAudioCategory:") ~typ:(bool @-> id @-> returning (void)) x forAudioCategory
let setUsesBackgroundNetwork x self = msg_send ~self ~cmd:(selector "setUsesBackgroundNetwork:") ~typ:(bool @-> returning (void)) x
let setWantsLockEvents x self = msg_send ~self ~cmd:(selector "setWantsLockEvents:") ~typ:(bool @-> returning (void)) x
let setWantsVolumeButtonEvents x self = msg_send ~self ~cmd:(selector "setWantsVolumeButtonEvents:") ~typ:(bool @-> returning (void)) x
let shortcutItems self = msg_send ~self ~cmd:(selector "shortcutItems") ~typ:(returning (id))
let shouldFenceStatusBarRotation self = msg_send ~self ~cmd:(selector "shouldFenceStatusBarRotation") ~typ:(returning (bool))
let shouldLaunchSafe self = msg_send ~self ~cmd:(selector "shouldLaunchSafe") ~typ:(returning (bool))
let shouldRecordExtendedLaunchTime self = msg_send ~self ~cmd:(selector "shouldRecordExtendedLaunchTime") ~typ:(returning (bool))
let showKeyboardUsingBlock x ~withCompletionBlock self = msg_send ~self ~cmd:(selector "showKeyboardUsingBlock:withCompletionBlock:") ~typ:(ptr void @-> ptr void @-> returning (void)) x withCompletionBlock
let showNetworkPromptsIfNecessary x self = msg_send ~self ~cmd:(selector "showNetworkPromptsIfNecessary:") ~typ:(bool @-> returning (void)) x
let significantTimeChange self = msg_send ~self ~cmd:(selector "significantTimeChange") ~typ:(returning (void))
let startCHUDRecording x self = msg_send ~self ~cmd:(selector "startCHUDRecording:") ~typ:(id @-> returning (void)) x
let startDictation x self = msg_send ~self ~cmd:(selector "startDictation:") ~typ:(id @-> returning (void)) x
let startLeaking self = msg_send ~self ~cmd:(selector "startLeaking") ~typ:(returning (void))
let startedAnimationTest x self = msg_send ~self ~cmd:(selector "startedAnimationTest:") ~typ:(id @-> returning (void)) x
let startedIPTest x self = msg_send ~self ~cmd:(selector "startedIPTest:") ~typ:(id @-> returning (void)) x
let startedSubTest x ~forTest self = msg_send ~self ~cmd:(selector "startedSubTest:forTest:") ~typ:(id @-> id @-> returning (void)) x forTest
let startedSubTest' x ~forTest ~withMetrics self = msg_send ~self ~cmd:(selector "startedSubTest:forTest:withMetrics:") ~typ:(id @-> id @-> id @-> returning (void)) x forTest withMetrics
let startedTest x self = msg_send ~self ~cmd:(selector "startedTest:") ~typ:(id @-> returning (void)) x
let statusBar self = msg_send ~self ~cmd:(selector "statusBar") ~typ:(returning (id))
let statusBar1 x ~effectiveStyleOverridesForRequestedStyle ~overrides self = msg_send ~self ~cmd:(selector "statusBar:effectiveStyleOverridesForRequestedStyle:overrides:") ~typ:(id @-> llong @-> ullong @-> returning (ullong)) x (LLong.of_int effectiveStyleOverridesForRequestedStyle) (ULLong.of_int overrides)
let statusBar2 x ~styleForRequestedStyle ~overrides self = msg_send ~self ~cmd:(selector "statusBar:styleForRequestedStyle:overrides:") ~typ:(id @-> llong @-> ullong @-> returning (llong)) x (LLong.of_int styleForRequestedStyle) (ULLong.of_int overrides)
let statusBar3 x ~didAnimateFromHeight ~toHeight ~animation self = msg_send ~self ~cmd:(selector "statusBar:didAnimateFromHeight:toHeight:animation:") ~typ:(id @-> double @-> double @-> int @-> returning (void)) x didAnimateFromHeight toHeight animation
let statusBar4 x ~willAnimateFromHeight ~toHeight ~duration ~animation self = msg_send ~self ~cmd:(selector "statusBar:willAnimateFromHeight:toHeight:duration:animation:") ~typ:(id @-> double @-> double @-> double @-> int @-> returning (void)) x willAnimateFromHeight toHeight duration animation
let statusBarFrame self = msg_send_stret ~self ~cmd:(selector "statusBarFrame") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let statusBarFrameForOrientation x self = msg_send_stret ~self ~cmd:(selector "statusBarFrameForOrientation:") ~typ:(llong @-> returning (CGRect.t)) ~return_type:CGRect.t (LLong.of_int x)
let statusBarHeight self = msg_send ~self ~cmd:(selector "statusBarHeight") ~typ:(returning (double))
let statusBarHeightForOrientation x self = msg_send ~self ~cmd:(selector "statusBarHeightForOrientation:") ~typ:(llong @-> returning (double)) (LLong.of_int x)
let statusBarHeightForOrientation' x ~ignoreHidden self = msg_send ~self ~cmd:(selector "statusBarHeightForOrientation:ignoreHidden:") ~typ:(llong @-> bool @-> returning (double)) (LLong.of_int x) ignoreHidden
let statusBarOrientation self = msg_send ~self ~cmd:(selector "statusBarOrientation") ~typ:(returning (llong))
let statusBarOrientationAnimationDuration self = msg_send ~self ~cmd:(selector "statusBarOrientationAnimationDuration") ~typ:(returning (double))
let statusBarStyle self = msg_send ~self ~cmd:(selector "statusBarStyle") ~typ:(returning (llong))
let statusBarSystemNavigationAction x self = msg_send ~self ~cmd:(selector "statusBarSystemNavigationAction:") ~typ:(id @-> returning (id)) x
let statusBarWindow self = msg_send ~self ~cmd:(selector "statusBarWindow") ~typ:(returning (id))
let statusBarWithWindow x self = msg_send ~self ~cmd:(selector "statusBarWithWindow:") ~typ:(id @-> returning (id)) x
let stopAndReportResultsForTest x ~extraResults ~waitForNotification ~withTeardownBlock self = msg_send ~self ~cmd:(selector "stopAndReportResultsForTest:extraResults:waitForNotification:withTeardownBlock:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x extraResults waitForNotification withTeardownBlock
let stopCHUDRecording self = msg_send ~self ~cmd:(selector "stopCHUDRecording") ~typ:(returning (void))
let stopLeaking self = msg_send ~self ~cmd:(selector "stopLeaking") ~typ:(returning (void))
let stopModal self = msg_send ~self ~cmd:(selector "stopModal") ~typ:(returning (void))
let subTest x ~_ForTest ~withMetrics self = msg_send ~self ~cmd:(selector "subTest:ForTest:withMetrics:") ~typ:(id @-> id @-> id @-> returning (id)) x _ForTest withMetrics
let supportedInterfaceOrientationsForWindow x self = msg_send ~self ~cmd:(selector "supportedInterfaceOrientationsForWindow:") ~typ:(id @-> returning (ullong)) x
let supportsAlternateIcons self = msg_send ~self ~cmd:(selector "supportsAlternateIcons") ~typ:(returning (bool))
let supportsMultipleScenes self = msg_send ~self ~cmd:(selector "supportsMultipleScenes") ~typ:(returning (bool))
let suspend self = msg_send ~self ~cmd:(selector "suspend") ~typ:(returning (void))
let suspendReturningToLastApp x self = msg_send ~self ~cmd:(selector "suspendReturningToLastApp:") ~typ:(bool @-> returning (void)) x
let systemIsAnimatingApplicationLifecycleEvent self = msg_send ~self ~cmd:(selector "systemIsAnimatingApplicationLifecycleEvent") ~typ:(returning (bool))
let terminateWithSuccess self = msg_send ~self ~cmd:(selector "terminateWithSuccess") ~typ:(returning (void))
let testPrep x ~options self = msg_send ~self ~cmd:(selector "testPrep:options:") ~typ:(id @-> id @-> returning (void)) x options
let textInputMode self = msg_send ~self ~cmd:(selector "textInputMode") ~typ:(returning (id))
let toggleFontPanel x self = msg_send ~self ~cmd:(selector "toggleFontPanel:") ~typ:(id @-> returning (void)) x
let touchBarController self = msg_send ~self ~cmd:(selector "touchBarController") ~typ:(returning (id))
let unregisterForRemoteNotifications self = msg_send ~self ~cmd:(selector "unregisterForRemoteNotifications") ~typ:(returning (void))
let updateSuspendedSettings x self = msg_send ~self ~cmd:(selector "updateSuspendedSettings:") ~typ:(id @-> returning (void)) x
let userCachesDirectory self = msg_send ~self ~cmd:(selector "userCachesDirectory") ~typ:(returning (id))
let userDefaultsDidChange x self = msg_send ~self ~cmd:(selector "userDefaultsDidChange:") ~typ:(id @-> returning (void)) x
let userHomeDirectory self = msg_send ~self ~cmd:(selector "userHomeDirectory") ~typ:(returning (id))
let userInfoDictionaryForRunLoopMode x ~requester self = msg_send ~self ~cmd:(selector "userInfoDictionaryForRunLoopMode:requester:") ~typ:(id @-> id @-> returning (id)) x requester
let userInterfaceLayoutDirection self = msg_send ~self ~cmd:(selector "userInterfaceLayoutDirection") ~typ:(returning (llong))
let userLibraryDirectory self = msg_send ~self ~cmd:(selector "userLibraryDirectory") ~typ:(returning (id))
let usesBackgroundNetwork self = msg_send ~self ~cmd:(selector "usesBackgroundNetwork") ~typ:(returning (bool))
let validateCommand x self = msg_send ~self ~cmd:(selector "validateCommand:") ~typ:(id @-> returning (void)) x
let vibrateForDuration x self = msg_send ~self ~cmd:(selector "vibrateForDuration:") ~typ:(int @-> returning (void)) x
let volumeChanged x self = msg_send ~self ~cmd:(selector "volumeChanged:") ~typ:(ptr void @-> returning (void)) x
let willDisplayMiniAlert self = msg_send ~self ~cmd:(selector "willDisplayMiniAlert") ~typ:(returning (void))
let windowRotationDuration self = msg_send ~self ~cmd:(selector "windowRotationDuration") ~typ:(returning (double))
let windows self = msg_send ~self ~cmd:(selector "windows") ~typ:(returning (id))
let workspace x ~didReceiveActions self = msg_send ~self ~cmd:(selector "workspace:didReceiveActions:") ~typ:(id @-> id @-> returning (void)) x didReceiveActions
let workspace1 x ~didCreateScene ~withTransitionContext ~completion self = msg_send ~self ~cmd:(selector "workspace:didCreateScene:withTransitionContext:completion:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x didCreateScene withTransitionContext completion
let workspace2 x ~willDestroyScene ~withTransitionContext ~completion self = msg_send ~self ~cmd:(selector "workspace:willDestroyScene:withTransitionContext:completion:") ~typ:(id @-> id @-> id @-> ptr void @-> returning (void)) x willDestroyScene withTransitionContext completion
let workspaceShouldExit x ~withTransitionContext self = msg_send ~self ~cmd:(selector "workspaceShouldExit:withTransitionContext:") ~typ:(id @-> id @-> returning (void)) x withTransitionContext