(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UIScrollView"

let _PDFKitDocumentVisibleRectIncludingContentInsets self = msg_send_stret ~self ~cmd:(selector "PDFKitDocumentVisibleRectIncludingContentInsets") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let accessoryViewAtEdge x self = msg_send ~self ~cmd:(selector "accessoryViewAtEdge:") ~typ:(llong @-> returning (id)) x
let accessoryViews self = msg_send ~self ~cmd:(selector "accessoryViews") ~typ:(returning (id))
let adjustedContentInsetDidChange self = msg_send ~self ~cmd:(selector "adjustedContentInsetDidChange") ~typ:(returning (void))
let akMagnification self = msg_send ~self ~cmd:(selector "akMagnification") ~typ:(returning (double))
let allowsMultipleFingers self = msg_send ~self ~cmd:(selector "allowsMultipleFingers") ~typ:(returning (bool))
let alwaysBounceHorizontal self = msg_send ~self ~cmd:(selector "alwaysBounceHorizontal") ~typ:(returning (bool))
let alwaysBounceVertical self = msg_send ~self ~cmd:(selector "alwaysBounceVertical") ~typ:(returning (bool))
let animator x ~startAnimation self = msg_send ~self ~cmd:(selector "animator:startAnimation:") ~typ:(id @-> id @-> returning (void)) x startAnimation
let animator' x ~stopAnimation ~fraction self = msg_send ~self ~cmd:(selector "animator:stopAnimation:fraction:") ~typ:(id @-> id @-> float @-> returning (void)) x stopAnimation fraction
let automaticallyAdjustsScrollIndicatorInsets self = msg_send ~self ~cmd:(selector "automaticallyAdjustsScrollIndicatorInsets") ~typ:(returning (bool))
let autoscrollContentOffset self = msg_send_stret ~self ~cmd:(selector "autoscrollContentOffset") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let bounces self = msg_send ~self ~cmd:(selector "bounces") ~typ:(returning (bool))
let bouncesHorizontally self = msg_send ~self ~cmd:(selector "bouncesHorizontally") ~typ:(returning (bool))
let bouncesVertically self = msg_send ~self ~cmd:(selector "bouncesVertically") ~typ:(returning (bool))
let bouncesZoom self = msg_send ~self ~cmd:(selector "bouncesZoom") ~typ:(returning (bool))
let canCancelContentTouches self = msg_send ~self ~cmd:(selector "canCancelContentTouches") ~typ:(returning (bool))
let cancelMouseTracking self = msg_send ~self ~cmd:(selector "cancelMouseTracking") ~typ:(returning (bool))
let cancelTouchTracking self = msg_send ~self ~cmd:(selector "cancelTouchTracking") ~typ:(returning (bool))
let contentAreaRectForScrollerImpPair x self = msg_send_stret ~self ~cmd:(selector "contentAreaRectForScrollerImpPair:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let contentFrameForView x self = msg_send_stret ~self ~cmd:(selector "contentFrameForView:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let contentInsetAdjustmentBehavior self = msg_send ~self ~cmd:(selector "contentInsetAdjustmentBehavior") ~typ:(returning (llong))
let contentLayoutGuide self = msg_send ~self ~cmd:(selector "contentLayoutGuide") ~typ:(returning (id))
let contentOffset self = msg_send_stret ~self ~cmd:(selector "contentOffset") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
let contentSize self = msg_send_stret ~self ~cmd:(selector "contentSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let decelerationRate self = msg_send ~self ~cmd:(selector "decelerationRate") ~typ:(returning (double))
let decodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "decodeRestorableStateWithCoder:") ~typ:(id @-> returning (void)) x
let delayed x self = msg_send ~self ~cmd:(selector "delayed:") ~typ:(id @-> returning (void)) x
let delaysContentTouches self = msg_send ~self ~cmd:(selector "delaysContentTouches") ~typ:(returning (bool))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning (id))
let directionalPressGestureRecognizer self = msg_send ~self ~cmd:(selector "directionalPressGestureRecognizer") ~typ:(returning (id))
let encodeRestorableStateWithCoder x self = msg_send ~self ~cmd:(selector "encodeRestorableStateWithCoder:") ~typ:(id @-> returning (void)) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning (void)) x
let flashScrollIndicators self = msg_send ~self ~cmd:(selector "flashScrollIndicators") ~typ:(returning (void))
let frameLayoutGuide self = msg_send ~self ~cmd:(selector "frameLayoutGuide") ~typ:(returning (id))
let gestureRecognizer x ~canPreventGestureRecognizer self = msg_send ~self ~cmd:(selector "gestureRecognizer:canPreventGestureRecognizer:") ~typ:(id @-> id @-> returning (bool)) x canPreventGestureRecognizer
let gestureRecognizer' x ~shouldReceiveTouch self = msg_send ~self ~cmd:(selector "gestureRecognizer:shouldReceiveTouch:") ~typ:(id @-> id @-> returning (bool)) x shouldReceiveTouch
let handlePan x self = msg_send ~self ~cmd:(selector "handlePan:") ~typ:(id @-> returning (void)) x
let handlePinch x self = msg_send ~self ~cmd:(selector "handlePinch:") ~typ:(id @-> returning (void)) x
let hasScrolledContentsUnderTitlebar self = msg_send ~self ~cmd:(selector "hasScrolledContentsUnderTitlebar") ~typ:(returning (bool))
let hitTest x ~withEvent self = msg_send ~self ~cmd:(selector "hitTest:withEvent:") ~typ:(CGPoint.t @-> id @-> returning (id)) x withEvent
let horizontalScrollDecelerationFactor self = msg_send ~self ~cmd:(selector "horizontalScrollDecelerationFactor") ~typ:(returning (double))
let inLiveResizeForScrollerImpPair x self = msg_send ~self ~cmd:(selector "inLiveResizeForScrollerImpPair:") ~typ:(id @-> returning (bool)) x
let indexBarAccessoryView x ~contentOffsetForEntry ~atIndex self = msg_send_stret ~self ~cmd:(selector "indexBarAccessoryView:contentOffsetForEntry:atIndex:") ~typ:(id @-> id @-> llong @-> returning (CGPoint.t)) ~return_type:CGPoint.t x contentOffsetForEntry atIndex
let indexDisplayMode self = msg_send ~self ~cmd:(selector "indexDisplayMode") ~typ:(returning (llong))
let indicatorStyle self = msg_send ~self ~cmd:(selector "indicatorStyle") ~typ:(returning (llong))
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning (id)) x
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning (id)) x
let isAutomaticContentOffsetAdjustmentsAnimated self = msg_send ~self ~cmd:(selector "isAutomaticContentOffsetAdjustmentsAnimated") ~typ:(returning (bool))
let isDecelerating self = msg_send ~self ~cmd:(selector "isDecelerating") ~typ:(returning (bool))
let isDirectionalLockEnabled self = msg_send ~self ~cmd:(selector "isDirectionalLockEnabled") ~typ:(returning (bool))
let isDragging self = msg_send ~self ~cmd:(selector "isDragging") ~typ:(returning (bool))
let isElementAccessibilityExposedToInterfaceBuilder self = msg_send ~self ~cmd:(selector "isElementAccessibilityExposedToInterfaceBuilder") ~typ:(returning (bool))
let isPagingEnabled self = msg_send ~self ~cmd:(selector "isPagingEnabled") ~typ:(returning (bool))
let isProgrammaticScrollEnabled self = msg_send ~self ~cmd:(selector "isProgrammaticScrollEnabled") ~typ:(returning (bool))
let isScrollEnabled self = msg_send ~self ~cmd:(selector "isScrollEnabled") ~typ:(returning (bool))
let isTracking self = msg_send ~self ~cmd:(selector "isTracking") ~typ:(returning (bool))
let isZoomBouncing self = msg_send ~self ~cmd:(selector "isZoomBouncing") ~typ:(returning (bool))
let isZoomEnabled self = msg_send ~self ~cmd:(selector "isZoomEnabled") ~typ:(returning (bool))
let isZooming self = msg_send ~self ~cmd:(selector "isZooming") ~typ:(returning (bool))
let keyboardBottomInsetAdjustmentDelta self = msg_send ~self ~cmd:(selector "keyboardBottomInsetAdjustmentDelta") ~typ:(returning (double))
let keyboardDismissMode self = msg_send ~self ~cmd:(selector "keyboardDismissMode") ~typ:(returning (llong))
let layoutSubviews self = msg_send ~self ~cmd:(selector "layoutSubviews") ~typ:(returning (void))
let maximumZoomScale self = msg_send ~self ~cmd:(selector "maximumZoomScale") ~typ:(returning (double))
let minimumZoomScale self = msg_send ~self ~cmd:(selector "minimumZoomScale") ~typ:(returning (double))
let mouseLocationInContentAreaForScrollerImpPair x self = msg_send_stret ~self ~cmd:(selector "mouseLocationInContentAreaForScrollerImpPair:") ~typ:(id @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let mouseLocationInScrollerForScrollerImp x self = msg_send_stret ~self ~cmd:(selector "mouseLocationInScrollerForScrollerImp:") ~typ:(id @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
let panGestureRecognizer self = msg_send ~self ~cmd:(selector "panGestureRecognizer") ~typ:(returning (id))
let performWhileAnimatingAutomaticContentOffsetAdjustments x self = msg_send ~self ~cmd:(selector "performWhileAnimatingAutomaticContentOffsetAdjustments:") ~typ:(ptr void @-> returning (void)) x
let pinchGestureRecognizer self = msg_send ~self ~cmd:(selector "pinchGestureRecognizer") ~typ:(returning (id))
let preservesCenterDuringRotation self = msg_send ~self ~cmd:(selector "preservesCenterDuringRotation") ~typ:(returning (bool))
let refreshControl self = msg_send ~self ~cmd:(selector "refreshControl") ~typ:(returning (id))
let removeFromSuperview self = msg_send ~self ~cmd:(selector "removeFromSuperview") ~typ:(returning (void))
let scrollRectToVisible x ~animated self = msg_send ~self ~cmd:(selector "scrollRectToVisible:animated:") ~typ:(CGRect.t @-> bool @-> returning (void)) x animated
let scrollTestParameters self = msg_send ~self ~cmd:(selector "scrollTestParameters") ~typ:(returning (id))
let scrollViewFrame self = msg_send_stret ~self ~cmd:(selector "scrollViewFrame") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let scrollerImp x ~animateExpansionTransitionWithDuration self = msg_send ~self ~cmd:(selector "scrollerImp:animateExpansionTransitionWithDuration:") ~typ:(id @-> double @-> returning (void)) x animateExpansionTransitionWithDuration
let scrollerImp1 x ~animateUIStateTransitionWithDuration self = msg_send ~self ~cmd:(selector "scrollerImp:animateUIStateTransitionWithDuration:") ~typ:(id @-> double @-> returning (void)) x animateUIStateTransitionWithDuration
let scrollerImp2 x ~convertRectFromBacking self = msg_send_stret ~self ~cmd:(selector "scrollerImp:convertRectFromBacking:") ~typ:(id @-> CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x convertRectFromBacking
let scrollerImp3 x ~convertRectToBacking self = msg_send_stret ~self ~cmd:(selector "scrollerImp:convertRectToBacking:") ~typ:(id @-> CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x convertRectToBacking
let scrollerImp4 x ~convertRectToLayer self = msg_send_stret ~self ~cmd:(selector "scrollerImp:convertRectToLayer:") ~typ:(id @-> CGRect.t @-> returning (CGRect.t)) ~return_type:CGRect.t x convertRectToLayer
let scrollerImp5 x ~overlayScrollerStateChangedTo self = msg_send ~self ~cmd:(selector "scrollerImp:overlayScrollerStateChangedTo:") ~typ:(id @-> llong @-> returning (void)) x overlayScrollerStateChangedTo
let scrollerImp6 x ~animateKnobAlphaTo ~duration self = msg_send ~self ~cmd:(selector "scrollerImp:animateKnobAlphaTo:duration:") ~typ:(id @-> double @-> double @-> returning (void)) x animateKnobAlphaTo duration
let scrollerImp7 x ~animateTrackAlphaTo ~duration self = msg_send ~self ~cmd:(selector "scrollerImp:animateTrackAlphaTo:duration:") ~typ:(id @-> double @-> double @-> returning (void)) x animateTrackAlphaTo duration
let scrollerImpPair x ~isContentPointVisible self = msg_send ~self ~cmd:(selector "scrollerImpPair:isContentPointVisible:") ~typ:(id @-> CGPoint.t @-> returning (bool)) x isContentPointVisible
let scrollerImpPair1 x ~setContentAreaNeedsDisplayInRect self = msg_send ~self ~cmd:(selector "scrollerImpPair:setContentAreaNeedsDisplayInRect:") ~typ:(id @-> CGRect.t @-> returning (void)) x setContentAreaNeedsDisplayInRect
let scrollerImpPair2 x ~updateScrollerStyleForNewRecommendedScrollerStyle self = msg_send ~self ~cmd:(selector "scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:") ~typ:(id @-> llong @-> returning (void)) x updateScrollerStyleForNewRecommendedScrollerStyle
let scrollerImpPair3 x ~convertContentPoint ~toScrollerImp self = msg_send_stret ~self ~cmd:(selector "scrollerImpPair:convertContentPoint:toScrollerImp:") ~typ:(id @-> CGPoint.t @-> id @-> returning (CGPoint.t)) ~return_type:CGPoint.t x convertContentPoint toScrollerImp
let scrollsToTop self = msg_send ~self ~cmd:(selector "scrollsToTop") ~typ:(returning (bool))
let separatorOffset self = msg_send ~self ~cmd:(selector "separatorOffset") ~typ:(returning (double))
let setAccessoryView x ~atEdge self = msg_send ~self ~cmd:(selector "setAccessoryView:atEdge:") ~typ:(id @-> llong @-> returning (void)) x atEdge
let setAccessoryViews x self = msg_send ~self ~cmd:(selector "setAccessoryViews:") ~typ:(id @-> returning (void)) x
let setAllowsMultipleFingers x self = msg_send ~self ~cmd:(selector "setAllowsMultipleFingers:") ~typ:(bool @-> returning (void)) x
let setAlwaysBounceHorizontal x self = msg_send ~self ~cmd:(selector "setAlwaysBounceHorizontal:") ~typ:(bool @-> returning (void)) x
let setAlwaysBounceVertical x self = msg_send ~self ~cmd:(selector "setAlwaysBounceVertical:") ~typ:(bool @-> returning (void)) x
let setAutomaticallyAdjustsScrollIndicatorInsets x self = msg_send ~self ~cmd:(selector "setAutomaticallyAdjustsScrollIndicatorInsets:") ~typ:(bool @-> returning (void)) x
let setAutoscrollContentOffset x self = msg_send ~self ~cmd:(selector "setAutoscrollContentOffset:") ~typ:(CGPoint.t @-> returning (void)) x
let setBounces x self = msg_send ~self ~cmd:(selector "setBounces:") ~typ:(bool @-> returning (void)) x
let setBouncesHorizontally x self = msg_send ~self ~cmd:(selector "setBouncesHorizontally:") ~typ:(bool @-> returning (void)) x
let setBouncesVertically x self = msg_send ~self ~cmd:(selector "setBouncesVertically:") ~typ:(bool @-> returning (void)) x
let setBouncesZoom x self = msg_send ~self ~cmd:(selector "setBouncesZoom:") ~typ:(bool @-> returning (void)) x
let setBounds x self = msg_send ~self ~cmd:(selector "setBounds:") ~typ:(CGRect.t @-> returning (void)) x
let setCanCancelContentTouches x self = msg_send ~self ~cmd:(selector "setCanCancelContentTouches:") ~typ:(bool @-> returning (void)) x
let setCenter x self = msg_send ~self ~cmd:(selector "setCenter:") ~typ:(CGPoint.t @-> returning (void)) x
let setContentInsetAdjustmentBehavior x self = msg_send ~self ~cmd:(selector "setContentInsetAdjustmentBehavior:") ~typ:(llong @-> returning (void)) x
let setContentOffset x self = msg_send ~self ~cmd:(selector "setContentOffset:") ~typ:(CGPoint.t @-> returning (void)) x
let setContentOffset' x ~animated self = msg_send ~self ~cmd:(selector "setContentOffset:animated:") ~typ:(CGPoint.t @-> bool @-> returning (void)) x animated
let setContentSize x self = msg_send ~self ~cmd:(selector "setContentSize:") ~typ:(CGSize.t @-> returning (void)) x
let setDecelerationRate x self = msg_send ~self ~cmd:(selector "setDecelerationRate:") ~typ:(double @-> returning (void)) x
let setDelaysContentTouches x self = msg_send ~self ~cmd:(selector "setDelaysContentTouches:") ~typ:(bool @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDirectionalLockEnabled x self = msg_send ~self ~cmd:(selector "setDirectionalLockEnabled:") ~typ:(bool @-> returning (void)) x
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning (void)) x
let setHorizontalScrollDecelerationFactor x self = msg_send ~self ~cmd:(selector "setHorizontalScrollDecelerationFactor:") ~typ:(double @-> returning (void)) x
let setIndexDisplayMode x self = msg_send ~self ~cmd:(selector "setIndexDisplayMode:") ~typ:(llong @-> returning (void)) x
let setIndicatorStyle x self = msg_send ~self ~cmd:(selector "setIndicatorStyle:") ~typ:(llong @-> returning (void)) x
let setKeyboardDismissMode x self = msg_send ~self ~cmd:(selector "setKeyboardDismissMode:") ~typ:(llong @-> returning (void)) x
let setMaximumZoomScale x self = msg_send ~self ~cmd:(selector "setMaximumZoomScale:") ~typ:(double @-> returning (void)) x
let setMinimumZoomScale x self = msg_send ~self ~cmd:(selector "setMinimumZoomScale:") ~typ:(double @-> returning (void)) x
let setNeedsLayout self = msg_send ~self ~cmd:(selector "setNeedsLayout") ~typ:(returning (void))
let setPagingEnabled x self = msg_send ~self ~cmd:(selector "setPagingEnabled:") ~typ:(bool @-> returning (void)) x
let setPreservesCenterDuringRotation x self = msg_send ~self ~cmd:(selector "setPreservesCenterDuringRotation:") ~typ:(bool @-> returning (void)) x
let setProgrammaticScrollEnabled x self = msg_send ~self ~cmd:(selector "setProgrammaticScrollEnabled:") ~typ:(bool @-> returning (void)) x
let setRefreshControl x self = msg_send ~self ~cmd:(selector "setRefreshControl:") ~typ:(id @-> returning (void)) x
let setScrollEnabled x self = msg_send ~self ~cmd:(selector "setScrollEnabled:") ~typ:(bool @-> returning (void)) x
let setScrollTestParameters x self = msg_send ~self ~cmd:(selector "setScrollTestParameters:") ~typ:(id @-> returning (void)) x
let setScrollingEnabled x self = msg_send ~self ~cmd:(selector "setScrollingEnabled:") ~typ:(bool @-> returning (void)) x
let setScrollsToTop x self = msg_send ~self ~cmd:(selector "setScrollsToTop:") ~typ:(bool @-> returning (void)) x
let setShowBackgroundShadow x self = msg_send ~self ~cmd:(selector "setShowBackgroundShadow:") ~typ:(bool @-> returning (void)) x
let setShowsHorizontalScrollIndicator x self = msg_send ~self ~cmd:(selector "setShowsHorizontalScrollIndicator:") ~typ:(bool @-> returning (void)) x
let setShowsVerticalScrollIndicator x self = msg_send ~self ~cmd:(selector "setShowsVerticalScrollIndicator:") ~typ:(bool @-> returning (void)) x
let setTracksImmediatelyWhileDecelerating x self = msg_send ~self ~cmd:(selector "setTracksImmediatelyWhileDecelerating:") ~typ:(bool @-> returning (void)) x
let setUpdateInsetBottomDuringKeyboardDismiss x self = msg_send ~self ~cmd:(selector "setUpdateInsetBottomDuringKeyboardDismiss:") ~typ:(bool @-> returning (void)) x
let setUserInteractionEnabled x self = msg_send ~self ~cmd:(selector "setUserInteractionEnabled:") ~typ:(bool @-> returning (void)) x
let setVerticalScrollDecelerationFactor x self = msg_send ~self ~cmd:(selector "setVerticalScrollDecelerationFactor:") ~typ:(double @-> returning (void)) x
let setZoomEnabled x self = msg_send ~self ~cmd:(selector "setZoomEnabled:") ~typ:(bool @-> returning (void)) x
let setZoomScale x self = msg_send ~self ~cmd:(selector "setZoomScale:") ~typ:(double @-> returning (void)) x
let setZoomScale1 x ~animated self = msg_send ~self ~cmd:(selector "setZoomScale:animated:") ~typ:(double @-> bool @-> returning (void)) x animated
let setZoomScale2 x ~withAnchorPoint ~allowRubberbanding ~animated ~duration ~notifyDelegate self = msg_send ~self ~cmd:(selector "setZoomScale:withAnchorPoint:allowRubberbanding:animated:duration:notifyDelegate:") ~typ:(double @-> CGPoint.t @-> bool @-> bool @-> double @-> bool @-> returning (void)) x withAnchorPoint allowRubberbanding animated duration notifyDelegate
let setZoomScale3 x ~withAnchorPoint ~allowRubberbanding ~animated ~duration ~notifyDelegate ~force self = msg_send ~self ~cmd:(selector "setZoomScale:withAnchorPoint:allowRubberbanding:animated:duration:notifyDelegate:force:") ~typ:(double @-> CGPoint.t @-> bool @-> bool @-> double @-> bool @-> bool @-> returning (void)) x withAnchorPoint allowRubberbanding animated duration notifyDelegate force
let showsHorizontalScrollIndicator self = msg_send ~self ~cmd:(selector "showsHorizontalScrollIndicator") ~typ:(returning (bool))
let showsVerticalScrollIndicator self = msg_send ~self ~cmd:(selector "showsVerticalScrollIndicator") ~typ:(returning (bool))
let touchesBegan x ~withEvent self = msg_send ~self ~cmd:(selector "touchesBegan:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let touchesCancelled x ~withEvent self = msg_send ~self ~cmd:(selector "touchesCancelled:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let touchesEnded x ~withEvent self = msg_send ~self ~cmd:(selector "touchesEnded:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let touchesMoved x ~withEvent self = msg_send ~self ~cmd:(selector "touchesMoved:withEvent:") ~typ:(id @-> id @-> returning (void)) x withEvent
let touchesShouldBegin x ~withEvent ~inContentView self = msg_send ~self ~cmd:(selector "touchesShouldBegin:withEvent:inContentView:") ~typ:(id @-> id @-> id @-> returning (bool)) x withEvent inContentView
let touchesShouldCancelInContentView x self = msg_send ~self ~cmd:(selector "touchesShouldCancelInContentView:") ~typ:(id @-> returning (bool)) x
let tracksImmediatelyWhileDecelerating self = msg_send ~self ~cmd:(selector "tracksImmediatelyWhileDecelerating") ~typ:(returning (bool))
let traitCollectionDidChange x self = msg_send ~self ~cmd:(selector "traitCollectionDidChange:") ~typ:(id @-> returning (void)) x
let traitCollectionForScrollerImp x self = msg_send ~self ~cmd:(selector "traitCollectionForScrollerImp:") ~typ:(id @-> returning (id)) x
let updateInsetBottomDuringKeyboardDismiss self = msg_send ~self ~cmd:(selector "updateInsetBottomDuringKeyboardDismiss") ~typ:(returning (bool))
let verticalScrollDecelerationFactor self = msg_send ~self ~cmd:(selector "verticalScrollDecelerationFactor") ~typ:(returning (double))
let visibleBounds self = msg_send_stret ~self ~cmd:(selector "visibleBounds") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let visibleSize self = msg_send_stret ~self ~cmd:(selector "visibleSize") ~typ:(returning (CGSize.t)) ~return_type:CGSize.t
let willAnimateRotationToInterfaceOrientation x self = msg_send ~self ~cmd:(selector "willAnimateRotationToInterfaceOrientation:") ~typ:(id @-> returning (void)) x
let willRotateToInterfaceOrientation x self = msg_send ~self ~cmd:(selector "willRotateToInterfaceOrientation:") ~typ:(id @-> returning (void)) x
let zoomScale self = msg_send ~self ~cmd:(selector "zoomScale") ~typ:(returning (double))
let zoomToRect x ~animated self = msg_send ~self ~cmd:(selector "zoomToRect:animated:") ~typ:(CGRect.t @-> bool @-> returning (void)) x animated