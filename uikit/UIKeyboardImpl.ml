(* auto-generated, do not modify *)

open Runtime
open Objc

[@@@ocaml.warning "-33"]
open Foundation

let _class_ = get_class "UIKeyboardImpl"

module C = struct
  let activeInstance self = msg_send ~self ~cmd:(selector "activeInstance") ~typ:(returning (id))
  let additionalInstanceHeight self = msg_send ~self ~cmd:(selector "additionalInstanceHeight") ~typ:(returning (double))
  let additionalInstanceHeightForInterfaceOrientation x self = msg_send ~self ~cmd:(selector "additionalInstanceHeightForInterfaceOrientation:") ~typ:(llong @-> returning (double)) (LLong.of_int x)
  let additionalInstanceHeightForInterfaceOrientation' x ~hasInputView self = msg_send ~self ~cmd:(selector "additionalInstanceHeightForInterfaceOrientation:hasInputView:") ~typ:(llong @-> bool @-> returning (double)) (LLong.of_int x) hasInputView
  let applicationDidBecomeActive x self = msg_send ~self ~cmd:(selector "applicationDidBecomeActive:") ~typ:(id @-> returning (void)) x
  let applicationDidEnterBackground x self = msg_send ~self ~cmd:(selector "applicationDidEnterBackground:") ~typ:(id @-> returning (void)) x
  let applicationDidReceiveMemoryWarning x self = msg_send ~self ~cmd:(selector "applicationDidReceiveMemoryWarning:") ~typ:(id @-> returning (void)) x
  let applicationWillEnterForeground x self = msg_send ~self ~cmd:(selector "applicationWillEnterForeground:") ~typ:(id @-> returning (void)) x
  let applicationWillResignActive x self = msg_send ~self ~cmd:(selector "applicationWillResignActive:") ~typ:(id @-> returning (void)) x
  let applicationWillSuspend x self = msg_send ~self ~cmd:(selector "applicationWillSuspend:") ~typ:(id @-> returning (void)) x
  let defaultSizeForInterfaceOrientation x self = msg_send_stret ~self ~cmd:(selector "defaultSizeForInterfaceOrientation:") ~typ:(llong @-> returning (CGSize.t)) ~return_type:CGSize.t (LLong.of_int x)
  let defaultUndockedOffsetForFloating x self = msg_send_stret ~self ~cmd:(selector "defaultUndockedOffsetForFloating:") ~typ:(bool @-> returning (CGPoint.t)) ~return_type:CGPoint.t x
  let floatingHeight self = msg_send ~self ~cmd:(selector "floatingHeight") ~typ:(returning (double))
  let floatingIdiom self = msg_send ~self ~cmd:(selector "floatingIdiom") ~typ:(returning (llong))
  let floatingNormalizedPersistentOffset self = msg_send_stret ~self ~cmd:(selector "floatingNormalizedPersistentOffset") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
  let floatingPersistentOffset self = msg_send_stret ~self ~cmd:(selector "floatingPersistentOffset") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
  let floatingScreenWidthToEmulate self = msg_send ~self ~cmd:(selector "floatingScreenWidthToEmulate") ~typ:(returning (double))
  let floatingWidth self = msg_send ~self ~cmd:(selector "floatingWidth") ~typ:(returning (double))
  let isActivatingForeground self = msg_send ~self ~cmd:(selector "isActivatingForeground") ~typ:(returning (bool))
  let isFloating self = msg_send ~self ~cmd:(selector "isFloating") ~typ:(returning (bool))
  let isFloatingForced self = msg_send ~self ~cmd:(selector "isFloatingForced") ~typ:(returning (bool))
  let isHardwareCommandKeyBeingHeld self = msg_send ~self ~cmd:(selector "isHardwareCommandKeyBeingHeld") ~typ:(returning (bool))
  let isHardwareShiftKeyBeingHeld self = msg_send ~self ~cmd:(selector "isHardwareShiftKeyBeingHeld") ~typ:(returning (bool))
  let isSplit self = msg_send ~self ~cmd:(selector "isSplit") ~typ:(returning (bool))
  let keyboardOrientation x ~isEquivalentToOrientation self = msg_send ~self ~cmd:(selector "keyboardOrientation:isEquivalentToOrientation:") ~typ:(llong @-> llong @-> returning (bool)) (LLong.of_int x) (LLong.of_int isEquivalentToOrientation)
  let keyboardScreen self = msg_send ~self ~cmd:(selector "keyboardScreen") ~typ:(returning (id))
  let keyboardSizeForInterfaceOrientation x self = msg_send_stret ~self ~cmd:(selector "keyboardSizeForInterfaceOrientation:") ~typ:(llong @-> returning (CGSize.t)) ~return_type:CGSize.t (LLong.of_int x)
  let keyboardWidthForScreen x ~withOrientation self = msg_send ~self ~cmd:(selector "keyboardWidthForScreen:withOrientation:") ~typ:(id @-> llong @-> returning (double)) x (LLong.of_int withOrientation)
  let keyboardWindow self = msg_send ~self ~cmd:(selector "keyboardWindow") ~typ:(returning (id))
  let layoutClassForCurrentInputMode self = msg_send ~self ~cmd:(selector "layoutClassForCurrentInputMode") ~typ:(returning (_Class))
  let layoutClassForInputMode x ~keyboardType ~screenTraits self = msg_send ~self ~cmd:(selector "layoutClassForInputMode:keyboardType:screenTraits:") ~typ:(id @-> llong @-> id @-> returning (_Class)) x (LLong.of_int keyboardType) screenTraits
  let normalizedInputModesFromPreference self = msg_send ~self ~cmd:(selector "normalizedInputModesFromPreference") ~typ:(returning (id))
  let normalizedPersistentOffset self = msg_send_stret ~self ~cmd:(selector "normalizedPersistentOffset") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
  let normalizedPersistentOffsetIgnoringState self = msg_send_stret ~self ~cmd:(selector "normalizedPersistentOffsetIgnoringState") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
  let overrideNativeScreen self = msg_send ~self ~cmd:(selector "overrideNativeScreen") ~typ:(returning (bool))
  let performWithoutFloatingLock x self = msg_send ~self ~cmd:(selector "performWithoutFloatingLock:") ~typ:(ptr void @-> returning (void)) x
  let persistentOffset self = msg_send_stret ~self ~cmd:(selector "persistentOffset") ~typ:(returning (CGPoint.t)) ~return_type:CGPoint.t
  let persistentSplitProgress self = msg_send ~self ~cmd:(selector "persistentSplitProgress") ~typ:(returning (double))
  let purgeImageCache self = msg_send ~self ~cmd:(selector "purgeImageCache") ~typ:(returning (void))
  let refreshRivenStateWithTraits x ~isKeyboard self = msg_send ~self ~cmd:(selector "refreshRivenStateWithTraits:isKeyboard:") ~typ:(id @-> bool @-> returning (void)) x isKeyboard
  let releaseSharedInstance self = msg_send ~self ~cmd:(selector "releaseSharedInstance") ~typ:(returning (void))
  let rivenInstalled self = msg_send ~self ~cmd:(selector "rivenInstalled") ~typ:(returning (bool))
  let rivenPreference self = msg_send ~self ~cmd:(selector "rivenPreference") ~typ:(returning (bool))
  let rivenShouldUndock self = msg_send ~self ~cmd:(selector "rivenShouldUndock") ~typ:(returning (bool))
  let rivenTranslationPreference self = msg_send ~self ~cmd:(selector "rivenTranslationPreference") ~typ:(returning (bool))
  let sendPerformanceNotification x self = msg_send ~self ~cmd:(selector "sendPerformanceNotification:") ~typ:(id @-> returning (void)) x
  let sendPerformanceNotification' x ~userInfo self = msg_send ~self ~cmd:(selector "sendPerformanceNotification:userInfo:") ~typ:(id @-> id @-> returning (void)) x userInfo
  let setFloating x self = msg_send ~self ~cmd:(selector "setFloating:") ~typ:(bool @-> returning (void)) x
  let setFloating1 x ~positionedAtDefaultOffsetAnimated self = msg_send ~self ~cmd:(selector "setFloating:positionedAtDefaultOffsetAnimated:") ~typ:(bool @-> bool @-> returning (void)) x positionedAtDefaultOffsetAnimated
  let setFloating2 x ~positionedAtOffset ~animated self = msg_send ~self ~cmd:(selector "setFloating:positionedAtOffset:animated:") ~typ:(bool @-> CGPoint.t @-> bool @-> returning (void)) x positionedAtOffset animated
  let setFloatingPersistentOffset x self = msg_send ~self ~cmd:(selector "setFloatingPersistentOffset:") ~typ:(CGPoint.t @-> returning (void)) x
  let setParentTestForProfiling x self = msg_send ~self ~cmd:(selector "setParentTestForProfiling:") ~typ:(id @-> returning (void)) x
  let setPersistentOffset x self = msg_send ~self ~cmd:(selector "setPersistentOffset:") ~typ:(CGPoint.t @-> returning (void)) x
  let setPersistentSplitProgress x self = msg_send ~self ~cmd:(selector "setPersistentSplitProgress:") ~typ:(double @-> returning (void)) x
  let sharedInstance self = msg_send ~self ~cmd:(selector "sharedInstance") ~typ:(returning (id))
  let sharedInstanceForCustomInputView x self = msg_send ~self ~cmd:(selector "sharedInstanceForCustomInputView:") ~typ:(bool @-> returning (id)) x
  let shouldMergeAssistantBarWithKeyboardLayout self = msg_send ~self ~cmd:(selector "shouldMergeAssistantBarWithKeyboardLayout") ~typ:(returning (bool))
  let showsGlobeAndDictationKeysExternally self = msg_send ~self ~cmd:(selector "showsGlobeAndDictationKeysExternally") ~typ:(returning (bool))
  let sizeForInterfaceOrientation x self = msg_send_stret ~self ~cmd:(selector "sizeForInterfaceOrientation:") ~typ:(llong @-> returning (CGSize.t)) ~return_type:CGSize.t (LLong.of_int x)
  let sizeForInterfaceOrientation' x ~ignoreInputView self = msg_send_stret ~self ~cmd:(selector "sizeForInterfaceOrientation:ignoreInputView:") ~typ:(llong @-> bool @-> returning (CGSize.t)) ~return_type:CGSize.t (LLong.of_int x) ignoreInputView
  let smartInsertDeleteIsEnabled self = msg_send ~self ~cmd:(selector "smartInsertDeleteIsEnabled") ~typ:(returning (bool))
  let splitProgress self = msg_send ~self ~cmd:(selector "splitProgress") ~typ:(returning (double))
  let supportsFloating self = msg_send ~self ~cmd:(selector "supportsFloating") ~typ:(returning (bool))
  let supportsSplit self = msg_send ~self ~cmd:(selector "supportsSplit") ~typ:(returning (bool))
  let suppressSetPersistentOffset x self = msg_send ~self ~cmd:(selector "suppressSetPersistentOffset:") ~typ:(bool @-> returning (void)) x
  let topMarginForInterfaceOrientation x self = msg_send ~self ~cmd:(selector "topMarginForInterfaceOrientation:") ~typ:(llong @-> returning (double)) (LLong.of_int x)
  let uniqueNumberPadInputModesFromInputModes x ~forKeyboardType self = msg_send ~self ~cmd:(selector "uniqueNumberPadInputModesFromInputModes:forKeyboardType:") ~typ:(id @-> llong @-> returning (id)) x (LLong.of_int forKeyboardType)
end

let _UILanguagePreference self = msg_send ~self ~cmd:(selector "UILanguagePreference") ~typ:(returning (id))
let acceptAutocorrection self = msg_send ~self ~cmd:(selector "acceptAutocorrection") ~typ:(returning (void))
let acceptAutocorrection' x ~executionContextPassingTIKeyboardCandidate self = msg_send ~self ~cmd:(selector "acceptAutocorrection:executionContextPassingTIKeyboardCandidate:") ~typ:(id @-> id @-> returning (void)) x executionContextPassingTIKeyboardCandidate
let acceptAutocorrectionAndEndComposition self = msg_send ~self ~cmd:(selector "acceptAutocorrectionAndEndComposition") ~typ:(returning (void))
let acceptAutocorrectionForWordTerminator x self = msg_send ~self ~cmd:(selector "acceptAutocorrectionForWordTerminator:") ~typ:(id @-> returning (id)) x
let acceptAutocorrectionForWordTerminator' x ~executionContextPassingTIKeyboardCandidate self = msg_send ~self ~cmd:(selector "acceptAutocorrectionForWordTerminator:executionContextPassingTIKeyboardCandidate:") ~typ:(id @-> id @-> returning (void)) x executionContextPassingTIKeyboardCandidate
let acceptCandidate x self = msg_send ~self ~cmd:(selector "acceptCandidate:") ~typ:(id @-> returning (void)) x
let acceptCandidate1 x ~forInput self = msg_send ~self ~cmd:(selector "acceptCandidate:forInput:") ~typ:(id @-> id @-> returning (void)) x forInput
let acceptCandidate2 x ~forInput ~executionContext self = msg_send ~self ~cmd:(selector "acceptCandidate:forInput:executionContext:") ~typ:(id @-> id @-> id @-> returning (void)) x forInput executionContext
let acceptCurrentCandidate self = msg_send ~self ~cmd:(selector "acceptCurrentCandidate") ~typ:(returning (id))
let acceptCurrentCandidateForInput x self = msg_send ~self ~cmd:(selector "acceptCurrentCandidateForInput:") ~typ:(id @-> returning (id)) x
let acceptCurrentCandidateIfSelected self = msg_send ~self ~cmd:(selector "acceptCurrentCandidateIfSelected") ~typ:(returning (void))
let acceptCurrentCandidateIfSelectedWithExecutionContext x self = msg_send ~self ~cmd:(selector "acceptCurrentCandidateIfSelectedWithExecutionContext:") ~typ:(id @-> returning (void)) x
let acceptFirstCandidate self = msg_send ~self ~cmd:(selector "acceptFirstCandidate") ~typ:(returning (void))
let acceptHandwritingCandidate self = msg_send ~self ~cmd:(selector "acceptHandwritingCandidate") ~typ:(returning (void))
let acceptInlineCandidate self = msg_send ~self ~cmd:(selector "acceptInlineCandidate") ~typ:(returning (id))
let acceptInlineCandidateForInput x self = msg_send ~self ~cmd:(selector "acceptInlineCandidateForInput:") ~typ:(id @-> returning (id)) x
let acceptInputString x self = msg_send ~self ~cmd:(selector "acceptInputString:") ~typ:(id @-> returning (bool)) x
let acceptPredictiveInput x self = msg_send ~self ~cmd:(selector "acceptPredictiveInput:") ~typ:(id @-> returning (void)) x
let acceptPredictiveInput' x ~executionContext self = msg_send ~self ~cmd:(selector "acceptPredictiveInput:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let acceptRecentInput x self = msg_send ~self ~cmd:(selector "acceptRecentInput:") ~typ:(id @-> returning (void)) x
let acceptWord x ~firstDelete self = msg_send ~self ~cmd:(selector "acceptWord:firstDelete:") ~typ:(id @-> ullong @-> returning (bool)) x (ULLong.of_int firstDelete)
let acceptWord' x ~firstDelete ~forInput self = msg_send ~self ~cmd:(selector "acceptWord:firstDelete:forInput:") ~typ:(id @-> ullong @-> id @-> returning (bool)) x (ULLong.of_int firstDelete) forInput
let accessibilityUsesExtendedKeyboardPredictionsEnabled self = msg_send ~self ~cmd:(selector "accessibilityUsesExtendedKeyboardPredictionsEnabled") ~typ:(returning (bool))
let activeLayout self = msg_send ~self ~cmd:(selector "activeLayout") ~typ:(returning (id))
let addInputEvent x ~executionContext self = msg_send ~self ~cmd:(selector "addInputEvent:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let addInputObject x self = msg_send ~self ~cmd:(selector "addInputObject:") ~typ:(id @-> returning (void)) x
let addInputObject' x ~executionContext self = msg_send ~self ~cmd:(selector "addInputObject:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let addInputString x self = msg_send ~self ~cmd:(selector "addInputString:") ~typ:(id @-> returning (void)) x
let addInputString1 x ~fromVariantKey self = msg_send ~self ~cmd:(selector "addInputString:fromVariantKey:") ~typ:(id @-> bool @-> returning (void)) x fromVariantKey
let addInputString2 x ~withFlags self = msg_send ~self ~cmd:(selector "addInputString:withFlags:") ~typ:(id @-> ullong @-> returning (void)) x (ULLong.of_int withFlags)
let addInputString3 x ~withFlags ~executionContext self = msg_send ~self ~cmd:(selector "addInputString:withFlags:executionContext:") ~typ:(id @-> ullong @-> id @-> returning (void)) x (ULLong.of_int withFlags) executionContext
let addInputString4 x ~withFlags ~withInputManagerHint self = msg_send ~self ~cmd:(selector "addInputString:withFlags:withInputManagerHint:") ~typ:(id @-> ullong @-> id @-> returning (void)) x (ULLong.of_int withFlags) withInputManagerHint
let addInputString5 x ~withFlags ~withInputManagerHint ~executionContext self = msg_send ~self ~cmd:(selector "addInputString:withFlags:withInputManagerHint:executionContext:") ~typ:(id @-> ullong @-> id @-> id @-> returning (void)) x (ULLong.of_int withFlags) withInputManagerHint executionContext
let addSupplementalLexicon x self = msg_send ~self ~cmd:(selector "addSupplementalLexicon:") ~typ:(id @-> returning (void)) x
let addWordTerminator x ~afterSpace ~afterAcceptingCandidate ~elapsedTime ~executionContext self = msg_send ~self ~cmd:(selector "addWordTerminator:afterSpace:afterAcceptingCandidate:elapsedTime:executionContext:") ~typ:(id @-> bool @-> id @-> double @-> id @-> returning (void)) x afterSpace afterAcceptingCandidate elapsedTime executionContext
let adjustAutoDeleteTimerForForce x self = msg_send ~self ~cmd:(selector "adjustAutoDeleteTimerForForce:") ~typ:(double @-> returning (void)) x
let adjustCapsLockDelayOverride self = msg_send ~self ~cmd:(selector "adjustCapsLockDelayOverride") ~typ:(returning (void))
let adjustPhraseBoundaryInForwardDirection x ~granularity ~executionContext self = msg_send ~self ~cmd:(selector "adjustPhraseBoundaryInForwardDirection:granularity:executionContext:") ~typ:(bool @-> int @-> id @-> returning (void)) x granularity executionContext
let adjustSegmentSize x self = msg_send ~self ~cmd:(selector "adjustSegmentSize:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let allowsReachableKeyboard self = msg_send ~self ~cmd:(selector "allowsReachableKeyboard") ~typ:(returning (bool))
let alternativePredictions self = msg_send ~self ~cmd:(selector "alternativePredictions") ~typ:(returning (id))
let animateAutocorrectionToRect x ~fromRect self = msg_send ~self ~cmd:(selector "animateAutocorrectionToRect:fromRect:") ~typ:(CGRect.t @-> CGRect.t @-> returning (void)) x fromRect
let animateAutocorrectionToText x ~fromRect self = msg_send ~self ~cmd:(selector "animateAutocorrectionToText:fromRect:") ~typ:(id @-> CGRect.t @-> returning (void)) x fromRect
let animateUpdateBars self = msg_send ~self ~cmd:(selector "animateUpdateBars") ~typ:(returning (bool))
let applicationResumed x self = msg_send ~self ~cmd:(selector "applicationResumed:") ~typ:(id @-> returning (void)) x
let applicationResumedEventsOnly x self = msg_send ~self ~cmd:(selector "applicationResumedEventsOnly:") ~typ:(id @-> returning (void)) x
let applicationSuspendedEventsOnly x self = msg_send ~self ~cmd:(selector "applicationSuspendedEventsOnly:") ~typ:(id @-> returning (void)) x
let applyAutocorrection x self = msg_send ~self ~cmd:(selector "applyAutocorrection:") ~typ:(id @-> returning (bool)) x
let arrowKeyHistory self = msg_send ~self ~cmd:(selector "arrowKeyHistory") ~typ:(returning (id))
let assertIntermediateText x self = msg_send ~self ~cmd:(selector "assertIntermediateText:") ~typ:(id @-> returning (void)) x
let assertTextForRemoteDocument x ~withSelectionRange ~updatingSelection self = msg_send ~self ~cmd:(selector "assertTextForRemoteDocument:withSelectionRange:updatingSelection:") ~typ:(id @-> NSRange.t @-> bool @-> returning (void)) x withSelectionRange updatingSelection
let asynchronousInputDelegate self = msg_send ~self ~cmd:(selector "asynchronousInputDelegate") ~typ:(returning (id))
let attributedText self = msg_send ~self ~cmd:(selector "attributedText") ~typ:(returning (id))
let autocapitalizationPreference self = msg_send ~self ~cmd:(selector "autocapitalizationPreference") ~typ:(returning (bool))
let autocorrectBubbleContainer self = msg_send ~self ~cmd:(selector "autocorrectBubbleContainer") ~typ:(returning (id))
let autocorrectPrompt self = msg_send ~self ~cmd:(selector "autocorrectPrompt") ~typ:(returning (id))
let autocorrectPromptRectsForInput x self = msg_send ~self ~cmd:(selector "autocorrectPromptRectsForInput:") ~typ:(id @-> returning (id)) x
let autocorrectPromptRectsFromFirstDelegateRect x ~lastDelegateRect self = msg_send ~self ~cmd:(selector "autocorrectPromptRectsFromFirstDelegateRect:lastDelegateRect:") ~typ:(CGRect.t @-> CGRect.t @-> returning (id)) x lastDelegateRect
let autocorrectPromptTask self = msg_send ~self ~cmd:(selector "autocorrectPromptTask") ~typ:(returning (id))
let autocorrectSpellingEnabled self = msg_send ~self ~cmd:(selector "autocorrectSpellingEnabled") ~typ:(returning (bool))
let autocorrectionAnimationDidStopWithAutocorrectionView x self = msg_send ~self ~cmd:(selector "autocorrectionAnimationDidStopWithAutocorrectionView:") ~typ:(id @-> returning (void)) x
let autocorrectionController self = msg_send ~self ~cmd:(selector "autocorrectionController") ~typ:(returning (id))
let autocorrectionPreference self = msg_send ~self ~cmd:(selector "autocorrectionPreference") ~typ:(returning (bool))
let autocorrectionPreferenceForTraits self = msg_send ~self ~cmd:(selector "autocorrectionPreferenceForTraits") ~typ:(returning (ullong))
let autocorrectionRecordForWord x self = msg_send ~self ~cmd:(selector "autocorrectionRecordForWord:") ~typ:(id @-> returning (id)) x
let autocorrectionToAcceptBeforeProgressiveCandidates self = msg_send ~self ~cmd:(selector "autocorrectionToAcceptBeforeProgressiveCandidates") ~typ:(returning (id))
let autofillController self = msg_send ~self ~cmd:(selector "autofillController") ~typ:(returning (id))
let automaticMinimizationEnabled self = msg_send ~self ~cmd:(selector "automaticMinimizationEnabled") ~typ:(returning (bool))
let beginFloatingTransitionFromPanGestureRecognizer x self = msg_send ~self ~cmd:(selector "beginFloatingTransitionFromPanGestureRecognizer:") ~typ:(id @-> returning (void)) x
let biasedKeyboardWidthRatio self = msg_send ~self ~cmd:(selector "biasedKeyboardWidthRatio") ~typ:(returning (double))
let callChanged self = msg_send ~self ~cmd:(selector "callChanged") ~typ:(returning (void))
let callLayoutIgnoresShiftState self = msg_send ~self ~cmd:(selector "callLayoutIgnoresShiftState") ~typ:(returning (bool))
let callLayoutIsGeometricShiftOrMoreKeyForTouch x self = msg_send ~self ~cmd:(selector "callLayoutIsGeometricShiftOrMoreKeyForTouch:") ~typ:(id @-> returning (bool)) x
let callLayoutIsShiftKeyBeingHeld self = msg_send ~self ~cmd:(selector "callLayoutIsShiftKeyBeingHeld") ~typ:(returning (bool))
let callLayoutIsShiftKeyPlaneChooser self = msg_send ~self ~cmd:(selector "callLayoutIsShiftKeyPlaneChooser") ~typ:(returning (bool))
let callLayoutLongPressAction self = msg_send ~self ~cmd:(selector "callLayoutLongPressAction") ~typ:(returning (void))
let callLayoutSetAutoshift x self = msg_send ~self ~cmd:(selector "callLayoutSetAutoshift:") ~typ:(bool @-> returning (void)) x
let callLayoutSetShift x self = msg_send ~self ~cmd:(selector "callLayoutSetShift:") ~typ:(bool @-> returning (void)) x
let callLayoutUpdateAllLocalizedKeys self = msg_send ~self ~cmd:(selector "callLayoutUpdateAllLocalizedKeys") ~typ:(returning (void))
let callLayoutUpdateLocalizedKeys self = msg_send ~self ~cmd:(selector "callLayoutUpdateLocalizedKeys") ~typ:(returning (void))
let callLayoutUpdateRecentInputs self = msg_send ~self ~cmd:(selector "callLayoutUpdateRecentInputs") ~typ:(returning (void))
let callLayoutUpdateReturnKey self = msg_send ~self ~cmd:(selector "callLayoutUpdateReturnKey") ~typ:(returning (void))
let callLayoutUsesAutoShift self = msg_send ~self ~cmd:(selector "callLayoutUsesAutoShift") ~typ:(returning (bool))
let callShouldDeleteWithWordCountForRapidDelete x ~characterCountForRapidDelete self = msg_send ~self ~cmd:(selector "callShouldDeleteWithWordCountForRapidDelete:characterCountForRapidDelete:") ~typ:(int @-> int @-> returning (bool)) x characterCountForRapidDelete
let callShouldInsertText x self = msg_send ~self ~cmd:(selector "callShouldInsertText:") ~typ:(id @-> returning (bool)) x
let callShouldInsertText' x ~onDelegate self = msg_send ~self ~cmd:(selector "callShouldInsertText:onDelegate:") ~typ:(id @-> id @-> returning (bool)) x onDelegate
let canHandleDelete self = msg_send ~self ~cmd:(selector "canHandleDelete") ~typ:(returning (bool))
let canHandleEvent x self = msg_send ~self ~cmd:(selector "canHandleEvent:") ~typ:(id @-> returning (bool)) x
let canHandleKeyHitTest self = msg_send ~self ~cmd:(selector "canHandleKeyHitTest") ~typ:(returning (bool))
let canPasteImage self = msg_send ~self ~cmd:(selector "canPasteImage") ~typ:(returning (bool))
let canPresentEmojiPopover self = msg_send ~self ~cmd:(selector "canPresentEmojiPopover") ~typ:(returning (bool))
let canPresentOrDismissEmojiPopover self = msg_send ~self ~cmd:(selector "canPresentOrDismissEmojiPopover") ~typ:(returning (bool))
let canShowAppConnections self = msg_send ~self ~cmd:(selector "canShowAppConnections") ~typ:(returning (bool))
let canShowPredictionBar self = msg_send ~self ~cmd:(selector "canShowPredictionBar") ~typ:(returning (bool))
let canUseCandidateBarAsSupplementToInlineView self = msg_send ~self ~cmd:(selector "canUseCandidateBarAsSupplementToInlineView") ~typ:(returning (bool))
let cancelAllKeyEvents self = msg_send ~self ~cmd:(selector "cancelAllKeyEvents") ~typ:(returning (void))
let cancelCandidateRequests self = msg_send ~self ~cmd:(selector "cancelCandidateRequests") ~typ:(returning (void))
let cancelSplitTransition self = msg_send ~self ~cmd:(selector "cancelSplitTransition") ~typ:(returning (void))
let candidateBarDidExtendWithGesture self = msg_send ~self ~cmd:(selector "candidateBarDidExtendWithGesture") ~typ:(returning (void))
let candidateController self = msg_send ~self ~cmd:(selector "candidateController") ~typ:(returning (id))
let candidateList self = msg_send ~self ~cmd:(selector "candidateList") ~typ:(returning (id))
let candidateListAcceptCandidate x self = msg_send ~self ~cmd:(selector "candidateListAcceptCandidate:") ~typ:(id @-> returning (void)) x
let candidateListInvalidateSelection x self = msg_send ~self ~cmd:(selector "candidateListInvalidateSelection:") ~typ:(id @-> returning (void)) x
let candidateListSelectionDidChange x self = msg_send ~self ~cmd:(selector "candidateListSelectionDidChange:") ~typ:(id @-> returning (void)) x
let candidateSelectionPredictionForTraits self = msg_send ~self ~cmd:(selector "candidateSelectionPredictionForTraits") ~typ:(returning (bool))
let candidateViewOffset self = msg_send ~self ~cmd:(selector "candidateViewOffset") ~typ:(returning (llong))
let capsLockKeyHasLanguageSwitchLabel self = msg_send ~self ~cmd:(selector "capsLockKeyHasLanguageSwitchLabel") ~typ:(returning (bool))
let caretBlinks self = msg_send ~self ~cmd:(selector "caretBlinks") ~typ:(returning (bool))
let caretVisible self = msg_send ~self ~cmd:(selector "caretVisible") ~typ:(returning (bool))
let centerFilled self = msg_send ~self ~cmd:(selector "centerFilled") ~typ:(returning (bool))
let changeCount self = msg_send ~self ~cmd:(selector "changeCount") ~typ:(returning (int))
let changeNotificationDisabled self = msg_send ~self ~cmd:(selector "changeNotificationDisabled") ~typ:(returning (bool))
let changedDelegate self = msg_send ~self ~cmd:(selector "changedDelegate") ~typ:(returning (id))
let characterRectsForCharacterRange self = msg_send ~self ~cmd:(selector "characterRectsForCharacterRange") ~typ:(returning (id))
let checkSpellingPreference self = msg_send ~self ~cmd:(selector "checkSpellingPreference") ~typ:(returning (bool))
let checkSpellingPreferenceForTraits self = msg_send ~self ~cmd:(selector "checkSpellingPreferenceForTraits") ~typ:(returning (bool))
let cleanUpBeforeInputModeSwitch self = msg_send ~self ~cmd:(selector "cleanUpBeforeInputModeSwitch") ~typ:(returning (void))
let cleanupKeyboardPopover self = msg_send ~self ~cmd:(selector "cleanupKeyboardPopover") ~typ:(returning (void))
let clearAnimations self = msg_send ~self ~cmd:(selector "clearAnimations") ~typ:(returning (void))
let clearAutoDeleteTimer self = msg_send ~self ~cmd:(selector "clearAutoDeleteTimer") ~typ:(returning (void))
let clearAutocorrectPromptTimer self = msg_send ~self ~cmd:(selector "clearAutocorrectPromptTimer") ~typ:(returning (void))
let clearAutofillGroup self = msg_send ~self ~cmd:(selector "clearAutofillGroup") ~typ:(returning (void))
let clearCapsLockDelayOverrideTimer self = msg_send ~self ~cmd:(selector "clearCapsLockDelayOverrideTimer") ~typ:(returning (void))
let clearChangeTimeAndCount self = msg_send ~self ~cmd:(selector "clearChangeTimeAndCount") ~typ:(returning (void))
let clearDelayDeleteTimer self = msg_send ~self ~cmd:(selector "clearDelayDeleteTimer") ~typ:(returning (void))
let clearDelegate self = msg_send ~self ~cmd:(selector "clearDelegate") ~typ:(returning (void))
let clearDetachHardwareKeyboardAction self = msg_send ~self ~cmd:(selector "clearDetachHardwareKeyboardAction") ~typ:(returning (void))
let clearExcessKeyboardMemory self = msg_send ~self ~cmd:(selector "clearExcessKeyboardMemory") ~typ:(returning (void))
let clearForwardingInputDelegateAndResign x self = msg_send ~self ~cmd:(selector "clearForwardingInputDelegateAndResign:") ~typ:(bool @-> returning (void)) x
let clearInput self = msg_send ~self ~cmd:(selector "clearInput") ~typ:(returning (void))
let clearInputForMarkedText self = msg_send ~self ~cmd:(selector "clearInputForMarkedText") ~typ:(returning (void))
let clearInputWithCandidatesCleared x self = msg_send ~self ~cmd:(selector "clearInputWithCandidatesCleared:") ~typ:(bool @-> returning (void)) x
let clearLanguageIndicator self = msg_send ~self ~cmd:(selector "clearLanguageIndicator") ~typ:(returning (void))
let clearLayouts self = msg_send ~self ~cmd:(selector "clearLayouts") ~typ:(returning (void))
let clearLongPressTimer self = msg_send ~self ~cmd:(selector "clearLongPressTimer") ~typ:(returning (void))
let clearRecentInput self = msg_send ~self ~cmd:(selector "clearRecentInput") ~typ:(returning (void))
let clearSelection self = msg_send ~self ~cmd:(selector "clearSelection") ~typ:(returning (void))
let clearShiftState self = msg_send ~self ~cmd:(selector "clearShiftState") ~typ:(returning (void))
let clearTextAlternativesRange self = msg_send ~self ~cmd:(selector "clearTextAlternativesRange") ~typ:(returning (void))
let clearTimers self = msg_send ~self ~cmd:(selector "clearTimers") ~typ:(returning (void))
let clearTransientState self = msg_send ~self ~cmd:(selector "clearTransientState") ~typ:(returning (void))
let clearUpdateLastUsedInputModeAction self = msg_send ~self ~cmd:(selector "clearUpdateLastUsedInputModeAction") ~typ:(returning (void))
let collapseSelection self = msg_send ~self ~cmd:(selector "collapseSelection") ~typ:(returning (void))
let committingCandidate self = msg_send ~self ~cmd:(selector "committingCandidate") ~typ:(returning (bool))
let completeAcceptCandidate x self = msg_send ~self ~cmd:(selector "completeAcceptCandidate:") ~typ:(id @-> returning (void)) x
let completeAcceptCandidateBeforeAddingInputObject x ~executionContext self = msg_send ~self ~cmd:(selector "completeAcceptCandidateBeforeAddingInputObject:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let completeAddInputString x self = msg_send ~self ~cmd:(selector "completeAddInputString:") ~typ:(id @-> returning (void)) x
let completeAddInputString' x ~generateCandidates self = msg_send ~self ~cmd:(selector "completeAddInputString:generateCandidates:") ~typ:(id @-> bool @-> returning (void)) x generateCandidates
let completeDelete self = msg_send ~self ~cmd:(selector "completeDelete") ~typ:(returning (void))
let completeDeleteFromInput self = msg_send ~self ~cmd:(selector "completeDeleteFromInput") ~typ:(returning (void))
let completeDeleteOnceFromInputWithCharacterBefore x self = msg_send ~self ~cmd:(selector "completeDeleteOnceFromInputWithCharacterBefore:") ~typ:(uint @-> returning (void)) x
let completeHandleAutoDelete self = msg_send ~self ~cmd:(selector "completeHandleAutoDelete") ~typ:(returning (void))
let completeHandleKeyEvent x self = msg_send ~self ~cmd:(selector "completeHandleKeyEvent:") ~typ:(id @-> returning (void)) x
let completeUpdateForChangedSelection x self = msg_send ~self ~cmd:(selector "completeUpdateForChangedSelection:") ~typ:(bool @-> returning (void)) x
let continuousPathUnderway self = msg_send ~self ~cmd:(selector "continuousPathUnderway") ~typ:(returning (bool))
let convertForceToGrams x self = msg_send ~self ~cmd:(selector "convertForceToGrams:") ~typ:(double @-> returning (double)) x
let convertRectToAutocorrectRect x ~delegateView ~container self = msg_send_stret ~self ~cmd:(selector "convertRectToAutocorrectRect:delegateView:container:") ~typ:(CGRect.t @-> id @-> id @-> returning (CGRect.t)) ~return_type:CGRect.t x delegateView container
let copyOperation self = msg_send ~self ~cmd:(selector "copyOperation") ~typ:(returning (void))
let correctionRect self = msg_send_stret ~self ~cmd:(selector "correctionRect") ~typ:(returning (CGRect.t)) ~return_type:CGRect.t
let createTypoTrackerReport self = msg_send ~self ~cmd:(selector "createTypoTrackerReport") ~typ:(returning (void))
let currentCandidateRequest self = msg_send ~self ~cmd:(selector "currentCandidateRequest") ~typ:(returning (id))
let currentHandBias self = msg_send ~self ~cmd:(selector "currentHandBias") ~typ:(returning (llong))
let currentKey self = msg_send ~self ~cmd:(selector "currentKey") ~typ:(returning (id))
let currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait x self = msg_send ~self ~cmd:(selector "currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:") ~typ:(bool @-> returning (bool)) x
let cursorAssertion self = msg_send ~self ~cmd:(selector "cursorAssertion") ~typ:(returning (id))
let cursorIsAtEndOfMarkedText self = msg_send ~self ~cmd:(selector "cursorIsAtEndOfMarkedText") ~typ:(returning (bool))
let cutOperation self = msg_send ~self ~cmd:(selector "cutOperation") ~typ:(returning (void))
let deactivateLayout self = msg_send ~self ~cmd:(selector "deactivateLayout") ~typ:(returning (void))
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning (void))
let defaultSizeForInterfaceOrientation x self = msg_send_stret ~self ~cmd:(selector "defaultSizeForInterfaceOrientation:") ~typ:(llong @-> returning (CGSize.t)) ~return_type:CGSize.t (LLong.of_int x)
let defaultsDidChange self = msg_send ~self ~cmd:(selector "defaultsDidChange") ~typ:(returning (void))
let deferredDidSetDelegateAction self = msg_send ~self ~cmd:(selector "deferredDidSetDelegateAction") ~typ:(returning (id))
let delayedCandidateList self = msg_send ~self ~cmd:(selector "delayedCandidateList") ~typ:(returning (bool))
let delayedCandidateRequest self = msg_send ~self ~cmd:(selector "delayedCandidateRequest") ~typ:(returning (id))
let delayedInit self = msg_send ~self ~cmd:(selector "delayedInit") ~typ:(returning (void))
let delegate self = msg_send ~self ~cmd:(selector "delegate") ~typ:(returning (id))
let delegateAlreadyInAutofillGroup self = msg_send ~self ~cmd:(selector "delegateAlreadyInAutofillGroup") ~typ:(returning (bool))
let delegateAsResponder self = msg_send ~self ~cmd:(selector "delegateAsResponder") ~typ:(returning (id))
let delegateIsSMSTextView self = msg_send ~self ~cmd:(selector "delegateIsSMSTextView") ~typ:(returning (bool))
let delegateRequiresKeyEvents self = msg_send ~self ~cmd:(selector "delegateRequiresKeyEvents") ~typ:(returning (bool))
let delegateSuggestionsForCurrentInput self = msg_send ~self ~cmd:(selector "delegateSuggestionsForCurrentInput") ~typ:(returning (bool))
let delegateSupportsCorrectionUI self = msg_send ~self ~cmd:(selector "delegateSupportsCorrectionUI") ~typ:(returning (bool))
let delegateSupportsImagePaste self = msg_send ~self ~cmd:(selector "delegateSupportsImagePaste") ~typ:(returning (bool))
let deleteBackward self = msg_send ~self ~cmd:(selector "deleteBackward") ~typ:(returning (void))
let deleteBackwardAndNotify x self = msg_send ~self ~cmd:(selector "deleteBackwardAndNotify:") ~typ:(bool @-> returning (void)) x
let deleteForwardAndNotify x self = msg_send ~self ~cmd:(selector "deleteForwardAndNotify:") ~typ:(bool @-> returning (bool)) x
let deleteFromInput self = msg_send ~self ~cmd:(selector "deleteFromInput") ~typ:(returning (void))
let deleteFromInputWithFlags x self = msg_send ~self ~cmd:(selector "deleteFromInputWithFlags:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let deleteFromInputWithFlags' x ~executionContext self = msg_send ~self ~cmd:(selector "deleteFromInputWithFlags:executionContext:") ~typ:(ullong @-> id @-> returning (void)) (ULLong.of_int x) executionContext
let deleteHandwritingStrokesAtIndexes x self = msg_send ~self ~cmd:(selector "deleteHandwritingStrokesAtIndexes:") ~typ:(id @-> returning (void)) x
let deleteOnceFromInputWithExecutionContext x self = msg_send ~self ~cmd:(selector "deleteOnceFromInputWithExecutionContext:") ~typ:(id @-> returning (void)) x
let deleteWordLastDelete self = msg_send ~self ~cmd:(selector "deleteWordLastDelete") ~typ:(returning (double))
let deletedString self = msg_send ~self ~cmd:(selector "deletedString") ~typ:(returning (id))
let desirableInputModesWithExtensions x self = msg_send ~self ~cmd:(selector "desirableInputModesWithExtensions:") ~typ:(bool @-> returning (id)) x
let detach self = msg_send ~self ~cmd:(selector "detach") ~typ:(returning (void))
let detachHardwareKeyboard self = msg_send ~self ~cmd:(selector "detachHardwareKeyboard") ~typ:(returning (void))
let didAcceptAutocorrection x ~wordTerminator self = msg_send ~self ~cmd:(selector "didAcceptAutocorrection:wordTerminator:") ~typ:(id @-> id @-> returning (void)) x wordTerminator
let didApplyAutocorrection x ~autocorrectPromptFrame self = msg_send ~self ~cmd:(selector "didApplyAutocorrection:autocorrectPromptFrame:") ~typ:(id @-> CGRect.t @-> returning (void)) x autocorrectPromptFrame
let didChangeForwardingInputDelegate x self = msg_send ~self ~cmd:(selector "didChangeForwardingInputDelegate:") ~typ:(id @-> returning (void)) x
let didChangePhraseBoundary self = msg_send ~self ~cmd:(selector "didChangePhraseBoundary") ~typ:(returning (void))
let didClearText self = msg_send ~self ~cmd:(selector "didClearText") ~typ:(returning (void))
let didDismissMemojiCard self = msg_send ~self ~cmd:(selector "didDismissMemojiCard") ~typ:(returning (void))
let didMoveToSuperview self = msg_send ~self ~cmd:(selector "didMoveToSuperview") ~typ:(returning (void))
let didMoveToWindow self = msg_send ~self ~cmd:(selector "didMoveToWindow") ~typ:(returning (void))
let didPresentMemojiCard self = msg_send ~self ~cmd:(selector "didPresentMemojiCard") ~typ:(returning (void))
let didSetDelegate self = msg_send ~self ~cmd:(selector "didSetDelegate") ~typ:(returning (void))
let disableInputBars self = msg_send ~self ~cmd:(selector "disableInputBars") ~typ:(returning (bool))
let disableSmartInsertDelete self = msg_send ~self ~cmd:(selector "disableSmartInsertDelete") ~typ:(returning (bool))
let dismissContinuousPathIntroductionView self = msg_send ~self ~cmd:(selector "dismissContinuousPathIntroductionView") ~typ:(returning (void))
let dismissEditingIntroductionView self = msg_send ~self ~cmd:(selector "dismissEditingIntroductionView") ~typ:(returning (void))
let dismissKeyboard self = msg_send ~self ~cmd:(selector "dismissKeyboard") ~typ:(returning (void))
let dismissKeyboardPopoverBeforeCleanup x ~completion self = msg_send ~self ~cmd:(selector "dismissKeyboardPopoverBeforeCleanup:completion:") ~typ:(bool @-> ptr void @-> returning (void)) x completion
let dismissKeyboardPopoverIfNecessaryWithCompletion x self = msg_send ~self ~cmd:(selector "dismissKeyboardPopoverIfNecessaryWithCompletion:") ~typ:(ptr void @-> returning (void)) x
let displaysCandidates self = msg_send ~self ~cmd:(selector "displaysCandidates") ~typ:(returning (bool))
let documentIdentifierForInputDelegate x self = msg_send ~self ~cmd:(selector "documentIdentifierForInputDelegate:") ~typ:(id @-> returning (id)) x
let documentStateFromInputDelegate x self = msg_send ~self ~cmd:(selector "documentStateFromInputDelegate:") ~typ:(ptr void @-> returning (void)) x
let dontPushOneTimeCode self = msg_send ~self ~cmd:(selector "dontPushOneTimeCode") ~typ:(returning (bool))
let doubleSpacePeriodPreference self = msg_send ~self ~cmd:(selector "doubleSpacePeriodPreference") ~typ:(returning (bool))
let dragGestureRectInView x self = msg_send_stret ~self ~cmd:(selector "dragGestureRectInView:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let dynamicCaretList self = msg_send ~self ~cmd:(selector "dynamicCaretList") ~typ:(returning (id))
let editingTraitsMarkedDirty self = msg_send ~self ~cmd:(selector "editingTraitsMarkedDirty") ~typ:(returning (bool))
let ejectKeyDown self = msg_send ~self ~cmd:(selector "ejectKeyDown") ~typ:(returning (void))
let emojiCandidate x self = msg_send ~self ~cmd:(selector "emojiCandidate:") ~typ:(id @-> returning (id)) x
let emojiSearchWillInsertEmoji x ~forSearchQuery self = msg_send ~self ~cmd:(selector "emojiSearchWillInsertEmoji:forSearchQuery:") ~typ:(id @-> id @-> returning (void)) x forSearchQuery
let emojiSearchWillInsertEmoji' x ~forSearchQuery ~selectionMethod ~inputType self = msg_send ~self ~cmd:(selector "emojiSearchWillInsertEmoji:forSearchQuery:selectionMethod:inputType:") ~typ:(id @-> id @-> id @-> id @-> returning (void)) x forSearchQuery selectionMethod inputType
let enable self = msg_send ~self ~cmd:(selector "enable") ~typ:(returning (void))
let enableTransientInputDelegateSelectionMode self = msg_send ~self ~cmd:(selector "enableTransientInputDelegateSelectionMode") ~typ:(returning (void))
let eventForCurrentWebEvent self = msg_send ~self ~cmd:(selector "eventForCurrentWebEvent") ~typ:(returning (id))
let externalTask self = msg_send ~self ~cmd:(selector "externalTask") ~typ:(returning (ptr void))
let fadeAutocorrectPrompt self = msg_send ~self ~cmd:(selector "fadeAutocorrectPrompt") ~typ:(returning (void))
let feedbackGenerator self = msg_send ~self ~cmd:(selector "feedbackGenerator") ~typ:(returning (id))
let finishLayoutChangeWithArguments x self = msg_send ~self ~cmd:(selector "finishLayoutChangeWithArguments:") ~typ:(id @-> returning (void)) x
let finishLayoutToCurrentInterfaceOrientation self = msg_send ~self ~cmd:(selector "finishLayoutToCurrentInterfaceOrientation") ~typ:(returning (void))
let finishSetExtensionInputMode x ~didChangeDirection self = msg_send ~self ~cmd:(selector "finishSetExtensionInputMode:didChangeDirection:") ~typ:(id @-> bool @-> returning (void)) x didChangeDirection
let finishSetInputMode x ~didChangeDirection self = msg_send ~self ~cmd:(selector "finishSetInputMode:didChangeDirection:") ~typ:(id @-> bool @-> returning (void)) x didChangeDirection
let finishSetInputModeToNextInPreferredListWithExecutionContext x ~withPreviousInputMode self = msg_send ~self ~cmd:(selector "finishSetInputModeToNextInPreferredListWithExecutionContext:withPreviousInputMode:") ~typ:(id @-> id @-> returning (void)) x withPreviousInputMode
let finishSetKeyboardInputMode x ~previousInputMode ~didChangeDirection self = msg_send ~self ~cmd:(selector "finishSetKeyboardInputMode:previousInputMode:didChangeDirection:") ~typ:(id @-> id @-> bool @-> returning (void)) x previousInputMode didChangeDirection
let finishSplitTransitionWithProgress x self = msg_send ~self ~cmd:(selector "finishSplitTransitionWithProgress:") ~typ:(double @-> returning (void)) x
let finishTextChanged self = msg_send ~self ~cmd:(selector "finishTextChanged") ~typ:(returning (void))
let floatingForced self = msg_send ~self ~cmd:(selector "floatingForced") ~typ:(returning (bool))
let flushDelayedTasks self = msg_send ~self ~cmd:(selector "flushDelayedTasks") ~typ:(returning (void))
let flushTouchEventWaitingForKeyInputEventIfNecessary self = msg_send ~self ~cmd:(selector "flushTouchEventWaitingForKeyInputEventIfNecessary") ~typ:(returning (void))
let forCustomInputView self = msg_send ~self ~cmd:(selector "forCustomInputView") ~typ:(returning (bool))
let forceShiftUpdate self = msg_send ~self ~cmd:(selector "forceShiftUpdate") ~typ:(returning (void))
let forceShiftUpdateIfKeyboardStateChanged self = msg_send ~self ~cmd:(selector "forceShiftUpdateIfKeyboardStateChanged") ~typ:(returning (void))
let frameForKeylayoutName x self = msg_send_stret ~self ~cmd:(selector "frameForKeylayoutName:") ~typ:(id @-> returning (CGRect.t)) ~return_type:CGRect.t x
let generateAutocorrectionListForSelectedText self = msg_send ~self ~cmd:(selector "generateAutocorrectionListForSelectedText") ~typ:(returning (id))
let generateAutocorrectionReplacements x self = msg_send ~self ~cmd:(selector "generateAutocorrectionReplacements:") ~typ:(id @-> returning (id)) x
let generateAutocorrectionWithExecutionContext x self = msg_send ~self ~cmd:(selector "generateAutocorrectionWithExecutionContext:") ~typ:(id @-> returning (void)) x
let generateAutocorrectionsWithCompletionHandler x self = msg_send ~self ~cmd:(selector "generateAutocorrectionsWithCompletionHandler:") ~typ:(ptr void @-> returning (void)) x
let generateAutofillCandidate self = msg_send ~self ~cmd:(selector "generateAutofillCandidate") ~typ:(returning (void))
let generateAutofillCandidateByAddingTask x self = msg_send ~self ~cmd:(selector "generateAutofillCandidateByAddingTask:") ~typ:(bool @-> returning (void)) x
let generateCandidates self = msg_send ~self ~cmd:(selector "generateCandidates") ~typ:(returning (void))
let generateCandidatesAsynchronously self = msg_send ~self ~cmd:(selector "generateCandidatesAsynchronously") ~typ:(returning (void))
let generateCandidatesAsynchronouslyWithRange x ~selectedCandidate self = msg_send ~self ~cmd:(selector "generateCandidatesAsynchronouslyWithRange:selectedCandidate:") ~typ:(NSRange.t @-> id @-> returning (void)) x selectedCandidate
let generateCandidatesFromReplacements self = msg_send ~self ~cmd:(selector "generateCandidatesFromReplacements") ~typ:(returning (void))
let generateCandidatesWithOptions x self = msg_send ~self ~cmd:(selector "generateCandidatesWithOptions:") ~typ:(int @-> returning (void)) x
let generateReplacementsForString x ~candidatesHandler ~executionContext self = msg_send ~self ~cmd:(selector "generateReplacementsForString:candidatesHandler:executionContext:") ~typ:(id @-> ptr void @-> id @-> returning (void)) x candidatesHandler executionContext
let geometryChangeDone x self = msg_send ~self ~cmd:(selector "geometryChangeDone:") ~typ:(bool @-> returning (void)) x
let geometryDelegate self = msg_send ~self ~cmd:(selector "geometryDelegate") ~typ:(returning (id))
let geometryIsChanging self = msg_send ~self ~cmd:(selector "geometryIsChanging") ~typ:(returning (bool))
let getCorrectionRectIsVertical x self = msg_send_stret ~self ~cmd:(selector "getCorrectionRectIsVertical:") ~typ:(ptr (bool) @-> returning (CGRect.t)) ~return_type:CGRect.t x
let globeKeyDisplaysAsEmojiKey self = msg_send ~self ~cmd:(selector "globeKeyDisplaysAsEmojiKey") ~typ:(returning (bool))
let handleAcceptedCandidate x ~executionContext self = msg_send ~self ~cmd:(selector "handleAcceptedCandidate:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let handleAutoDeleteWithExecutionContext x self = msg_send ~self ~cmd:(selector "handleAutoDeleteWithExecutionContext:") ~typ:(id @-> returning (void)) x
let handleAutofillCredentialSaveIfNeeded x self = msg_send ~self ~cmd:(selector "handleAutofillCredentialSaveIfNeeded:") ~typ:(id @-> returning (void)) x
let handleCandidateListNavigation x ~hasCandidatesForTypedInput ~shiftDown ~keyCommandTypeHandled ~allowRepeat self = msg_send ~self ~cmd:(selector "handleCandidateListNavigation:hasCandidatesForTypedInput:shiftDown:keyCommandTypeHandled:allowRepeat:") ~typ:(uint @-> bool @-> bool @-> ptr (ullong) @-> ptr (bool) @-> returning (bool)) x hasCandidatesForTypedInput shiftDown keyCommandTypeHandled allowRepeat
let handleClear self = msg_send ~self ~cmd:(selector "handleClear") ~typ:(returning (void))
let handleClearWithExecutionContext x self = msg_send ~self ~cmd:(selector "handleClearWithExecutionContext:") ~typ:(id @-> returning (void)) x
let handleClearWithInsertBeforeAdvance x self = msg_send ~self ~cmd:(selector "handleClearWithInsertBeforeAdvance:") ~typ:(id @-> returning (void)) x
let handleDelayedActionLongPress x self = msg_send ~self ~cmd:(selector "handleDelayedActionLongPress:") ~typ:(id @-> returning (void)) x
let handleDelete self = msg_send ~self ~cmd:(selector "handleDelete") ~typ:(returning (void))
let handleDeleteAsRepeat x ~executionContext self = msg_send ~self ~cmd:(selector "handleDeleteAsRepeat:executionContext:") ~typ:(bool @-> id @-> returning (void)) x executionContext
let handleDeleteAutospaceForInputString x ~afterSpace self = msg_send ~self ~cmd:(selector "handleDeleteAutospaceForInputString:afterSpace:") ~typ:(id @-> bool @-> returning (id)) x afterSpace
let handleDeleteWithExecutionContext x self = msg_send ~self ~cmd:(selector "handleDeleteWithExecutionContext:") ~typ:(id @-> returning (void)) x
let handleDeleteWordWithExecutionContext x self = msg_send ~self ~cmd:(selector "handleDeleteWordWithExecutionContext:") ~typ:(id @-> returning (void)) x
let handleDeletionForCandidate x self = msg_send ~self ~cmd:(selector "handleDeletionForCandidate:") ~typ:(id @-> returning (void)) x
let handleEmojiInput x ~keyboardState self = msg_send ~self ~cmd:(selector "handleEmojiInput:keyboardState:") ~typ:(id @-> id @-> returning (void)) x keyboardState
let handleEmojiPopoverKeyCommand self = msg_send ~self ~cmd:(selector "handleEmojiPopoverKeyCommand") ~typ:(returning (void))
let handleHorizontalArrow x ~shiftDown ~beforePublicKeyCommands ~testOnly ~isVerticalCandidate ~hasCandidatesForTypedInput ~shouldNavigateCandidateList ~canHandleInputDelegateCommand ~savedHistory ~keyCommandTypeHandled self = msg_send ~self ~cmd:(selector "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:") ~typ:(bool @-> bool @-> bool @-> bool @-> bool @-> bool @-> bool @-> ptr void @-> id @-> ptr (ullong) @-> returning (bool)) x shiftDown beforePublicKeyCommands testOnly isVerticalCandidate hasCandidatesForTypedInput shouldNavigateCandidateList canHandleInputDelegateCommand savedHistory keyCommandTypeHandled
let handleInputManagerBasedKeybind x ~testOnly self = msg_send ~self ~cmd:(selector "handleInputManagerBasedKeybind:testOnly:") ~typ:(id @-> bool @-> returning (bool)) x testOnly
let handleKeyAppCommandForCurrentEvent self = msg_send ~self ~cmd:(selector "handleKeyAppCommandForCurrentEvent") ~typ:(returning (bool))
let handleKeyCommand x ~repeatOkay ~beforePublicKeyCommands self = msg_send ~self ~cmd:(selector "handleKeyCommand:repeatOkay:beforePublicKeyCommands:") ~typ:(id @-> ptr (bool) @-> bool @-> returning (bool)) x repeatOkay beforePublicKeyCommands
let handleKeyCommand' x ~repeatOkay ~options self = msg_send ~self ~cmd:(selector "handleKeyCommand:repeatOkay:options:") ~typ:(id @-> ptr (bool) @-> ullong @-> returning (ullong)) x repeatOkay (ULLong.of_int options)
let handleKeyEvent x self = msg_send ~self ~cmd:(selector "handleKeyEvent:") ~typ:(id @-> returning (void)) x
let handleKeyEvent' x ~executionContext self = msg_send ~self ~cmd:(selector "handleKeyEvent:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let handleKeyInputMethodCommandForCurrentEvent self = msg_send ~self ~cmd:(selector "handleKeyInputMethodCommandForCurrentEvent") ~typ:(returning (bool))
let handleKeyTextCommandForCurrentEvent self = msg_send ~self ~cmd:(selector "handleKeyTextCommandForCurrentEvent") ~typ:(returning (bool))
let handleKeyWithString x ~forKeyEvent ~executionContext self = msg_send ~self ~cmd:(selector "handleKeyWithString:forKeyEvent:executionContext:") ~typ:(id @-> id @-> id @-> returning (void)) x forKeyEvent executionContext
let handleKeyboardInput x ~executionContext self = msg_send ~self ~cmd:(selector "handleKeyboardInput:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let handleModifiersChangeForKeyEvent x ~executionContext self = msg_send ~self ~cmd:(selector "handleModifiersChangeForKeyEvent:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let handleMoveCursorToEndOfLine x ~beforePublicKeyCommands ~testOnly ~savedHistory ~force ~canHandleSelectableInputDelegateCommand self = msg_send ~self ~cmd:(selector "handleMoveCursorToEndOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:") ~typ:(bool @-> bool @-> bool @-> id @-> bool @-> ptr void @-> returning (bool)) x beforePublicKeyCommands testOnly savedHistory force canHandleSelectableInputDelegateCommand
let handleMoveCursorToStartOfLine x ~beforePublicKeyCommands ~testOnly ~savedHistory ~force ~canHandleSelectableInputDelegateCommand self = msg_send ~self ~cmd:(selector "handleMoveCursorToStartOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:") ~typ:(bool @-> bool @-> bool @-> id @-> bool @-> ptr void @-> returning (bool)) x beforePublicKeyCommands testOnly savedHistory force canHandleSelectableInputDelegateCommand
let handleMoveResponderWithShift x self = msg_send ~self ~cmd:(selector "handleMoveResponderWithShift:") ~typ:(bool @-> returning (bool)) x
let handleObserverCallback self = msg_send ~self ~cmd:(selector "handleObserverCallback") ~typ:(returning (void))
let handleReplacement x ~forSpaceAndInput self = msg_send ~self ~cmd:(selector "handleReplacement:forSpaceAndInput:") ~typ:(id @-> id @-> returning (id)) x forSpaceAndInput
let handleReturnKey x self = msg_send ~self ~cmd:(selector "handleReturnKey:") ~typ:(bool @-> returning (bool)) x
let handleStringInput x ~withFlags ~withInputManagerHint ~executionContext self = msg_send ~self ~cmd:(selector "handleStringInput:withFlags:withInputManagerHint:executionContext:") ~typ:(id @-> ullong @-> id @-> id @-> returning (void)) x (ULLong.of_int withFlags) withInputManagerHint executionContext
let handleTabWithShift x self = msg_send ~self ~cmd:(selector "handleTabWithShift:") ~typ:(bool @-> returning (bool)) x
let handleTabWithShift1 x ~beforePublicKeyCommands self = msg_send ~self ~cmd:(selector "handleTabWithShift:beforePublicKeyCommands:") ~typ:(bool @-> bool @-> returning (bool)) x beforePublicKeyCommands
let handleTabWithShift2 x ~beforePublicKeyCommands ~isMoveAction ~testOnly self = msg_send ~self ~cmd:(selector "handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:") ~typ:(bool @-> bool @-> bool @-> bool @-> returning (bool)) x beforePublicKeyCommands isMoveAction testOnly
let handleUpdateLastUsedInputModeAction x self = msg_send ~self ~cmd:(selector "handleUpdateLastUsedInputModeAction:") ~typ:(id @-> returning (void)) x
let handleVerticalArrow x ~shiftDown ~beforePublicKeyCommands ~testOnly ~isVerticalCandidate ~hasCandidatesForTypedInput ~inputDelegateCommandEnabled ~canHandleInputDelegateCommand ~savedHistory ~keyCommandTypeHandled self = msg_send ~self ~cmd:(selector "handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:") ~typ:(bool @-> bool @-> bool @-> bool @-> bool @-> bool @-> bool @-> ptr void @-> id @-> ptr (ullong) @-> returning (bool)) x shiftDown beforePublicKeyCommands testOnly isVerticalCandidate hasCandidatesForTypedInput inputDelegateCommandEnabled canHandleInputDelegateCommand savedHistory keyCommandTypeHandled
let handleWebViewCredentialsSaveForWebsiteURL x ~user ~password ~passwordIsAutoGenerated self = msg_send ~self ~cmd:(selector "handleWebViewCredentialsSaveForWebsiteURL:user:password:passwordIsAutoGenerated:") ~typ:(id @-> id @-> id @-> bool @-> returning (void)) x user password passwordIsAutoGenerated
let handlingKeyCommandFromHardwareKeyboard self = msg_send ~self ~cmd:(selector "handlingKeyCommandFromHardwareKeyboard") ~typ:(returning (bool))
let hardwareKeyboardAttached self = msg_send ~self ~cmd:(selector "hardwareKeyboardAttached") ~typ:(returning (bool))
let hardwareKeyboardAvailabilityChanged self = msg_send ~self ~cmd:(selector "hardwareKeyboardAvailabilityChanged") ~typ:(returning (void))
let hardwareKeyboardAvailabilityDidChange x self = msg_send ~self ~cmd:(selector "hardwareKeyboardAvailabilityDidChange:") ~typ:(id @-> returning (void)) x
let hardwareKeyboardIsSeen self = msg_send ~self ~cmd:(selector "hardwareKeyboardIsSeen") ~typ:(returning (bool))
let hardwareKeyboardsSeenPreference self = msg_send ~self ~cmd:(selector "hardwareKeyboardsSeenPreference") ~typ:(returning (id))
let hasDelegate self = msg_send ~self ~cmd:(selector "hasDelegate") ~typ:(returning (bool))
let hasEditableMarkedText self = msg_send ~self ~cmd:(selector "hasEditableMarkedText") ~typ:(returning (bool))
let hasMarkedText self = msg_send ~self ~cmd:(selector "hasMarkedText") ~typ:(returning (bool))
let hideAccessoryViewsDuringSplit self = msg_send ~self ~cmd:(selector "hideAccessoryViewsDuringSplit") ~typ:(returning (bool))
let hideInternationalKeyIntroductionIfNeeded self = msg_send ~self ~cmd:(selector "hideInternationalKeyIntroductionIfNeeded") ~typ:(returning (void))
let hideKeyboard self = msg_send ~self ~cmd:(selector "hideKeyboard") ~typ:(returning (void))
let hideKeyboardIgnoringHardwareLayouts x self = msg_send ~self ~cmd:(selector "hideKeyboardIgnoringHardwareLayouts:") ~typ:(bool @-> returning (void)) x
let hideKeyboardWithoutPreflightChecks self = msg_send ~self ~cmd:(selector "hideKeyboardWithoutPreflightChecks") ~typ:(returning (void))
let hitTest x ~withEvent self = msg_send ~self ~cmd:(selector "hitTest:withEvent:") ~typ:(CGPoint.t @-> id @-> returning (id)) x withEvent
let implProxy self = msg_send ~self ~cmd:(selector "implProxy") ~typ:(returning (id))
let initWithFrame x self = msg_send ~self ~cmd:(selector "initWithFrame:") ~typ:(CGRect.t @-> returning (id)) x
let initWithFrame' x ~forCustomInputView self = msg_send ~self ~cmd:(selector "initWithFrame:forCustomInputView:") ~typ:(CGRect.t @-> bool @-> returning (id)) x forCustomInputView
let inputDelegate self = msg_send ~self ~cmd:(selector "inputDelegate") ~typ:(returning (id))
let inputDelegateManager self = msg_send ~self ~cmd:(selector "inputDelegateManager") ~typ:(returning (id))
let inputEventForInputString x self = msg_send ~self ~cmd:(selector "inputEventForInputString:") ~typ:(id @-> returning (id)) x
let inputForMarkedText self = msg_send ~self ~cmd:(selector "inputForMarkedText") ~typ:(returning (id))
let inputManager self = msg_send ~self ~cmd:(selector "inputManager") ~typ:(returning (id))
let inputManagerDidGenerateAutocorrections x ~executionContext self = msg_send ~self ~cmd:(selector "inputManagerDidGenerateAutocorrections:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let inputManagerDidGenerateAutocorrections' x ~forPredictiveInput ~executionContext self = msg_send ~self ~cmd:(selector "inputManagerDidGenerateAutocorrections:forPredictiveInput:executionContext:") ~typ:(id @-> id @-> id @-> returning (void)) x forPredictiveInput executionContext
let inputManagerDidGenerateCandidatesForRequest x ~resultSet self = msg_send ~self ~cmd:(selector "inputManagerDidGenerateCandidatesForRequest:resultSet:") ~typ:(id @-> id @-> returning (void)) x resultSet
let inputManagerState self = msg_send ~self ~cmd:(selector "inputManagerState") ~typ:(returning (id))
let inputModeLastUsedPreference self = msg_send ~self ~cmd:(selector "inputModeLastUsedPreference") ~typ:(returning (id))
let inputModePreference self = msg_send ~self ~cmd:(selector "inputModePreference") ~typ:(returning (id))
let inputOverlayContainer self = msg_send ~self ~cmd:(selector "inputOverlayContainer") ~typ:(returning (id))
let inputOverlayContainerForCandidateView x self = msg_send ~self ~cmd:(selector "inputOverlayContainerForCandidateView:") ~typ:(bool @-> returning (id)) x
let inputStringFromPhraseBoundary self = msg_send ~self ~cmd:(selector "inputStringFromPhraseBoundary") ~typ:(returning (id))
let inputSystemSourceSession self = msg_send ~self ~cmd:(selector "inputSystemSourceSession") ~typ:(returning (id))
let inputWordForTerminatorAtSelection self = msg_send ~self ~cmd:(selector "inputWordForTerminatorAtSelection") ~typ:(returning (id))
let insertAttributedText x self = msg_send ~self ~cmd:(selector "insertAttributedText:") ~typ:(id @-> returning (void)) x
let insertText x ~withAlternativePredictions self = msg_send ~self ~cmd:(selector "insertText:withAlternativePredictions:") ~typ:(id @-> id @-> returning (void)) x withAlternativePredictions
let insertTextIfShould x self = msg_send ~self ~cmd:(selector "insertTextIfShould:") ~typ:(id @-> returning (bool)) x
let insertTextSuggestionCandidate x self = msg_send ~self ~cmd:(selector "insertTextSuggestionCandidate:") ~typ:(id @-> returning (void)) x
let insertedEmojiFromPopover x ~selectionMethod self = msg_send ~self ~cmd:(selector "insertedEmojiFromPopover:selectionMethod:") ~typ:(id @-> id @-> returning (void)) x selectionMethod
let insertsSpaceAfterPredictiveInput self = msg_send ~self ~cmd:(selector "insertsSpaceAfterPredictiveInput") ~typ:(returning (bool))
let internationalKeyDisplayStringOnEmojiKeyboard self = msg_send ~self ~cmd:(selector "internationalKeyDisplayStringOnEmojiKeyboard") ~typ:(returning (id))
let internationalKeyIntroductionView self = msg_send ~self ~cmd:(selector "internationalKeyIntroductionView") ~typ:(returning (id))
let isAttachedHardwareKeyboard self = msg_send ~self ~cmd:(selector "isAttachedHardwareKeyboard") ~typ:(returning (id))
let isAutoDeleteActive self = msg_send ~self ~cmd:(selector "isAutoDeleteActive") ~typ:(returning (bool))
let isAutoFillMode self = msg_send ~self ~cmd:(selector "isAutoFillMode") ~typ:(returning (bool))
let isAutoShifted self = msg_send ~self ~cmd:(selector "isAutoShifted") ~typ:(returning (bool))
let isAutofillPrediction self = msg_send ~self ~cmd:(selector "isAutofillPrediction") ~typ:(returning (bool))
let isCallingInputDelegate self = msg_send ~self ~cmd:(selector "isCallingInputDelegate") ~typ:(returning (bool))
let isCallingTextChangedDuringInputModeSwitch self = msg_send ~self ~cmd:(selector "isCallingTextChangedDuringInputModeSwitch") ~typ:(returning (bool))
let isCapsLockASCIIToggle self = msg_send ~self ~cmd:(selector "isCapsLockASCIIToggle") ~typ:(returning (bool))
let isCapsLockSwitchEnabled self = msg_send ~self ~cmd:(selector "isCapsLockSwitchEnabled") ~typ:(returning (bool))
let isCurrentEditResponderInEditingMode self = msg_send ~self ~cmd:(selector "isCurrentEditResponderInEditingMode") ~typ:(returning (bool))
let isDefaultPrediction self = msg_send ~self ~cmd:(selector "isDefaultPrediction") ~typ:(returning (bool))
let isFloatingLocked self = msg_send ~self ~cmd:(selector "isFloatingLocked") ~typ:(returning (bool))
let isInHardwareKeyboardMode self = msg_send ~self ~cmd:(selector "isInHardwareKeyboardMode") ~typ:(returning (bool))
let isKeyboardPopoverPresented self = msg_send ~self ~cmd:(selector "isKeyboardPopoverPresented") ~typ:(returning (bool))
let isKeyboardPopoverVisibleOrDismissing self = msg_send ~self ~cmd:(selector "isKeyboardPopoverVisibleOrDismissing") ~typ:(returning (bool))
let isLongPress self = msg_send ~self ~cmd:(selector "isLongPress") ~typ:(returning (bool))
let isMemberOfAutofillGroup x self = msg_send ~self ~cmd:(selector "isMemberOfAutofillGroup:") ~typ:(id @-> returning (bool)) x
let isMemberOfPossibleAutofillGroup x self = msg_send ~self ~cmd:(selector "isMemberOfPossibleAutofillGroup:") ~typ:(id @-> returning (bool)) x
let isMinimized self = msg_send ~self ~cmd:(selector "isMinimized") ~typ:(returning (bool))
let isOutOfProcess self = msg_send ~self ~cmd:(selector "isOutOfProcess") ~typ:(returning (bool))
let isPredictionViewControllerVisible self = msg_send ~self ~cmd:(selector "isPredictionViewControllerVisible") ~typ:(returning (bool))
let isRTIClient self = msg_send ~self ~cmd:(selector "isRTIClient") ~typ:(returning (bool))
let isRotating self = msg_send ~self ~cmd:(selector "isRotating") ~typ:(returning (bool))
let isSelectionAtSentenceAutoshiftBoundary self = msg_send ~self ~cmd:(selector "isSelectionAtSentenceAutoshiftBoundary") ~typ:(returning (bool))
let isShiftKeyBeingHeld self = msg_send ~self ~cmd:(selector "isShiftKeyBeingHeld") ~typ:(returning (bool))
let isShiftLocked self = msg_send ~self ~cmd:(selector "isShiftLocked") ~typ:(returning (bool))
let isShifted self = msg_send ~self ~cmd:(selector "isShifted") ~typ:(returning (bool))
let isTrackpadMode self = msg_send ~self ~cmd:(selector "isTrackpadMode") ~typ:(returning (bool))
let isUsingDictationLayout self = msg_send ~self ~cmd:(selector "isUsingDictationLayout") ~typ:(returning (bool))
let jumpToCompositions self = msg_send ~self ~cmd:(selector "jumpToCompositions") ~typ:(returning (void))
let keyActivated self = msg_send ~self ~cmd:(selector "keyActivated") ~typ:(returning (void))
let keyDeactivated self = msg_send ~self ~cmd:(selector "keyDeactivated") ~typ:(returning (void))
let keyboardDidHide x self = msg_send ~self ~cmd:(selector "keyboardDidHide:") ~typ:(id @-> returning (void)) x
let keyboardDrawsOpaque self = msg_send ~self ~cmd:(selector "keyboardDrawsOpaque") ~typ:(returning (bool))
let keyboardIsKeyPad self = msg_send ~self ~cmd:(selector "keyboardIsKeyPad") ~typ:(returning (bool))
let keyboardState self = msg_send ~self ~cmd:(selector "keyboardState") ~typ:(returning (id))
let keyboardsExpandedPreference self = msg_send ~self ~cmd:(selector "keyboardsExpandedPreference") ~typ:(returning (bool))
let keyplaneView self = msg_send ~self ~cmd:(selector "keyplaneView") ~typ:(returning (id))
let lastChooseSupplementalItemToInsertCallbackIdentifier self = msg_send ~self ~cmd:(selector "lastChooseSupplementalItemToInsertCallbackIdentifier") ~typ:(returning (ullong))
let lastMatchedSupplementalCandidate self = msg_send ~self ~cmd:(selector "lastMatchedSupplementalCandidate") ~typ:(returning (id))
let lastTouchDownTimestamp self = msg_send ~self ~cmd:(selector "lastTouchDownTimestamp") ~typ:(returning (double))
let layoutDidResize self = msg_send ~self ~cmd:(selector "layoutDidResize") ~typ:(returning (void))
let layoutForKeyHitTest self = msg_send ~self ~cmd:(selector "layoutForKeyHitTest") ~typ:(returning (id))
let layoutHasChanged self = msg_send ~self ~cmd:(selector "layoutHasChanged") ~typ:(returning (void))
let layoutIsResizing self = msg_send ~self ~cmd:(selector "layoutIsResizing") ~typ:(returning (bool))
let layoutState self = msg_send ~self ~cmd:(selector "layoutState") ~typ:(returning (id))
let layoutSubviews self = msg_send ~self ~cmd:(selector "layoutSubviews") ~typ:(returning (void))
let liveConversionEnabled self = msg_send ~self ~cmd:(selector "liveConversionEnabled") ~typ:(returning (bool))
let logHandwritingData self = msg_send ~self ~cmd:(selector "logHandwritingData") ~typ:(returning (void))
let longPressAction self = msg_send ~self ~cmd:(selector "longPressAction") ~typ:(returning (void))
let longPressAction' x self = msg_send ~self ~cmd:(selector "longPressAction:") ~typ:(id @-> returning (void)) x
let lookUpResponderChainForCustomInputView self = msg_send ~self ~cmd:(selector "lookUpResponderChainForCustomInputView") ~typ:(returning (void))
let markedText self = msg_send ~self ~cmd:(selector "markedText") ~typ:(returning (id))
let markedTextOverlay self = msg_send ~self ~cmd:(selector "markedTextOverlay") ~typ:(returning (id))
let maxNumberOfProactiveCells self = msg_send ~self ~cmd:(selector "maxNumberOfProactiveCells") ~typ:(returning (ullong))
let maximizing self = msg_send ~self ~cmd:(selector "maximizing") ~typ:(returning (bool))
let minimumTouchesForTranslation self = msg_send ~self ~cmd:(selector "minimumTouchesForTranslation") ~typ:(returning (ullong))
let moveCursorByAmount x self = msg_send ~self ~cmd:(selector "moveCursorByAmount:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let moveCursorLeftShifted x self = msg_send ~self ~cmd:(selector "moveCursorLeftShifted:") ~typ:(bool @-> returning (void)) x
let moveCursorRightShifted x self = msg_send ~self ~cmd:(selector "moveCursorRightShifted:") ~typ:(bool @-> returning (void)) x
let movePhraseBoundaryToDirection x ~granularity self = msg_send ~self ~cmd:(selector "movePhraseBoundaryToDirection:granularity:") ~typ:(llong @-> llong @-> returning (void)) (LLong.of_int x) (LLong.of_int granularity)
let needAutofill self = msg_send ~self ~cmd:(selector "needAutofill") ~typ:(returning (llong))
let needAutofillCandidate x self = msg_send ~self ~cmd:(selector "needAutofillCandidate:") ~typ:(id @-> returning (llong)) x
let needAutofillLogin self = msg_send ~self ~cmd:(selector "needAutofillLogin") ~typ:(returning (bool))
let needOneTimeCodeAutofill self = msg_send ~self ~cmd:(selector "needOneTimeCodeAutofill") ~typ:(returning (bool))
let needsToDeferUpdateTextCandidateView self = msg_send ~self ~cmd:(selector "needsToDeferUpdateTextCandidateView") ~typ:(returning (bool))
let nextCharacterIsWordCharacter self = msg_send ~self ~cmd:(selector "nextCharacterIsWordCharacter") ~typ:(returning (bool))
let nextInputWouldStartSentence self = msg_send ~self ~cmd:(selector "nextInputWouldStartSentence") ~typ:(returning (bool))
let noContent self = msg_send ~self ~cmd:(selector "noContent") ~typ:(returning (bool))
let notifyShiftState self = msg_send ~self ~cmd:(selector "notifyShiftState") ~typ:(returning (void))
let pasteOperation self = msg_send ~self ~cmd:(selector "pasteOperation") ~typ:(returning (void))
let pendingSupplementalCandidateToInsert self = msg_send ~self ~cmd:(selector "pendingSupplementalCandidateToInsert") ~typ:(returning (id))
let performBlockWithTextInputChangesIgnoredForNonMacOS x self = msg_send ~self ~cmd:(selector "performBlockWithTextInputChangesIgnoredForNonMacOS:") ~typ:(ptr void @-> returning (void)) x
let performDelete self = msg_send ~self ~cmd:(selector "performDelete") ~typ:(returning (void))
let performHitTestForTouchEvent x ~executionContextPassingNSNumber self = msg_send ~self ~cmd:(selector "performHitTestForTouchEvent:executionContextPassingNSNumber:") ~typ:(id @-> id @-> returning (void)) x executionContextPassingNSNumber
let performHitTestForTouchEvents x ~executionContextPassingNSNumber self = msg_send ~self ~cmd:(selector "performHitTestForTouchEvents:executionContextPassingNSNumber:") ~typ:(id @-> id @-> returning (void)) x executionContextPassingNSNumber
let performKeyBehaviorCommitInline self = msg_send ~self ~cmd:(selector "performKeyBehaviorCommitInline") ~typ:(returning (void))
let performKeyBehaviorConfirm self = msg_send ~self ~cmd:(selector "performKeyBehaviorConfirm") ~typ:(returning (void))
let performKeyBehaviorConfirmFirstCandidate self = msg_send ~self ~cmd:(selector "performKeyBehaviorConfirmFirstCandidate") ~typ:(returning (void))
let performKeyboardOutput x self = msg_send ~self ~cmd:(selector "performKeyboardOutput:") ~typ:(id @-> returning (void)) x
let performKeyboardOutput1 x ~checkingDelegate self = msg_send ~self ~cmd:(selector "performKeyboardOutput:checkingDelegate:") ~typ:(id @-> bool @-> returning (void)) x checkingDelegate
let performKeyboardOutput2 x ~checkingDelegate ~forwardToRemoteInputSource self = msg_send ~self ~cmd:(selector "performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:") ~typ:(id @-> bool @-> bool @-> returning (void)) x checkingDelegate forwardToRemoteInputSource
let performKeyboardOutputAsInputViewControllerOutput x self = msg_send ~self ~cmd:(selector "performKeyboardOutputAsInputViewControllerOutput:") ~typ:(id @-> returning (void)) x
let performKeyboardOutputAsInputViewControllerOutput' x ~textInputSource self = msg_send ~self ~cmd:(selector "performKeyboardOutputAsInputViewControllerOutput:textInputSource:") ~typ:(id @-> llong @-> returning (void)) x (LLong.of_int textInputSource)
let performKeyboardOutputAsRTIClient x self = msg_send ~self ~cmd:(selector "performKeyboardOutputAsRTIClient:") ~typ:(id @-> returning (void)) x
let performKeyboardOutputInfo x self = msg_send ~self ~cmd:(selector "performKeyboardOutputInfo:") ~typ:(id @-> returning (void)) x
let performKeyboardOutputOnInputSourceSession x self = msg_send ~self ~cmd:(selector "performKeyboardOutputOnInputSourceSession:") ~typ:(ptr void @-> returning (void)) x
let performOperations x ~withTextInputSource self = msg_send ~self ~cmd:(selector "performOperations:withTextInputSource:") ~typ:(ptr void @-> llong @-> returning (void)) x (LLong.of_int withTextInputSource)
let performReturn self = msg_send ~self ~cmd:(selector "performReturn") ~typ:(returning (void))
let performSendCurrentLocation self = msg_send ~self ~cmd:(selector "performSendCurrentLocation") ~typ:(returning (void))
let performTextOperationActionSelector x self = msg_send ~self ~cmd:(selector "performTextOperationActionSelector:") ~typ:(_SEL @-> returning (void)) x
let phraseBoundary self = msg_send ~self ~cmd:(selector "phraseBoundary") ~typ:(returning (ullong))
let physicalKeyboardEventWithInput x ~inputFlags self = msg_send ~self ~cmd:(selector "physicalKeyboardEventWithInput:inputFlags:") ~typ:(id @-> int @-> returning (id)) x inputFlags
let playDeleteKeyFeedback x self = msg_send ~self ~cmd:(selector "playDeleteKeyFeedback:") ~typ:(bool @-> returning (void)) x
let pointInside x ~forEvent self = msg_send ~self ~cmd:(selector "pointInside:forEvent:") ~typ:(CGPoint.t @-> ptr void @-> returning (bool)) x forEvent
let pointInside' x ~withEvent self = msg_send ~self ~cmd:(selector "pointInside:withEvent:") ~typ:(CGPoint.t @-> id @-> returning (bool)) x withEvent
let postInputResponderCapabilitiesChangedNotification self = msg_send ~self ~cmd:(selector "postInputResponderCapabilitiesChangedNotification") ~typ:(returning (void))
let postInputViewControllerShouldUpdateNotification x self = msg_send ~self ~cmd:(selector "postInputViewControllerShouldUpdateNotification:") ~typ:(id @-> returning (void)) x
let predictionFromPreference self = msg_send ~self ~cmd:(selector "predictionFromPreference") ~typ:(returning (bool))
let preferFallbackAutofillGroup self = msg_send ~self ~cmd:(selector "preferFallbackAutofillGroup") ~typ:(returning (bool))
let preferredCandidateViewTypeForCandidateResultSet x self = msg_send ~self ~cmd:(selector "preferredCandidateViewTypeForCandidateResultSet:") ~typ:(id @-> returning (llong)) x
let prepareForFloatingTransition x self = msg_send ~self ~cmd:(selector "prepareForFloatingTransition:") ~typ:(bool @-> returning (void)) x
let prepareForGeometryChange self = msg_send ~self ~cmd:(selector "prepareForGeometryChange") ~typ:(returning (void))
let prepareForSelectionChange self = msg_send ~self ~cmd:(selector "prepareForSelectionChange") ~typ:(returning (void))
let prepareKeyboardInputModeFromPreferences x self = msg_send ~self ~cmd:(selector "prepareKeyboardInputModeFromPreferences:") ~typ:(id @-> returning (void)) x
let prepareLayoutForInterfaceOrientation x self = msg_send ~self ~cmd:(selector "prepareLayoutForInterfaceOrientation:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let presentContinuousPathIntroductionView self = msg_send ~self ~cmd:(selector "presentContinuousPathIntroductionView") ~typ:(returning (void))
let presentEditingIntroductionView self = msg_send ~self ~cmd:(selector "presentEditingIntroductionView") ~typ:(returning (void))
let presentEmojiPopoverViaTrigger x ~completion self = msg_send ~self ~cmd:(selector "presentEmojiPopoverViaTrigger:completion:") ~typ:(id @-> ptr void @-> returning (void)) x completion
let presentKeyboardPopoverWithInputMode x ~completion self = msg_send ~self ~cmd:(selector "presentKeyboardPopoverWithInputMode:completion:") ~typ:(id @-> ptr void @-> returning (void)) x completion
let presentationControllerDidDismiss x self = msg_send ~self ~cmd:(selector "presentationControllerDidDismiss:") ~typ:(id @-> returning (void)) x
let presentationControllerShouldDismiss x self = msg_send ~self ~cmd:(selector "presentationControllerShouldDismiss:") ~typ:(id @-> returning (bool)) x
let prewarmsPredictiveCandidates self = msg_send ~self ~cmd:(selector "prewarmsPredictiveCandidates") ~typ:(returning (bool))
let proceedShouldReturnIfNeededForASP self = msg_send ~self ~cmd:(selector "proceedShouldReturnIfNeededForASP") ~typ:(returning (void))
let processPayloadInfo x self = msg_send ~self ~cmd:(selector "processPayloadInfo:") ~typ:(id @-> returning (void)) x
let provideAutoFillTypingUpdatesIfNecessary self = msg_send ~self ~cmd:(selector "provideAutoFillTypingUpdatesIfNecessary") ~typ:(returning (void))
let pushAutocorrections x ~requestToken self = msg_send ~self ~cmd:(selector "pushAutocorrections:requestToken:") ~typ:(id @-> id @-> returning (void)) x requestToken
let queueDelayedTask x self = msg_send ~self ~cmd:(selector "queueDelayedTask:") ~typ:(ptr void @-> returning (void)) x
let receivedCandidatesInCurrentInputMode self = msg_send ~self ~cmd:(selector "receivedCandidatesInCurrentInputMode") ~typ:(returning (bool))
let recomputeActiveInputModesWithExtensions x self = msg_send ~self ~cmd:(selector "recomputeActiveInputModesWithExtensions:") ~typ:(bool @-> returning (void)) x
let recomputeActiveInputModesWithExtensions' x ~allowNonLinguisticInputModes self = msg_send ~self ~cmd:(selector "recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:") ~typ:(bool @-> bool @-> returning (void)) x allowNonLinguisticInputModes
let refreshAutofillModeIfNecessary self = msg_send ~self ~cmd:(selector "refreshAutofillModeIfNecessary") ~typ:(returning (void))
let refreshKeyboardState self = msg_send ~self ~cmd:(selector "refreshKeyboardState") ~typ:(returning (void))
let refreshKeyboardStateUpdatingSecureCandidateRenderTraits x self = msg_send ~self ~cmd:(selector "refreshKeyboardStateUpdatingSecureCandidateRenderTraits:") ~typ:(bool @-> returning (void)) x
let refreshRivenPreferences self = msg_send ~self ~cmd:(selector "refreshRivenPreferences") ~typ:(returning (void))
let refreshSecureCandidatesIfNecessary self = msg_send ~self ~cmd:(selector "refreshSecureCandidatesIfNecessary") ~typ:(returning (void))
let reinitializeAfterInputModeSwitch x self = msg_send ~self ~cmd:(selector "reinitializeAfterInputModeSwitch:") ~typ:(bool @-> returning (void)) x
let rejectAutocorrection x self = msg_send ~self ~cmd:(selector "rejectAutocorrection:") ~typ:(id @-> returning (void)) x
let releaseInputManager self = msg_send ~self ~cmd:(selector "releaseInputManager") ~typ:(returning (void))
let releaseInputManagerIfInactive self = msg_send ~self ~cmd:(selector "releaseInputManagerIfInactive") ~typ:(returning (void))
let releaseSuppressUpdateCandidateView self = msg_send ~self ~cmd:(selector "releaseSuppressUpdateCandidateView") ~typ:(returning (void))
let reloadCurrentInputMode self = msg_send ~self ~cmd:(selector "reloadCurrentInputMode") ~typ:(returning (void))
let remoteControlReceivedWithEvent x self = msg_send ~self ~cmd:(selector "remoteControlReceivedWithEvent:") ~typ:(id @-> returning (void)) x
let remoteTextEditingMetadata self = msg_send ~self ~cmd:(selector "remoteTextEditingMetadata") ~typ:(returning (id))
let remoteTextInputPartner self = msg_send ~self ~cmd:(selector "remoteTextInputPartner") ~typ:(returning (id))
let removeASPVisualEffectsIfNecessary x self = msg_send ~self ~cmd:(selector "removeASPVisualEffectsIfNecessary:") ~typ:(id @-> returning (void)) x
let removeAllDynamicDictionaries self = msg_send ~self ~cmd:(selector "removeAllDynamicDictionaries") ~typ:(returning (void))
let removeAutocorrectPrompt self = msg_send ~self ~cmd:(selector "removeAutocorrectPrompt") ~typ:(returning (void))
let removeAutocorrectPromptAndCandidateList self = msg_send ~self ~cmd:(selector "removeAutocorrectPromptAndCandidateList") ~typ:(returning (void))
let removeAutocorrection self = msg_send ~self ~cmd:(selector "removeAutocorrection") ~typ:(returning (void))
let removeCandidateList self = msg_send ~self ~cmd:(selector "removeCandidateList") ~typ:(returning (void))
let removeCapsLockDelayOverride self = msg_send ~self ~cmd:(selector "removeCapsLockDelayOverride") ~typ:(returning (void))
let removeFromSuperview self = msg_send ~self ~cmd:(selector "removeFromSuperview") ~typ:(returning (void))
let removeRecentInput x ~completionHandler self = msg_send ~self ~cmd:(selector "removeRecentInput:completionHandler:") ~typ:(id @-> ptr void @-> returning (void)) x completionHandler
let removeSpaceAfterEmojiForInputString x self = msg_send ~self ~cmd:(selector "removeSpaceAfterEmojiForInputString:") ~typ:(id @-> returning (void)) x
let removeSupplementalLexicon x self = msg_send ~self ~cmd:(selector "removeSupplementalLexicon:") ~typ:(id @-> returning (void)) x
let replaceAllTextInResponder x ~withText self = msg_send ~self ~cmd:(selector "replaceAllTextInResponder:withText:") ~typ:(id @-> id @-> returning (void)) x withText
let replaceText x self = msg_send ~self ~cmd:(selector "replaceText:") ~typ:(id @-> returning (void)) x
let replacementsFromSelectedText self = msg_send ~self ~cmd:(selector "replacementsFromSelectedText") ~typ:(returning (id))
let requestedInteractionModel self = msg_send ~self ~cmd:(selector "requestedInteractionModel") ~typ:(returning (ullong))
let resetInputDelegate self = msg_send ~self ~cmd:(selector "resetInputDelegate") ~typ:(returning (void))
let responderForSendCurrentLocation self = msg_send ~self ~cmd:(selector "responderForSendCurrentLocation") ~typ:(returning (id))
let responderStylingTraitsForceEditingMask x self = msg_send ~self ~cmd:(selector "responderStylingTraitsForceEditingMask:") ~typ:(bool @-> returning (id)) x
let responseContextDidChange self = msg_send ~self ~cmd:(selector "responseContextDidChange") ~typ:(returning (void))
let restoreFocusFromEntryPoint x self = msg_send ~self ~cmd:(selector "restoreFocusFromEntryPoint:") ~typ:(CGPoint.t @-> returning (void)) x
let returnKeyDisplayName self = msg_send ~self ~cmd:(selector "returnKeyDisplayName") ~typ:(returning (id))
let returnKeyEnabled self = msg_send ~self ~cmd:(selector "returnKeyEnabled") ~typ:(returning (bool))
let returnKeyType self = msg_send ~self ~cmd:(selector "returnKeyType") ~typ:(returning (int))
let revealHiddenCandidates self = msg_send ~self ~cmd:(selector "revealHiddenCandidates") ~typ:(returning (void))
let rivenSplitLock self = msg_send ~self ~cmd:(selector "rivenSplitLock") ~typ:(returning (bool))
let saveInputModesPreference x self = msg_send ~self ~cmd:(selector "saveInputModesPreference:") ~typ:(id @-> returning (void)) x
let scaleCurrentForceFrom x ~to_ self = msg_send ~self ~cmd:(selector "scaleCurrentForceFrom:to:") ~typ:(double @-> double @-> returning (double)) x to_
let scheduleReplacementsAfterDeletionToEndOfWord self = msg_send ~self ~cmd:(selector "scheduleReplacementsAfterDeletionToEndOfWord") ~typ:(returning (void))
let scheduleReplacementsWithOptions x self = msg_send ~self ~cmd:(selector "scheduleReplacementsWithOptions:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let searchStringForMarkedText self = msg_send ~self ~cmd:(selector "searchStringForMarkedText") ~typ:(returning (id))
let selectionDidChange x self = msg_send ~self ~cmd:(selector "selectionDidChange:") ~typ:(id @-> returning (void)) x
let selectionScrolling x self = msg_send ~self ~cmd:(selector "selectionScrolling:") ~typ:(id @-> returning (void)) x
let selectionView self = msg_send ~self ~cmd:(selector "selectionView") ~typ:(returning (id))
let selectionWillChange x self = msg_send ~self ~cmd:(selector "selectionWillChange:") ~typ:(id @-> returning (void)) x
let sendCallbacksForPostCorrectionsRemoval self = msg_send ~self ~cmd:(selector "sendCallbacksForPostCorrectionsRemoval") ~typ:(returning (void))
let sendCallbacksForPreCorrectionsDisplay self = msg_send ~self ~cmd:(selector "sendCallbacksForPreCorrectionsDisplay") ~typ:(returning (void))
let serviceRole self = msg_send ~self ~cmd:(selector "serviceRole") ~typ:(returning (ullong))
let setAlternativePredictions x self = msg_send ~self ~cmd:(selector "setAlternativePredictions:") ~typ:(id @-> returning (void)) x
let setAnimateUpdateBars x self = msg_send ~self ~cmd:(selector "setAnimateUpdateBars:") ~typ:(bool @-> returning (void)) x
let setArrowKeyHistory x self = msg_send ~self ~cmd:(selector "setArrowKeyHistory:") ~typ:(id @-> returning (void)) x
let setAttributedMarkedText x ~selectedRange ~inputString ~searchString self = msg_send ~self ~cmd:(selector "setAttributedMarkedText:selectedRange:inputString:searchString:") ~typ:(id @-> NSRange.t @-> id @-> id @-> returning (void)) x selectedRange inputString searchString
let setAutocorrectBubbleContainer x self = msg_send ~self ~cmd:(selector "setAutocorrectBubbleContainer:") ~typ:(id @-> returning (void)) x
let setAutocorrectPromptTask x self = msg_send ~self ~cmd:(selector "setAutocorrectPromptTask:") ~typ:(id @-> returning (void)) x
let setAutocorrectSpellingEnabled x self = msg_send ~self ~cmd:(selector "setAutocorrectSpellingEnabled:") ~typ:(bool @-> returning (void)) x
let setAutocorrection x self = msg_send ~self ~cmd:(selector "setAutocorrection:") ~typ:(id @-> returning (void)) x
let setAutocorrectionList x self = msg_send ~self ~cmd:(selector "setAutocorrectionList:") ~typ:(id @-> returning (void)) x
let setAutocorrectionToAcceptBeforeProgressiveCandidates x self = msg_send ~self ~cmd:(selector "setAutocorrectionToAcceptBeforeProgressiveCandidates:") ~typ:(id @-> returning (void)) x
let setAutofillController x self = msg_send ~self ~cmd:(selector "setAutofillController:") ~typ:(id @-> returning (void)) x
let setAutomaticMinimizationEnabled x self = msg_send ~self ~cmd:(selector "setAutomaticMinimizationEnabled:") ~typ:(bool @-> returning (void)) x
let setCandidateList x self = msg_send ~self ~cmd:(selector "setCandidateList:") ~typ:(id @-> returning (void)) x
let setCandidateViewOffset x self = msg_send ~self ~cmd:(selector "setCandidateViewOffset:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setCandidates x self = msg_send ~self ~cmd:(selector "setCandidates:") ~typ:(id @-> returning (void)) x
let setCapsLockIfNeeded self = msg_send ~self ~cmd:(selector "setCapsLockIfNeeded") ~typ:(returning (void))
let setCapsLockSign self = msg_send ~self ~cmd:(selector "setCapsLockSign") ~typ:(returning (void))
let setCaretBlinks x self = msg_send ~self ~cmd:(selector "setCaretBlinks:") ~typ:(bool @-> returning (void)) x
let setCaretVisible x self = msg_send ~self ~cmd:(selector "setCaretVisible:") ~typ:(bool @-> returning (void)) x
let setChangeNotificationDisabled x self = msg_send ~self ~cmd:(selector "setChangeNotificationDisabled:") ~typ:(bool @-> returning (void)) x
let setChanged self = msg_send ~self ~cmd:(selector "setChanged") ~typ:(returning (void))
let setChangedDelegate x self = msg_send ~self ~cmd:(selector "setChangedDelegate:") ~typ:(id @-> returning (void)) x
let setCharacterRectsForCharacterRange x self = msg_send ~self ~cmd:(selector "setCharacterRectsForCharacterRange:") ~typ:(id @-> returning (void)) x
let setCommittingCandidate x self = msg_send ~self ~cmd:(selector "setCommittingCandidate:") ~typ:(bool @-> returning (void)) x
let setCorrectionLearningAllowed x self = msg_send ~self ~cmd:(selector "setCorrectionLearningAllowed:") ~typ:(bool @-> returning (void)) x
let setCurrentCandidateRequest x self = msg_send ~self ~cmd:(selector "setCurrentCandidateRequest:") ~typ:(id @-> returning (void)) x
let setCursorAssertion x self = msg_send ~self ~cmd:(selector "setCursorAssertion:") ~typ:(id @-> returning (void)) x
let setDefaultTextInputTraits x self = msg_send ~self ~cmd:(selector "setDefaultTextInputTraits:") ~typ:(id @-> returning (void)) x
let setDeferredDidSetDelegateAction x self = msg_send ~self ~cmd:(selector "setDeferredDidSetDelegateAction:") ~typ:(id @-> returning (void)) x
let setDelayedCandidateRequest x self = msg_send ~self ~cmd:(selector "setDelayedCandidateRequest:") ~typ:(id @-> returning (void)) x
let setDelegate x self = msg_send ~self ~cmd:(selector "setDelegate:") ~typ:(id @-> returning (void)) x
let setDelegate' x ~force self = msg_send ~self ~cmd:(selector "setDelegate:force:") ~typ:(id @-> bool @-> returning (void)) x force
let setDeleteWordLastDelete x self = msg_send ~self ~cmd:(selector "setDeleteWordLastDelete:") ~typ:(double @-> returning (void)) x
let setDeletedString x self = msg_send ~self ~cmd:(selector "setDeletedString:") ~typ:(id @-> returning (void)) x
let setDisableSmartInsertDelete x self = msg_send ~self ~cmd:(selector "setDisableSmartInsertDelete:") ~typ:(bool @-> returning (void)) x
let setDocumentState x self = msg_send ~self ~cmd:(selector "setDocumentState:") ~typ:(id @-> returning (void)) x
let setDocumentStateForAutocorrection x self = msg_send ~self ~cmd:(selector "setDocumentStateForAutocorrection:") ~typ:(id @-> returning (void)) x
let setEditingTraitsMarkedDirty x self = msg_send ~self ~cmd:(selector "setEditingTraitsMarkedDirty:") ~typ:(bool @-> returning (void)) x
let setEventForCurrentWebEvent x self = msg_send ~self ~cmd:(selector "setEventForCurrentWebEvent:") ~typ:(id @-> returning (void)) x
let setExternalTask x self = msg_send ~self ~cmd:(selector "setExternalTask:") ~typ:(ptr void @-> returning (void)) x
let setFeedbackGenerator x self = msg_send ~self ~cmd:(selector "setFeedbackGenerator:") ~typ:(id @-> returning (void)) x
let setFloatingForced x self = msg_send ~self ~cmd:(selector "setFloatingForced:") ~typ:(bool @-> returning (void)) x
let setForCustomInputView x self = msg_send ~self ~cmd:(selector "setForCustomInputView:") ~typ:(bool @-> returning (void)) x
let setFrame x self = msg_send ~self ~cmd:(selector "setFrame:") ~typ:(CGRect.t @-> returning (void)) x
let setGeometryDelegate x self = msg_send ~self ~cmd:(selector "setGeometryDelegate:") ~typ:(id @-> returning (void)) x
let setGeometryIsChanging x self = msg_send ~self ~cmd:(selector "setGeometryIsChanging:") ~typ:(bool @-> returning (void)) x
let setHandlingKeyCommandFromHardwareKeyboard x self = msg_send ~self ~cmd:(selector "setHandlingKeyCommandFromHardwareKeyboard:") ~typ:(bool @-> returning (void)) x
let setHardwareKeyboardIsSeen x self = msg_send ~self ~cmd:(selector "setHardwareKeyboardIsSeen:") ~typ:(bool @-> returning (void)) x
let setHardwareKeyboardsSeenPreference x self = msg_send ~self ~cmd:(selector "setHardwareKeyboardsSeenPreference:") ~typ:(id @-> returning (void)) x
let setInHardwareKeyboardMode x self = msg_send ~self ~cmd:(selector "setInHardwareKeyboardMode:") ~typ:(bool @-> returning (void)) x
let setInHardwareKeyboardMode' x ~forceRebuild self = msg_send ~self ~cmd:(selector "setInHardwareKeyboardMode:forceRebuild:") ~typ:(bool @-> bool @-> returning (void)) x forceRebuild
let setInSplitKeyboardMode x self = msg_send ~self ~cmd:(selector "setInSplitKeyboardMode:") ~typ:(bool @-> returning (void)) x
let setInitialDirection self = msg_send ~self ~cmd:(selector "setInitialDirection") ~typ:(returning (void))
let setInputDelegateManager x self = msg_send ~self ~cmd:(selector "setInputDelegateManager:") ~typ:(id @-> returning (void)) x
let setInputManagerFromCurrentInputMode self = msg_send ~self ~cmd:(selector "setInputManagerFromCurrentInputMode") ~typ:(returning (void))
let setInputManagerState x self = msg_send ~self ~cmd:(selector "setInputManagerState:") ~typ:(id @-> returning (void)) x
let setInputMode x self = msg_send ~self ~cmd:(selector "setInputMode:") ~typ:(id @-> returning (void)) x
let setInputMode1 x ~userInitiated self = msg_send ~self ~cmd:(selector "setInputMode:userInitiated:") ~typ:(id @-> bool @-> returning (void)) x userInitiated
let setInputMode2 x ~userInitiated ~updateIndicator ~executionContext self = msg_send ~self ~cmd:(selector "setInputMode:userInitiated:updateIndicator:executionContext:") ~typ:(id @-> bool @-> bool @-> id @-> returning (void)) x userInitiated updateIndicator executionContext
let setInputModeFromPreferences self = msg_send ~self ~cmd:(selector "setInputModeFromPreferences") ~typ:(returning (void))
let setInputModeToNextASCIICapableInPreferredList self = msg_send ~self ~cmd:(selector "setInputModeToNextASCIICapableInPreferredList") ~typ:(returning (void))
let setInputModeToNextInPreferredListWithExecutionContext x self = msg_send ~self ~cmd:(selector "setInputModeToNextInPreferredListWithExecutionContext:") ~typ:(id @-> returning (void)) x
let setInputPoint x self = msg_send ~self ~cmd:(selector "setInputPoint:") ~typ:(CGPoint.t @-> returning (void)) x
let setInternationalKeyIntroductionView x self = msg_send ~self ~cmd:(selector "setInternationalKeyIntroductionView:") ~typ:(id @-> returning (void)) x
let setIsAttachedHardwareKeyboard x self = msg_send ~self ~cmd:(selector "setIsAttachedHardwareKeyboard:") ~typ:(id @-> returning (void)) x
let setIsCallingTextChangedDuringInputModeSwitch x self = msg_send ~self ~cmd:(selector "setIsCallingTextChangedDuringInputModeSwitch:") ~typ:(bool @-> returning (void)) x
let setKeyboardInputMode x ~userInitiated self = msg_send ~self ~cmd:(selector "setKeyboardInputMode:userInitiated:") ~typ:(id @-> bool @-> returning (void)) x userInitiated
let setKeyboardInputMode' x ~userInitiated ~updateIndicator ~executionContext self = msg_send ~self ~cmd:(selector "setKeyboardInputMode:userInitiated:updateIndicator:executionContext:") ~typ:(id @-> bool @-> bool @-> id @-> returning (void)) x userInitiated updateIndicator executionContext
let setKeyboardInputModeFromPreferences x self = msg_send ~self ~cmd:(selector "setKeyboardInputModeFromPreferences:") ~typ:(id @-> returning (void)) x
let setLabel x ~forKey self = msg_send ~self ~cmd:(selector "setLabel:forKey:") ~typ:(id @-> id @-> returning (void)) x forKey
let setLastChooseSupplementalItemToInsertCallbackIdentifier x self = msg_send ~self ~cmd:(selector "setLastChooseSupplementalItemToInsertCallbackIdentifier:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setLastMatchedSupplementalCandidate x self = msg_send ~self ~cmd:(selector "setLastMatchedSupplementalCandidate:") ~typ:(id @-> returning (void)) x
let setLayoutAllowsContinuousPath x self = msg_send ~self ~cmd:(selector "setLayoutAllowsContinuousPath:") ~typ:(bool @-> returning (void)) x
let setLayoutForKeyHitTest x self = msg_send ~self ~cmd:(selector "setLayoutForKeyHitTest:") ~typ:(id @-> returning (void)) x
let setLayoutRenderConfig x self = msg_send ~self ~cmd:(selector "setLayoutRenderConfig:") ~typ:(id @-> returning (void)) x
let setLockFloating x self = msg_send ~self ~cmd:(selector "setLockFloating:") ~typ:(bool @-> returning (void)) x
let setMarkedText x ~selectedRange ~inputString ~searchString ~candidateOffset ~liveConversionSegments ~highlighSegmentIndex self = msg_send ~self ~cmd:(selector "setMarkedText:selectedRange:inputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:") ~typ:(id @-> NSRange.t @-> id @-> id @-> llong @-> id @-> ullong @-> returning (void)) x selectedRange inputString searchString (LLong.of_int candidateOffset) liveConversionSegments (ULLong.of_int highlighSegmentIndex)
let setOverrideTextInputTraits x self = msg_send ~self ~cmd:(selector "setOverrideTextInputTraits:") ~typ:(id @-> returning (void)) x
let setPendingAutofillIndex x self = msg_send ~self ~cmd:(selector "setPendingAutofillIndex:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let setPendingSupplementalCandidateToInsert x self = msg_send ~self ~cmd:(selector "setPendingSupplementalCandidateToInsert:") ~typ:(id @-> returning (void)) x
let setPreviousGlobeKeyEvent x self = msg_send ~self ~cmd:(selector "setPreviousGlobeKeyEvent:") ~typ:(id @-> returning (void)) x
let setPreviousInputString x self = msg_send ~self ~cmd:(selector "setPreviousInputString:") ~typ:(id @-> returning (void)) x
let setPrewarmsPredictiveCandidates x self = msg_send ~self ~cmd:(selector "setPrewarmsPredictiveCandidates:") ~typ:(bool @-> returning (void)) x
let setReceivedCandidatesInCurrentInputMode x self = msg_send ~self ~cmd:(selector "setReceivedCandidatesInCurrentInputMode:") ~typ:(bool @-> returning (void)) x
let setRequestedInteractionModel x self = msg_send ~self ~cmd:(selector "setRequestedInteractionModel:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setReturnKeyEnabled x self = msg_send ~self ~cmd:(selector "setReturnKeyEnabled:") ~typ:(bool @-> returning (void)) x
let setRivenSplitLock x self = msg_send ~self ~cmd:(selector "setRivenSplitLock:") ~typ:(bool @-> returning (void)) x
let setSelectionWithPoint x self = msg_send ~self ~cmd:(selector "setSelectionWithPoint:") ~typ:(CGPoint.t @-> returning (void)) x
let setServiceRole x self = msg_send ~self ~cmd:(selector "setServiceRole:") ~typ:(ullong @-> returning (void)) (ULLong.of_int x)
let setShift x self = msg_send ~self ~cmd:(selector "setShift:") ~typ:(bool @-> returning (void)) x
let setShift' x ~autoshift self = msg_send ~self ~cmd:(selector "setShift:autoshift:") ~typ:(bool @-> bool @-> returning (void)) x autoshift
let setShiftLocked x self = msg_send ~self ~cmd:(selector "setShiftLocked:") ~typ:(bool @-> returning (void)) x
let setShiftLockedForced x self = msg_send ~self ~cmd:(selector "setShiftLockedForced:") ~typ:(bool @-> returning (void)) x
let setShiftNeedsUpdate self = msg_send ~self ~cmd:(selector "setShiftNeedsUpdate") ~typ:(returning (void))
let setShiftOffIfNeeded self = msg_send ~self ~cmd:(selector "setShiftOffIfNeeded") ~typ:(returning (void))
let setShiftPreventAutoshift x self = msg_send ~self ~cmd:(selector "setShiftPreventAutoshift:") ~typ:(bool @-> returning (void)) x
let setShouldIgnoreTextInputChanges x self = msg_send ~self ~cmd:(selector "setShouldIgnoreTextInputChanges:") ~typ:(bool @-> returning (void)) x
let setShouldSkipCandidateSelection x self = msg_send ~self ~cmd:(selector "setShouldSkipCandidateSelection:") ~typ:(bool @-> returning (void)) x
let setShouldSkipCandidateSelection' x ~userInitiated self = msg_send ~self ~cmd:(selector "setShouldSkipCandidateSelection:userInitiated:") ~typ:(bool @-> bool @-> returning (void)) x userInitiated
let setShouldUpdateCacheOnInputModesChange x self = msg_send ~self ~cmd:(selector "setShouldUpdateCacheOnInputModesChange:") ~typ:(bool @-> returning (void)) x
let setShouldUpdateLayoutAutomatically x self = msg_send ~self ~cmd:(selector "setShouldUpdateLayoutAutomatically:") ~typ:(bool @-> returning (void)) x
let setShowInputModeIndicator x self = msg_send ~self ~cmd:(selector "setShowInputModeIndicator:") ~typ:(bool @-> returning (void)) x
let setShowsCandidateBar x self = msg_send ~self ~cmd:(selector "setShowsCandidateBar:") ~typ:(bool @-> returning (void)) x
let setShowsCandidateInline x self = msg_send ~self ~cmd:(selector "setShowsCandidateInline:") ~typ:(bool @-> returning (void)) x
let setSplit x ~animated self = msg_send ~self ~cmd:(selector "setSplit:animated:") ~typ:(bool @-> bool @-> returning (void)) x animated
let setSplitProgress x self = msg_send ~self ~cmd:(selector "setSplitProgress:") ~typ:(double @-> returning (void)) x
let setSuggestions x self = msg_send ~self ~cmd:(selector "setSuggestions:") ~typ:(id @-> returning (void)) x
let setSuppressUpdateAssistantView x self = msg_send ~self ~cmd:(selector "setSuppressUpdateAssistantView:") ~typ:(bool @-> returning (void)) x
let setSuppressUpdateLayout x self = msg_send ~self ~cmd:(selector "setSuppressUpdateLayout:") ~typ:(bool @-> returning (void)) x
let setSuppressUpdateShiftState x self = msg_send ~self ~cmd:(selector "setSuppressUpdateShiftState:") ~typ:(bool @-> returning (void)) x
let setTextInputChangesIgnored x self = msg_send ~self ~cmd:(selector "setTextInputChangesIgnored:") ~typ:(bool @-> returning (void)) x
let setTextSelectionController x self = msg_send ~self ~cmd:(selector "setTextSelectionController:") ~typ:(id @-> returning (void)) x
let setTextSelectionControllerFromDelegate self = msg_send ~self ~cmd:(selector "setTextSelectionControllerFromDelegate") ~typ:(returning (void))
let setTouchEventWaitingForKeyInputEvent x self = msg_send ~self ~cmd:(selector "setTouchEventWaitingForKeyInputEvent:") ~typ:(id @-> returning (void)) x
let setTwoFingerTapTimestamp x self = msg_send ~self ~cmd:(selector "setTwoFingerTapTimestamp:") ~typ:(double @-> returning (void)) x
let setUpdateCapsLockDelayOverrideForNonTyping x self = msg_send ~self ~cmd:(selector "setUpdateCapsLockDelayOverrideForNonTyping:") ~typ:(id @-> returning (void)) x
let setUserSelectedCurrentCandidate x self = msg_send ~self ~cmd:(selector "setUserSelectedCurrentCandidate:") ~typ:(bool @-> returning (void)) x
let setUsesCandidateSelection x self = msg_send ~self ~cmd:(selector "setUsesCandidateSelection:") ~typ:(bool @-> returning (void)) x
let shiftLockPreference self = msg_send ~self ~cmd:(selector "shiftLockPreference") ~typ:(returning (bool))
let shiftLockedEnabled self = msg_send ~self ~cmd:(selector "shiftLockedEnabled") ~typ:(returning (bool))
let shouldAcceptCandidate x ~beforeInputString self = msg_send ~self ~cmd:(selector "shouldAcceptCandidate:beforeInputString:") ~typ:(id @-> id @-> returning (bool)) x beforeInputString
let shouldAcceptContinuousPathConversion x self = msg_send ~self ~cmd:(selector "shouldAcceptContinuousPathConversion:") ~typ:(id @-> returning (bool)) x
let shouldAllowRepeatEvent x self = msg_send ~self ~cmd:(selector "shouldAllowRepeatEvent:") ~typ:(id @-> returning (bool)) x
let shouldAllowSelectionGestures x ~atPoint ~toBegin self = msg_send ~self ~cmd:(selector "shouldAllowSelectionGestures:atPoint:toBegin:") ~typ:(bool @-> CGPoint.t @-> bool @-> returning (bool)) x atPoint toBegin
let shouldAllowTwoFingerSelectionGestureOnView x self = msg_send ~self ~cmd:(selector "shouldAllowTwoFingerSelectionGestureOnView:") ~typ:(id @-> returning (bool)) x
let shouldApplyAcceptedAutocorrection x self = msg_send ~self ~cmd:(selector "shouldApplyAcceptedAutocorrection:") ~typ:(id @-> returning (bool)) x
let shouldDeleteAutospaceBeforeTerminator x self = msg_send ~self ~cmd:(selector "shouldDeleteAutospaceBeforeTerminator:") ~typ:(id @-> returning (bool)) x
let shouldEnableShiftForDeletedCharacter x self = msg_send ~self ~cmd:(selector "shouldEnableShiftForDeletedCharacter:") ~typ:(uint @-> returning (bool)) x
let shouldExtendLongPressAction x self = msg_send ~self ~cmd:(selector "shouldExtendLongPressAction:") ~typ:(id @-> returning (double)) x
let shouldForwardInsertSpaceAfterAcceptingPredictiveInput x self = msg_send ~self ~cmd:(selector "shouldForwardInsertSpaceAfterAcceptingPredictiveInput:") ~typ:(id @-> returning (bool)) x
let shouldGenerateCandidatesAfterSelectionChange self = msg_send ~self ~cmd:(selector "shouldGenerateCandidatesAfterSelectionChange") ~typ:(returning (bool))
let shouldIgnoreTextInputChanges self = msg_send ~self ~cmd:(selector "shouldIgnoreTextInputChanges") ~typ:(returning (bool))
let shouldLoadAutofillSignUpInputViewController self = msg_send ~self ~cmd:(selector "shouldLoadAutofillSignUpInputViewController") ~typ:(returning (bool))
let shouldPrioritizeTextSuggestionsOverCandidateResultSet x self = msg_send ~self ~cmd:(selector "shouldPrioritizeTextSuggestionsOverCandidateResultSet:") ~typ:(id @-> returning (bool)) x
let shouldRapidDelete self = msg_send ~self ~cmd:(selector "shouldRapidDelete") ~typ:(returning (bool))
let shouldRapidDeleteWithDelegate self = msg_send ~self ~cmd:(selector "shouldRapidDeleteWithDelegate") ~typ:(returning (bool))
let shouldShowCandidateBar self = msg_send ~self ~cmd:(selector "shouldShowCandidateBar") ~typ:(returning (bool))
let shouldShowCandidateBarIfReceivedCandidatesInCurrentInputMode x ~ignoreHidePredictionTrait self = msg_send ~self ~cmd:(selector "shouldShowCandidateBarIfReceivedCandidatesInCurrentInputMode:ignoreHidePredictionTrait:") ~typ:(bool @-> bool @-> returning (bool)) x ignoreHidePredictionTrait
let shouldShowContinuousPathIntroductionView self = msg_send ~self ~cmd:(selector "shouldShowContinuousPathIntroductionView") ~typ:(returning (bool))
let shouldShowDictationKey self = msg_send ~self ~cmd:(selector "shouldShowDictationKey") ~typ:(returning (bool))
let shouldShowEditingIntroductionView self = msg_send ~self ~cmd:(selector "shouldShowEditingIntroductionView") ~typ:(returning (bool))
let shouldShowInternationalKey self = msg_send ~self ~cmd:(selector "shouldShowInternationalKey") ~typ:(returning (bool))
let shouldShowInternationalKeyIntroduction self = msg_send ~self ~cmd:(selector "shouldShowInternationalKeyIntroduction") ~typ:(returning (bool))
let shouldShowKeyboardMenu self = msg_send ~self ~cmd:(selector "shouldShowKeyboardMenu") ~typ:(returning (bool))
let shouldShowLongPredictionList self = msg_send ~self ~cmd:(selector "shouldShowLongPredictionList") ~typ:(returning (bool))
let shouldSkipCandidateSelection self = msg_send ~self ~cmd:(selector "shouldSkipCandidateSelection") ~typ:(returning (bool))
let shouldSwitchFromInputManagerMode x ~toInputMode self = msg_send ~self ~cmd:(selector "shouldSwitchFromInputManagerMode:toInputMode:") ~typ:(id @-> id @-> returning (bool)) x toInputMode
let shouldSwitchInputMode x self = msg_send ~self ~cmd:(selector "shouldSwitchInputMode:") ~typ:(id @-> returning (bool)) x
let shouldUpdateLayoutAutomatically self = msg_send ~self ~cmd:(selector "shouldUpdateLayoutAutomatically") ~typ:(returning (bool))
let shouldUseCarPlayModes self = msg_send ~self ~cmd:(selector "shouldUseCarPlayModes") ~typ:(returning (bool))
let shouldUsePinyinStyleRowNavigation self = msg_send ~self ~cmd:(selector "shouldUsePinyinStyleRowNavigation") ~typ:(returning (bool))
let showFirstTextAlternativeWithRangeAdjustment x self = msg_send ~self ~cmd:(selector "showFirstTextAlternativeWithRangeAdjustment:") ~typ:(llong @-> returning (void)) (LLong.of_int x)
let showInputModeIndicator self = msg_send ~self ~cmd:(selector "showInputModeIndicator") ~typ:(returning (bool))
let showInternationalKeyIntroductionIfNeededWithPreviousInputMode x self = msg_send ~self ~cmd:(selector "showInternationalKeyIntroductionIfNeededWithPreviousInputMode:") ~typ:(id @-> returning (void)) x
let showKeyboard self = msg_send ~self ~cmd:(selector "showKeyboard") ~typ:(returning (void))
let showKeyboardIfNeeded self = msg_send ~self ~cmd:(selector "showKeyboardIfNeeded") ~typ:(returning (void))
let showKeyboardWithoutSuppressionPolicy self = msg_send ~self ~cmd:(selector "showKeyboardWithoutSuppressionPolicy") ~typ:(returning (void))
let showNextCandidates self = msg_send ~self ~cmd:(selector "showNextCandidates") ~typ:(returning (void))
let showNextPage self = msg_send ~self ~cmd:(selector "showNextPage") ~typ:(returning (void))
let showPreviousCandidate self = msg_send ~self ~cmd:(selector "showPreviousCandidate") ~typ:(returning (void))
let showSelectionCommands self = msg_send ~self ~cmd:(selector "showSelectionCommands") ~typ:(returning (void))
let showTextAlternativesInRange x self = msg_send ~self ~cmd:(selector "showTextAlternativesInRange:") ~typ:(NSRange.t @-> returning (void)) x
let showsCandidateBar self = msg_send ~self ~cmd:(selector "showsCandidateBar") ~typ:(returning (bool))
let showsCandidateInline self = msg_send ~self ~cmd:(selector "showsCandidateInline") ~typ:(returning (bool))
let showsDedicatedEmojiKeyAlongsideGlobeButton self = msg_send ~self ~cmd:(selector "showsDedicatedEmojiKeyAlongsideGlobeButton") ~typ:(returning (bool))
let skipHitTestForTouchEvent x self = msg_send ~self ~cmd:(selector "skipHitTestForTouchEvent:") ~typ:(id @-> returning (void)) x
let skipHitTestForTouchEvent' x ~delayed self = msg_send ~self ~cmd:(selector "skipHitTestForTouchEvent:delayed:") ~typ:(id @-> bool @-> returning (void)) x delayed
let skipHitTestForTouchEvents x self = msg_send ~self ~cmd:(selector "skipHitTestForTouchEvents:") ~typ:(id @-> returning (void)) x
let smartInsertDeleteIsEnabled self = msg_send ~self ~cmd:(selector "smartInsertDeleteIsEnabled") ~typ:(returning (bool))
let smartPunctuationController self = msg_send ~self ~cmd:(selector "smartPunctuationController") ~typ:(returning (id))
let smartSelectionForTextInDocument x ~inRange ~options ~completion self = msg_send ~self ~cmd:(selector "smartSelectionForTextInDocument:inRange:options:completion:") ~typ:(id @-> NSRange.t @-> ullong @-> ptr void @-> returning (void)) x inRange (ULLong.of_int options) completion
let splitTransitionInProgress self = msg_send ~self ~cmd:(selector "splitTransitionInProgress") ~typ:(returning (bool))
let startAutoDeleteTimer self = msg_send ~self ~cmd:(selector "startAutoDeleteTimer") ~typ:(returning (void))
let startAutoDeleteTimerForForce x self = msg_send ~self ~cmd:(selector "startAutoDeleteTimerForForce:") ~typ:(double @-> returning (void)) x
let startDelayDeleteTimer self = msg_send ~self ~cmd:(selector "startDelayDeleteTimer") ~typ:(returning (void))
let stopAutoDelete self = msg_send ~self ~cmd:(selector "stopAutoDelete") ~typ:(returning (void))
let subtractKeyboardFrameFromRect x ~inView self = msg_send_stret ~self ~cmd:(selector "subtractKeyboardFrameFromRect:inView:") ~typ:(CGRect.t @-> id @-> returning (CGRect.t)) ~return_type:CGRect.t x inView
let suppliesCompletions self = msg_send ~self ~cmd:(selector "suppliesCompletions") ~typ:(returning (bool))
let supportsNumberKeySelection self = msg_send ~self ~cmd:(selector "supportsNumberKeySelection") ~typ:(returning (bool))
let suppressOptOutASPCandidateUpdateForDelegate x self = msg_send ~self ~cmd:(selector "suppressOptOutASPCandidateUpdateForDelegate:") ~typ:(id @-> returning (bool)) x
let suppressUpdateAssistantView self = msg_send ~self ~cmd:(selector "suppressUpdateAssistantView") ~typ:(returning (bool))
let suppressUpdateLayout self = msg_send ~self ~cmd:(selector "suppressUpdateLayout") ~typ:(returning (bool))
let suppressUpdateShiftState self = msg_send ~self ~cmd:(selector "suppressUpdateShiftState") ~typ:(returning (bool))
let syncDocumentStateToInputDelegate self = msg_send ~self ~cmd:(selector "syncDocumentStateToInputDelegate") ~typ:(returning (void))
let syncDocumentStateToInputDelegateWithExecutionContext x self = msg_send ~self ~cmd:(selector "syncDocumentStateToInputDelegateWithExecutionContext:") ~typ:(id @-> returning (void)) x
let syncInputManagerToAcceptedAutocorrection x ~forInput self = msg_send ~self ~cmd:(selector "syncInputManagerToAcceptedAutocorrection:forInput:") ~typ:(id @-> id @-> returning (void)) x forInput
let syncInputManagerToKeyboardState self = msg_send ~self ~cmd:(selector "syncInputManagerToKeyboardState") ~typ:(returning (void))
let syncInputManagerToKeyboardStateWithExecutionContext x self = msg_send ~self ~cmd:(selector "syncInputManagerToKeyboardStateWithExecutionContext:") ~typ:(id @-> returning (void)) x
let syncKeyboardToConfiguration x self = msg_send ~self ~cmd:(selector "syncKeyboardToConfiguration:") ~typ:(id @-> returning (void)) x
let takeTextInputTraitsFromDelegate self = msg_send ~self ~cmd:(selector "takeTextInputTraitsFromDelegate") ~typ:(returning (void))
let taskQueue self = msg_send ~self ~cmd:(selector "taskQueue") ~typ:(returning (id))
let textAccepted x self = msg_send ~self ~cmd:(selector "textAccepted:") ~typ:(id @-> returning (void)) x
let textAccepted' x ~executionContext self = msg_send ~self ~cmd:(selector "textAccepted:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let textChanged x self = msg_send ~self ~cmd:(selector "textChanged:") ~typ:(id @-> returning (void)) x
let textChanged' x ~executionContext self = msg_send ~self ~cmd:(selector "textChanged:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let textDidChange x self = msg_send ~self ~cmd:(selector "textDidChange:") ~typ:(id @-> returning (void)) x
let textFrameChanged x self = msg_send ~self ~cmd:(selector "textFrameChanged:") ~typ:(id @-> returning (void)) x
let textInputChangingCount self = msg_send ~self ~cmd:(selector "textInputChangingCount") ~typ:(returning (int))
let textInputTraits self = msg_send ~self ~cmd:(selector "textInputTraits") ~typ:(returning (id))
let textInputTraitsNeedAutofill self = msg_send ~self ~cmd:(selector "textInputTraitsNeedAutofill") ~typ:(returning (bool))
let textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact self = msg_send ~self ~cmd:(selector "textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact") ~typ:(returning (bool))
let textInputTraitsNeedContactAutoFill self = msg_send ~self ~cmd:(selector "textInputTraitsNeedContactAutoFill") ~typ:(returning (bool))
let textInputTraitsNeedOneTimeCode self = msg_send ~self ~cmd:(selector "textInputTraitsNeedOneTimeCode") ~typ:(returning (bool))
let textInputTraitsNeedSignup self = msg_send ~self ~cmd:(selector "textInputTraitsNeedSignup") ~typ:(returning (bool))
let textInteractionAssistant self = msg_send ~self ~cmd:(selector "textInteractionAssistant") ~typ:(returning (id))
let textSelectionController self = msg_send ~self ~cmd:(selector "textSelectionController") ~typ:(returning (id))
let textSelectionControllerForInputDelegate x self = msg_send ~self ~cmd:(selector "textSelectionControllerForInputDelegate:") ~typ:(id @-> returning (id)) x
let textSuggestionDidChange x self = msg_send ~self ~cmd:(selector "textSuggestionDidChange:") ~typ:(id @-> returning (void)) x
let textWillChange x self = msg_send ~self ~cmd:(selector "textWillChange:") ~typ:(id @-> returning (void)) x
let timeoutForCurrentForce self = msg_send ~self ~cmd:(selector "timeoutForCurrentForce") ~typ:(returning (double))
let timestampOfLastTouchesEnded self = msg_send ~self ~cmd:(selector "timestampOfLastTouchesEnded") ~typ:(returning (double))
let toggleShift self = msg_send ~self ~cmd:(selector "toggleShift") ~typ:(returning (void))
let toggleSoftwareKeyboard self = msg_send ~self ~cmd:(selector "toggleSoftwareKeyboard") ~typ:(returning (void))
let touchAutoDeleteTimerWithThreshold x ~adjustForPartialCompletion self = msg_send ~self ~cmd:(selector "touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:") ~typ:(double @-> bool @-> returning (void)) x adjustForPartialCompletion
let touchAutocorrectPromptTimer self = msg_send ~self ~cmd:(selector "touchAutocorrectPromptTimer") ~typ:(returning (void))
let touchDelayDeleteTimerWithThreshold x self = msg_send ~self ~cmd:(selector "touchDelayDeleteTimerWithThreshold:") ~typ:(double @-> returning (void)) x
let touchEventWaitingForKeyInputEvent self = msg_send ~self ~cmd:(selector "touchEventWaitingForKeyInputEvent") ~typ:(returning (id))
let touchLongPressTimer self = msg_send ~self ~cmd:(selector "touchLongPressTimer") ~typ:(returning (void))
let touchLongPressTimerWithDelay x self = msg_send ~self ~cmd:(selector "touchLongPressTimerWithDelay:") ~typ:(double @-> returning (void)) x
let touchLongPressTimerWithDelay' x ~userInfo self = msg_send ~self ~cmd:(selector "touchLongPressTimerWithDelay:userInfo:") ~typ:(double @-> id @-> returning (void)) x userInfo
let touchUpdateLastUsedInputModeAction self = msg_send ~self ~cmd:(selector "touchUpdateLastUsedInputModeAction") ~typ:(returning (void))
let trackResponderForAutofillIfNeeded x self = msg_send ~self ~cmd:(selector "trackResponderForAutofillIfNeeded:") ~typ:(id @-> returning (void)) x
let trackUsageForAcceptedAutocorrection x ~promptWasShowing self = msg_send ~self ~cmd:(selector "trackUsageForAcceptedAutocorrection:promptWasShowing:") ~typ:(id @-> bool @-> returning (void)) x promptWasShowing
let trackUsageForCandidateAcceptedAction x self = msg_send ~self ~cmd:(selector "trackUsageForCandidateAcceptedAction:") ~typ:(id @-> returning (void)) x
let trackUsageForPromptedCorrection x ~inputString ~previousPrompt self = msg_send ~self ~cmd:(selector "trackUsageForPromptedCorrection:inputString:previousPrompt:") ~typ:(id @-> id @-> id @-> returning (void)) x inputString previousPrompt
let traitCollectionDidChange self = msg_send ~self ~cmd:(selector "traitCollectionDidChange") ~typ:(returning (void))
let transitionInProgress self = msg_send ~self ~cmd:(selector "transitionInProgress") ~typ:(returning (bool))
let unmarkText x self = msg_send ~self ~cmd:(selector "unmarkText:") ~typ:(id @-> returning (void)) x
let updateAssistantView self = msg_send ~self ~cmd:(selector "updateAssistantView") ~typ:(returning (void))
let updateAutocorrectContainerWithAutocorrection x ~parentView ~correctionRects self = msg_send ~self ~cmd:(selector "updateAutocorrectContainerWithAutocorrection:parentView:correctionRects:") ~typ:(id @-> id @-> id @-> returning (void)) x parentView correctionRects
let updateAutocorrectPrompt x self = msg_send ~self ~cmd:(selector "updateAutocorrectPrompt:") ~typ:(id @-> returning (void)) x
let updateAutocorrectPrompt1 x ~correctionRects self = msg_send ~self ~cmd:(selector "updateAutocorrectPrompt:correctionRects:") ~typ:(id @-> id @-> returning (void)) x correctionRects
let updateAutocorrectPrompt2 x ~executionContext self = msg_send ~self ~cmd:(selector "updateAutocorrectPrompt:executionContext:") ~typ:(id @-> id @-> returning (void)) x executionContext
let updateCandidateDisplay self = msg_send ~self ~cmd:(selector "updateCandidateDisplay") ~typ:(returning (void))
let updateCandidateDisplayAsyncWithCandidateSet x self = msg_send ~self ~cmd:(selector "updateCandidateDisplayAsyncWithCandidateSet:") ~typ:(id @-> returning (void)) x
let updateCapsLockDelayOverrideForNonTyping self = msg_send ~self ~cmd:(selector "updateCapsLockDelayOverrideForNonTyping") ~typ:(returning (id))
let updateChangeTimeAndIncrementCount self = msg_send ~self ~cmd:(selector "updateChangeTimeAndIncrementCount") ~typ:(returning (void))
let updateDefaultsWithResults x self = msg_send ~self ~cmd:(selector "updateDefaultsWithResults:") ~typ:(ptr void @-> returning (void)) x
let updateDelegatePasteSupport self = msg_send ~self ~cmd:(selector "updateDelegatePasteSupport") ~typ:(returning (void))
let updateDoubleSpacePeriodStateForCharacter x self = msg_send ~self ~cmd:(selector "updateDoubleSpacePeriodStateForCharacter:") ~typ:(uint @-> returning (void)) x
let updateDoubleSpacePeriodStateForString x self = msg_send ~self ~cmd:(selector "updateDoubleSpacePeriodStateForString:") ~typ:(id @-> returning (void)) x
let updateForChangedSelection self = msg_send ~self ~cmd:(selector "updateForChangedSelection") ~typ:(returning (void))
let updateForChangedSelectionWithExecutionContext x self = msg_send ~self ~cmd:(selector "updateForChangedSelectionWithExecutionContext:") ~typ:(id @-> returning (void)) x
let updateForHandBiasChange self = msg_send ~self ~cmd:(selector "updateForHandBiasChange") ~typ:(returning (void))
let updateFromTextInputTraits self = msg_send ~self ~cmd:(selector "updateFromTextInputTraits") ~typ:(returning (void))
let updateHardwareKeyboardLayout self = msg_send ~self ~cmd:(selector "updateHardwareKeyboardLayout") ~typ:(returning (void))
let updateHardwareKeyboardLayout' x self = msg_send ~self ~cmd:(selector "updateHardwareKeyboardLayout:") ~typ:(bool @-> returning (void)) x
let updateInputAssistantButtonItems self = msg_send ~self ~cmd:(selector "updateInputAssistantButtonItems") ~typ:(returning (void))
let updateInputDelegateForRemoteDocumentStateChange x ~selectedTextRange ~forceSync self = msg_send ~self ~cmd:(selector "updateInputDelegateForRemoteDocumentStateChange:selectedTextRange:forceSync:") ~typ:(id @-> NSRange.t @-> bool @-> returning (void)) x selectedTextRange forceSync
let updateInputDelegateForRemoteTraitChange x ~forceSync self = msg_send ~self ~cmd:(selector "updateInputDelegateForRemoteTraitChange:forceSync:") ~typ:(id @-> bool @-> returning (void)) x forceSync
let updateInputManagerAutocapitalizationType self = msg_send ~self ~cmd:(selector "updateInputManagerAutocapitalizationType") ~typ:(returning (void))
let updateInputManagerMode self = msg_send ~self ~cmd:(selector "updateInputManagerMode") ~typ:(returning (void))
let updateInputModeIndicatorOnSingleKeyOnly x self = msg_send ~self ~cmd:(selector "updateInputModeIndicatorOnSingleKeyOnly:") ~typ:(bool @-> returning (void)) x
let updateInputModeIndicatorOnSingleKeyOnly' x ~preserveIfPossible self = msg_send ~self ~cmd:(selector "updateInputModeIndicatorOnSingleKeyOnly:preserveIfPossible:") ~typ:(bool @-> bool @-> returning (void)) x preserveIfPossible
let updateInputModeLastChosenPreference self = msg_send ~self ~cmd:(selector "updateInputModeLastChosenPreference") ~typ:(returning (void))
let updateIsAttachedHardwareKeyboard self = msg_send ~self ~cmd:(selector "updateIsAttachedHardwareKeyboard") ~typ:(returning (void))
let updateKeyBehaviors x ~withBehaviors ~forState self = msg_send ~self ~cmd:(selector "updateKeyBehaviors:withBehaviors:forState:") ~typ:(id @-> id @-> id @-> returning (id)) x withBehaviors forState
let updateKeyboardConfigurations self = msg_send ~self ~cmd:(selector "updateKeyboardConfigurations") ~typ:(returning (void))
let updateKeyboardEventsLagging x self = msg_send ~self ~cmd:(selector "updateKeyboardEventsLagging:") ~typ:(id @-> returning (void)) x
let updateKeyboardOutput x ~withInputForSmartPunctuation ~keyboardConfiguration self = msg_send ~self ~cmd:(selector "updateKeyboardOutput:withInputForSmartPunctuation:keyboardConfiguration:") ~typ:(id @-> id @-> id @-> returning (void)) x withInputForSmartPunctuation keyboardConfiguration
let updateKeyboardStateForDeletion self = msg_send ~self ~cmd:(selector "updateKeyboardStateForDeletion") ~typ:(returning (void))
let updateKeyboardStateForInsertion x self = msg_send ~self ~cmd:(selector "updateKeyboardStateForInsertion:") ~typ:(id @-> returning (void)) x
let updateLayout self = msg_send ~self ~cmd:(selector "updateLayout") ~typ:(returning (void))
let updateLayoutAndSetShift self = msg_send ~self ~cmd:(selector "updateLayoutAndSetShift") ~typ:(returning (void))
let updateLayoutIfNecessary self = msg_send ~self ~cmd:(selector "updateLayoutIfNecessary") ~typ:(returning (void))
let updateLayoutIfNeeded self = msg_send ~self ~cmd:(selector "updateLayoutIfNeeded") ~typ:(returning (void))
let updateLayoutToCurrentInterfaceOrientation self = msg_send ~self ~cmd:(selector "updateLayoutToCurrentInterfaceOrientation") ~typ:(returning (void))
let updateLegacyAutocorrectPromptWithAutocorrection x ~parentView ~correctionRects self = msg_send ~self ~cmd:(selector "updateLegacyAutocorrectPromptWithAutocorrection:parentView:correctionRects:") ~typ:(id @-> id @-> id @-> returning (void)) x parentView correctionRects
let updateNoContentViews self = msg_send ~self ~cmd:(selector "updateNoContentViews") ~typ:(returning (void))
let updateObserverState self = msg_send ~self ~cmd:(selector "updateObserverState") ~typ:(returning (void))
let updateReturnKey self = msg_send ~self ~cmd:(selector "updateReturnKey") ~typ:(returning (void))
let updateReturnKey' x self = msg_send ~self ~cmd:(selector "updateReturnKey:") ~typ:(bool @-> returning (void)) x
let updateSecureCandidateRenderTraits self = msg_send ~self ~cmd:(selector "updateSecureCandidateRenderTraits") ~typ:(returning (id))
let updateShiftState self = msg_send ~self ~cmd:(selector "updateShiftState") ~typ:(returning (void))
let updateShowCandidateBar self = msg_send ~self ~cmd:(selector "updateShowCandidateBar") ~typ:(returning (void))
let updateSmartPunctuationOptionsForLocaleIdentifier x self = msg_send ~self ~cmd:(selector "updateSmartPunctuationOptionsForLocaleIdentifier:") ~typ:(id @-> returning (void)) x
let updateStylingTraitsIfNeeded self = msg_send ~self ~cmd:(selector "updateStylingTraitsIfNeeded") ~typ:(returning (void))
let updateTextCandidateView self = msg_send ~self ~cmd:(selector "updateTextCandidateView") ~typ:(returning (void))
let updateTextInputKeyboardSource self = msg_send ~self ~cmd:(selector "updateTextInputKeyboardSource") ~typ:(returning (void))
let updatedKeyBehaviors self = msg_send ~self ~cmd:(selector "updatedKeyBehaviors") ~typ:(returning (id))
let updatingPreferences self = msg_send ~self ~cmd:(selector "updatingPreferences") ~typ:(returning (bool))
let userSelectedCurrentCandidate self = msg_send ~self ~cmd:(selector "userSelectedCurrentCandidate") ~typ:(returning (bool))
let usesAutoDeleteWord self = msg_send ~self ~cmd:(selector "usesAutoDeleteWord") ~typ:(returning (bool))
let usesAutocorrectionLists self = msg_send ~self ~cmd:(selector "usesAutocorrectionLists") ~typ:(returning (bool))
let usesCandidateSelection self = msg_send ~self ~cmd:(selector "usesCandidateSelection") ~typ:(returning (bool))
let usesContinuousPath self = msg_send ~self ~cmd:(selector "usesContinuousPath") ~typ:(returning (bool))
let usesContinuousPathProgressiveCandidates self = msg_send ~self ~cmd:(selector "usesContinuousPathProgressiveCandidates") ~typ:(returning (bool))
let willDoubleSpacePeriodForInputString x ~afterSpace ~elapsedTime self = msg_send ~self ~cmd:(selector "willDoubleSpacePeriodForInputString:afterSpace:elapsedTime:") ~typ:(id @-> bool @-> double @-> returning (bool)) x afterSpace elapsedTime
let willMoveToWindow x self = msg_send ~self ~cmd:(selector "willMoveToWindow:") ~typ:(id @-> returning (void)) x
let willReplaceTextInRangedSelectionWithKeyboardInput self = msg_send ~self ~cmd:(selector "willReplaceTextInRangedSelectionWithKeyboardInput") ~typ:(returning (void))