(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

open CoreFoundation

(** Apple docs: {{:https://developer.apple.com/documentation/cloudkit/ckcontainerimplementation?language=objc}CKContainerImplementation} *)

let self = get_class "CKContainerImplementation"

let _CKPropertiesDescription self = msg_send ~self ~cmd:(selector "CKPropertiesDescription") ~typ:(returning id)
let _CKStatusReportArray self = msg_send ~self ~cmd:(selector "CKStatusReportArray") ~typ:(returning id)
let acceptShareMetadata x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "acceptShareMetadata:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let accountInfoWithCompletionHandler x self = msg_send ~self ~cmd:(selector "accountInfoWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let accountStatusWithCompletionHandler x self = msg_send ~self ~cmd:(selector "accountStatusWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let addOperation x ~wrappingContainer ~convenienceConfiguration self = msg_send ~self ~cmd:(selector "addOperation:wrappingContainer:convenienceConfiguration:") ~typ:(id @-> id @-> id @-> returning void) x wrappingContainer convenienceConfiguration
let applicationBundleIdentifierForPush self = msg_send ~self ~cmd:(selector "applicationBundleIdentifierForPush") ~typ:(returning id)
let backgroundThrottlingOperationQueue self = msg_send ~self ~cmd:(selector "backgroundThrottlingOperationQueue") ~typ:(returning id)
let cachedSetupInfo self = msg_send ~self ~cmd:(selector "cachedSetupInfo") ~typ:(returning id)
let cancelUploadRequests self = msg_send ~self ~cmd:(selector "cancelUploadRequests") ~typ:(returning void)
let captureResponseHTTPHeaders self = msg_send ~self ~cmd:(selector "captureResponseHTTPHeaders") ~typ:(returning bool)
let clearContainerFromMetadataCache self = msg_send ~self ~cmd:(selector "clearContainerFromMetadataCache") ~typ:(returning void)
let clearPILSCacheForLookupInfos x self = msg_send ~self ~cmd:(selector "clearPILSCacheForLookupInfos:") ~typ:(id @-> returning void) x
let codeServiceImplementationWithName x self = msg_send ~self ~cmd:(selector "codeServiceImplementationWithName:") ~typ:(id @-> returning id) x
let codeServiceImplementationWithName1 x ~databaseScope self = msg_send ~self ~cmd:(selector "codeServiceImplementationWithName:databaseScope:") ~typ:(id @-> llong @-> returning id) x (LLong.of_int databaseScope)
let codeServiceImplementationWithName2 x ~serviceInstanceURL self = msg_send ~self ~cmd:(selector "codeServiceImplementationWithName:serviceInstanceURL:") ~typ:(id @-> id @-> returning id) x serviceInstanceURL
let codeServiceImplementationWithName3 x ~databaseScope ~serviceInstanceURL self = msg_send ~self ~cmd:(selector "codeServiceImplementationWithName:databaseScope:serviceInstanceURL:") ~typ:(id @-> llong @-> id @-> returning id) x (LLong.of_int databaseScope) serviceInstanceURL
let codeServiceImplementations self = msg_send ~self ~cmd:(selector "codeServiceImplementations") ~typ:(returning id)
let consumeSandboxExtensions x ~reply self = msg_send ~self ~cmd:(selector "consumeSandboxExtensions:reply:") ~typ:(id @-> (ptr void) @-> returning void) x reply
let containerID self = msg_send ~self ~cmd:(selector "containerID") ~typ:(returning id)
let containerIdentifier self = msg_send ~self ~cmd:(selector "containerIdentifier") ~typ:(returning id)
let containerScopedUserID self = msg_send ~self ~cmd:(selector "containerScopedUserID") ~typ:(returning id)
let convenienceOperationQueue self = msg_send ~self ~cmd:(selector "convenienceOperationQueue") ~typ:(returning id)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let decryptPersonalInfoOnShare x ~completionHandler self = msg_send ~self ~cmd:(selector "decryptPersonalInfoOnShare:completionHandler:") ~typ:(id @-> (ptr void) @-> returning void) x completionHandler
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let deviceContext self = msg_send ~self ~cmd:(selector "deviceContext") ~typ:(returning id)
let deviceCountWithCompletionHandler x self = msg_send ~self ~cmd:(selector "deviceCountWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let discoverAllIdentitiesWithWrappingContainer x ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "discoverAllIdentitiesWithWrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> (ptr void) @-> returning void) x convenienceConfiguration completionHandler
let discoverUserIdentityWithEmailAddress x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "discoverUserIdentityWithEmailAddress:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let discoverUserIdentityWithPhoneNumber x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "discoverUserIdentityWithPhoneNumber:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let discoverUserIdentityWithUserRecordID x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "discoverUserIdentityWithUserRecordID:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let discretionaryThrottlingOperationQueue self = msg_send ~self ~cmd:(selector "discretionaryThrottlingOperationQueue") ~typ:(returning id)
let discretionaryXPCConnection self = msg_send ~self ~cmd:(selector "discretionaryXPCConnection") ~typ:(returning id)
let dropDetachedContainersWithCompletionHandler x self = msg_send ~self ~cmd:(selector "dropDetachedContainersWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let dumpDaemonStatusReport self = msg_send ~self ~cmd:(selector "dumpDaemonStatusReport") ~typ:(returning void)
let dumpDaemonStatusReportToFileHandle x ~completionHandler self = msg_send ~self ~cmd:(selector "dumpDaemonStatusReportToFileHandle:completionHandler:") ~typ:(id @-> (ptr void) @-> returning void) x completionHandler
let fakeDeviceToDeviceEncryptionAvailability self = msg_send ~self ~cmd:(selector "fakeDeviceToDeviceEncryptionAvailability") ~typ:(returning id)
let fetchAllLongLivedOperationIDsWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchAllLongLivedOperationIDsWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let fetchCurrentDeviceIDWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchCurrentDeviceIDWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let fetchCurrentUserBoundaryKeyWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchCurrentUserBoundaryKeyWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let fetchFrameworkCachesDirectoryWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchFrameworkCachesDirectoryWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let fetchFullNameAndFormattedUsernameOfAccountWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchFullNameAndFormattedUsernameOfAccountWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let fetchFullNameAndPrimaryEmailOnAccountWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchFullNameAndPrimaryEmailOnAccountWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let fetchLongLivedOperationWithID x ~wrappingContainer ~completionHandler self = msg_send ~self ~cmd:(selector "fetchLongLivedOperationWithID:wrappingContainer:completionHandler:") ~typ:(id @-> id @-> (ptr void) @-> returning void) x wrappingContainer completionHandler
let fetchOrgAdminUserRecordIDWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchOrgAdminUserRecordIDWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let fetchServerEnvironment x self = msg_send ~self ~cmd:(selector "fetchServerEnvironment:") ~typ:((ptr void) @-> returning void) x
let fetchShareMetadataWithURL x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "fetchShareMetadataWithURL:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let fetchShareParticipantWithEmailAddress x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "fetchShareParticipantWithEmailAddress:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let fetchShareParticipantWithLookupInfo x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "fetchShareParticipantWithLookupInfo:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let fetchShareParticipantWithPhoneNumber x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "fetchShareParticipantWithPhoneNumber:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let fetchShareParticipantWithUserRecordID x ~wrappingContainer ~convenienceConfiguration ~completionHandler self = msg_send ~self ~cmd:(selector "fetchShareParticipantWithUserRecordID:wrappingContainer:convenienceConfiguration:completionHandler:") ~typ:(id @-> id @-> id @-> (ptr void) @-> returning void) x wrappingContainer convenienceConfiguration completionHandler
let fetchUserRecordIDWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchUserRecordIDWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let fetchXPCCriteriaWithCompletionHandler x self = msg_send ~self ~cmd:(selector "fetchXPCCriteriaWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let flowControlManager self = msg_send ~self ~cmd:(selector "flowControlManager") ~typ:(returning id)
let getNewWebSharingIdentityDataWithCompletionHandler x self = msg_send ~self ~cmd:(selector "getNewWebSharingIdentityDataWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let getOutstandingOperationCountWithCompletionHandler x self = msg_send ~self ~cmd:(selector "getOutstandingOperationCountWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let hasCachedSetupInfo self = msg_send ~self ~cmd:(selector "hasCachedSetupInfo") ~typ:(returning bool)
let initWithContainerID x ~options ~unconfiguredWrappingContainer self = msg_send ~self ~cmd:(selector "initWithContainerID:options:unconfiguredWrappingContainer:") ~typ:(id @-> id @-> id @-> returning id) x options unconfiguredWrappingContainer
let manuallyTriggerUploadRequests self = msg_send ~self ~cmd:(selector "manuallyTriggerUploadRequests") ~typ:(returning void)
let options self = msg_send ~self ~cmd:(selector "options") ~typ:(returning id)
let orgAdminUserID self = msg_send ~self ~cmd:(selector "orgAdminUserID") ~typ:(returning id)
let organizationCloudDatabaseImplementation self = msg_send ~self ~cmd:(selector "organizationCloudDatabaseImplementation") ~typ:(returning id)
let personaIdentifier self = msg_send ~self ~cmd:(selector "personaIdentifier") ~typ:(returning id)
let primaryIdentifier self = msg_send ~self ~cmd:(selector "primaryIdentifier") ~typ:(returning id)
let privateCloudDatabaseImplementation self = msg_send ~self ~cmd:(selector "privateCloudDatabaseImplementation") ~typ:(returning id)
let publicCloudDatabaseImplementation self = msg_send ~self ~cmd:(selector "publicCloudDatabaseImplementation") ~typ:(returning id)
let registerForAssetRequests x ~packageRequests ~machServiceName self = msg_send ~self ~cmd:(selector "registerForAssetRequests:packageRequests:machServiceName:") ~typ:((ptr void) @-> (ptr void) @-> id @-> returning void) x packageRequests machServiceName
let registerForAssetUploadRequests x self = msg_send ~self ~cmd:(selector "registerForAssetUploadRequests:") ~typ:((ptr void) @-> returning void) x
let registerForAssetUploadRequests' x ~machServiceName self = msg_send ~self ~cmd:(selector "registerForAssetUploadRequests:machServiceName:") ~typ:((ptr void) @-> id @-> returning void) x machServiceName
let registerForPackageUploadRequests x self = msg_send ~self ~cmd:(selector "registerForPackageUploadRequests:") ~typ:((ptr void) @-> returning void) x
let registerForPackageUploadRequests' x ~machServiceName self = msg_send ~self ~cmd:(selector "registerForPackageUploadRequests:machServiceName:") ~typ:((ptr void) @-> id @-> returning void) x machServiceName
let reloadAccountWithCompletionHandler x self = msg_send ~self ~cmd:(selector "reloadAccountWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let representativeDataclassEnabledWithCompletionHandler x self = msg_send ~self ~cmd:(selector "representativeDataclassEnabledWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let requestApplicationPermission x ~completionHandler self = msg_send ~self ~cmd:(selector "requestApplicationPermission:completionHandler:") ~typ:(ullong @-> (ptr void) @-> returning void) (ULLong.of_int x) completionHandler
let resetAllApplicationPermissionsWithCompletionHandler x self = msg_send ~self ~cmd:(selector "resetAllApplicationPermissionsWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let resolvedEntitlements self = msg_send ~self ~cmd:(selector "resolvedEntitlements") ~typ:(returning id)
let serverPreferredPushEnvironmentSynchronous x ~withCompletionHandler self = msg_send ~self ~cmd:(selector "serverPreferredPushEnvironmentSynchronous:withCompletionHandler:") ~typ:(bool @-> (ptr void) @-> returning void) x withCompletionHandler
let serverPreferredPushEnvironmentWithCompletionHandler x self = msg_send ~self ~cmd:(selector "serverPreferredPushEnvironmentWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let serverPreferredPushEnvironmentWithError x self = msg_send ~self ~cmd:(selector "serverPreferredPushEnvironmentWithError:") ~typ:((ptr id) @-> returning id) x
let setApplicationPermission x ~enabled ~completionHandler self = msg_send ~self ~cmd:(selector "setApplicationPermission:enabled:completionHandler:") ~typ:(ullong @-> bool @-> (ptr void) @-> returning void) (ULLong.of_int x) enabled completionHandler
let setBackgroundThrottlingOperationQueue x self = msg_send ~self ~cmd:(selector "setBackgroundThrottlingOperationQueue:") ~typ:(id @-> returning void) x
let setCachedSetupInfo x self = msg_send ~self ~cmd:(selector "setCachedSetupInfo:") ~typ:(id @-> returning void) x
let setCaptureResponseHTTPHeaders x self = msg_send ~self ~cmd:(selector "setCaptureResponseHTTPHeaders:") ~typ:(bool @-> returning void) x
let setCodeServiceImplementations x self = msg_send ~self ~cmd:(selector "setCodeServiceImplementations:") ~typ:(id @-> returning void) x
let setContainerID x self = msg_send ~self ~cmd:(selector "setContainerID:") ~typ:(id @-> returning void) x
let setContainerScopedUserID x self = msg_send ~self ~cmd:(selector "setContainerScopedUserID:") ~typ:(id @-> returning void) x
let setDiscretionaryThrottlingOperationQueue x self = msg_send ~self ~cmd:(selector "setDiscretionaryThrottlingOperationQueue:") ~typ:(id @-> returning void) x
let setDiscretionaryXPCConnection x self = msg_send ~self ~cmd:(selector "setDiscretionaryXPCConnection:") ~typ:(id @-> returning void) x
let setFakeDeviceToDeviceEncryptionAvailability x self = msg_send ~self ~cmd:(selector "setFakeDeviceToDeviceEncryptionAvailability:") ~typ:(id @-> returning void) x
let setFakeError x ~forNextRequestOfClassName self = msg_send ~self ~cmd:(selector "setFakeError:forNextRequestOfClassName:") ~typ:(id @-> id @-> returning void) x forNextRequestOfClassName
let setFakeResponseOperationResult x ~forNextRequestOfClassName ~forItemID ~withLifetime self = msg_send ~self ~cmd:(selector "setFakeResponseOperationResult:forNextRequestOfClassName:forItemID:withLifetime:") ~typ:(id @-> id @-> id @-> int @-> returning void) x forNextRequestOfClassName forItemID withLifetime
let setFlowControlManager x self = msg_send ~self ~cmd:(selector "setFlowControlManager:") ~typ:(id @-> returning void) x
let setHasCachedSetupInfo x self = msg_send ~self ~cmd:(selector "setHasCachedSetupInfo:") ~typ:(bool @-> returning void) x
let setOptions x self = msg_send ~self ~cmd:(selector "setOptions:") ~typ:(id @-> returning void) x
let setOrgAdminUserID x self = msg_send ~self ~cmd:(selector "setOrgAdminUserID:") ~typ:(id @-> returning void) x
let setOrganizationCloudDatabaseImplementation x self = msg_send ~self ~cmd:(selector "setOrganizationCloudDatabaseImplementation:") ~typ:(id @-> returning void) x
let setPersonaIdentifier x self = msg_send ~self ~cmd:(selector "setPersonaIdentifier:") ~typ:(id @-> returning void) x
let setPrivateCloudDatabaseImplementation x self = msg_send ~self ~cmd:(selector "setPrivateCloudDatabaseImplementation:") ~typ:(id @-> returning void) x
let setPublicCloudDatabaseImplementation x self = msg_send ~self ~cmd:(selector "setPublicCloudDatabaseImplementation:") ~typ:(id @-> returning void) x
let setResolvedEntitlements x self = msg_send ~self ~cmd:(selector "setResolvedEntitlements:") ~typ:(id @-> returning void) x
let setSharedCloudDatabaseImplementation x self = msg_send ~self ~cmd:(selector "setSharedCloudDatabaseImplementation:") ~typ:(id @-> returning void) x
let setSourceApplicationBundleIdentifier x self = msg_send ~self ~cmd:(selector "setSourceApplicationBundleIdentifier:") ~typ:(id @-> returning void) x
let setSourceApplicationSecondaryIdentifier x self = msg_send ~self ~cmd:(selector "setSourceApplicationSecondaryIdentifier:") ~typ:(id @-> returning void) x
let setStatusReportToken x self = msg_send ~self ~cmd:(selector "setStatusReportToken:") ~typ:(int @-> returning void) x
let setThrottlingOperationQueue x self = msg_send ~self ~cmd:(selector "setThrottlingOperationQueue:") ~typ:(id @-> returning void) x
let setUnconfiguredWrappingContainer x self = msg_send ~self ~cmd:(selector "setUnconfiguredWrappingContainer:") ~typ:(id @-> returning void) x
let setUnderlyingDispatchQueue x self = msg_send ~self ~cmd:(selector "setUnderlyingDispatchQueue:") ~typ:(id @-> returning void) x
let setupInfo self = msg_send ~self ~cmd:(selector "setupInfo") ~typ:(returning id)
let sharedCloudDatabaseImplementation self = msg_send ~self ~cmd:(selector "sharedCloudDatabaseImplementation") ~typ:(returning id)
let sourceApplicationBundleIdentifier self = msg_send ~self ~cmd:(selector "sourceApplicationBundleIdentifier") ~typ:(returning id)
let sourceApplicationSecondaryIdentifier self = msg_send ~self ~cmd:(selector "sourceApplicationSecondaryIdentifier") ~typ:(returning id)
let statusForApplicationPermission x ~completionHandler self = msg_send ~self ~cmd:(selector "statusForApplicationPermission:completionHandler:") ~typ:(ullong @-> (ptr void) @-> returning void) (ULLong.of_int x) completionHandler
let statusGroupsForApplicationPermission x ~completionHandler self = msg_send ~self ~cmd:(selector "statusGroupsForApplicationPermission:completionHandler:") ~typ:(ullong @-> (ptr void) @-> returning void) (ULLong.of_int x) completionHandler
let statusReportToken self = msg_send ~self ~cmd:(selector "statusReportToken") ~typ:(returning int)
let submitEventMetric x self = msg_send ~self ~cmd:(selector "submitEventMetric:") ~typ:(id @-> returning void) x
let submitEventMetric' x ~completionHandler self = msg_send ~self ~cmd:(selector "submitEventMetric:completionHandler:") ~typ:(id @-> (ptr void) @-> returning void) x completionHandler
let throttlingOperationQueue self = msg_send ~self ~cmd:(selector "throttlingOperationQueue") ~typ:(returning id)
let tossConfigWithCompletionHandler x self = msg_send ~self ~cmd:(selector "tossConfigWithCompletionHandler:") ~typ:((ptr void) @-> returning void) x
let unconfiguredWrappingContainer self = msg_send ~self ~cmd:(selector "unconfiguredWrappingContainer") ~typ:(returning id)
let underlyingDispatchQueue self = msg_send ~self ~cmd:(selector "underlyingDispatchQueue") ~typ:(returning id)
let unregisterFromUploadRequests self = msg_send ~self ~cmd:(selector "unregisterFromUploadRequests") ~typ:(returning void)
let unregisterFromUploadRequestsWithMachServiceName x self = msg_send ~self ~cmd:(selector "unregisterFromUploadRequestsWithMachServiceName:") ~typ:(id @-> returning void) x
let untrustedEntitlements self = msg_send ~self ~cmd:(selector "untrustedEntitlements") ~typ:(returning id)
let uploadRequestManager self = msg_send ~self ~cmd:(selector "uploadRequestManager") ~typ:(returning id)
let wipeAllCachesAndDie self = msg_send ~self ~cmd:(selector "wipeAllCachesAndDie") ~typ:(returning void)