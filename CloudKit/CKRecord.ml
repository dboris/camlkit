(* auto-generated, do not modify *)

[@@@ocaml.warning "-33"]
open Runtime
open Objc

open CoreFoundation

(** Apple docs: {{:https://developer.apple.com/documentation/cloudkit/ckrecord?language=objc}CKRecord} *)

let self = get_class "CKRecord"

let _CKAssignToContainerWithID x self = msg_send ~self ~cmd:(selector "CKAssignToContainerWithID:") ~typ:(id @-> returning void) x
let _CKDescribePropertiesUsing x self = msg_send ~self ~cmd:(selector "CKDescribePropertiesUsing:") ~typ:(id @-> returning void) x
let _URL self = msg_send ~self ~cmd:(selector "URL") ~typ:(returning id)
let allKeys self = msg_send ~self ~cmd:(selector "allKeys") ~typ:(returning id)
let allPCSKeyIDs self = msg_send ~self ~cmd:(selector "allPCSKeyIDs") ~typ:(returning id)
let allTokens self = msg_send ~self ~cmd:(selector "allTokens") ~typ:(returning id)
let allValues self = msg_send ~self ~cmd:(selector "allValues") ~typ:(returning id)
let assetCount self = msg_send ~self ~cmd:(selector "assetCount") ~typ:(returning ullong) |> ULLong.to_int
let assetDiskSize self = msg_send ~self ~cmd:(selector "assetDiskSize") ~typ:(returning ullong) |> ULLong.to_int
let basePunctuationGroup self = msg_send ~self ~cmd:(selector "basePunctuationGroup") ~typ:(returning id)
let baseToken self = msg_send ~self ~cmd:(selector "baseToken") ~typ:(returning id)
let canHostServerURLInfo self = msg_send ~self ~cmd:(selector "canHostServerURLInfo") ~typ:(returning bool)
let chainParentPublicKeyID self = msg_send ~self ~cmd:(selector "chainParentPublicKeyID") ~typ:(returning id)
let chainPrivateKey self = msg_send ~self ~cmd:(selector "chainPrivateKey") ~typ:(returning id)
let chainProtectionInfo self = msg_send ~self ~cmd:(selector "chainProtectionInfo") ~typ:(returning id)
let changedKeys self = msg_send ~self ~cmd:(selector "changedKeys") ~typ:(returning id)
let changedKeysSet self = msg_send ~self ~cmd:(selector "changedKeysSet") ~typ:(returning id)
let claimPackagesWithSuccessBlock x ~failureBlock ~completionBlock self = msg_send ~self ~cmd:(selector "claimPackagesWithSuccessBlock:failureBlock:completionBlock:") ~typ:((ptr void) @-> (ptr void) @-> (ptr void) @-> returning void) x failureBlock completionBlock
let conflictLoserEtags self = msg_send ~self ~cmd:(selector "conflictLoserEtags") ~typ:(returning id)
let containerID self = msg_send ~self ~cmd:(selector "containerID") ~typ:(returning id)
let containsAssetValues self = msg_send ~self ~cmd:(selector "containsAssetValues") ~typ:(returning bool)
let containsPackageValues self = msg_send ~self ~cmd:(selector "containsPackageValues") ~typ:(returning bool)
let copySystemFieldsToRecord x ~includingMergeableValueTimestamps ~zone self = msg_send ~self ~cmd:(selector "copySystemFieldsToRecord:includingMergeableValueTimestamps:zone:") ~typ:(id @-> bool @-> (ptr void) @-> returning void) x includingMergeableValueTimestamps zone
let copyWithOriginalValues self = msg_send ~self ~cmd:(selector "copyWithOriginalValues") ~typ:(returning id)
let copyWithZone x self = msg_send ~self ~cmd:(selector "copyWithZone:") ~typ:((ptr void) @-> returning id) x
let creationDate self = msg_send ~self ~cmd:(selector "creationDate") ~typ:(returning id)
let creatorUserRecordID self = msg_send ~self ~cmd:(selector "creatorUserRecordID") ~typ:(returning id)
let dealloc self = msg_send ~self ~cmd:(selector "dealloc") ~typ:(returning void)
let debugDescription self = msg_send ~self ~cmd:(selector "debugDescription") ~typ:(returning id)
let description self = msg_send ~self ~cmd:(selector "description") ~typ:(returning id)
let displayedHostname self = msg_send ~self ~cmd:(selector "displayedHostname") ~typ:(returning id)
let encodeSystemFieldsWithCoder x self = msg_send ~self ~cmd:(selector "encodeSystemFieldsWithCoder:") ~typ:(id @-> returning void) x
let encodeWithCoder x self = msg_send ~self ~cmd:(selector "encodeWithCoder:") ~typ:(id @-> returning void) x
let encryptedFullTokenData self = msg_send ~self ~cmd:(selector "encryptedFullTokenData") ~typ:(returning id)
let encryptedPublicSharingKey self = msg_send ~self ~cmd:(selector "encryptedPublicSharingKey") ~typ:(returning id)
let encryptedValueStore self = msg_send ~self ~cmd:(selector "encryptedValueStore") ~typ:(returning id)
let encryptedValues self = msg_send ~self ~cmd:(selector "encryptedValues") ~typ:(returning id)
let encryptedValuesByKey self = msg_send ~self ~cmd:(selector "encryptedValuesByKey") ~typ:(returning id)
let entries self = msg_send ~self ~cmd:(selector "entries") ~typ:(returning id)
let etag self = msg_send ~self ~cmd:(selector "etag") ~typ:(returning id)
let expirationDate self = msg_send ~self ~cmd:(selector "expirationDate") ~typ:(returning id)
let fullToken self = msg_send ~self ~cmd:(selector "fullToken") ~typ:(returning id)
let groupUUID self = msg_send ~self ~cmd:(selector "groupUUID") ~typ:(returning id)
let hasChainPCS self = msg_send ~self ~cmd:(selector "hasChainPCS") ~typ:(returning bool)
let hasEncryptedData self = msg_send ~self ~cmd:(selector "hasEncryptedData") ~typ:(returning bool)
let hasModifiedEncryptedData self = msg_send ~self ~cmd:(selector "hasModifiedEncryptedData") ~typ:(returning bool)
let hasModifiedPropertiesRequiringEncryption self = msg_send ~self ~cmd:(selector "hasModifiedPropertiesRequiringEncryption") ~typ:(returning bool)
let hasPropertiesRequiringDecryption self = msg_send ~self ~cmd:(selector "hasPropertiesRequiringDecryption") ~typ:(returning bool)
let hasPropertiesRequiringEncryption self = msg_send ~self ~cmd:(selector "hasPropertiesRequiringEncryption") ~typ:(returning bool)
let hasUpdatedExpirationTimeInterval self = msg_send ~self ~cmd:(selector "hasUpdatedExpirationTimeInterval") ~typ:(returning bool)
let hasUpdatedParent self = msg_send ~self ~cmd:(selector "hasUpdatedParent") ~typ:(returning bool)
let hasUpdatedShare self = msg_send ~self ~cmd:(selector "hasUpdatedShare") ~typ:(returning bool)
let init self = msg_send ~self ~cmd:(selector "init") ~typ:(returning id)
let initWithCoder x self = msg_send ~self ~cmd:(selector "initWithCoder:") ~typ:(id @-> returning id) x
let initWithRecordTransport x self = msg_send ~self ~cmd:(selector "initWithRecordTransport:") ~typ:(id @-> returning id) x
let initWithRecordType x self = msg_send ~self ~cmd:(selector "initWithRecordType:") ~typ:(id @-> returning id) x
let initWithRecordType1 x ~recordID self = msg_send ~self ~cmd:(selector "initWithRecordType:recordID:") ~typ:(id @-> id @-> returning id) x recordID
let initWithRecordType2 x ~zoneID self = msg_send ~self ~cmd:(selector "initWithRecordType:zoneID:") ~typ:(id @-> id @-> returning id) x zoneID
let isExpired self = msg_send ~self ~cmd:(selector "isExpired") ~typ:(returning bool)
let isKnownToServer self = msg_send ~self ~cmd:(selector "isKnownToServer") ~typ:(returning bool)
let isMoreRecentThanRecord x self = msg_send ~self ~cmd:(selector "isMoreRecentThanRecord:") ~typ:(id @-> returning bool) x
let lastModifiedUserRecordID self = msg_send ~self ~cmd:(selector "lastModifiedUserRecordID") ~typ:(returning id)
let modificationDate self = msg_send ~self ~cmd:(selector "modificationDate") ~typ:(returning id)
let modifiedByDevice self = msg_send ~self ~cmd:(selector "modifiedByDevice") ~typ:(returning id)
let mutableEncryptedPSK self = msg_send ~self ~cmd:(selector "mutableEncryptedPSK") ~typ:(returning id)
let mutableEncryptedPublicSharingKey self = msg_send ~self ~cmd:(selector "mutableEncryptedPublicSharingKey") ~typ:(returning id)
let mutableEncryptedPublicSharingKeyData self = msg_send ~self ~cmd:(selector "mutableEncryptedPublicSharingKeyData") ~typ:(returning id)
let mutableURL self = msg_send ~self ~cmd:(selector "mutableURL") ~typ:(returning id)
let name self = msg_send ~self ~cmd:(selector "name") ~typ:(returning id)
let objectForKey x self = msg_send ~self ~cmd:(selector "objectForKey:") ~typ:(id @-> returning id) x
let objectForKeyedSubscript x self = msg_send ~self ~cmd:(selector "objectForKeyedSubscript:") ~typ:(id @-> returning id) x
let originalValues self = msg_send ~self ~cmd:(selector "originalValues") ~typ:(returning id)
let parent self = msg_send ~self ~cmd:(selector "parent") ~typ:(returning id)
let pcsKeyID self = msg_send ~self ~cmd:(selector "pcsKeyID") ~typ:(returning id)
let permission self = msg_send ~self ~cmd:(selector "permission") ~typ:(returning llong) |> LLong.to_int
let pluginFields self = msg_send ~self ~cmd:(selector "pluginFields") ~typ:(returning id)
let preTiboEncodeWithCoder x self = msg_send ~self ~cmd:(selector "preTiboEncodeWithCoder:") ~typ:(id @-> returning void) x
let previousParent self = msg_send ~self ~cmd:(selector "previousParent") ~typ:(returning id)
let previousProtectionEtag self = msg_send ~self ~cmd:(selector "previousProtectionEtag") ~typ:(returning id)
let previousProtectionEtagFromUnitTest self = msg_send ~self ~cmd:(selector "previousProtectionEtagFromUnitTest") ~typ:(returning id)
let previousShare self = msg_send ~self ~cmd:(selector "previousShare") ~typ:(returning id)
let privateToken self = msg_send ~self ~cmd:(selector "privateToken") ~typ:(returning id)
let protectionData self = msg_send ~self ~cmd:(selector "protectionData") ~typ:(returning id)
let protectionEtag self = msg_send ~self ~cmd:(selector "protectionEtag") ~typ:(returning id)
let punctuation self = msg_send ~self ~cmd:(selector "punctuation") ~typ:(returning id)
let recordChangeTag self = msg_send ~self ~cmd:(selector "recordChangeTag") ~typ:(returning id)
let recordID self = msg_send ~self ~cmd:(selector "recordID") ~typ:(returning id)
let recordType self = msg_send ~self ~cmd:(selector "recordType") ~typ:(returning id)
let redactedDescription self = msg_send ~self ~cmd:(selector "redactedDescription") ~typ:(returning id)
let releasePackages self = msg_send ~self ~cmd:(selector "releasePackages") ~typ:(returning void)
let removePackages self = msg_send ~self ~cmd:(selector "removePackages") ~typ:(returning void)
let replacement self = msg_send ~self ~cmd:(selector "replacement") ~typ:(returning id)
let resetChangedKeys self = msg_send ~self ~cmd:(selector "resetChangedKeys") ~typ:(returning void)
let routingKey self = msg_send ~self ~cmd:(selector "routingKey") ~typ:(returning id)
let rule self = msg_send ~self ~cmd:(selector "rule") ~typ:(returning id)
let serializeProtectionData self = msg_send ~self ~cmd:(selector "serializeProtectionData") ~typ:(returning bool)
let setAllPCSKeyIDs x self = msg_send ~self ~cmd:(selector "setAllPCSKeyIDs:") ~typ:(id @-> returning void) x
let setBasePunctuationGroup x self = msg_send ~self ~cmd:(selector "setBasePunctuationGroup:") ~typ:(id @-> returning void) x
let setBaseToken x self = msg_send ~self ~cmd:(selector "setBaseToken:") ~typ:(id @-> returning void) x
let setChainParentPublicKeyID x self = msg_send ~self ~cmd:(selector "setChainParentPublicKeyID:") ~typ:(id @-> returning void) x
let setChainPrivateKey x self = msg_send ~self ~cmd:(selector "setChainPrivateKey:") ~typ:(id @-> returning void) x
let setChainProtectionInfo x self = msg_send ~self ~cmd:(selector "setChainProtectionInfo:") ~typ:(id @-> returning void) x
let setChangedKeysSet x self = msg_send ~self ~cmd:(selector "setChangedKeysSet:") ~typ:(id @-> returning void) x
let setConflictLoserEtags x self = msg_send ~self ~cmd:(selector "setConflictLoserEtags:") ~typ:(id @-> returning void) x
let setContainerID x self = msg_send ~self ~cmd:(selector "setContainerID:") ~typ:(id @-> returning void) x
let setCreationDate x self = msg_send ~self ~cmd:(selector "setCreationDate:") ~typ:(id @-> returning void) x
let setCreatorUserRecordID x self = msg_send ~self ~cmd:(selector "setCreatorUserRecordID:") ~typ:(id @-> returning void) x
let setDisplayedHostname x self = msg_send ~self ~cmd:(selector "setDisplayedHostname:") ~typ:(id @-> returning void) x
let setEncryptedValueStore x self = msg_send ~self ~cmd:(selector "setEncryptedValueStore:") ~typ:(id @-> returning void) x
let setEntries x self = msg_send ~self ~cmd:(selector "setEntries:") ~typ:(id @-> returning void) x
let setEtag x self = msg_send ~self ~cmd:(selector "setEtag:") ~typ:(id @-> returning void) x
let setExpirationAfterTimeInterval x self = msg_send ~self ~cmd:(selector "setExpirationAfterTimeInterval:") ~typ:(id @-> returning void) x
let setExpirationDate x self = msg_send ~self ~cmd:(selector "setExpirationDate:") ~typ:(id @-> returning void) x
let setExpired x self = msg_send ~self ~cmd:(selector "setExpired:") ~typ:(bool @-> returning void) x
let setGroupUUID x self = msg_send ~self ~cmd:(selector "setGroupUUID:") ~typ:(id @-> returning void) x
let setHasUpdatedExpirationTimeInterval x self = msg_send ~self ~cmd:(selector "setHasUpdatedExpirationTimeInterval:") ~typ:(bool @-> returning void) x
let setHasUpdatedParent x self = msg_send ~self ~cmd:(selector "setHasUpdatedParent:") ~typ:(bool @-> returning void) x
let setHasUpdatedShare x self = msg_send ~self ~cmd:(selector "setHasUpdatedShare:") ~typ:(bool @-> returning void) x
let setKnownToServer x self = msg_send ~self ~cmd:(selector "setKnownToServer:") ~typ:(bool @-> returning void) x
let setLastModifiedUserRecordID x self = msg_send ~self ~cmd:(selector "setLastModifiedUserRecordID:") ~typ:(id @-> returning void) x
let setModificationDate x self = msg_send ~self ~cmd:(selector "setModificationDate:") ~typ:(id @-> returning void) x
let setModifiedByDevice x self = msg_send ~self ~cmd:(selector "setModifiedByDevice:") ~typ:(id @-> returning void) x
let setMutableEncryptedPSK x self = msg_send ~self ~cmd:(selector "setMutableEncryptedPSK:") ~typ:(id @-> returning void) x
let setMutableEncryptedPublicSharingKey x self = msg_send ~self ~cmd:(selector "setMutableEncryptedPublicSharingKey:") ~typ:(id @-> returning void) x
let setMutableEncryptedPublicSharingKeyData x self = msg_send ~self ~cmd:(selector "setMutableEncryptedPublicSharingKeyData:") ~typ:(id @-> returning void) x
let setMutableURL x self = msg_send ~self ~cmd:(selector "setMutableURL:") ~typ:(id @-> returning void) x
let setName x self = msg_send ~self ~cmd:(selector "setName:") ~typ:(id @-> returning void) x
let setNilValueForKey x self = msg_send ~self ~cmd:(selector "setNilValueForKey:") ~typ:(id @-> returning void) x
let setObject x ~forKey self = msg_send ~self ~cmd:(selector "setObject:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let setObject' x ~forKeyedSubscript self = msg_send ~self ~cmd:(selector "setObject:forKeyedSubscript:") ~typ:(id @-> id @-> returning void) x forKeyedSubscript
let setObjectNoValidate x ~forKey self = msg_send ~self ~cmd:(selector "setObjectNoValidate:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let setParent x self = msg_send ~self ~cmd:(selector "setParent:") ~typ:(id @-> returning void) x
let setParentReferenceFromRecord x self = msg_send ~self ~cmd:(selector "setParentReferenceFromRecord:") ~typ:(id @-> returning void) x
let setParentReferenceFromRecordID x self = msg_send ~self ~cmd:(selector "setParentReferenceFromRecordID:") ~typ:(id @-> returning void) x
let setPcsKeyID x self = msg_send ~self ~cmd:(selector "setPcsKeyID:") ~typ:(id @-> returning void) x
let setPermission x self = msg_send ~self ~cmd:(selector "setPermission:") ~typ:(llong @-> returning void) (LLong.of_int x)
let setPluginFields x self = msg_send ~self ~cmd:(selector "setPluginFields:") ~typ:(id @-> returning void) x
let setPreviousParent x self = msg_send ~self ~cmd:(selector "setPreviousParent:") ~typ:(id @-> returning void) x
let setPreviousProtectionEtag x self = msg_send ~self ~cmd:(selector "setPreviousProtectionEtag:") ~typ:(id @-> returning void) x
let setPreviousProtectionEtagFromUnitTest x self = msg_send ~self ~cmd:(selector "setPreviousProtectionEtagFromUnitTest:") ~typ:(id @-> returning void) x
let setPreviousShare x self = msg_send ~self ~cmd:(selector "setPreviousShare:") ~typ:(id @-> returning void) x
let setProtectionData x self = msg_send ~self ~cmd:(selector "setProtectionData:") ~typ:(id @-> returning void) x
let setProtectionEtag x self = msg_send ~self ~cmd:(selector "setProtectionEtag:") ~typ:(id @-> returning void) x
let setPunctuation x self = msg_send ~self ~cmd:(selector "setPunctuation:") ~typ:(id @-> returning void) x
let setRecordID x self = msg_send ~self ~cmd:(selector "setRecordID:") ~typ:(id @-> returning void) x
let setRecordType x self = msg_send ~self ~cmd:(selector "setRecordType:") ~typ:(id @-> returning void) x
let setReplacement x self = msg_send ~self ~cmd:(selector "setReplacement:") ~typ:(id @-> returning void) x
let setRoutingKey x self = msg_send ~self ~cmd:(selector "setRoutingKey:") ~typ:(id @-> returning void) x
let setRule x self = msg_send ~self ~cmd:(selector "setRule:") ~typ:(id @-> returning void) x
let setSerializeProtectionData x self = msg_send ~self ~cmd:(selector "setSerializeProtectionData:") ~typ:(bool @-> returning void) x
let setShare x self = msg_send ~self ~cmd:(selector "setShare:") ~typ:(id @-> returning void) x
let setShareEtag x self = msg_send ~self ~cmd:(selector "setShareEtag:") ~typ:(id @-> returning void) x
let setSigningPCSIdentity x self = msg_send ~self ~cmd:(selector "setSigningPCSIdentity:") ~typ:((ptr void) @-> returning void) x
let setStreamingAssetRequestOptions x self = msg_send ~self ~cmd:(selector "setStreamingAssetRequestOptions:") ~typ:(id @-> returning void) x
let setTombstonedPublicKeyIDs x self = msg_send ~self ~cmd:(selector "setTombstonedPublicKeyIDs:") ~typ:(id @-> returning void) x
let setTrackChanges x self = msg_send ~self ~cmd:(selector "setTrackChanges:") ~typ:(bool @-> returning void) x
let setUpdatedExpirationTimeInterval x self = msg_send ~self ~cmd:(selector "setUpdatedExpirationTimeInterval:") ~typ:(id @-> returning void) x
let setUseLightweightPCS x self = msg_send ~self ~cmd:(selector "setUseLightweightPCS:") ~typ:(bool @-> returning void) x
let setUuid x self = msg_send ~self ~cmd:(selector "setUuid:") ~typ:(id @-> returning void) x
let setValue x ~forKey self = msg_send ~self ~cmd:(selector "setValue:forKey:") ~typ:(id @-> id @-> returning void) x forKey
let setValueStore x self = msg_send ~self ~cmd:(selector "setValueStore:") ~typ:(id @-> returning void) x
let setVersion x self = msg_send ~self ~cmd:(selector "setVersion:") ~typ:(id @-> returning void) x
let setWantsChainPCS x self = msg_send ~self ~cmd:(selector "setWantsChainPCS:") ~typ:(bool @-> returning void) x
let setWantsPublicSharingKey x self = msg_send ~self ~cmd:(selector "setWantsPublicSharingKey:") ~typ:(bool @-> returning void) x
let setWasCached x self = msg_send ~self ~cmd:(selector "setWasCached:") ~typ:(bool @-> returning void) x
let setZoneProtectionEtag x self = msg_send ~self ~cmd:(selector "setZoneProtectionEtag:") ~typ:(id @-> returning void) x
let setZoneishKeyID x self = msg_send ~self ~cmd:(selector "setZoneishKeyID:") ~typ:(id @-> returning void) x
let share self = msg_send ~self ~cmd:(selector "share") ~typ:(returning id)
let shareEtag self = msg_send ~self ~cmd:(selector "shareEtag") ~typ:(returning id)
let shortSharingToken self = msg_send ~self ~cmd:(selector "shortSharingToken") ~typ:(returning id)
let shortSharingTokenData self = msg_send ~self ~cmd:(selector "shortSharingTokenData") ~typ:(returning id)
let shortSharingTokenHashData self = msg_send ~self ~cmd:(selector "shortSharingTokenHashData") ~typ:(returning id)
let shortToken self = msg_send ~self ~cmd:(selector "shortToken") ~typ:(returning id)
let signingPCSIdentity self = msg_send ~self ~cmd:(selector "signingPCSIdentity") ~typ:(returning (ptr void))
let size self = msg_send ~self ~cmd:(selector "size") ~typ:(returning ullong) |> ULLong.to_int
let tombstonedPublicKeyIDs self = msg_send ~self ~cmd:(selector "tombstonedPublicKeyIDs") ~typ:(returning id)
let trackChanges self = msg_send ~self ~cmd:(selector "trackChanges") ~typ:(returning bool)
let uncachedURL self = msg_send ~self ~cmd:(selector "uncachedURL") ~typ:(returning id)
let updatedExpirationTimeInterval self = msg_send ~self ~cmd:(selector "updatedExpirationTimeInterval") ~typ:(returning id)
let useLightweightPCS self = msg_send ~self ~cmd:(selector "useLightweightPCS") ~typ:(returning bool)
let uuid self = msg_send ~self ~cmd:(selector "uuid") ~typ:(returning id)
let valueForKey x self = msg_send ~self ~cmd:(selector "valueForKey:") ~typ:(id @-> returning id) x
let valueStore self = msg_send ~self ~cmd:(selector "valueStore") ~typ:(returning id)
let values self = msg_send ~self ~cmd:(selector "values") ~typ:(returning id)
let valuesByKey self = msg_send ~self ~cmd:(selector "valuesByKey") ~typ:(returning id)
let version self = msg_send ~self ~cmd:(selector "version") ~typ:(returning id)
let wantsChainPCS self = msg_send ~self ~cmd:(selector "wantsChainPCS") ~typ:(returning bool)
let wantsPublicSharingKey self = msg_send ~self ~cmd:(selector "wantsPublicSharingKey") ~typ:(returning bool)
let wasCached self = msg_send ~self ~cmd:(selector "wasCached") ~typ:(returning bool)
let zoneProtectionEtag self = msg_send ~self ~cmd:(selector "zoneProtectionEtag") ~typ:(returning id)
let zoneishKeyID self = msg_send ~self ~cmd:(selector "zoneishKeyID") ~typ:(returning id)